// $ANTLR 3.3 Nov 30, 2010 12:46:29 .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g 2011-03-09 22:29:29

/*
 *     OpenVC, an open source VHDL compiler/simulator
 *     Copyright (C) 2010  Christian Reisinger
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package at.jku.ssw.openvc.parser

import at.jku.ssw.openvc._
import ast._
import ast.concurrentStatements._
import ast.sequentialStatements._
import ast.designUnits._
import ast.declarativeItems._
import ast.expressions._
import ast.simultaneousStatements._
import util._


import org.antlr.runtime._

object Parser {
    val tokenNames = Array(
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESS", "AFTER", "ALIAS", "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BUFFER", "BUS", "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", "DISCONNECT", "DOWNTO", "ELSE", "ELSIF", "END", "ENTITY", "EXIT", "FILE", "FOR", "FUNCTION", "GENERATE", "GENERIC", "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", "INOUT", "IS", "LABEL", "LIBRARY", "LINKAGE", "LITERAL", "LOOP", "MAP", "MOD", "NAND", "NEW", "NEXT", "NOR", "NOT", "NULL", "OF", "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", "POSTPONED", "PROCEDURE", "PROCESS", "PROTECTED", "PURE", "RANGE", "RECORD", "REGISTER", "REJECT", "REM", "REPORT", "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", "SIGNAL", "SLA", "SLL", "SRA", "SRL", "SUBTYPE", "THEN", "TO", "TRANSPORT", "TYPE", "UNAFFECTED", "UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WHEN", "WHILE", "WITH", "XNOR", "XOR", "AMS_ASSIGN", "VAR_ASSIGN", "BOX", "DBLQUOTE", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "DOT", "AMPERSAND", "BAR", "ARROW", "AT", "QMARK", "DLT", "DGT", "CIRCUMFLEX", "DOUBLESTAR", "MUL", "DIV", "PLUS", "MINUS", "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "MEQ", "MNEQ", "MLT", "MGT", "MLEQ", "MGEQ", "CONDITION_OPERATOR", "CONTEXT", "FORCE", "PARAMETER", "RELEASE", "DEFAULT", "NATURE", "TERMINAL", "QUANTITY", "TOLERANCE", "ACROSS", "THROUGH", "SPECTRUM", "NOISE", "SUBNATURE", "LIMIT", "REFERENCE", "BREAK", "PROCEDURAL", "WS", "NESTED_ML_COMMENT", "LINECOMMENT", "LETTER", "LETTER_OR_DIGIT", "BASIC_IDENTIFIER", "GRAPHIC_CHARACTER", "EXTENDED_IDENTIFIER", "INTEGER", "BASED_INTEGER", "EXPONENT", "BASED_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL", "APOSTROPHE", "STRING_LITERAL", "BASE_SPECIFIER", "BIT_STRING_LITERAL", "EXTENDED_DIGIT", "DIGIT", "UPPER_CASE_LETTER", "LOWER_CASE_LETTER", "SPECIAL_CHARACTER", "SPACE_CHARACTER", "OTHER_SPECIAL_CHARACTER", "CHARACTER_LITERAL"
    )

    val EOF = -1
    val ABS = 4
    val ACCESS = 5
    val AFTER = 6
    val ALIAS = 7
    val ALL = 8
    val AND = 9
    val ARCHITECTURE = 10
    val ARRAY = 11
    val ASSERT = 12
    val ATTRIBUTE = 13
    val BEGIN = 14
    val BLOCK = 15
    val BODY = 16
    val BUFFER = 17
    val BUS = 18
    val CASE = 19
    val COMPONENT = 20
    val CONFIGURATION = 21
    val CONSTANT = 22
    val DISCONNECT = 23
    val DOWNTO = 24
    val ELSE = 25
    val ELSIF = 26
    val END = 27
    val ENTITY = 28
    val EXIT = 29
    val FILE = 30
    val FOR = 31
    val FUNCTION = 32
    val GENERATE = 33
    val GENERIC = 34
    val GROUP = 35
    val GUARDED = 36
    val IF = 37
    val IMPURE = 38
    val IN = 39
    val INERTIAL = 40
    val INOUT = 41
    val IS = 42
    val LABEL = 43
    val LIBRARY = 44
    val LINKAGE = 45
    val LITERAL = 46
    val LOOP = 47
    val MAP = 48
    val MOD = 49
    val NAND = 50
    val NEW = 51
    val NEXT = 52
    val NOR = 53
    val NOT = 54
    val NULL = 55
    val OF = 56
    val ON = 57
    val OPEN = 58
    val OR = 59
    val OTHERS = 60
    val OUT = 61
    val PACKAGE = 62
    val PORT = 63
    val POSTPONED = 64
    val PROCEDURE = 65
    val PROCESS = 66
    val PROTECTED = 67
    val PURE = 68
    val RANGE = 69
    val RECORD = 70
    val REGISTER = 71
    val REJECT = 72
    val REM = 73
    val REPORT = 74
    val RETURN = 75
    val ROL = 76
    val ROR = 77
    val SELECT = 78
    val SEVERITY = 79
    val SHARED = 80
    val SIGNAL = 81
    val SLA = 82
    val SLL = 83
    val SRA = 84
    val SRL = 85
    val SUBTYPE = 86
    val THEN = 87
    val TO = 88
    val TRANSPORT = 89
    val TYPE = 90
    val UNAFFECTED = 91
    val UNITS = 92
    val UNTIL = 93
    val USE = 94
    val VARIABLE = 95
    val WAIT = 96
    val WHEN = 97
    val WHILE = 98
    val WITH = 99
    val XNOR = 100
    val XOR = 101
    val AMS_ASSIGN = 102
    val VAR_ASSIGN = 103
    val BOX = 104
    val DBLQUOTE = 105
    val COMMA = 106
    val SEMICOLON = 107
    val LPAREN = 108
    val RPAREN = 109
    val LBRACKET = 110
    val RBRACKET = 111
    val COLON = 112
    val DOT = 113
    val AMPERSAND = 114
    val BAR = 115
    val ARROW = 116
    val AT = 117
    val QMARK = 118
    val DLT = 119
    val DGT = 120
    val CIRCUMFLEX = 121
    val DOUBLESTAR = 122
    val MUL = 123
    val DIV = 124
    val PLUS = 125
    val MINUS = 126
    val EQ = 127
    val NEQ = 128
    val LT = 129
    val GT = 130
    val LEQ = 131
    val GEQ = 132
    val MEQ = 133
    val MNEQ = 134
    val MLT = 135
    val MGT = 136
    val MLEQ = 137
    val MGEQ = 138
    val CONDITION_OPERATOR = 139
    val CONTEXT = 140
    val FORCE = 141
    val PARAMETER = 142
    val RELEASE = 143
    val DEFAULT = 144
    val NATURE = 145
    val TERMINAL = 146
    val QUANTITY = 147
    val TOLERANCE = 148
    val ACROSS = 149
    val THROUGH = 150
    val SPECTRUM = 151
    val NOISE = 152
    val SUBNATURE = 153
    val LIMIT = 154
    val REFERENCE = 155
    val BREAK = 156
    val PROCEDURAL = 157
    val WS = 158
    val NESTED_ML_COMMENT = 159
    val LINECOMMENT = 160
    val LETTER = 161
    val LETTER_OR_DIGIT = 162
    val BASIC_IDENTIFIER = 163
    val GRAPHIC_CHARACTER = 164
    val EXTENDED_IDENTIFIER = 165
    val INTEGER = 166
    val BASED_INTEGER = 167
    val EXPONENT = 168
    val BASED_LITERAL = 169
    val INTEGER_LITERAL = 170
    val REAL_LITERAL = 171
    val APOSTROPHE = 172
    val STRING_LITERAL = 173
    val BASE_SPECIFIER = 174
    val BIT_STRING_LITERAL = 175
    val EXTENDED_DIGIT = 176
    val DIGIT = 177
    val UPPER_CASE_LETTER = 178
    val LOWER_CASE_LETTER = 179
    val SPECIAL_CHARACTER = 180
    val SPACE_CHARACTER = 181
    val OTHER_SPECIAL_CHARACTER = 182
    val CHARACTER_LITERAL = 183

    private def createBitSet(v1:Long):BitSet = new BitSet(Array(v1))
    private def createBitSet(v1:Long,v2:Long):BitSet = new BitSet(Array(v1,v2))
    private def createBitSet(v1:Long,v2:Long,v3:Long):BitSet = new BitSet(Array(v1,v2,v3))
    private def createBitSet(v1:Long,v2:Long,v3:Long,v4:Long):BitSet = new BitSet(Array(v1,v2,v3,v4))
    private def createBitSet(v1:Long,v2:Long,v3:Long,v4:Long,v5:Long):BitSet = new BitSet(Array(v1,v2,v3,v4,v5))

    private val FOLLOW_design_unit_in_design_file87 = createBitSet(0x4000100010200400L,0x0000000040000000L,0x0000000000001000L)
    private val FOLLOW_EOF_in_design_file92 = createBitSet(0x0000000000000002L)
    private val FOLLOW_library_clause_in_context_item108 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_context_item115 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_context_reference_in_context_item124 = createBitSet(0x0000000000000002L)
    private val FOLLOW_context_item_in_context_items147 = createBitSet(0x0000100000000002L,0x0000000040000000L,0x0000000000001000L)
    private val FOLLOW_context_items_in_design_unit166 = createBitSet(0x4000100010200400L,0x0000000040000000L,0x0000000000001000L)
    private val FOLLOW_library_unit_in_design_unit168 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_declaration_in_library_unit186 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_body_in_library_unit193 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_library_unit200 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_library_unit207 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_library_unit216 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_context_declaration_in_library_unit225 = createBitSet(0x0000000000000002L)
    private val FOLLOW_configuration_declaration_in_library_unit232 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LIBRARY_in_library_clause253 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_library_clause255 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_library_clause257 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONTEXT_in_v2008_context_reference273 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_list_in_v2008_context_reference275 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_context_reference277 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GENERIC_in_generic_clause293 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_generic_clause295 = createBitSet(0x4000004100400000L,0x0000080004000012L,0x0000002800000000L)
    private val FOLLOW_generic_interface_list_in_generic_clause297 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_generic_clause299 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_element_generic_in_generic_interface_list321 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_generic_interface_list326 = createBitSet(0x4000004100400000L,0x0000080004000012L,0x0000002800000000L)
    private val FOLLOW_interface_element_generic_in_generic_interface_list330 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_PORT_in_port_clause354 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_port_clause356 = createBitSet(0x0000000000000000L,0x0000000000020000L,0x00000028000C0000L)
    private val FOLLOW_port_interface_list_in_port_clause358 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_port_clause360 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_port_clause362 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_element_port_in_port_interface_list384 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_port_interface_list389 = createBitSet(0x0000000000000000L,0x0000000000020000L,0x00000028000C0000L)
    private val FOLLOW_interface_element_port_in_port_interface_list393 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_ENTITY_in_entity_declaration425 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_entity_declaration429 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_entity_declaration431 = createBitSet(0xC000004D48C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_generic_clause_in_entity_declaration436 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_entity_declaration438 = createBitSet(0xC000004948C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_port_clause_in_entity_declaration444 = createBitSet(0x4000004948C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_entity_declaration449 = createBitSet(0x4000004948C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_entity_declarative_item_in_entity_declaration453 = createBitSet(0x4000004948C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_entity_declaration456 = createBitSet(0x4000004948C06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_BEGIN_in_entity_declaration464 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_label_colon_in_entity_declaration471 = createBitSet(0x0000000000001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_POSTPONED_in_entity_declaration476 = createBitSet(0x0000000000001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_concurrent_assertion_statement_in_entity_declaration484 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_concurrent_procedure_call_statement_in_entity_declaration494 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_process_statement_in_entity_declaration503 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000202800000000L)
    private val FOLLOW_END_in_entity_declaration528 = createBitSet(0x0000000010000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_ENTITY_in_entity_declaration530 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_entity_declaration535 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_entity_declaration538 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item556 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_entity_declarative_item566 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_entity_declarative_item575 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_entity_declarative_item584 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_entity_declarative_item593 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_entity_declarative_item605 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_entity_declarative_item612 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_entity_declarative_item619 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_entity_declarative_item626 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_entity_declarative_item633 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_entity_declarative_item640 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_entity_declarative_item647 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_entity_declarative_item654 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_entity_declarative_item661 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_entity_declarative_item668 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_entity_declarative_item675 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_entity_declarative_item682 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_entity_declarative_item689 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_step_limit_specification_in_entity_declarative_item709 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_entity_declarative_item717 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_entity_declarative_item725 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_quantity_declaration_in_entity_declarative_item733 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_entity_declarative_item741 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARCHITECTURE_in_architecture_body768 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_architecture_body772 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_architecture_body774 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_architecture_body776 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_architecture_body778 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_architecture_body782 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_block_declarative_item_in_architecture_body786 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_architecture_body789 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_BEGIN_in_architecture_body795 = createBitSet(0x08EC002008081210L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_concurrent_statement_list_in_architecture_body799 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_architecture_body802 = createBitSet(0x0000000000000400L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_ARCHITECTURE_in_architecture_body804 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_architecture_body809 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_architecture_body812 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_configuration_declarative_item830 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_configuration_declarative_item837 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_configuration_declarative_item844 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_configuration_declaration867 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_configuration_declaration871 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_configuration_declaration873 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_configuration_declaration875 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_configuration_declaration877 = createBitSet(0x0000000880002000L,0x0000000040000000L)
    private val FOLLOW_sync_in_configuration_declaration881 = createBitSet(0x0000000880002000L,0x0000000040000000L)
    private val FOLLOW_configuration_declarative_item_in_configuration_declaration885 = createBitSet(0x0000000880002000L,0x0000000040000000L)
    private val FOLLOW_sync_in_configuration_declaration888 = createBitSet(0x0000000880002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_configuration_declaration898 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_configuration_declaration901 = createBitSet(0x0000000000200000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_CONFIGURATION_in_configuration_declaration903 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_configuration_declaration908 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_configuration_declaration911 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_generate_specification933 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_generate_specification946 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_generate_specification955 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_block_specification979 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_block_specification982 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_generate_specification_in_block_specification984 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_block_specification986 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_block_specification995 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_block_configuration1019 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_block_specification_in_block_configuration1021 = createBitSet(0x0000000888002000L,0x0000000040000000L)
    private val FOLLOW_use_clause_in_block_configuration1026 = createBitSet(0x0000000888002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_block_configuration1041 = createBitSet(0x0000000888002000L,0x0000000040000000L)
    private val FOLLOW_component_configuration_in_block_configuration1050 = createBitSet(0x0000000888002000L,0x0000000040000000L)
    private val FOLLOW_END_in_block_configuration1060 = createBitSet(0x0000000080000000L)
    private val FOLLOW_FOR_in_block_configuration1062 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_block_configuration1064 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_component_configuration1083 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_component_specification_in_component_configuration1085 = createBitSet(0x8000000C88002000L,0x0000080040000000L)
    private val FOLLOW_binding_indication_in_component_configuration1090 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_component_configuration1092 = createBitSet(0x0000000888002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_component_configuration1101 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_component_configuration1105 = createBitSet(0x0000000080000000L)
    private val FOLLOW_FOR_in_component_configuration1107 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_component_configuration1109 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONTEXT_in_v2008_context_declaration1128 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_context_declaration1132 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_v2008_context_declaration1134 = createBitSet(0x0000100008000000L,0x0000000040000000L,0x0000000000001000L)
    private val FOLLOW_context_items_in_v2008_context_declaration1139 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_v2008_context_declaration1142 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800001000L)
    private val FOLLOW_CONTEXT_in_v2008_context_declaration1144 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_context_declaration1149 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_context_declaration1152 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_package_declaration1177 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_package_declaration1181 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_package_declaration1183 = createBitSet(0x4000004D48D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_generic_clause_in_package_declaration1191 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_package_declaration1193 = createBitSet(0x4000004D48D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_generic_map_aspect_in_package_declaration1198 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_package_declaration1200 = createBitSet(0x4000004948D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_package_declaration1208 = createBitSet(0x4000004948D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_package_declarative_item_in_package_declaration1212 = createBitSet(0x4000004948D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_package_declaration1215 = createBitSet(0x4000004948D02080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_END_in_package_declaration1221 = createBitSet(0x4000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_PACKAGE_in_package_declaration1223 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_package_declaration1228 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_package_declaration1231 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declaration_in_package_declarative_item1249 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_package_declarative_item1259 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_package_declarative_item1268 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_package_declarative_item1277 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_package_declarative_item1289 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_package_declarative_item1296 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_package_declarative_item1303 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_package_declarative_item1310 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_package_declarative_item1317 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_package_declarative_item1324 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_package_declarative_item1331 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_declaration_in_package_declarative_item1338 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_package_declarative_item1345 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_package_declarative_item1352 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_package_declarative_item1359 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_package_declarative_item1366 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_package_declarative_item1373 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_package_declarative_item1380 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_package_declarative_item1396 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_package_declarative_item1404 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_package_declarative_item1412 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_package_body1436 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_package_body1438 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_package_body1442 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_package_body1444 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_package_body1448 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_package_body_declarative_item_in_package_body1452 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_package_body1455 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_END_in_package_body1461 = createBitSet(0x4000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_PACKAGE_in_package_body1464 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_package_body1466 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_package_body1472 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_package_body1475 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item1495 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_package_body_declarative_item1505 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_package_body_declarative_item1514 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_package_body_declarative_item1523 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_package_body_declarative_item1532 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_package_body_declarative_item1544 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_package_body_declarative_item1551 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_package_body_declarative_item1558 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_package_body_declarative_item1565 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_package_body_declarative_item1572 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_package_body_declarative_item1579 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_package_body_declarative_item1586 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_package_body_declarative_item1595 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_package_body_declarative_item1603 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_package_body_declarative_item1611 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_package_body_declarative_item1618 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_v2008_package_instantiation_declaration1633 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_package_instantiation_declaration1635 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_v2008_package_instantiation_declaration1637 = createBitSet(0x0008000000000000L)
    private val FOLLOW_NEW_in_v2008_package_instantiation_declaration1639 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_v2008_package_instantiation_declaration1641 = createBitSet(0x0000000400000000L,0x0000080000000000L)
    private val FOLLOW_generic_map_aspect_in_v2008_package_instantiation_declaration1645 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_package_instantiation_declaration1648 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_designator1664 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_designator1671 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_subprogram_specification1690 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_subprogram_specification1692 = createBitSet(0x0000000400000002L,0x0000100000000000L,0x0000000000004000L)
    private val FOLLOW_generic_clause_in_subprogram_specification1698 = createBitSet(0x0000000400000002L,0x0000100000000000L,0x0000000000004000L)
    private val FOLLOW_generic_map_aspect_in_subprogram_specification1700 = createBitSet(0x0000000000000002L,0x0000100000000000L,0x0000000000004000L)
    private val FOLLOW_PARAMETER_in_subprogram_specification1710 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_subprogram_specification1714 = createBitSet(0x0000000040400000L,0x0000000080020000L,0x00000028000C0000L)
    private val FOLLOW_parameter_interface_list_procedure_in_subprogram_specification1716 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_subprogram_specification1718 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PURE_in_subprogram_specification1730 = createBitSet(0x0000000100000000L)
    private val FOLLOW_IMPURE_in_subprogram_specification1736 = createBitSet(0x0000000100000000L)
    private val FOLLOW_FUNCTION_in_subprogram_specification1740 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_designator_in_subprogram_specification1742 = createBitSet(0x0000000400000000L,0x0000100000000800L,0x0000000000004000L)
    private val FOLLOW_generic_clause_in_subprogram_specification1748 = createBitSet(0x0000000400000000L,0x0000100000000800L,0x0000000000004000L)
    private val FOLLOW_generic_map_aspect_in_subprogram_specification1750 = createBitSet(0x0000000000000000L,0x0000100000000800L,0x0000000000004000L)
    private val FOLLOW_PARAMETER_in_subprogram_specification1760 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_subprogram_specification1764 = createBitSet(0x0000000040400000L,0x0000000000020000L,0x00000028000C0000L)
    private val FOLLOW_parameter_interface_list_function_in_subprogram_specification1766 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_subprogram_specification1768 = createBitSet(0x0000000000000000L,0x0000000000000800L)
    private val FOLLOW_RETURN_in_subprogram_specification1772 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_subprogram_specification1774 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_specification_in_subprogram_declartion_or_body1791 = createBitSet(0x0000040000000000L,0x0000080000000000L)
    private val FOLLOW_subprogram_body_in_subprogram_declartion_or_body1794 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_subprogram_declartion_or_body1799 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_specification_in_subprogram_declaration1818 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_subprogram_declaration1820 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IS_in_subprogram_body1842 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_subprogram_body1846 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_subprogram_declarative_item_in_subprogram_body1850 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_subprogram_body1853 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_subprogram_body1860 = createBitSet(0x00988020A8081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_subprogram_body1864 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_subprogram_body1867 = createBitSet(0x0000000100000002L,0x0000000000000002L,0x0000202800000000L)
    private val FOLLOW_PROCEDURE_in_subprogram_body1872 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_FUNCTION_in_subprogram_body1878 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_designator_in_subprogram_body1884 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item1906 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_subprogram_declarative_item1916 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_subprogram_declarative_item1925 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_subprogram_declarative_item1934 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_subprogram_declarative_item1943 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_subprogram_declarative_item1955 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_subprogram_declarative_item1962 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_subprogram_declarative_item1969 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_subprogram_declarative_item1976 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_subprogram_declarative_item1983 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_subprogram_declarative_item1990 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_subprogram_declarative_item1997 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_subprogram_declarative_item2004 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_subprogram_declarative_item2011 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_subprogram_declarative_item2018 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_subprogram_declarative_item2025 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_v2008_subprogram_instantiation_declaration2041 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_FUNCTION_in_v2008_subprogram_instantiation_declaration2047 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_subprogram_instantiation_declaration2050 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_v2008_subprogram_instantiation_declaration2052 = createBitSet(0x0008000000000000L)
    private val FOLLOW_NEW_in_v2008_subprogram_instantiation_declaration2056 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_v2008_subprogram_instantiation_declaration2058 = createBitSet(0x0000000400000000L,0x0000480000000000L)
    private val FOLLOW_signature_in_v2008_subprogram_instantiation_declaration2060 = createBitSet(0x0000000400000000L,0x0000080000000000L)
    private val FOLLOW_generic_map_aspect_in_v2008_subprogram_instantiation_declaration2066 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_subprogram_instantiation_declaration2069 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TYPE_in_type_declaration2085 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_type_declaration2087 = createBitSet(0x0000040000000000L,0x0000080000000000L)
    private val FOLLOW_IS_in_type_declaration2090 = createBitSet(0x0000000040000820L,0x0000100000000068L)
    private val FOLLOW_type_definition_in_type_declaration2092 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_type_declaration2097 = createBitSet(0x0000000000000002L)
    private val FOLLOW_enumeration_type_definition_in_type_definition2115 = createBitSet(0x0000000000000002L)
    private val FOLLOW_numeric_type_definition_in_type_definition2123 = createBitSet(0x0000000000000002L)
    private val FOLLOW_array_type_definition_in_type_definition2132 = createBitSet(0x0000000000000002L)
    private val FOLLOW_record_type_definition_in_type_definition2140 = createBitSet(0x0000000000000002L)
    private val FOLLOW_access_type_definition_in_type_definition2148 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_type_definition_in_type_definition2156 = createBitSet(0x0000000000000002L)
    private val FOLLOW_protected_type_body_in_type_definition2164 = createBitSet(0x0000000000000002L)
    private val FOLLOW_protected_type_declaration_in_type_definition2172 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NATURE_in_ams_nature_declaration2190 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_nature_declaration2192 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_ams_nature_declaration2194 = createBitSet(0x0000000000000800L,0x0000000000000040L,0x0000202800000000L)
    private val FOLLOW_ams_nature_definition_in_ams_nature_declaration2196 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_nature_declaration2199 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_ams_terminal_declaration2215 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_ams_terminal_declaration2217 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_ams_terminal_declaration2219 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_subnature_indication_in_ams_terminal_declaration2221 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_terminal_declaration2223 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition2241 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_array_nature_definition_in_ams_nature_definition2249 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_record_nature_definition_in_ams_nature_definition2257 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_ams_through_aspect2273 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000500000L)
    private val FOLLOW_TOLERANCE_in_ams_through_aspect2276 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_through_aspect2280 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000400000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_through_aspect2285 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_through_aspect2289 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000400000L)
    private val FOLLOW_THROUGH_in_ams_through_aspect2293 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_quantity_declaration2310 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_terminal_aspect_in_ams_quantity_declaration2315 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_identifier_list_in_ams_quantity_declaration2326 = createBitSet(0x0000000000000000L,0x0001008000000000L,0x0000000000700000L)
    private val FOLLOW_TOLERANCE_in_ams_quantity_declaration2342 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_quantity_declaration2346 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000600000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_quantity_declaration2351 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_quantity_declaration2355 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000600000L)
    private val FOLLOW_ACROSS_in_ams_quantity_declaration2362 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_THROUGH_in_ams_quantity_declaration2366 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_through_aspect_in_ams_quantity_declaration2372 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_terminal_aspect_in_ams_quantity_declaration2378 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_COLON_in_ams_quantity_declaration2394 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_ams_quantity_declaration2396 = createBitSet(0x0000000000000000L,0x0000088000000000L,0x0000000001800000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_quantity_declaration2412 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_quantity_declaration2416 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_ams_source_aspect_in_ams_quantity_declaration2428 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_quantity_declaration2446 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_ams_terminal_aspect2463 = createBitSet(0x0000000000000002L,0x0000000001000000L)
    private val FOLLOW_TO_in_ams_terminal_aspect2466 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_in_ams_terminal_aspect2470 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SPECTRUM_in_ams_source_aspect2489 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_ams_source_aspect2493 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_ams_source_aspect2495 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_ams_source_aspect2499 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOISE_in_ams_source_aspect2506 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_ams_source_aspect2510 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_constant_declaration2526 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_constant_declaration2528 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_constant_declaration2530 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_constant_declaration2532 = createBitSet(0x0000000000000000L,0x0000088000000000L)
    private val FOLLOW_VAR_ASSIGN_in_constant_declaration2535 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_constant_declaration2537 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_constant_declaration2541 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_signal_declaration2560 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_signal_declaration2562 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_signal_declaration2564 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_signal_declaration2566 = createBitSet(0x0000000000040000L,0x0000088000000080L)
    private val FOLLOW_REGISTER_in_signal_declaration2571 = createBitSet(0x0000000000000000L,0x0000088000000000L)
    private val FOLLOW_BUS_in_signal_declaration2575 = createBitSet(0x0000000000000000L,0x0000088000000000L)
    private val FOLLOW_VAR_ASSIGN_in_signal_declaration2580 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_signal_declaration2582 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_signal_declaration2586 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SHARED_in_variable_declaration2603 = createBitSet(0x0000000000000000L,0x0000000080000000L)
    private val FOLLOW_VARIABLE_in_variable_declaration2606 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_variable_declaration2608 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_variable_declaration2610 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_variable_declaration2612 = createBitSet(0x0000000000000000L,0x0000088000000000L)
    private val FOLLOW_VAR_ASSIGN_in_variable_declaration2615 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_variable_declaration2617 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_variable_declaration2621 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_file_declaration2638 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_file_declaration2640 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_file_declaration2642 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_file_declaration2644 = createBitSet(0x0400040000000000L,0x0000080000000000L)
    private val FOLLOW_OPEN_in_file_declaration2648 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_file_declaration2652 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_file_declaration2656 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_file_declaration2660 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_file_declaration2664 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALIAS_in_alias_declaration2681 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0080202800000000L)
    private val FOLLOW_alias_designator_in_alias_declaration2683 = createBitSet(0x0000040000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_alias_declaration2686 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_alias_declaration2688 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_alias_declaration2692 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_in_alias_declaration2694 = createBitSet(0x0000000000000000L,0x0000480000000000L)
    private val FOLLOW_signature_in_alias_declaration2696 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_alias_declaration2699 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_alias_designator2716 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_alias_designator2723 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_alias_designator2729 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_component_declaration2747 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_component_declaration2751 = createBitSet(0x8000040408000000L)
    private val FOLLOW_IS_in_component_declaration2753 = createBitSet(0x8000000408000000L)
    private val FOLLOW_generic_clause_in_component_declaration2759 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_component_declaration2761 = createBitSet(0x8000000008000000L)
    private val FOLLOW_port_clause_in_component_declaration2767 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_component_declaration2771 = createBitSet(0x0000000000100000L)
    private val FOLLOW_COMPONENT_in_component_declaration2773 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_component_declaration2777 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_component_declaration2780 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ATTRIBUTE_in_attribute_declaration2796 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_attribute_declaration2798 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_attribute_declaration2800 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_attribute_declaration2802 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_attribute_declaration2804 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ATTRIBUTE_in_attribute_specification2822 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_attribute_specification2824 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_attribute_specification2826 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0080202800000000L)
    private val FOLLOW_entity_name_list_in_attribute_specification2828 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_attribute_specification2830 = createBitSet(0x4000480950700400L,0x0000000094420002L,0x00000000020E0000L)
    private val FOLLOW_entity_class_in_attribute_specification2832 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_attribute_specification2834 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_attribute_specification2836 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_attribute_specification2838 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_entity_designator2865 = createBitSet(0x0000000000000002L,0x0000400000000000L)
    private val FOLLOW_CHARACTER_LITERAL_in_entity_designator2872 = createBitSet(0x0000000000000002L,0x0000400000000000L)
    private val FOLLOW_STRING_LITERAL_in_entity_designator2878 = createBitSet(0x0000000000000002L,0x0000400000000000L)
    private val FOLLOW_signature_in_entity_designator2884 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_designator_in_entity_name_list2908 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_entity_name_list2912 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0080202800000000L)
    private val FOLLOW_entity_designator_in_entity_name_list2916 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_OTHERS_in_entity_name_list2927 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_entity_name_list2934 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ENTITY_in_entity_class2949 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARCHITECTURE_in_entity_class2956 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_entity_class2963 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_entity_class2970 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_entity_class2977 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FUNCTION_in_entity_class2984 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TYPE_in_entity_class2991 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBTYPE_in_entity_class2998 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_entity_class3005 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_entity_class3012 = createBitSet(0x0000000000000002L)
    private val FOLLOW_VARIABLE_in_entity_class3019 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_entity_class3026 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_entity_class3033 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LABEL_in_entity_class3040 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LITERAL_in_entity_class3047 = createBitSet(0x0000000000000002L)
    private val FOLLOW_UNITS_in_entity_class3054 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_entity_class3061 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NATURE_in_entity_class3081 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBNATURE_in_entity_class3089 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_entity_class3097 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_entity_class3105 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_configuration_specification3126 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_component_specification_in_configuration_specification3128 = createBitSet(0x8000000400000000L,0x0000080040000000L)
    private val FOLLOW_binding_indication_in_configuration_specification3132 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_configuration_specification3134 = createBitSet(0x0000000008000002L)
    private val FOLLOW_END_in_configuration_specification3143 = createBitSet(0x0000000080000000L)
    private val FOLLOW_FOR_in_configuration_specification3145 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_configuration_specification3147 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_instantiation_list3167 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OTHERS_in_instantiation_list3174 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_instantiation_list3181 = createBitSet(0x0000000000000002L)
    private val FOLLOW_instantiation_list_in_component_specification3198 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_component_specification3200 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_component_specification3202 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ENTITY_in_entity_aspect3218 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_entity_aspect3222 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_entity_aspect3225 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_entity_aspect3229 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_entity_aspect3231 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_entity_aspect3240 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_entity_aspect3245 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OPEN_in_entity_aspect3252 = createBitSet(0x0000000000000002L)
    private val FOLLOW_USE_in_binding_indication3270 = createBitSet(0x0400000010200000L)
    private val FOLLOW_entity_aspect_in_binding_indication3272 = createBitSet(0x8000000400000002L)
    private val FOLLOW_generic_map_aspect_in_binding_indication3277 = createBitSet(0x8000000000000002L)
    private val FOLLOW_port_map_aspect_in_binding_indication3281 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DISCONNECT_in_disconnection_specification3298 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_list_in_disconnection_specification3301 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_OTHERS_in_disconnection_specification3307 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_ALL_in_disconnection_specification3313 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_disconnection_specification3316 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_disconnection_specification3318 = createBitSet(0x0000000000000040L)
    private val FOLLOW_AFTER_in_disconnection_specification3320 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_disconnection_specification3322 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_disconnection_specification3324 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LIMIT_in_ams_step_limit_specification3340 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_list_in_ams_step_limit_specification3343 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_OTHERS_in_ams_step_limit_specification3349 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_ALL_in_ams_step_limit_specification3355 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_ams_step_limit_specification3359 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_ams_step_limit_specification3361 = createBitSet(0x0000000000000000L,0x0000000800000000L)
    private val FOLLOW_WITH_in_ams_step_limit_specification3363 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_step_limit_specification3365 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_step_limit_specification3367 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_class_in_entity_class_entry3384 = createBitSet(0x0000000000000002L,0x0000010000000000L)
    private val FOLLOW_BOX_in_entity_class_entry3386 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_group_template_declaration3408 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_group_template_declaration3410 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_group_template_declaration3412 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_group_template_declaration3414 = createBitSet(0x4000480950700400L,0x0000000094420002L,0x00000000020E0000L)
    private val FOLLOW_entity_class_entry_in_group_template_declaration3418 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_group_template_declaration3422 = createBitSet(0x4000480950700400L,0x0000000094420002L,0x00000000020E0000L)
    private val FOLLOW_entity_class_entry_in_group_template_declaration3426 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_group_template_declaration3433 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_group_template_declaration3435 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_group_declaration3455 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_group_declaration3457 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_group_declaration3459 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_group_declaration3461 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_group_declaration3463 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0080202800000000L)
    private val FOLLOW_group_constituent_list_in_group_declaration3465 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_group_declaration3467 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_group_declaration3469 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_group_constituent3486 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_group_constituent3493 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_constituent_in_group_constituent_list3514 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_group_constituent_list3518 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0080202800000000L)
    private val FOLLOW_group_constituent_in_group_constituent_list3522 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_USE_in_use_clause3546 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_list_in_use_clause3548 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_use_clause3550 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_enumeration_literal3569 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_enumeration_literal3576 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_enumeration_type_definition3597 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0080002800000000L)
    private val FOLLOW_enumeration_literal_in_enumeration_type_definition3601 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_enumeration_type_definition3605 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0080002800000000L)
    private val FOLLOW_enumeration_literal_in_enumeration_type_definition3609 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_enumeration_type_definition3615 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_constraint_in_numeric_type_definition3637 = createBitSet(0x0000000000000002L,0x0000000010000000L)
    private val FOLLOW_UNITS_in_numeric_type_definition3646 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_numeric_type_definition3652 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_numeric_type_definition3654 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_numeric_type_definition3665 = createBitSet(0x0000000000000000L,0x8000000000000000L)
    private val FOLLOW_EQ_in_numeric_type_definition3667 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x00000E0000000000L)
    private val FOLLOW_physical_literal_in_numeric_type_definition3669 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_numeric_type_definition3671 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_END_in_numeric_type_definition3686 = createBitSet(0x0000000000000000L,0x0000000010000000L)
    private val FOLLOW_UNITS_in_numeric_type_definition3688 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_numeric_type_definition3692 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_mark_in_index_subtype_definition3715 = createBitSet(0x0000000000000000L,0x0000000000000020L)
    private val FOLLOW_RANGE_in_index_subtype_definition3717 = createBitSet(0x0000000000000000L,0x0000010000000000L)
    private val FOLLOW_BOX_in_index_subtype_definition3719 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARRAY_in_array_type_definition3743 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_array_type_definition3749 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_index_subtype_definition_in_array_type_definition3753 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_array_type_definition3758 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_index_subtype_definition_in_array_type_definition3762 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_array_type_definition3768 = createBitSet(0x0100000000000000L)
    private val FOLLOW_index_constraint_in_array_type_definition3774 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_array_type_definition3780 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_array_type_definition3782 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RECORD_in_record_type_definition3805 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_record_type_definition3813 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_record_type_definition3815 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_record_type_definition3817 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_record_type_definition3819 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_END_in_record_type_definition3830 = createBitSet(0x0000000000000000L,0x0000000000000040L)
    private val FOLLOW_RECORD_in_record_type_definition3832 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_record_type_definition3834 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ACCESS_in_access_type_definition3852 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_access_type_definition3854 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_file_type_definition3873 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_file_type_definition3875 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_file_type_definition3877 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_mark_in_ams_scalar_nature_definition3897 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000200000L)
    private val FOLLOW_ACROSS_in_ams_scalar_nature_definition3899 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_ams_scalar_nature_definition3903 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000400000L)
    private val FOLLOW_THROUGH_in_ams_scalar_nature_definition3905 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_scalar_nature_definition3907 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000008000000L)
    private val FOLLOW_REFERENCE_in_ams_scalar_nature_definition3909 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARRAY_in_ams_array_nature_definition3930 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_ams_array_nature_definition3936 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition3940 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_ams_array_nature_definition3945 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition3949 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_ams_array_nature_definition3955 = createBitSet(0x0100000000000000L)
    private val FOLLOW_index_constraint_in_ams_array_nature_definition3961 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_ams_array_nature_definition3966 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_subnature_indication_in_ams_array_nature_definition3968 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RECORD_in_ams_record_nature_definition3989 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_ams_record_nature_definition3996 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_ams_record_nature_definition3998 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_subnature_indication_in_ams_record_nature_definition4000 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_record_nature_definition4002 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_END_in_ams_record_nature_definition4013 = createBitSet(0x0000000000000000L,0x0000000000000040L)
    private val FOLLOW_RECORD_in_ams_record_nature_definition4015 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_record_nature_definition4017 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBNATURE_in_ams_subnature_declaration4034 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_subnature_declaration4036 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_ams_subnature_declaration4038 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_subnature_indication_in_ams_subnature_declaration4040 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_subnature_declaration4042 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_mark_in_ams_subnature_indication4059 = createBitSet(0x0000000000000002L,0x0000100000000000L,0x0000000000100000L)
    private val FOLLOW_index_constraint_in_ams_subnature_indication4061 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000100000L)
    private val FOLLOW_TOLERANCE_in_ams_subnature_indication4065 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_subnature_indication4069 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000200000L)
    private val FOLLOW_ACROSS_in_ams_subnature_indication4071 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_subnature_indication4075 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000400000L)
    private val FOLLOW_THROUGH_in_ams_subnature_indication4077 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_ams_nature_mark4097 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROTECTED_in_protected_type_declaration4119 = createBitSet(0x0000004108002000L,0x0000000040000012L)
    private val FOLLOW_sync_in_protected_type_declaration4123 = createBitSet(0x0000004108002000L,0x0000000040000012L)
    private val FOLLOW_protected_type_declarative_item_in_protected_type_declaration4127 = createBitSet(0x0000004108002000L,0x0000000040000012L)
    private val FOLLOW_sync_in_protected_type_declaration4130 = createBitSet(0x0000004108002000L,0x0000000040000012L)
    private val FOLLOW_END_in_protected_type_declaration4136 = createBitSet(0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_PROTECTED_in_protected_type_declaration4138 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_protected_type_declaration4140 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declaration_in_protected_type_declarative_item4159 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_declarative_item4168 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_protected_type_declarative_item4175 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_protected_type_declarative_item4182 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROTECTED_in_protected_type_body4202 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_protected_type_body4204 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_protected_type_body4208 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_protected_type_body_declarative_item_in_protected_type_body4212 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_protected_type_body4215 = createBitSet(0x4000004948402080L,0x00000000C4410012L)
    private val FOLLOW_END_in_protected_type_body4221 = createBitSet(0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_PROTECTED_in_protected_type_body4223 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_protected_type_body4225 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_protected_type_body4227 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item4246 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_body_declarative_item4256 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_protected_type_body_declarative_item4265 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_protected_type_body_declarative_item4274 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_protected_type_body_declarative_item4283 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_protected_type_body_declarative_item4295 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_protected_type_body_declarative_item4302 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_protected_type_body_declarative_item4309 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_protected_type_body_declarative_item4316 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_protected_type_body_declarative_item4322 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_protected_type_body_declarative_item4329 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_protected_type_body_declarative_item4336 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_protected_type_body_declarative_item4343 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_protected_type_body_declarative_item4350 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_protected_type_body_declarative_item4357 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_protected_type_body_declarative_item4364 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBTYPE_in_subtype_declaration4381 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_subtype_declaration4383 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_subtype_declaration4385 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_subtype_declaration4387 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_subtype_declaration4389 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_resolution_indication_in_subtype_indication4415 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_subtype_indication4419 = createBitSet(0x0000000000000002L,0x0000100000000020L,0x0000002800100000L)
    private val FOLLOW_v2008_constraint_in_subtype_indication4421 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000100000L)
    private val FOLLOW_TOLERANCE_in_subtype_indication4428 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_subtype_indication4430 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_subtype_indication4444 = createBitSet(0x0000000000000002L,0x0000100000000020L,0x0000202800100000L)
    private val FOLLOW_selected_name_in_subtype_indication4448 = createBitSet(0x0000000000000002L,0x0000100000000020L,0x0000000000100000L)
    private val FOLLOW_constraint_in_subtype_indication4451 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000100000L)
    private val FOLLOW_TOLERANCE_in_subtype_indication4458 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_subtype_indication4460 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_v2008_resolution_indication4479 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_v2008_resolution_indication4486 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4489 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_identifier_in_v2008_resolution_indication4493 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4495 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_v2008_resolution_indication4498 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_resolution_indication4500 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4502 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_v2008_resolution_indication4507 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TO_in_direction4520 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DOWNTO_in_direction4527 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RANGE_in_range_constraint4542 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_range_in_range_constraint4544 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_index_constraint4563 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_discrete_range_in_index_constraint4567 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_index_constraint4571 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_discrete_range_in_index_constraint4576 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_index_constraint4582 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_range4609 = createBitSet(0x0000000001000000L,0x0000000001000000L)
    private val FOLLOW_direction_in_range4611 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_range4615 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_range4622 = createBitSet(0x0000000000000002L)
    private val FOLLOW_array_constraint_in_v2008_constraint4638 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_record_constraint_in_v2008_constraint4643 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_constraint_in_v2008_constraint4649 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_constraint4665 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_constraint_in_constraint4672 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_array_constraint4684 = createBitSet(0x0000000000000002L,0x0000100000000000L,0x0000002800000000L)
    private val FOLLOW_array_constraint_in_array_constraint4688 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_record_constraint_in_array_constraint4692 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_array_constraint4700 = createBitSet(0x0400000000000000L)
    private val FOLLOW_OPEN_in_array_constraint4702 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_array_constraint4704 = createBitSet(0x0000000000000002L,0x0000100000000000L,0x0000002800000000L)
    private val FOLLOW_array_constraint_in_array_constraint4708 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_record_constraint_in_array_constraint4712 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_v2008_record_constraint4725 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000002800000000L)
    private val FOLLOW_array_constraint_in_v2008_record_constraint4728 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_v2008_record_constraint_in_v2008_record_constraint4732 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_v2008_record_constraint4739 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_record_constraint4742 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000002800000000L)
    private val FOLLOW_array_constraint_in_v2008_record_constraint4745 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_record_constraint_in_v2008_record_constraint4749 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_indication_in_discrete_range4800 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_in_discrete_range4807 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_type_mark4824 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_statement_in_concurrent_statement_list4848 = createBitSet(0x08EC002000081212L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_label_colon_in_concurrent_statement4872 = createBitSet(0x08EC002090389210L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_concurrent_statement_with_label_in_concurrent_statement4941 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement4951 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement4965 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label4982 = createBitSet(0x0000000000000002L)
    private val FOLLOW_block_statement_in_concurrent_statement_with_label4990 = createBitSet(0x0000000000000002L)
    private val FOLLOW_generate_statement_in_concurrent_statement_with_label4998 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label5021 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_statement_in_concurrent_statement_optional_label5057 = createBitSet(0x0000000000000002L)
    private val FOLLOW_POSTPONED_in_concurrent_statement_optional_label5068 = createBitSet(0x08EC002000081210L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_process_statement_in_concurrent_statement_optional_label5078 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label5087 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label5101 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label5110 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GENERIC_in_generic_map_aspect5132 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_generic_map_aspect5134 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_generic_map_aspect5136 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_list_in_generic_map_aspect5138 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_generic_map_aspect5140 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PORT_in_port_map_aspect5157 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_port_map_aspect5159 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_port_map_aspect5161 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_list_in_port_map_aspect5163 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_port_map_aspect5165 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BLOCK_in_block_statement5192 = createBitSet(0xC000044DC0D06080L,0x00001000C4430012L,0x00000000060E0000L)
    private val FOLLOW_LPAREN_in_block_statement5195 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_block_statement5199 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_block_statement5201 = createBitSet(0xC000044DC0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_IS_in_block_statement5205 = createBitSet(0xC000004DC0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_generic_clause_in_block_statement5211 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement5213 = createBitSet(0xC000004DC0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_generic_map_aspect_in_block_statement5216 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement5218 = createBitSet(0xC0000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_port_clause_in_block_statement5227 = createBitSet(0xC0000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_port_map_aspect_in_block_statement5230 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement5232 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_block_statement5240 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_block_declarative_item_in_block_statement5244 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_block_statement5247 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_BEGIN_in_block_statement5253 = createBitSet(0x08EC002008081210L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_concurrent_statement_list_in_block_statement5257 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_block_statement5260 = createBitSet(0x0000000000008000L)
    private val FOLLOW_BLOCK_in_block_statement5262 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_block_statement5266 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement5269 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_block_declarative_item5290 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_block_declarative_item5300 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_block_declarative_item5309 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_block_declarative_item5318 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_block_declarative_item5327 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_block_declarative_item5339 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_block_declarative_item5346 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_block_declarative_item5353 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_block_declarative_item5360 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_block_declarative_item5367 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_block_declarative_item5374 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_block_declarative_item5381 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_declaration_in_block_declarative_item5388 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_block_declarative_item5395 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_block_declarative_item5402 = createBitSet(0x0000000000000002L)
    private val FOLLOW_configuration_specification_in_block_declarative_item5409 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_block_declarative_item5416 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_block_declarative_item5423 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_block_declarative_item5430 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_block_declarative_item5437 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_step_limit_specification_in_block_declarative_item5454 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_block_declarative_item5462 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_block_declarative_item5470 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_quantity_declaration_in_block_declarative_item5478 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_block_declarative_item5486 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCESS_in_process_statement5513 = createBitSet(0x4000044940406080L,0x00001000C4410012L)
    private val FOLLOW_LPAREN_in_process_statement5516 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_list_in_process_statement5518 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_process_statement5520 = createBitSet(0x4000044940406080L,0x00000000C4410012L)
    private val FOLLOW_IS_in_process_statement5524 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_process_statement5529 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_process_declarative_item_in_process_statement5533 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_process_statement5537 = createBitSet(0x4000004940406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_process_statement5543 = createBitSet(0x00988020A8081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_process_statement5547 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_process_statement5550 = createBitSet(0x0000000000000000L,0x0000000000000005L)
    private val FOLLOW_POSTPONED_in_process_statement5552 = createBitSet(0x0000000000000000L,0x0000000000000004L)
    private val FOLLOW_PROCESS_in_process_statement5555 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_process_statement5559 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_process_statement5562 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_process_declarative_item5583 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_subprogram_instantiation_declaration_in_process_declarative_item5593 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_process_declarative_item5602 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_process_declarative_item5611 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_instantiation_declaration_in_process_declarative_item5620 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_process_declarative_item5632 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_process_declarative_item5639 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_process_declarative_item5646 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_process_declarative_item5653 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_process_declarative_item5660 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_process_declarative_item5667 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_process_declarative_item5674 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_process_declarative_item5681 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_process_declarative_item5688 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_process_declarative_item5695 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_process_declarative_item5702 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_concurrent_procedure_call_statement5720 = createBitSet(0x0000000000000000L,0x0000180000000000L)
    private val FOLLOW_LPAREN_in_concurrent_procedure_call_statement5723 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_list_in_concurrent_procedure_call_statement5725 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_concurrent_procedure_call_statement5727 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement5731 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ASSERT_in_concurrent_assertion_statement5750 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_concurrent_assertion_statement5752 = createBitSet(0x0000000000000000L,0x0000080000008400L)
    private val FOLLOW_REPORT_in_concurrent_assertion_statement5756 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_concurrent_assertion_statement5760 = createBitSet(0x0000000000000000L,0x0000080000008000L)
    private val FOLLOW_SEVERITY_in_concurrent_assertion_statement5765 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_concurrent_assertion_statement5769 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_assertion_statement5773 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_conditional_signal_assignment_in_concurrent_signal_assignment_statement5797 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_selected_signal_assignment_in_concurrent_signal_assignment_statement5804 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_concurrent_conditional_signal_assignment5824 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_LEQ_in_concurrent_conditional_signal_assignment5826 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_GUARDED_in_concurrent_conditional_signal_assignment5828 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_delay_mechanism_in_concurrent_conditional_signal_assignment5831 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_conditional_waveforms_in_concurrent_conditional_signal_assignment5838 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_conditional_signal_assignment5841 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_in_conditional_waveforms5854 = createBitSet(0x0000000000000002L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_conditional_waveforms5858 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_conditional_waveforms5860 = createBitSet(0x0000000002000002L)
    private val FOLLOW_ELSE_in_conditional_waveforms5864 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_conditional_waveforms_in_conditional_waveforms5866 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WITH_in_concurrent_selected_signal_assignment5892 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_concurrent_selected_signal_assignment5894 = createBitSet(0x0000000000000000L,0x0000000000004000L)
    private val FOLLOW_SELECT_in_concurrent_selected_signal_assignment5896 = createBitSet(0x0088000000000000L,0x00C0100000000000L,0x0080AE2800000000L)
    private val FOLLOW_QMARK_in_concurrent_selected_signal_assignment5901 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_target_in_concurrent_selected_signal_assignment5907 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_LEQ_in_concurrent_selected_signal_assignment5909 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_GUARDED_in_concurrent_selected_signal_assignment5911 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_delay_mechanism_in_concurrent_selected_signal_assignment5914 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_selected_waveforms_in_concurrent_selected_signal_assignment5917 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_selected_signal_assignment5919 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_in_selected_waveform5937 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_selected_waveform5939 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choices_in_selected_waveform5941 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_waveform_in_selected_waveforms5963 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_selected_waveforms5967 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_selected_waveform_in_selected_waveforms5971 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_name_in_target5994 = createBitSet(0x0000000000000002L)
    private val FOLLOW_aggregate_in_target6001 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_component_instantiation_statement6030 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_component_instantiation_statement6035 = createBitSet(0x8000000400000000L,0x0000080000000000L)
    private val FOLLOW_ENTITY_in_component_instantiation_statement6043 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_component_instantiation_statement6047 = createBitSet(0x8000000400000000L,0x0000180000000000L)
    private val FOLLOW_LPAREN_in_component_instantiation_statement6050 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_component_instantiation_statement6054 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_component_instantiation_statement6056 = createBitSet(0x8000000400000000L,0x0000080000000000L)
    private val FOLLOW_CONFIGURATION_in_component_instantiation_statement6066 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_component_instantiation_statement6070 = createBitSet(0x8000000400000000L,0x0000080000000000L)
    private val FOLLOW_generic_map_aspect_in_component_instantiation_statement6078 = createBitSet(0x8000000000000000L,0x0000080000000000L)
    private val FOLLOW_port_map_aspect_in_component_instantiation_statement6082 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_component_instantiation_statement6085 = createBitSet(0x0000000000000002L)
    private val FOLLOW_for_generate_statement_in_generate_statement6104 = createBitSet(0x0000000000000002L)
    private val FOLLOW_if_generate_statement_in_generate_statement6112 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_case_generate_statement_in_generate_statement6122 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_for_generate_statement6140 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_for_generate_statement6144 = createBitSet(0x0000008000000000L)
    private val FOLLOW_IN_in_for_generate_statement6146 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_discrete_range_in_for_generate_statement6148 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_for_generate_statement6150 = createBitSet(0x48EC0069C8D87290L,0x60801038C4430017L,0x0080AE28360E0000L)
    private val FOLLOW_generate_statement_body_in_for_generate_statement6156 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_for_generate_statement6159 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_for_generate_statement6161 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_for_generate_statement6165 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_for_generate_statement6168 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_if_generate_statement6191 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_label_colon_in_if_generate_statement6198 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_if_generate_statement6204 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement6206 = createBitSet(0x48EC0069C8D87290L,0x60801038C4430017L,0x0080AE28360E0000L)
    private val FOLLOW_generate_statement_body_in_if_generate_statement6212 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSIF_in_if_generate_statement6221 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_label_colon_in_if_generate_statement6225 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_if_generate_statement6230 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement6232 = createBitSet(0x48EC0069C8D87290L,0x60801038C4430017L,0x0080AE28360E0000L)
    private val FOLLOW_generate_statement_body_in_if_generate_statement6238 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSE_in_if_generate_statement6250 = createBitSet(0x0000000200000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_label_colon_in_if_generate_statement6255 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement6258 = createBitSet(0x48EC0069C8D87290L,0x60801038C4430017L,0x0080AE28360E0000L)
    private val FOLLOW_generate_statement_body_in_if_generate_statement6264 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_if_generate_statement6277 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement6279 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_if_generate_statement6281 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_if_generate_statement6284 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_v2008_case_generate_statement6307 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_v2008_case_generate_statement6309 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_v2008_case_generate_statement6311 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_v2008_case_generate_statement6316 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_label_colon_in_v2008_case_generate_statement6318 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choices_in_v2008_case_generate_statement6321 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_v2008_case_generate_statement6323 = createBitSet(0x48EC0069C8D87290L,0x60801038C4430017L,0x0080AE28360E0000L)
    private val FOLLOW_generate_statement_body_in_v2008_case_generate_statement6327 = createBitSet(0x0000000008000000L,0x0000000200000000L)
    private val FOLLOW_END_in_v2008_case_generate_statement6334 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_v2008_case_generate_statement6336 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_case_generate_statement6338 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_case_generate_statement6341 = createBitSet(0x0000000000000002L)
    private val FOLLOW_block_declarative_item_in_generate_statement_body6368 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_sync_in_generate_statement_body6371 = createBitSet(0x40000049C0D06080L,0x00000000C4430012L,0x00000000060E0000L)
    private val FOLLOW_BEGIN_in_generate_statement_body6378 = createBitSet(0x08EC002008081210L,0x6080103800000005L,0x0080AE2830000000L)
    private val FOLLOW_concurrent_statement_list_in_generate_statement_body6386 = createBitSet(0x0000000008000002L)
    private val FOLLOW_END_in_generate_statement_body6392 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_generate_statement_body6394 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_generate_statement_body6397 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BREAK_in_ams_concurrent_break_statement6416 = createBitSet(0x0200000080000000L,0x0080080200000000L,0x0000202800000000L)
    private val FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement6418 = createBitSet(0x0200000000000000L,0x0000080200000000L)
    private val FOLLOW_ON_in_ams_concurrent_break_statement6422 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_list_in_ams_concurrent_break_statement6424 = createBitSet(0x0000000000000000L,0x0000080200000000L)
    private val FOLLOW_WHEN_in_ams_concurrent_break_statement6429 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_concurrent_break_statement6431 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_concurrent_break_statement6435 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement6453 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement6461 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement6469 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement6477 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement6485 = createBitSet(0x0000000000000002L)
    private val FOLLOW_label_colon_in_ams_simultaneous_statement_list6506 = createBitSet(0x08EC002000080210L,0x6080103000000000L,0x0080AE2820000000L)
    private val FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list6509 = createBitSet(0x08EC002000080212L,0x6080103000000000L,0x0080AE2820000000L)
    private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6535 = createBitSet(0x0000000000000000L,0x0000004000000000L)
    private val FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement6537 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6541 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000000000100000L)
    private val FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement6544 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_simple_simultaneous_statement6548 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement6552 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_ams_simultaneous_if_statement6578 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_ams_simultaneous_if_statement6582 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement6584 = createBitSet(0x08EC00200E080210L,0x6080103000000000L,0x0080AE2820000000L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6590 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSIF_in_ams_simultaneous_if_statement6596 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_ams_simultaneous_if_statement6600 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement6602 = createBitSet(0x08EC00200E080210L,0x6080103000000000L,0x0080AE2820000000L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6608 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSE_in_ams_simultaneous_if_statement6620 = createBitSet(0x08EC002008080210L,0x6080103000000000L,0x0080AE2820000000L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6626 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_ams_simultaneous_if_statement6631 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement6633 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_simultaneous_if_statement6635 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement6638 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_ams_simultaneous_case_statement6667 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_simultaneous_case_statement6669 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_case_statement6671 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_ams_simultaneous_case_statement6676 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choices_in_ams_simultaneous_case_statement6678 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_ams_simultaneous_case_statement6680 = createBitSet(0x08EC002008080210L,0x6080103200000000L,0x0080AE2820000000L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement6682 = createBitSet(0x0000000008000000L,0x0000000200000000L)
    private val FOLLOW_END_in_ams_simultaneous_case_statement6689 = createBitSet(0x0000000000080000L)
    private val FOLLOW_CASE_in_ams_simultaneous_case_statement6691 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_simultaneous_case_statement6693 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement6696 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement6721 = createBitSet(0x0000044900406080L,0x00000000C4410012L)
    private val FOLLOW_IS_in_ams_simultaneous_procedural_statement6723 = createBitSet(0x0000004900406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_ams_simultaneous_procedural_statement6728 = createBitSet(0x0000004900406080L,0x00000000C4410012L)
    private val FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement6732 = createBitSet(0x0000004900406080L,0x00000000C4410012L)
    private val FOLLOW_sync_in_ams_simultaneous_procedural_statement6735 = createBitSet(0x0000004900406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement6741 = createBitSet(0x00988020A8081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement6745 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_ams_simultaneous_procedural_statement6748 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000020000000L)
    private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement6750 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_ams_simultaneous_procedural_statement6754 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement6757 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item6775 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item6782 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item6789 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item6796 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item6803 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item6810 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item6817 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item6824 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item6831 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item6838 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item6845 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NULL_in_ams_simultaneous_null_statement6862 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement6864 = createBitSet(0x0000000000000002L)
    private val FOLLOW_sequential_statement_in_sequence_of_statements6886 = createBitSet(0x00988020A0081002L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_label_colon_in_sequential_statement6907 = createBitSet(0x00988020A0081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_wait_statement_in_sequential_statement6913 = createBitSet(0x0000000000000002L)
    private val FOLLOW_assertion_statement_in_sequential_statement6921 = createBitSet(0x0000000000000002L)
    private val FOLLOW_report_statement_in_sequential_statement6929 = createBitSet(0x0000000000000002L)
    private val FOLLOW_procedure_call_statement_in_sequential_statement6942 = createBitSet(0x0000000000000002L)
    private val FOLLOW_assignment_statement_in_sequential_statement6950 = createBitSet(0x0000000000000002L)
    private val FOLLOW_if_statement_in_sequential_statement6959 = createBitSet(0x0000000000000002L)
    private val FOLLOW_case_statement_in_sequential_statement6967 = createBitSet(0x0000000000000002L)
    private val FOLLOW_loop_statement_in_sequential_statement6975 = createBitSet(0x0000000000000002L)
    private val FOLLOW_next_statement_in_sequential_statement6983 = createBitSet(0x0000000000000002L)
    private val FOLLOW_exit_statement_in_sequential_statement6991 = createBitSet(0x0000000000000002L)
    private val FOLLOW_return_statement_in_sequential_statement6999 = createBitSet(0x0000000000000002L)
    private val FOLLOW_null_statement_in_sequential_statement7007 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_break_statement_in_sequential_statement7017 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WAIT_in_wait_statement7038 = createBitSet(0x0200000080000000L,0x0000080020000000L)
    private val FOLLOW_ON_in_wait_statement7041 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_list_in_wait_statement7043 = createBitSet(0x0000000080000000L,0x0000080020000000L)
    private val FOLLOW_UNTIL_in_wait_statement7048 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_wait_statement7050 = createBitSet(0x0000000080000000L,0x0000080000000000L)
    private val FOLLOW_FOR_in_wait_statement7055 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_wait_statement7057 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_wait_statement7061 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ASSERT_in_assertion_statement7082 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_assertion_statement7084 = createBitSet(0x0000000000000000L,0x0000080000008400L)
    private val FOLLOW_REPORT_in_assertion_statement7087 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_assertion_statement7091 = createBitSet(0x0000000000000000L,0x0000080000008000L)
    private val FOLLOW_SEVERITY_in_assertion_statement7096 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_assertion_statement7100 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_assertion_statement7104 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REPORT_in_report_statement7129 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_report_statement7133 = createBitSet(0x0000000000000000L,0x0000080000008000L)
    private val FOLLOW_SEVERITY_in_report_statement7136 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_report_statement7140 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_report_statement7144 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IN_in_force_mode7161 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OUT_in_force_mode7168 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_v2008_conditional_expressions7180 = createBitSet(0x0000000000000002L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_v2008_conditional_expressions7184 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_v2008_conditional_expressions7186 = createBitSet(0x0000000002000002L)
    private val FOLLOW_ELSE_in_v2008_conditional_expressions7190 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_expressions7192 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_v2008_selected_expression7214 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_v2008_selected_expression7216 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choices_in_v2008_selected_expression7218 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_selected_expression_in_v2008_selected_expressions7241 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_v2008_selected_expressions7246 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_selected_expression_in_v2008_selected_expressions7250 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_v2008_conditional_assignment_in_assignment_statement7283 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_selected_assignment_in_assignment_statement7297 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_assignment_in_assignment_statement7314 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_simple_assignment7333 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000000008L)
    private val FOLLOW_VAR_ASSIGN_in_simple_assignment7339 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_simple_assignment7341 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_LEQ_in_simple_assignment7349 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_delay_mechanism_in_simple_assignment7351 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_waveform_in_simple_assignment7354 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_simple_assignment7367 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_v2008_conditional_assignment7386 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000000008L)
    private val FOLLOW_LEQ_in_v2008_conditional_assignment7392 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE280000A800L)
    private val FOLLOW_RELEASE_in_v2008_conditional_assignment7399 = createBitSet(0x2000008000000000L,0x0000080000000000L)
    private val FOLLOW_force_mode_in_v2008_conditional_assignment7403 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_delay_mechanism_in_v2008_conditional_assignment7413 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_conditional_waveforms_in_v2008_conditional_assignment7416 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_FORCE_in_v2008_conditional_assignment7426 = createBitSet(0x28EC008000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_force_mode_in_v2008_conditional_assignment7430 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_assignment7433 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_VAR_ASSIGN_in_v2008_conditional_assignment7457 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_assignment7459 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_conditional_assignment7473 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WITH_in_v2008_selected_assignment7489 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_v2008_selected_assignment7491 = createBitSet(0x0000000000000000L,0x0000000000004000L)
    private val FOLLOW_SELECT_in_v2008_selected_assignment7493 = createBitSet(0x0088000000000000L,0x00C0100000000000L,0x0080AE2800000000L)
    private val FOLLOW_QMARK_in_v2008_selected_assignment7495 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_target_in_v2008_selected_assignment7498 = createBitSet(0x0000000000000000L,0x0000008000000000L,0x0000000000000008L)
    private val FOLLOW_LEQ_in_v2008_selected_assignment7506 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800002800L)
    private val FOLLOW_delay_mechanism_in_v2008_selected_assignment7513 = createBitSet(0x08EC011000000210L,0x608010300A000100L,0x0080AE2800000800L)
    private val FOLLOW_selected_waveforms_in_v2008_selected_assignment7516 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_FORCE_in_v2008_selected_assignment7525 = createBitSet(0x28EC008000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_force_mode_in_v2008_selected_assignment7527 = createBitSet(0x28EC008000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_selected_expressions_in_v2008_selected_assignment7532 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_VAR_ASSIGN_in_v2008_selected_assignment7548 = createBitSet(0x28EC008000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_v2008_selected_expressions_in_v2008_selected_assignment7552 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_v2008_selected_assignment7559 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TRANSPORT_in_delay_mechanism7580 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REJECT_in_delay_mechanism7588 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_delay_mechanism7590 = createBitSet(0x0000010000000000L)
    private val FOLLOW_INERTIAL_in_delay_mechanism7594 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_waveform_element7611 = createBitSet(0x0000000000000042L)
    private val FOLLOW_AFTER_in_waveform_element7614 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_waveform_element7618 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_element_in_waveform7646 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_waveform7650 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_waveform_element_in_waveform7654 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_UNAFFECTED_in_waveform7664 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_procedure_call_statement7684 = createBitSet(0x0000000000000000L,0x0000180000000000L)
    private val FOLLOW_LPAREN_in_procedure_call_statement7687 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_list_in_procedure_call_statement7689 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_procedure_call_statement7691 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_procedure_call_statement7695 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_if_statement7719 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_if_statement7723 = createBitSet(0x0000000000000000L,0x0000000000800000L)
    private val FOLLOW_THEN_in_if_statement7725 = createBitSet(0x00988020AE081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_if_statement7731 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSIF_in_if_statement7737 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_if_statement7741 = createBitSet(0x0000000000000000L,0x0000000000800000L)
    private val FOLLOW_THEN_in_if_statement7743 = createBitSet(0x00988020AE081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_if_statement7750 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSE_in_if_statement7763 = createBitSet(0x00988020A8081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_if_statement7770 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_if_statement7775 = createBitSet(0x0000002000000000L)
    private val FOLLOW_IF_in_if_statement7777 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_if_statement7779 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_if_statement7782 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_case_statement7806 = createBitSet(0x08EC000000000210L,0x60C0103000000000L,0x0080AE2800000800L)
    private val FOLLOW_QMARK_in_case_statement7813 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_case_statement7817 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_case_statement7819 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_case_statement7824 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choices_in_case_statement7826 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_case_statement7828 = createBitSet(0x00988020A8081000L,0x0080100F00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_case_statement7830 = createBitSet(0x0000000008000000L,0x0000000200000000L)
    private val FOLLOW_END_in_case_statement7837 = createBitSet(0x0000000000080000L)
    private val FOLLOW_CASE_in_case_statement7839 = createBitSet(0x0000000000000000L,0x0040080000000000L,0x0000002800000000L)
    private val FOLLOW_QMARK_in_case_statement7844 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_case_statement7848 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_case_statement7851 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WHILE_in_iteration_scheme7867 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_iteration_scheme7869 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_iteration_scheme7876 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_iteration_scheme7878 = createBitSet(0x0000008000000000L)
    private val FOLLOW_IN_in_iteration_scheme7880 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_discrete_range_in_iteration_scheme7882 = createBitSet(0x0000000000000002L)
    private val FOLLOW_iteration_scheme_in_loop_statement7908 = createBitSet(0x0000800000000000L)
    private val FOLLOW_LOOP_in_loop_statement7911 = createBitSet(0x00988020A8081000L,0x0080100D00000C00L,0x0080AE2810000000L)
    private val FOLLOW_sequence_of_statements_in_loop_statement7915 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_loop_statement7918 = createBitSet(0x0000800000000000L)
    private val FOLLOW_LOOP_in_loop_statement7920 = createBitSet(0x0000000000000000L,0x0000080000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_loop_statement7924 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_loop_statement7927 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEXT_in_next_statement7944 = createBitSet(0x0000000000000000L,0x0000080200000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_next_statement7946 = createBitSet(0x0000000000000000L,0x0000080200000000L)
    private val FOLLOW_WHEN_in_next_statement7950 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_next_statement7952 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_next_statement7956 = createBitSet(0x0000000000000002L)
    private val FOLLOW_EXIT_in_exit_statement7974 = createBitSet(0x0000000000000000L,0x0000080200000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_exit_statement7976 = createBitSet(0x0000000000000000L,0x0000080200000000L)
    private val FOLLOW_WHEN_in_exit_statement7980 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_exit_statement7982 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_exit_statement7986 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RETURN_in_return_statement8004 = createBitSet(0x08EC000000000210L,0x6080183000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_return_statement8006 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_return_statement8009 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NULL_in_null_statement8028 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_null_statement8030 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BREAK_in_ams_break_statement8047 = createBitSet(0x0000000080000000L,0x0080080200000000L,0x0000202800000000L)
    private val FOLLOW_ams_break_element_list_in_ams_break_statement8049 = createBitSet(0x0000000000000000L,0x0000080200000000L)
    private val FOLLOW_WHEN_in_ams_break_statement8053 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_break_statement8055 = createBitSet(0x0000000000000000L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_ams_break_statement8059 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_break_element_in_ams_break_element_list8081 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_ams_break_element_list8085 = createBitSet(0x0000000080000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_break_element_in_ams_break_element_list8089 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_FOR_in_ams_break_element8113 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_in_ams_break_element8117 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_break_element8119 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_in_ams_break_element8125 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_ams_break_element8127 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_break_element8131 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_constant_declaration_in_interface_element_generic8148 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_interface_type_declaration_in_interface_element_generic8164 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_generic8172 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_interface_package_declaration_in_interface_element_generic8180 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_port_in_interface_element_port8199 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_port8212 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_port8220 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_variable_or_constant_declaration_in_interface_element_procedure8240 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure8249 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_file_declaration_in_interface_element_procedure8256 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure8270 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure8278 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_constant_declaration_in_interface_element_function8299 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_function_in_interface_element_function8307 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_file_declaration_in_interface_element_function8314 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_function8328 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_function8336 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8363 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_parameter_interface_list_procedure8367 = createBitSet(0x0000000040400000L,0x0000000080020000L,0x00000028000C0000L)
    private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8371 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_interface_element_function_in_parameter_interface_list_function8400 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_SEMICOLON_in_parameter_interface_list_function8405 = createBitSet(0x0000000040400000L,0x0000000000020000L,0x00000028000C0000L)
    private val FOLLOW_interface_element_function_in_parameter_interface_list_function8409 = createBitSet(0x0000000000000002L,0x0000080000000000L)
    private val FOLLOW_VARIABLE_in_interface_variable_or_constant_declaration8430 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8432 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_variable_or_constant_declaration8434 = createBitSet(0x2000228000020000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_interface_mode_in_interface_variable_or_constant_declaration8436 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8439 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8442 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_variable_or_constant_declaration8444 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_interface_variable_or_constant_declaration8455 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8457 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_variable_or_constant_declaration8459 = createBitSet(0x0000008000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_IN_in_interface_variable_or_constant_declaration8461 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8464 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8467 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_variable_or_constant_declaration8469 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8481 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_variable_or_constant_declaration8483 = createBitSet(0x2000228000020000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_interface_mode_in_interface_variable_or_constant_declaration8485 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8488 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8491 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_variable_or_constant_declaration8493 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_interface_constant_declaration8517 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_constant_declaration8520 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_constant_declaration8522 = createBitSet(0x0000008000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_IN_in_interface_constant_declaration8524 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_constant_declaration8527 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_constant_declaration8530 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_constant_declaration8532 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_interface_signal_declaration_port8551 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_signal_declaration_port8554 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_signal_declaration_port8556 = createBitSet(0x2000228000020000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_interface_mode_in_interface_signal_declaration_port8558 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_signal_declaration_port8561 = createBitSet(0x0000000000040002L,0x0000008000000000L)
    private val FOLLOW_BUS_in_interface_signal_declaration_port8563 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_port8567 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_signal_declaration_port8569 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_interface_signal_declaration_procedure8588 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_signal_declaration_procedure8590 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_signal_declaration_procedure8592 = createBitSet(0x2000228000020000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_interface_mode_in_interface_signal_declaration_procedure8594 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_signal_declaration_procedure8597 = createBitSet(0x0000000000040002L,0x0000008000000000L)
    private val FOLLOW_BUS_in_interface_signal_declaration_procedure8599 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure8603 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_signal_declaration_procedure8605 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_interface_signal_declaration_function8625 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_signal_declaration_function8627 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_signal_declaration_function8629 = createBitSet(0x0000008000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_IN_in_interface_signal_declaration_function8631 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_signal_declaration_function8634 = createBitSet(0x0000000000040002L,0x0000008000000000L)
    private val FOLLOW_BUS_in_interface_signal_declaration_function8636 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function8640 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_interface_signal_declaration_function8642 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IN_in_interface_mode8661 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OUT_in_interface_mode8668 = createBitSet(0x0000000000000002L)
    private val FOLLOW_INOUT_in_interface_mode8675 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BUFFER_in_interface_mode8682 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LINKAGE_in_interface_mode8689 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_interface_file_declaration8704 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_interface_file_declaration8706 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_interface_file_declaration8708 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_interface_file_declaration8710 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_ams_interface_terminal_declaration8728 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_ams_interface_terminal_declaration8730 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_ams_interface_terminal_declaration8732 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration8734 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_interface_quantity_declaration8750 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_list_in_ams_interface_quantity_declaration8752 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_ams_interface_quantity_declaration8754 = createBitSet(0x2000008000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_IN_in_ams_interface_quantity_declaration8757 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_OUT_in_ams_interface_quantity_declaration8761 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_ams_interface_quantity_declaration8765 = createBitSet(0x0000000000000002L,0x0000008000000000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration8768 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_ams_interface_quantity_declaration8770 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TYPE_in_v2008_interface_type_declaration8790 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_interface_type_declaration8792 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IS_in_v2008_interface_subprogram_default8807 = createBitSet(0x0000000000000000L,0x0000010000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_v2008_interface_subprogram_default8810 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BOX_in_v2008_interface_subprogram_default8815 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_v2008_interface_subprogram_declaration8831 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_interface_subprogram_declaration8833 = createBitSet(0x0000040000000002L,0x0000100000000000L,0x0000000000004000L)
    private val FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration8839 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration8842 = createBitSet(0x0000000040400000L,0x0000000080020000L,0x00000028000C0000L)
    private val FOLLOW_parameter_interface_list_procedure_in_v2008_interface_subprogram_declaration8844 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration8846 = createBitSet(0x0000040000000002L)
    private val FOLLOW_v2008_interface_subprogram_default_in_v2008_interface_subprogram_declaration8850 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PURE_in_v2008_interface_subprogram_declaration8861 = createBitSet(0x0000000100000000L)
    private val FOLLOW_IMPURE_in_v2008_interface_subprogram_declaration8865 = createBitSet(0x0000000100000000L)
    private val FOLLOW_FUNCTION_in_v2008_interface_subprogram_declaration8869 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_designator_in_v2008_interface_subprogram_declaration8871 = createBitSet(0x0000000000000000L,0x0000100000000800L,0x0000000000004000L)
    private val FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration8877 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration8880 = createBitSet(0x0000000040400000L,0x0000000000020000L,0x00000028000C0000L)
    private val FOLLOW_parameter_interface_list_function_in_v2008_interface_subprogram_declaration8882 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration8884 = createBitSet(0x0000000000000000L,0x0000000000000800L)
    private val FOLLOW_RETURN_in_v2008_interface_subprogram_declaration8888 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_v2008_interface_subprogram_declaration8890 = createBitSet(0x0000040000000002L)
    private val FOLLOW_v2008_interface_subprogram_default_in_v2008_interface_subprogram_declaration8892 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_v2008_interface_package_declaration8912 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_interface_package_declaration8914 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_v2008_interface_package_declaration8916 = createBitSet(0x0008000000000000L)
    private val FOLLOW_NEW_in_v2008_interface_package_declaration8918 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_v2008_interface_package_declaration8920 = createBitSet(0x0000000400000000L)
    private val FOLLOW_GENERIC_in_v2008_interface_package_declaration8924 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_v2008_interface_package_declaration8926 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_v2008_interface_package_declaration8928 = createBitSet(0x0CEC010000000210L,0x6080113000000000L,0x0080AE2800010800L)
    private val FOLLOW_association_list_in_v2008_interface_package_declaration8931 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_BOX_in_v2008_interface_package_declaration8935 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_DEFAULT_in_v2008_interface_package_declaration8939 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_v2008_interface_package_declaration8942 = createBitSet(0x0000000000000002L)
    private val FOLLOW_formal_part_in_association_element8965 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_association_element8967 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_actual_part_in_association_element8971 = createBitSet(0x0000000000000002L)
    private val FOLLOW_association_element_in_association_list8998 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_association_list9003 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_element_in_association_list9007 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_identifier_in_formal_part9029 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_formal_part9036 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_name_association_list_part_in_formal_part9043 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_slice_part_in_formal_part9047 = createBitSet(0x0000000000000002L)
    private val FOLLOW_INERTIAL_in_actual_part9070 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_actual_part9074 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OPEN_in_actual_part9084 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_condition9103 = createBitSet(0x0000000000000002L)
    private val FOLLOW_logical_expression_in_expression9120 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONDITION_OPERATOR_in_expression9131 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_primary_in_expression9133 = createBitSet(0x0000000000000002L)
    private val FOLLOW_relation_in_logical_expression9154 = createBitSet(0x0824000000000202L,0x0000003000000000L)
    private val FOLLOW_NAND_in_logical_expression9166 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_relation_in_logical_expression9170 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOR_in_logical_expression9180 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_relation_in_logical_expression9184 = createBitSet(0x0000000000000002L)
    private val FOLLOW_logical_operator_in_logical_expression9197 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_relation_in_logical_expression9201 = createBitSet(0x0800000000000202L,0x0000003000000000L)
    private val FOLLOW_AND_in_logical_operator9225 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OR_in_logical_operator9232 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XOR_in_logical_operator9239 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XNOR_in_logical_operator9246 = createBitSet(0x0000000000000002L)
    private val FOLLOW_shift_expression_in_relation9271 = createBitSet(0x0000000000000002L,0x8000000000000000L,0x00000000000007FFL)
    private val FOLLOW_relational_operator_in_relation9277 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_shift_expression_in_relation9281 = createBitSet(0x0000000000000002L)
    private val FOLLOW_EQ_in_relational_operator9302 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEQ_in_relational_operator9309 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LT_in_relational_operator9316 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LEQ_in_relational_operator9323 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GT_in_relational_operator9330 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GEQ_in_relational_operator9337 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MEQ_in_relational_operator9348 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MNEQ_in_relational_operator9357 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MLT_in_relational_operator9366 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MLEQ_in_relational_operator9375 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MGT_in_relational_operator9384 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MGEQ_in_relational_operator9393 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_shift_expression9420 = createBitSet(0x0000000000000002L,0x00000000003C3000L)
    private val FOLLOW_shift_operator_in_shift_expression9426 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_simple_expression_in_shift_expression9430 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SLL_in_shift_operator9451 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SRL_in_shift_operator9458 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SLA_in_shift_operator9465 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SRA_in_shift_operator9472 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ROL_in_shift_operator9479 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ROR_in_shift_operator9486 = createBitSet(0x0000000000000002L)
    private val FOLLOW_sign_in_simple_expression9509 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_term_in_simple_expression9514 = createBitSet(0x0000000000000002L,0x6004000000000000L)
    private val FOLLOW_adding_operator_in_simple_expression9523 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_term_in_simple_expression9527 = createBitSet(0x0000000000000002L,0x6004000000000000L)
    private val FOLLOW_PLUS_in_sign9548 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MINUS_in_sign9555 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PLUS_in_adding_operator9578 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MINUS_in_adding_operator9585 = createBitSet(0x0000000000000002L)
    private val FOLLOW_AMPERSAND_in_adding_operator9592 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MUL_in_multiplying_operator9611 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DIV_in_multiplying_operator9618 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MOD_in_multiplying_operator9625 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REM_in_multiplying_operator9632 = createBitSet(0x0000000000000002L)
    private val FOLLOW_factor_in_term9652 = createBitSet(0x0002000000000002L,0x1800000000000200L)
    private val FOLLOW_multiplying_operator_in_term9659 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_factor_in_term9663 = createBitSet(0x0002000000000002L,0x1800000000000200L)
    private val FOLLOW_ABS_in_factor_operator9685 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOT_in_factor_operator9692 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NAND_in_factor_operator9702 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOR_in_factor_operator9711 = createBitSet(0x0000000000000002L)
    private val FOLLOW_AND_in_factor_operator9720 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OR_in_factor_operator9729 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XOR_in_factor_operator9738 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XNOR_in_factor_operator9747 = createBitSet(0x0000000000000002L)
    private val FOLLOW_primary_in_factor9773 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_DOUBLESTAR_in_factor9776 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_primary_in_factor9780 = createBitSet(0x0000000000000002L)
    private val FOLLOW_factor_operator_in_factor9789 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_primary_in_factor9791 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_primary9809 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_qualified_expression_in_primary9811 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_primary9819 = createBitSet(0x0000000000000002L)
    private val FOLLOW_literal_in_primary9826 = createBitSet(0x0000000000000002L)
    private val FOLLOW_allocator_in_primary9834 = createBitSet(0x0000000000000002L)
    private val FOLLOW_aggregate_in_primary9841 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEW_in_allocator9857 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_allocator9859 = createBitSet(0x0000000000000002L,0x0000100000000000L,0x0000100000000000L)
    private val FOLLOW_qualified_expression_in_allocator9865 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_allocator9875 = createBitSet(0x0000000000000002L)
    private val FOLLOW_APOSTROPHE_in_qualified_expression9898 = createBitSet(0x0088000000000000L,0x0080100000000000L,0x0080AE2800000000L)
    private val FOLLOW_aggregate_in_qualified_expression9900 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_selected_name_list9922 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_selected_name_list9927 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_selected_name_list9931 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_name_prefix_in_selected_name9957 = createBitSet(0x0000000000000002L,0x0002000000000000L)
    private val FOLLOW_name_selected_part_in_selected_name9961 = createBitSet(0x0000000000000002L,0x0002000000000000L)
    private val FOLLOW_name_in_name_list9987 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_name_list9992 = createBitSet(0x0000000000000000L,0x0080000000000000L,0x0000202800000000L)
    private val FOLLOW_name_in_name_list9996 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_name_prefix_in_name10023 = createBitSet(0x0000000000000002L,0x0002500000000000L,0x0000100000000000L)
    private val FOLLOW_name_part_in_name10026 = createBitSet(0x0000000000000002L,0x0002500000000000L,0x0000100000000000L)
    private val FOLLOW_v2008_external_name_in_name10039 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_name_prefix10053 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_name_prefix10061 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_selected_part_in_name_part10077 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_attribute_part_in_name_part10084 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_association_list_part_in_name_part10095 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_slice_part_in_name_part10102 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DOT_in_name_selected_part10125 = createBitSet(0x0000000000000100L,0x0000000000000000L,0x0080202800000000L)
    private val FOLLOW_identifier_in_name_selected_part10130 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_name_selected_part10136 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_name_selected_part10143 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_name_selected_part10149 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_name_association_list_part10166 = createBitSet(0x0CEC010000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_association_list_in_name_association_list_part10168 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_name_association_list_part10170 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_name_slice_part10189 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_discrete_range_in_name_slice_part10191 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_name_slice_part10193 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signature_in_name_attribute_part10209 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_APOSTROPHE_in_name_attribute_part10212 = createBitSet(0x0000000000000000L,0x0000000000000020L,0x0000002808700000L)
    private val FOLLOW_identifier_in_name_attribute_part10217 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_RANGE_in_name_attribute_part10219 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_TOLERANCE_in_name_attribute_part10224 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_ACROSS_in_name_attribute_part10229 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_THROUGH_in_name_attribute_part10233 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_REFERENCE_in_name_attribute_part10238 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_name_attribute_part10251 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_name_attribute_part10255 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_name_attribute_part10260 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_name_attribute_part10262 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_name_attribute_part10266 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LBRACKET_in_signature10285 = createBitSet(0x0000000000000000L,0x0000800000000800L,0x0000202800000000L)
    private val FOLLOW_selected_name_list_in_signature10287 = createBitSet(0x0000000000000000L,0x0000800000000800L)
    private val FOLLOW_RETURN_in_signature10291 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_type_mark_in_signature10293 = createBitSet(0x0000000000000000L,0x0000800000000000L)
    private val FOLLOW_RBRACKET_in_signature10297 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DLT_in_v2008_external_name10310 = createBitSet(0x0000000000400000L,0x0000000080020000L)
    private val FOLLOW_set_in_v2008_external_name10312 = createBitSet(0x0000000000000000L,0x0222000000000000L,0x0000002800000000L)
    private val FOLLOW_v2008_external_pathname_in_v2008_external_name10320 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_v2008_external_name10322 = createBitSet(0x0000000000000000L,0x0000100000000000L,0x0000202800000000L)
    private val FOLLOW_subtype_indication_in_v2008_external_name10324 = createBitSet(0x0000000000000000L,0x0100000000000000L)
    private val FOLLOW_DGT_in_v2008_external_name10326 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_absolute_pathname_in_v2008_external_pathname10337 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_relative_pathname_in_v2008_external_pathname10341 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_package_pathname_in_v2008_external_pathname10345 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DOT_in_v2008_absolute_pathname10355 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_v2008_pathname_element_in_v2008_absolute_pathname10358 = createBitSet(0x0000000000000000L,0x0002000000000000L)
    private val FOLLOW_DOT_in_v2008_absolute_pathname10360 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_absolute_pathname10366 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CIRCUMFLEX_in_v2008_relative_pathname10377 = createBitSet(0x0000000000000000L,0x0002000000000000L)
    private val FOLLOW_DOT_in_v2008_relative_pathname10379 = createBitSet(0x0000000000000000L,0x0200000000000000L,0x0000002800000000L)
    private val FOLLOW_v2008_pathname_element_in_v2008_relative_pathname10384 = createBitSet(0x0000000000000000L,0x0002000000000000L)
    private val FOLLOW_DOT_in_v2008_relative_pathname10386 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_relative_pathname10392 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_v2008_pathname_element10407 = createBitSet(0x0000000000000002L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_v2008_pathname_element10410 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_v2008_pathname_element10414 = createBitSet(0x0000000000000000L,0x0000200000000000L)
    private val FOLLOW_RPAREN_in_v2008_pathname_element10416 = createBitSet(0x0000000000000002L)
    private val FOLLOW_AT_in_v2008_package_pathname10429 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_package_pathname10433 = createBitSet(0x0000000000000000L,0x0002000000000000L)
    private val FOLLOW_DOT_in_v2008_package_pathname10435 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_package_pathname10440 = createBitSet(0x0000000000000000L,0x0002000000000000L)
    private val FOLLOW_DOT_in_v2008_package_pathname10442 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_package_pathname10448 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REAL_LITERAL_in_literal10470 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_INTEGER_LITERAL_in_literal10478 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_BASED_LITERAL_in_literal10486 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_CHARACTER_LITERAL_in_literal10494 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_BIT_STRING_LITERAL_in_literal10505 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_NULL_in_literal10513 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_literal10528 = createBitSet(0x0000000000000002L)
    private val FOLLOW_INTEGER_LITERAL_in_physical_literal10554 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_REAL_LITERAL_in_physical_literal10562 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_BASED_LITERAL_in_physical_literal10570 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_physical_literal10577 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choices_in_element_association10603 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_element_association10605 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_element_association10610 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_aggregate10631 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_element_association_in_aggregate10635 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_COMMA_in_aggregate10639 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_element_association_in_aggregate10643 = createBitSet(0x0000000000000000L,0x0000240000000000L)
    private val FOLLOW_RPAREN_in_aggregate10649 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_choice10690 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_choice10717 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_choice10724 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OTHERS_in_choice10731 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choice_in_choices10752 = createBitSet(0x0000000000000002L,0x0008000000000000L)
    private val FOLLOW_BAR_in_choices10757 = createBitSet(0x18EC000000000210L,0x6080103000000000L,0x0080AE2800000000L)
    private val FOLLOW_choice_in_choices10761 = createBitSet(0x0000000000000002L,0x0008000000000000L)
    private val FOLLOW_identifier_in_identifier_list10792 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_COMMA_in_identifier_list10797 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_identifier_list10801 = createBitSet(0x0000000000000002L,0x0000040000000000L)
    private val FOLLOW_set_in_identifier10828 = createBitSet(0x0000000000000002L)
    private val FOLLOW_APOSTROPHE_in_v2008_tool_directive10847 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000002800000000L)
    private val FOLLOW_identifier_in_v2008_tool_directive10849 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000001000000000L)
    private val FOLLOW_GRAPHIC_CHARACTER_in_v2008_tool_directive10851 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000001000000000L)
    private val FOLLOW_identifier_in_label_colon10865 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_COLON_in_label_colon10867 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_synpred1_Parser930 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_synpred2_Parser974 = createBitSet(0x0000000000000000L,0x0000100000000000L)
    private val FOLLOW_LPAREN_in_synpred2_Parser976 = createBitSet(0x0000000000000002L)
    private val FOLLOW_v2008_resolution_indication_in_synpred3_Parser4410 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000202800000000L)
    private val FOLLOW_selected_name_in_synpred3_Parser4412 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_synpred4_Parser4601 = createBitSet(0x0000000001000000L,0x0000000001000000L)
    private val FOLLOW_direction_in_synpred4_Parser4603 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_indication_in_synpred5_Parser4769 = createBitSet(0x0000800200000000L,0x00182C0000000000L)
    private val FOLLOW_set_in_synpred5_Parser4771 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_synpred6_Parser4880 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_synpred6_Parser4885 = createBitSet(0x8000000400000000L)
    private val FOLLOW_set_in_synpred6_Parser4887 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_synpred6_Parser4895 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ENTITY_in_synpred6_Parser4900 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_synpred6_Parser4904 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BLOCK_in_synpred6_Parser4908 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_synpred6_Parser4912 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_label_colon_in_synpred6_Parser4917 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_condition_in_synpred6_Parser4921 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_synpred6_Parser4923 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_synpred6_Parser4927 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_synpred6_Parser4934 = createBitSet(0x08EC000000000210L,0x6080103000000000L,0x0080AE2800000800L)
    private val FOLLOW_expression_in_synpred6_Parser4936 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_synpred6_Parser4938 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_synpred7_Parser5034 = createBitSet(0x0000000000000000L,0x0000004000000000L)
    private val FOLLOW_AMS_ASSIGN_in_synpred7_Parser5036 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_synpred7_Parser5041 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURAL_in_synpred7_Parser5045 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_synpred7_Parser5049 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NULL_in_synpred7_Parser5053 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_procedure_call_statement_in_synpred8_Parser5097 = createBitSet(0x0000000000000002L)
    private val FOLLOW_procedure_call_statement_in_synpred9_Parser6938 = createBitSet(0x0000000000000002L)
    private val FOLLOW_formal_part_in_synpred10_Parser8960 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_synpred10_Parser8962 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_association_list_part_in_synpred11_Parser9040 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_association_list_part_in_synpred12_Parser10092 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_synpred13_Parser10247 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choices_in_synpred14_Parser10597 = createBitSet(0x0000000000000000L,0x0010000000000000L)
    private val FOLLOW_ARROW_in_synpred14_Parser10599 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_synpred15_Parser10671 = createBitSet(0x0000000000000000L,0x00180C0000000000L)
    private val FOLLOW_set_in_synpred15_Parser10673 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_synpred16_Parser10698 = createBitSet(0x0000000000000000L,0x00180C0000000000L)
    private val FOLLOW_set_in_synpred16_Parser10700 = createBitSet(0x0000000000000002L)


    final class generate_statement_body_return extends ParserRuleReturnScope {
        var declarativeItems: Seq[DeclarativeItem] = _
        var statementList: Seq[ConcurrentStatement] = _
        var endLabel: Identifier = _
    }
    final class logical_operator_return extends ParserRuleReturnScope {
        var logOp: LogicalExpression.Operator.Value = _
        var pos: Position = _
    }
    final class relational_operator_return extends ParserRuleReturnScope {
        var relOp: Relation.Operator.Value = _
        var pos: Position = _
    }
    final class shift_operator_return extends ParserRuleReturnScope {
        var shiftOp: ShiftExpression.Operator.Value = _
        var pos: Position = _
    }
    final class sign_return extends ParserRuleReturnScope {
        var signOp: SimpleExpression.SignOperator.Value = _
        var pos: Position = _
    }
    final class adding_operator_return extends ParserRuleReturnScope {
        var addOp: SimpleExpression.AddOperator.Value = _
        var pos: Position = _
    }
    final class multiplying_operator_return extends ParserRuleReturnScope {
        var mulOp: Term.Operator.Value = _
        var pos: Position = _
    }
    final class factor_operator_return extends ParserRuleReturnScope {
        var factorOp: Factor.Operator.Value = _
        var pos: Position = _
    }


}
              
class Parser(input: TokenStream, state: RecognizerSharedState) extends AbstractParser(input, state) {
    import Parser._
    // delegates
    // delegators


        def this(input: TokenStream) =
            this(input, new RecognizerSharedState())

            this.state.ruleMemo = new Array[java.util.Map[_,_]](245+1)
             
             
        

    override val getTokenNames = tokenNames
    override val getGrammarFileName = ".\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g"



    // $ANTLR start "sync"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:60:1: sync[String message] : ;
    @throws(classOf[RecognitionException])
    final def sync(message: String): Unit = {
        val sync_StartIndex = input.index()

            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            val startToken=input.LT(1)
            syncToSet()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:77:2: ()
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:77:3: 


            if ( state.backtracking==0 ) {

              	// If we consume any tokens at this point then we create an error.
              	if (startToken ne input.LT(1)) {
              		syntaxErrorList += new CompilerMessage(position=toPosition(startToken),message="garbled " + message)
              	}

            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, sync_StartIndex) }
        }
        return 
    }
    // $ANTLR end "sync"


    // $ANTLR start "design_file"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:81:1: design_file returns [DesignFile designFile] : ( design_unit )+ EOF ;
    @throws(classOf[RecognitionException])
    final def design_file(): DesignFile = {
        var designFile : DesignFile = null
        val design_file_StartIndex = input.index()
        var design_unit1: DesignUnit = null



        	val units=new Buffer[DesignUnit]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return designFile }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:84:3: ( ( design_unit )+ EOF )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:85:2: ( design_unit )+ EOF
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:85:2: ( design_unit )+
            	var cnt1 = 0
            	var loop1_quitflag = false
            	while (!loop1_quitflag) {
            	    val alt1 = {
            	val LA1_0 = input.LA(1)

            	if ( (LA1_0==ARCHITECTURE||LA1_0==CONFIGURATION||LA1_0==ENTITY||LA1_0==LIBRARY||LA1_0==PACKAGE||LA1_0==USE||LA1_0==CONTEXT) ) 1

            	else -1
            	}
            	    alt1 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:85:3: design_unit
            		    	pushFollow(FOLLOW_design_unit_in_design_file87)
            		    	design_unit1=design_unit()

            		    	state._fsp-=1
            		    	if (state.failed) return designFile
            		    	if ( state.backtracking==0 ) {
            		    	  units += design_unit1
            		    	}


            		case _ =>
            		    if ( cnt1 >= 1 ) loop1_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return designFile}
            	            val eee = new EarlyExitException(1, input)
            	            throw eee
            	      }
            	    }
            	    cnt1+=1
            	}

            	`match`(input,EOF,FOLLOW_EOF_in_design_file92)
            	if (state.failed) return designFile
            	if ( state.backtracking==0 ) {
            	  designFile=new DesignFile(units.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, design_file_StartIndex) }
        }
        return designFile
    }
    // $ANTLR end "design_file"


    // $ANTLR start "context_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:88:1: context_item returns [ContextItem contextItem] : ( library_clause | use_clause | {...}? => v2008_context_reference );
    @throws(classOf[RecognitionException])
    final def context_item(): ContextItem = {
        var contextItem : ContextItem = null
        val context_item_StartIndex = input.index()
        var library_clause2: LibraryClause = null
        var use_clause3: UseClause = null
        var v2008_context_reference4: ContextReference = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return contextItem }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:88:48: ( library_clause | use_clause | {...}? => v2008_context_reference )
            val alt2 = {
            val LA2_0 = input.LA(1)

            if ( (LA2_0==LIBRARY) ) 1
            else if ( (LA2_0==USE) ) 2
            else if ( (LA2_0==CONTEXT) && ((vhdl2008))) 3
            else {
                if (state.backtracking>0) {state.failed=true; return contextItem}
                val nvae = new NoViableAltException("", 2, 0, input)

                throw nvae
            }
            }
            alt2 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:89:2: library_clause
                    	pushFollow(FOLLOW_library_clause_in_context_item108)
                    	library_clause2=library_clause()

                    	state._fsp-=1
                    	if (state.failed) return contextItem
                    	if ( state.backtracking==0 ) {
                    	  contextItem = library_clause2
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:90:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_context_item115)
                    	use_clause3=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return contextItem
                    	if ( state.backtracking==0 ) {
                    	  contextItem = use_clause3
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:91:4: {...}? => v2008_context_reference
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return contextItem}
                    	    throw new FailedPredicateException(input, "context_item", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_context_reference_in_context_item124)
                    	v2008_context_reference4=v2008_context_reference()

                    	state._fsp-=1
                    	if (state.failed) return contextItem
                    	if ( state.backtracking==0 ) {
                    	  contextItem = v2008_context_reference4
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, context_item_StartIndex) }
        }
        return contextItem
    }
    // $ANTLR end "context_item"


    // $ANTLR start "context_items"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:93:1: context_items returns [Seq[ContextItem] contextItems] : ( context_item )* ;
    @throws(classOf[RecognitionException])
    final def context_items(): Seq[ContextItem] = {
        var contextItems : Seq[ContextItem] = null
        val context_items_StartIndex = input.index()
        var context_item5: ContextItem = null



        	val items=new Buffer[ContextItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return contextItems }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:96:3: ( ( context_item )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:97:2: ( context_item )*
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:97:2: ( context_item )*
            	var loop3_quitflag = false
            	while (!loop3_quitflag) {
            	    val alt3 = {
            	val LA3_0 = input.LA(1)

            	if ( (LA3_0==CONTEXT) ) {
            	val LA3_2 = input.LA(2)

            	if ( (LA3_2==BASIC_IDENTIFIER||LA3_2==EXTENDED_IDENTIFIER) ) {
            	val LA3_4 = input.LA(3)

            	if ( ((LA3_4>=COMMA && LA3_4<=SEMICOLON)||LA3_4==DOT) && ((vhdl2008))) 1

            	else -1
            	}
            	else if ( (LA3_2==STRING_LITERAL) && ((vhdl2008))) 1

            	else -1
            	}
            	else if ( (LA3_0==LIBRARY||LA3_0==USE) ) 1

            	else -1
            	}
            	    alt3 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:97:3: context_item
            		    	pushFollow(FOLLOW_context_item_in_context_items147)
            		    	context_item5=context_item()

            		    	state._fsp-=1
            		    	if (state.failed) return contextItems
            		    	if ( state.backtracking==0 ) {
            		    	  items += context_item5
            		    	}


            		case _ => loop3_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  contextItems=items.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, context_items_StartIndex) }
        }
        return contextItems
    }
    // $ANTLR end "context_items"


    // $ANTLR start "design_unit"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:99:1: design_unit returns [DesignUnit designUnit] : context_items library_unit ;
    @throws(classOf[RecognitionException])
    final def design_unit(): DesignUnit = {
        var designUnit : DesignUnit = null
        val design_unit_StartIndex = input.index()
        var context_items6: Seq[ContextItem] = null
        var library_unit7: LibraryUnit = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return designUnit }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:99:45: ( context_items library_unit )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:100:2: context_items library_unit
            	pushFollow(FOLLOW_context_items_in_design_unit166)
            	context_items6=context_items()

            	state._fsp-=1
            	if (state.failed) return designUnit
            	pushFollow(FOLLOW_library_unit_in_design_unit168)
            	library_unit7=library_unit()

            	state._fsp-=1
            	if (state.failed) return designUnit
            	if ( state.backtracking==0 ) {
            	  designUnit=new DesignUnit(context_items6,library_unit7)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, design_unit_StartIndex) }
        }
        return designUnit
    }
    // $ANTLR end "design_unit"


    // $ANTLR start "library_unit"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:103:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration );
    @throws(classOf[RecognitionException])
    final def library_unit(): LibraryUnit = {
        var libraryUnit : LibraryUnit = null
        val library_unit_StartIndex = input.index()
        var entity_declaration8: EntityDeclaration = null
        var architecture_body9: ArchitectureDeclaration = null
        var package_declaration10: PackageDeclaration = null
        var package_body11: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration12: PackageInstantiationDeclaration = null
        var v2008_context_declaration13: ContextDeclaration = null
        var configuration_declaration14: ConfigurationDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return libraryUnit }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:103:48: ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration )
            val alt4 = dfa4.predict(input)
            alt4 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:104:2: entity_declaration
                    	pushFollow(FOLLOW_entity_declaration_in_library_unit186)
                    	entity_declaration8=entity_declaration()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=entity_declaration8
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:105:4: architecture_body
                    	pushFollow(FOLLOW_architecture_body_in_library_unit193)
                    	architecture_body9=architecture_body()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=architecture_body9
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:106:4: package_declaration
                    	pushFollow(FOLLOW_package_declaration_in_library_unit200)
                    	package_declaration10=package_declaration()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=package_declaration10
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:107:4: package_body
                    	pushFollow(FOLLOW_package_body_in_library_unit207)
                    	package_body11=package_body()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=package_body11
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:108:4: {...}? => v2008_package_instantiation_declaration
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return libraryUnit}
                    	    throw new FailedPredicateException(input, "library_unit", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_library_unit216)
                    	v2008_package_instantiation_declaration12=v2008_package_instantiation_declaration()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=v2008_package_instantiation_declaration12
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:109:4: {...}? => v2008_context_declaration
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return libraryUnit}
                    	    throw new FailedPredicateException(input, "library_unit", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_context_declaration_in_library_unit225)
                    	v2008_context_declaration13=v2008_context_declaration()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=v2008_context_declaration13
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:110:4: configuration_declaration
                    	pushFollow(FOLLOW_configuration_declaration_in_library_unit232)
                    	configuration_declaration14=configuration_declaration()

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=configuration_declaration14
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, library_unit_StartIndex) }
        }
        return libraryUnit
    }
    // $ANTLR end "library_unit"


    // $ANTLR start "library_clause"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:114:1: library_clause returns [LibraryClause libraryClause] : LIBRARY identifier_list SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def library_clause(): LibraryClause = {
        var libraryClause : LibraryClause = null
        val library_clause_StartIndex = input.index()
        var LIBRARY15: Token = null
        var identifier_list16: Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return libraryClause }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:114:54: ( LIBRARY identifier_list SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:115:2: LIBRARY identifier_list SEMICOLON
            	LIBRARY15=`match`(input,LIBRARY,FOLLOW_LIBRARY_in_library_clause253).asInstanceOf[Token]
            	if (state.failed) return libraryClause
            	pushFollow(FOLLOW_identifier_list_in_library_clause255)
            	identifier_list16=identifier_list()

            	state._fsp-=1
            	if (state.failed) return libraryClause
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_library_clause257)
            	if (state.failed) return libraryClause
            	if ( state.backtracking==0 ) {
            	  libraryClause = new LibraryClause(LIBRARY15,identifier_list16)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, library_clause_StartIndex) }
        }
        return libraryClause
    }
    // $ANTLR end "library_clause"


    // $ANTLR start "v2008_context_reference"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:117:1: v2008_context_reference returns [ContextReference contextReference] : CONTEXT selected_name_list SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_context_reference(): ContextReference = {
        var contextReference : ContextReference = null
        val v2008_context_reference_StartIndex = input.index()
        var CONTEXT17: Token = null
        var selected_name_list18: Seq[SelectedName] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return contextReference }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:117:69: ( CONTEXT selected_name_list SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:118:2: CONTEXT selected_name_list SEMICOLON
            	CONTEXT17=`match`(input,CONTEXT,FOLLOW_CONTEXT_in_v2008_context_reference273).asInstanceOf[Token]
            	if (state.failed) return contextReference
            	pushFollow(FOLLOW_selected_name_list_in_v2008_context_reference275)
            	selected_name_list18=selected_name_list()

            	state._fsp-=1
            	if (state.failed) return contextReference
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_context_reference277)
            	if (state.failed) return contextReference
            	if ( state.backtracking==0 ) {
            	  contextReference = new ContextReference(CONTEXT17,selected_name_list18)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, v2008_context_reference_StartIndex) }
        }
        return contextReference
    }
    // $ANTLR end "v2008_context_reference"


    // $ANTLR start "generic_clause"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:121:1: generic_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : GENERIC LPAREN generic_interface_list RPAREN ;
    @throws(classOf[RecognitionException])
    final def generic_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val generic_clause_StartIndex = input.index()
        var generic_interface_list19: Seq[InterfaceList.AbstractInterfaceElement] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:121:76: ( GENERIC LPAREN generic_interface_list RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:122:2: GENERIC LPAREN generic_interface_list RPAREN
            	`match`(input,GENERIC,FOLLOW_GENERIC_in_generic_clause293)
            	if (state.failed) return list
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_generic_clause295)
            	if (state.failed) return list
            	pushFollow(FOLLOW_generic_interface_list_in_generic_clause297)
            	generic_interface_list19=generic_interface_list()

            	state._fsp-=1
            	if (state.failed) return list
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_generic_clause299)
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  list = generic_interface_list19
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, generic_clause_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_clause"


    // $ANTLR start "generic_interface_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:125:1: generic_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= interface_element_generic ( SEMICOLON decl2= interface_element_generic )* ;
    @throws(classOf[RecognitionException])
    final def generic_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val generic_interface_list_StartIndex = input.index()
        var decl1: InterfaceList.AbstractInterfaceElement = null
        var decl2: InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:128:3: (decl1= interface_element_generic ( SEMICOLON decl2= interface_element_generic )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:129:2: decl1= interface_element_generic ( SEMICOLON decl2= interface_element_generic )*
            	pushFollow(FOLLOW_interface_element_generic_in_generic_interface_list321)
            	decl1=interface_element_generic()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += decl1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:129:63: ( SEMICOLON decl2= interface_element_generic )*
            	var loop5_quitflag = false
            	while (!loop5_quitflag) {
            	    val alt5 = {
            	val LA5_0 = input.LA(1)

            	if ( (LA5_0==SEMICOLON) ) 1

            	else -1
            	}
            	    alt5 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:129:64: SEMICOLON decl2= interface_element_generic
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_generic_interface_list326)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_interface_element_generic_in_generic_interface_list330)
            		    	decl2=interface_element_generic()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += decl2
            		    	}


            		case _ => loop5_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, generic_interface_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_interface_list"


    // $ANTLR start "port_clause"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:132:1: port_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : PORT LPAREN port_interface_list RPAREN SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def port_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val port_clause_StartIndex = input.index()
        var port_interface_list20: Seq[InterfaceList.AbstractInterfaceElement] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:132:73: ( PORT LPAREN port_interface_list RPAREN SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:133:2: PORT LPAREN port_interface_list RPAREN SEMICOLON
            	`match`(input,PORT,FOLLOW_PORT_in_port_clause354)
            	if (state.failed) return list
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_port_clause356)
            	if (state.failed) return list
            	pushFollow(FOLLOW_port_interface_list_in_port_clause358)
            	port_interface_list20=port_interface_list()

            	state._fsp-=1
            	if (state.failed) return list
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_port_clause360)
            	if (state.failed) return list
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_port_clause362)
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  list = port_interface_list20
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, port_clause_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_clause"


    // $ANTLR start "port_interface_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:136:1: port_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= interface_element_port ( SEMICOLON decl2= interface_element_port )* ;
    @throws(classOf[RecognitionException])
    final def port_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val port_interface_list_StartIndex = input.index()
        var decl1: InterfaceList.AbstractInterfaceElement = null
        var decl2: InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:139:3: (decl1= interface_element_port ( SEMICOLON decl2= interface_element_port )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:140:2: decl1= interface_element_port ( SEMICOLON decl2= interface_element_port )*
            	pushFollow(FOLLOW_interface_element_port_in_port_interface_list384)
            	decl1=interface_element_port()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += decl1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:140:60: ( SEMICOLON decl2= interface_element_port )*
            	var loop6_quitflag = false
            	while (!loop6_quitflag) {
            	    val alt6 = {
            	val LA6_0 = input.LA(1)

            	if ( (LA6_0==SEMICOLON) ) 1

            	else -1
            	}
            	    alt6 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:140:61: SEMICOLON decl2= interface_element_port
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_port_interface_list389)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_interface_element_port_in_port_interface_list393)
            		    	decl2=interface_element_port()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += decl2
            		    	}


            		case _ => loop6_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list = elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, port_interface_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_interface_list"


    // $ANTLR start "entity_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:143:1: entity_declaration returns [EntityDeclaration entityDecl] : entityToken= ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? sync[syncMessage] ( entity_declarative_item sync[syncMessage] )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def entity_declaration(): EntityDeclaration = {
        var entityDecl : EntityDeclaration = null
        val entity_declaration_StartIndex = input.index()
        var entityToken: Token = null
        var postponed: Token = null
        var start_identifier: Identifier = null
        var label: Identifier = null
        var end_identifier: Identifier = null
        var entity_declarative_item21: DeclarativeItem = null
        var concurrent_assertion_statement22: ConcurrentAssertionStatement = null
        var concurrent_procedure_call_statement23: ConcurrentProcedureCallStatement = null
        var process_statement24: ProcessStatement = null
        var generic_clause25: Seq[InterfaceList.AbstractInterfaceElement] = null
        var port_clause26: Seq[InterfaceList.AbstractInterfaceElement] = null



         	val declarativeItems=new Buffer[DeclarativeItem]()
         	val concurrentStmt=new Buffer[ConcurrentStatement]()
         	val syncMessage="package declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return entityDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:148:3: (entityToken= ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? sync[syncMessage] ( entity_declarative_item sync[syncMessage] )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:149:2: entityToken= ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? sync[syncMessage] ( entity_declarative_item sync[syncMessage] )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON
            	entityToken=`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_declaration425).asInstanceOf[Token]
            	if (state.failed) return entityDecl
            	pushFollow(FOLLOW_identifier_in_entity_declaration429)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return entityDecl
            	`match`(input,IS,FOLLOW_IS_in_entity_declaration431)
            	if (state.failed) return entityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:150:3: ( generic_clause SEMICOLON )?
            	val alt7 = {
            	val LA7_0 = input.LA(1)

            	if ( (LA7_0==GENERIC) ) 1
            	else -1
            	}
            	alt7 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:150:4: generic_clause SEMICOLON
            	        	pushFollow(FOLLOW_generic_clause_in_entity_declaration436)
            	        	generic_clause25=generic_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_entity_declaration438)
            	        	if (state.failed) return entityDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:151:3: ( port_clause )?
            	val alt8 = {
            	val LA8_0 = input.LA(1)

            	if ( (LA8_0==PORT) ) 1
            	else -1
            	}
            	alt8 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:151:3: port_clause
            	        	pushFollow(FOLLOW_port_clause_in_entity_declaration444)
            	        	port_clause26=port_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl


            	    case _ =>
            	}

            	pushFollow(FOLLOW_sync_in_entity_declaration449)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return entityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:152:21: ( entity_declarative_item sync[syncMessage] )*
            	var loop9_quitflag = false
            	while (!loop9_quitflag) {
            	    val alt9 = {
            	val LA9_0 = input.LA(1)

            	if ( (LA9_0==FUNCTION||LA9_0==IMPURE||LA9_0==PROCEDURE||LA9_0==PURE) ) 1
            	else if ( (LA9_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA9_0==ALIAS||LA9_0==ATTRIBUTE||(LA9_0>=CONSTANT && LA9_0<=DISCONNECT)||LA9_0==FILE||LA9_0==GROUP||(LA9_0>=SHARED && LA9_0<=SIGNAL)||LA9_0==SUBTYPE||LA9_0==TYPE||(LA9_0>=USE && LA9_0<=VARIABLE)) ) 1
            	else if ( ((LA9_0>=NATURE && LA9_0<=QUANTITY)||(LA9_0>=SUBNATURE && LA9_0<=LIMIT)) && ((ams))) 1

            	else -1
            	}
            	    alt9 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:152:22: entity_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_entity_declarative_item_in_entity_declaration453)
            		    	entity_declarative_item21=entity_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return entityDecl
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += entity_declarative_item21
            		    	}
            		    	pushFollow(FOLLOW_sync_in_entity_declaration456)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return entityDecl


            		case _ => loop9_quitflag = true
            	    }
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:153:2: ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )?
            	val alt14 = {
            	val LA14_0 = input.LA(1)

            	if ( (LA14_0==BEGIN) ) 1
            	else -1
            	}
            	alt14 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:153:3: BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
            	        	`match`(input,BEGIN,FOLLOW_BEGIN_in_entity_declaration464)
            	        	if (state.failed) return entityDecl
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:3: ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
            	        	var loop13_quitflag = false
            	        	while (!loop13_quitflag) {
            	        	    val alt13 = {
            	        	val LA13_0 = input.LA(1)

            	        	if ( (LA13_0==ASSERT||LA13_0==POSTPONED||LA13_0==PROCESS||LA13_0==BASIC_IDENTIFIER||LA13_0==EXTENDED_IDENTIFIER||LA13_0==STRING_LITERAL) ) 1

            	        	else -1
            	        	}
            	        	    alt13 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:4: (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:9: (label= label_colon )?
            	        		    	val alt10 = {
            	        		    	val LA10_0 = input.LA(1)

            	        		    	if ( (LA10_0==BASIC_IDENTIFIER||LA10_0==EXTENDED_IDENTIFIER) ) {
            	        		    	val LA10_1 = input.LA(2)

            	        		    	if ( (LA10_1==COLON) ) 1
            	        		    	else -1
            	        		    	}
            	        		    	else -1
            	        		    	}
            	        		    	alt10 match {
            	        		    	    case 1 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:9: label= label_colon
            	        		    	        	pushFollow(FOLLOW_label_colon_in_entity_declaration471)
            	        		    	        	label=label_colon()

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl


            	        		    	    case _ =>
            	        		    	}

            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:32: (postponed= POSTPONED )?
            	        		    	val alt11 = {
            	        		    	val LA11_0 = input.LA(1)

            	        		    	if ( (LA11_0==POSTPONED) ) 1
            	        		    	else -1
            	        		    	}
            	        		    	alt11 match {
            	        		    	    case 1 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:32: postponed= POSTPONED
            	        		    	        	postponed=`match`(input,POSTPONED,FOLLOW_POSTPONED_in_entity_declaration476).asInstanceOf[Token]
            	        		    	        	if (state.failed) return entityDecl


            	        		    	    case _ =>
            	        		    	}

            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:154:44: ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
            	        		    	val alt12 = input.LA(1) match {
            	        		    	case ASSERT => 1
            	        		    	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL => 2
            	        		    	case PROCESS => 3
            	        		    	case _ =>
            	        		    	    if (state.backtracking>0) {state.failed=true; return entityDecl}
            	        		    	    val nvae = new NoViableAltException("", 12, 0, input)

            	        		    	    throw nvae
            	        		    	}

            	        		    	alt12 match {
            	        		    	    case 1 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:155:4: concurrent_assertion_statement[$label.label,postponed!=null]
            	        		    	        	pushFollow(FOLLOW_concurrent_assertion_statement_in_entity_declaration484)
            	        		    	        	concurrent_assertion_statement22=concurrent_assertion_statement(label, postponed!=null)

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += concurrent_assertion_statement22
            	        		    	        	}

            	        		    	    case 2 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:156:6: concurrent_procedure_call_statement[$label.label,postponed!=null]
            	        		    	        	pushFollow(FOLLOW_concurrent_procedure_call_statement_in_entity_declaration494)
            	        		    	        	concurrent_procedure_call_statement23=concurrent_procedure_call_statement(label, postponed!=null)

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += concurrent_procedure_call_statement23
            	        		    	        	}

            	        		    	    case 3 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:157:6: process_statement[$label.label,postponed!=null]
            	        		    	        	pushFollow(FOLLOW_process_statement_in_entity_declaration503)
            	        		    	        	process_statement24=process_statement(label, postponed!=null)

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += process_statement24
            	        		    	        	}


            	        		    	    case _ =>
            	        		    	}



            	        		case _ => loop13_quitflag = true
            	        	    }
            	        	}



            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_entity_declaration528)
            	if (state.failed) return entityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:162:6: ( ENTITY )?
            	val alt15 = {
            	val LA15_0 = input.LA(1)

            	if ( (LA15_0==ENTITY) ) 1
            	else -1
            	}
            	alt15 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:162:6: ENTITY
            	        	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_declaration530)
            	        	if (state.failed) return entityDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:162:28: (end_identifier= identifier )?
            	val alt16 = {
            	val LA16_0 = input.LA(1)

            	if ( (LA16_0==BASIC_IDENTIFIER||LA16_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt16 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:162:28: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_entity_declaration535)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_entity_declaration538)
            	if (state.failed) return entityDecl
            	if ( state.backtracking==0 ) {
            	  entityDecl=new EntityDeclaration(entityToken,start_identifier,generic_clause25,port_clause26,declarativeItems.result,concurrentStmt.result,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, entity_declaration_StartIndex) }
        }
        return entityDecl
    }
    // $ANTLR end "entity_declaration"


    // $ANTLR start "entity_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:165:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    final def entity_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val entity_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body27: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration28: SubprogramInstantiationDeclaration = null
        var package_declaration29: PackageDeclaration = null
        var package_body30: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration31: PackageInstantiationDeclaration = null
        var type_declaration32: AbstractTypeDeclaration = null
        var subtype_declaration33: SubTypeDeclaration = null
        var constant_declaration34: ConstantDeclaration = null
        var signal_declaration35: SignalDeclaration = null
        var variable_declaration36: VariableDeclaration = null
        var file_declaration37: FileDeclaration = null
        var alias_declaration38: AliasDeclaration = null
        var attribute_declaration39: AttributeDeclaration = null
        var attribute_specification40: AttributeSpecification = null
        var disconnection_specification41: DisconnectionSpecification = null
        var use_clause42: UseClause = null
        var group_template_declaration43: GroupTemplateDeclaration = null
        var group_declaration44: GroupDeclaration = null
        var ams_step_limit_specification45: StepLimitSpecification = null
        var ams_nature_declaration46: AbstractTypeDeclaration = null
        var ams_subnature_declaration47: SubNatureDeclaration = null
        var ams_quantity_declaration48: AbstractQuantityDeclaration = null
        var ams_terminal_declaration49: TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:165:56: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
            val alt19 = dfa19.predict(input)
            alt19 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:166:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item556)
                    	subprogram_declartion_or_body27=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body27
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:167:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "entity_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:167:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt17 = {
                    	val LA17_0 = input.LA(1)

                    	if ( (LA17_0==FUNCTION||LA17_0==PROCEDURE) ) 1
                    	else if ( (LA17_0==PACKAGE) ) {
                    	val LA17_2 = input.LA(2)

                    	if ( (LA17_2==BODY) ) 3
                    	else if ( (LA17_2==BASIC_IDENTIFIER||LA17_2==EXTENDED_IDENTIFIER) ) {
                    	val LA17_4 = input.LA(3)

                    	if ( (LA17_4==IS) ) {
                    	val LA17_5 = input.LA(4)

                    	if ( (LA17_5==NEW) ) 4
                    	else if ( (LA17_5==ALIAS||LA17_5==ATTRIBUTE||LA17_5==COMPONENT||(LA17_5>=CONSTANT && LA17_5<=DISCONNECT)||LA17_5==END||LA17_5==FILE||LA17_5==FUNCTION||(LA17_5>=GENERIC && LA17_5<=GROUP)||LA17_5==IMPURE||LA17_5==PACKAGE||LA17_5==PROCEDURE||LA17_5==PURE||(LA17_5>=SHARED && LA17_5<=SIGNAL)||LA17_5==SUBTYPE||LA17_5==TYPE||(LA17_5>=USE && LA17_5<=VARIABLE)||(LA17_5>=NATURE && LA17_5<=TERMINAL)||LA17_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 17, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 17, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 17, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 17, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt17 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:167:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_entity_declarative_item566)
                    	        	v2008_subprogram_instantiation_declaration28=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration28
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:168:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_entity_declarative_item575)
                    	        	package_declaration29=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration29
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:169:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_entity_declarative_item584)
                    	        	package_body30=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body30
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:170:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_entity_declarative_item593)
                    	        	v2008_package_instantiation_declaration31=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration31
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:172:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_entity_declarative_item605)
                    	type_declaration32=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration32
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:173:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_entity_declarative_item612)
                    	subtype_declaration33=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration33
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:174:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_entity_declarative_item619)
                    	constant_declaration34=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration34
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:175:4: signal_declaration
                    	pushFollow(FOLLOW_signal_declaration_in_entity_declarative_item626)
                    	signal_declaration35=signal_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=signal_declaration35
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:176:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_entity_declarative_item633)
                    	variable_declaration36=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration36
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:177:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_entity_declarative_item640)
                    	file_declaration37=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration37
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:178:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_entity_declarative_item647)
                    	alias_declaration38=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration38
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:179:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_entity_declarative_item654)
                    	attribute_declaration39=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration39
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:180:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_entity_declarative_item661)
                    	attribute_specification40=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification40
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:181:4: disconnection_specification
                    	pushFollow(FOLLOW_disconnection_specification_in_entity_declarative_item668)
                    	disconnection_specification41=disconnection_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=disconnection_specification41
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:182:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_entity_declarative_item675)
                    	use_clause42=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause42
                    	}

                case 14 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:183:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_entity_declarative_item682)
                    	group_template_declaration43=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration43
                    	}

                case 15 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:184:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_entity_declarative_item689)
                    	group_declaration44=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration44
                    	}

                case 16 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:187:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "entity_declarative_item", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:188:3: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	val alt18 = input.LA(1) match {
                    	case LIMIT => 1
                    	case NATURE => 2
                    	case SUBNATURE => 3
                    	case QUANTITY => 4
                    	case TERMINAL => 5
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 18, 0, input)

                    	    throw nvae
                    	}

                    	alt18 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:189:3: ams_step_limit_specification
                    	        	pushFollow(FOLLOW_ams_step_limit_specification_in_entity_declarative_item709)
                    	        	ams_step_limit_specification45=ams_step_limit_specification()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_step_limit_specification45
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:190:5: ams_nature_declaration
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_entity_declarative_item717)
                    	        	ams_nature_declaration46=ams_nature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_nature_declaration46
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:191:5: ams_subnature_declaration
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_entity_declarative_item725)
                    	        	ams_subnature_declaration47=ams_subnature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_subnature_declaration47
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:192:5: ams_quantity_declaration
                    	        	pushFollow(FOLLOW_ams_quantity_declaration_in_entity_declarative_item733)
                    	        	ams_quantity_declaration48=ams_quantity_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_quantity_declaration48
                    	        	}

                    	    case 5 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:193:5: ams_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_entity_declarative_item741)
                    	        	ams_terminal_declaration49=ams_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_terminal_declaration49
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, entity_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "entity_declarative_item"


    // $ANTLR start "architecture_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:196:1: architecture_body returns [ArchitectureDeclaration archDecl] : architectureToken= ARCHITECTURE start_identifier= identifier OF selected_name IS sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def architecture_body(): ArchitectureDeclaration = {
        var archDecl : ArchitectureDeclaration = null
        val architecture_body_StartIndex = input.index()
        var architectureToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var block_declarative_item50: DeclarativeItem = null
        var selected_name51: SelectedName = null
        var concurrent_statement_list52: Seq[ConcurrentStatement] = null



        	val declarativeItems=new Buffer[DeclarativeItem]()
        	val syncMessage="block declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return archDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:200:3: (architectureToken= ARCHITECTURE start_identifier= identifier OF selected_name IS sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:201:2: architectureToken= ARCHITECTURE start_identifier= identifier OF selected_name IS sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON
            	architectureToken=`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_architecture_body768).asInstanceOf[Token]
            	if (state.failed) return archDecl
            	pushFollow(FOLLOW_identifier_in_architecture_body772)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return archDecl
            	`match`(input,OF,FOLLOW_OF_in_architecture_body774)
            	if (state.failed) return archDecl
            	pushFollow(FOLLOW_selected_name_in_architecture_body776)
            	selected_name51=selected_name()

            	state._fsp-=1
            	if (state.failed) return archDecl
            	`match`(input,IS,FOLLOW_IS_in_architecture_body778)
            	if (state.failed) return archDecl
            	pushFollow(FOLLOW_sync_in_architecture_body782)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return archDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:202:21: ( block_declarative_item sync[syncMessage] )*
            	var loop20_quitflag = false
            	while (!loop20_quitflag) {
            	    val alt20 = {
            	val LA20_0 = input.LA(1)

            	if ( (LA20_0==FUNCTION||LA20_0==IMPURE||LA20_0==PROCEDURE||LA20_0==PURE) ) 1
            	else if ( (LA20_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA20_0==ALIAS||LA20_0==ATTRIBUTE||LA20_0==COMPONENT||(LA20_0>=CONSTANT && LA20_0<=DISCONNECT)||(LA20_0>=FILE && LA20_0<=FOR)||LA20_0==GROUP||(LA20_0>=SHARED && LA20_0<=SIGNAL)||LA20_0==SUBTYPE||LA20_0==TYPE||(LA20_0>=USE && LA20_0<=VARIABLE)) ) 1
            	else if ( ((LA20_0>=NATURE && LA20_0<=QUANTITY)||(LA20_0>=SUBNATURE && LA20_0<=LIMIT)) && ((ams))) 1

            	else -1
            	}
            	    alt20 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:202:22: block_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_block_declarative_item_in_architecture_body786)
            		    	block_declarative_item50=block_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return archDecl
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += block_declarative_item50
            		    	}
            		    	pushFollow(FOLLOW_sync_in_architecture_body789)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return archDecl


            		case _ => loop20_quitflag = true
            	    }
            	}

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_architecture_body795)
            	if (state.failed) return archDecl
            	pushFollow(FOLLOW_concurrent_statement_list_in_architecture_body799)
            	concurrent_statement_list52=concurrent_statement_list()

            	state._fsp-=1
            	if (state.failed) return archDecl
            	`match`(input,END,FOLLOW_END_in_architecture_body802)
            	if (state.failed) return archDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:205:6: ( ARCHITECTURE )?
            	val alt21 = {
            	val LA21_0 = input.LA(1)

            	if ( (LA21_0==ARCHITECTURE) ) 1
            	else -1
            	}
            	alt21 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:205:6: ARCHITECTURE
            	        	`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_architecture_body804)
            	        	if (state.failed) return archDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:205:34: (end_identifier= identifier )?
            	val alt22 = {
            	val LA22_0 = input.LA(1)

            	if ( (LA22_0==BASIC_IDENTIFIER||LA22_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt22 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:205:34: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_architecture_body809)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return archDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_architecture_body812)
            	if (state.failed) return archDecl
            	if ( state.backtracking==0 ) {
            	  archDecl=new ArchitectureDeclaration(architectureToken,start_identifier,declarativeItems.result,selected_name51,concurrent_statement_list52,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, architecture_body_StartIndex) }
        }
        return archDecl
    }
    // $ANTLR end "architecture_body"


    // $ANTLR start "configuration_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:208:1: configuration_declarative_item returns [DeclarativeItem item] : ( use_clause | attribute_specification | group_declaration );
    @throws(classOf[RecognitionException])
    final def configuration_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val configuration_declarative_item_StartIndex = input.index()
        var use_clause53: UseClause = null
        var attribute_specification54: AttributeSpecification = null
        var group_declaration55: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:208:63: ( use_clause | attribute_specification | group_declaration )
            val alt23 = input.LA(1) match {
            case USE => 1
            case ATTRIBUTE => 2
            case GROUP => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 23, 0, input)

                throw nvae
            }

            alt23 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:209:2: use_clause
                    	pushFollow(FOLLOW_use_clause_in_configuration_declarative_item830)
                    	use_clause53=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause53
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:210:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_configuration_declarative_item837)
                    	attribute_specification54=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification54
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:211:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_configuration_declarative_item844)
                    	group_declaration55=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration55
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, configuration_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "configuration_declarative_item"


    // $ANTLR start "configuration_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:213:1: configuration_declaration returns [ConfigurationDeclaration configDecl] : configurationToken= CONFIGURATION start_identifier= identifier OF selected_name IS sync[syncMessage] ( configuration_declarative_item sync[syncMessage] )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def configuration_declaration(): ConfigurationDeclaration = {
        var configDecl : ConfigurationDeclaration = null
        val configuration_declaration_StartIndex = input.index()
        var configurationToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var configuration_declarative_item56: DeclarativeItem = null
        var selected_name57: SelectedName = null
        var block_configuration58: BlockConfiguration = null



         	val declarativeItems=new Buffer[DeclarativeItem]()
         	val syncMessage="configuration declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return configDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:217:3: (configurationToken= CONFIGURATION start_identifier= identifier OF selected_name IS sync[syncMessage] ( configuration_declarative_item sync[syncMessage] )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:218:2: configurationToken= CONFIGURATION start_identifier= identifier OF selected_name IS sync[syncMessage] ( configuration_declarative_item sync[syncMessage] )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON
            	configurationToken=`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_configuration_declaration867).asInstanceOf[Token]
            	if (state.failed) return configDecl
            	pushFollow(FOLLOW_identifier_in_configuration_declaration871)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return configDecl
            	`match`(input,OF,FOLLOW_OF_in_configuration_declaration873)
            	if (state.failed) return configDecl
            	pushFollow(FOLLOW_selected_name_in_configuration_declaration875)
            	selected_name57=selected_name()

            	state._fsp-=1
            	if (state.failed) return configDecl
            	`match`(input,IS,FOLLOW_IS_in_configuration_declaration877)
            	if (state.failed) return configDecl
            	pushFollow(FOLLOW_sync_in_configuration_declaration881)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return configDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:219:21: ( configuration_declarative_item sync[syncMessage] )*
            	var loop24_quitflag = false
            	while (!loop24_quitflag) {
            	    val alt24 = {
            	val LA24_0 = input.LA(1)

            	if ( (LA24_0==ATTRIBUTE||LA24_0==GROUP||LA24_0==USE) ) 1

            	else -1
            	}
            	    alt24 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:219:22: configuration_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_configuration_declarative_item_in_configuration_declaration885)
            		    	configuration_declarative_item56=configuration_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return configDecl
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += configuration_declarative_item56
            		    	}
            		    	pushFollow(FOLLOW_sync_in_configuration_declaration888)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return configDecl


            		case _ => loop24_quitflag = true
            	    }
            	}

            	pushFollow(FOLLOW_block_configuration_in_configuration_declaration898)
            	block_configuration58=block_configuration()

            	state._fsp-=1
            	if (state.failed) return configDecl
            	`match`(input,END,FOLLOW_END_in_configuration_declaration901)
            	if (state.failed) return configDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:222:6: ( CONFIGURATION )?
            	val alt25 = {
            	val LA25_0 = input.LA(1)

            	if ( (LA25_0==CONFIGURATION) ) 1
            	else -1
            	}
            	alt25 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:222:6: CONFIGURATION
            	        	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_configuration_declaration903)
            	        	if (state.failed) return configDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:222:35: (end_identifier= identifier )?
            	val alt26 = {
            	val LA26_0 = input.LA(1)

            	if ( (LA26_0==BASIC_IDENTIFIER||LA26_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt26 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:222:35: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_configuration_declaration908)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return configDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_configuration_declaration911)
            	if (state.failed) return configDecl
            	if ( state.backtracking==0 ) {
            	  configDecl=new ConfigurationDeclaration(configurationToken,start_identifier,declarativeItems.result,selected_name57,block_configuration58,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, configuration_declaration_StartIndex) }
        }
        return configDecl
    }
    // $ANTLR end "configuration_declaration"


    // $ANTLR start "generate_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:225:1: generate_specification returns [TripleEither[DiscreteRange,Identifier,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | {...}? => identifier | expression );
    @throws(classOf[RecognitionException])
    final def generate_specification(): TripleEither[DiscreteRange,Identifier,Expression] = {
        var blockIndex : TripleEither[DiscreteRange,Identifier,Expression] = null
        val generate_specification_StartIndex = input.index()
        var discrete_range59: DiscreteRange = null
        var identifier60: Identifier = null
        var expression61: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return blockIndex }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:225:96: ( ( discrete_range )=> discrete_range | {...}? => identifier | expression )
            val alt27 = dfa27.predict(input)
            alt27 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:226:4: ( discrete_range )=> discrete_range
                    	pushFollow(FOLLOW_discrete_range_in_generate_specification933)
                    	discrete_range59=discrete_range()

                    	state._fsp-=1
                    	if (state.failed) return blockIndex
                    	if ( state.backtracking==0 ) {
                    	  blockIndex=First(discrete_range59)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:227:8: {...}? => identifier
                    	if ( !((vhdl2008 && (input.LA(1)==BASIC_IDENTIFIER || input.LA(1)==EXTENDED_IDENTIFIER) && input.LA(2)==RPAREN)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return blockIndex}
                    	    throw new FailedPredicateException(input, "generate_specification", "vhdl2008 && (input.LA(1)==BASIC_IDENTIFIER || input.LA(1)==EXTENDED_IDENTIFIER) && input.LA(2)==RPAREN")
                    	}
                    	pushFollow(FOLLOW_identifier_in_generate_specification946)
                    	identifier60=identifier()

                    	state._fsp-=1
                    	if (state.failed) return blockIndex
                    	if ( state.backtracking==0 ) {
                    	  blockIndex=Second(identifier60)
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:228:6: expression
                    	pushFollow(FOLLOW_expression_in_generate_specification955)
                    	expression61=expression()

                    	state._fsp-=1
                    	if (state.failed) return blockIndex
                    	if ( state.backtracking==0 ) {
                    	  blockIndex=Third(expression61)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, generate_specification_StartIndex) }
        }
        return blockIndex
    }
    // $ANTLR end "generate_specification"


    // $ANTLR start "block_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:230:1: block_specification returns [BlockConfigurationSpecification blockConfig] : ( ( identifier LPAREN )=> identifier ( LPAREN generate_specification RPAREN )? | selected_name );
    @throws(classOf[RecognitionException])
    final def block_specification(): BlockConfigurationSpecification = {
        var blockConfig : BlockConfigurationSpecification = null
        val block_specification_StartIndex = input.index()
        var identifier62: Identifier = null
        var generate_specification63: TripleEither[DiscreteRange,Identifier,Expression] = null
        var selected_name64: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return blockConfig }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:230:75: ( ( identifier LPAREN )=> identifier ( LPAREN generate_specification RPAREN )? | selected_name )
            val alt29 = {
            val LA29_0 = input.LA(1)

            if ( (LA29_0==BASIC_IDENTIFIER||LA29_0==EXTENDED_IDENTIFIER) ) {
            val LA29_1 = input.LA(2)

            if ( (synpred2_Parser()) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return blockConfig}
                val nvae = new NoViableAltException("", 29, 1, input)

                throw nvae
            }
            }
            else if ( (LA29_0==STRING_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return blockConfig}
                val nvae = new NoViableAltException("", 29, 0, input)

                throw nvae
            }
            }
            alt29 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:231:2: ( identifier LPAREN )=> identifier ( LPAREN generate_specification RPAREN )?
                    	pushFollow(FOLLOW_identifier_in_block_specification979)
                    	identifier62=identifier()

                    	state._fsp-=1
                    	if (state.failed) return blockConfig
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:231:34: ( LPAREN generate_specification RPAREN )?
                    	val alt28 = {
                    	val LA28_0 = input.LA(1)

                    	if ( (LA28_0==LPAREN) ) 1
                    	else -1
                    	}
                    	alt28 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:231:35: LPAREN generate_specification RPAREN
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_block_specification982)
                    	        	if (state.failed) return blockConfig
                    	        	pushFollow(FOLLOW_generate_specification_in_block_specification984)
                    	        	generate_specification63=generate_specification()

                    	        	state._fsp-=1
                    	        	if (state.failed) return blockConfig
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_block_specification986)
                    	        	if (state.failed) return blockConfig


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  new BlockConfigurationSpecification(Right((identifier62,generate_specification63)))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:232:4: selected_name
                    	pushFollow(FOLLOW_selected_name_in_block_specification995)
                    	selected_name64=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return blockConfig
                    	if ( state.backtracking==0 ) {
                    	  blockConfig=new BlockConfigurationSpecification(Left(selected_name64))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, block_specification_StartIndex) }
        }
        return blockConfig
    }
    // $ANTLR end "block_specification"


    // $ANTLR start "block_configuration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:234:1: block_configuration returns [BlockConfiguration blockConfig] : FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def block_configuration(): BlockConfiguration = {
        var blockConfig : BlockConfiguration = null
        val block_configuration_StartIndex = input.index()
        var config: BlockConfiguration = null
        var use_clause65: UseClause = null
        var component_configuration66: ComponentConfiguration = null
        var block_specification67: BlockConfigurationSpecification = null



        	val useClauses=new Buffer[UseClause]()
        	val configurations=new Buffer[Either[BlockConfiguration,ComponentConfiguration]]

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return blockConfig }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:238:3: ( FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:239:2: FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON
            	`match`(input,FOR,FOLLOW_FOR_in_block_configuration1019)
            	if (state.failed) return blockConfig
            	pushFollow(FOLLOW_block_specification_in_block_configuration1021)
            	block_specification67=block_specification()

            	state._fsp-=1
            	if (state.failed) return blockConfig
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:240:3: ( use_clause )*
            	var loop30_quitflag = false
            	while (!loop30_quitflag) {
            	    val alt30 = {
            	val LA30_0 = input.LA(1)

            	if ( (LA30_0==USE) ) 1

            	else -1
            	}
            	    alt30 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:240:4: use_clause
            		    	pushFollow(FOLLOW_use_clause_in_block_configuration1026)
            		    	use_clause65=use_clause()

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig
            		    	if ( state.backtracking==0 ) {
            		    	  useClauses += use_clause65
            		    	}


            		case _ => loop30_quitflag = true
            	    }
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:241:3: (config= block_configuration | component_configuration )*
            	var loop31_quitflag = false
            	while (!loop31_quitflag) {
            	    val alt31 = {
            	val LA31_0 = input.LA(1)

            	if ( (LA31_0==FOR) ) input.LA(2) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	val LA31_3 = input.LA(3)

            	if ( (LA31_3==END||LA31_3==FOR||LA31_3==USE||LA31_3==LPAREN||LA31_3==DOT) ) 1
            	else if ( (LA31_3==COMMA||LA31_3==COLON) ) 2

            	else -1
            	}
            	case STRING_LITERAL => 1
            	case ALL | OTHERS => 2
            	case _ => -1
            	}


            	else -1
            	}
            	    alt31 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:242:4: config= block_configuration
            		    	pushFollow(FOLLOW_block_configuration_in_block_configuration1041)
            		    	config=block_configuration()

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig
            		    	if ( state.backtracking==0 ) {
            		    	  configurations += Left(config)
            		    	}

            		case 2 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:243:6: component_configuration
            		    	pushFollow(FOLLOW_component_configuration_in_block_configuration1050)
            		    	component_configuration66=component_configuration()

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig
            		    	if ( state.backtracking==0 ) {
            		    	  configurations += Right(component_configuration66)
            		    	}


            		case _ => loop31_quitflag = true
            	    }
            	}

            	`match`(input,END,FOLLOW_END_in_block_configuration1060)
            	if (state.failed) return blockConfig
            	`match`(input,FOR,FOLLOW_FOR_in_block_configuration1062)
            	if (state.failed) return blockConfig
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_configuration1064)
            	if (state.failed) return blockConfig
            	if ( state.backtracking==0 ) {
            	  blockConfig=new BlockConfiguration(block_specification67,useClauses.result,configurations.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, block_configuration_StartIndex) }
        }
        return blockConfig
    }
    // $ANTLR end "block_configuration"


    // $ANTLR start "component_configuration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:250:1: component_configuration returns [ComponentConfiguration componentConfig] : FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def component_configuration(): ComponentConfiguration = {
        var componentConfig : ComponentConfiguration = null
        val component_configuration_StartIndex = input.index()
        var component_specification68: ComponentSpecification = null
        var binding_indication69: BindingIndication = null
        var block_configuration70: BlockConfiguration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return componentConfig }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:250:74: ( FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:251:2: FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON
            	`match`(input,FOR,FOLLOW_FOR_in_component_configuration1083)
            	if (state.failed) return componentConfig
            	pushFollow(FOLLOW_component_specification_in_component_configuration1085)
            	component_specification68=component_specification()

            	state._fsp-=1
            	if (state.failed) return componentConfig
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:252:3: ( binding_indication SEMICOLON )?
            	val alt32 = {
            	val LA32_0 = input.LA(1)

            	if ( (LA32_0==GENERIC||LA32_0==PORT||LA32_0==USE||LA32_0==SEMICOLON) ) 1
            	else -1
            	}
            	alt32 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:252:4: binding_indication SEMICOLON
            	        	pushFollow(FOLLOW_binding_indication_in_component_configuration1090)
            	        	binding_indication69=binding_indication()

            	        	state._fsp-=1
            	        	if (state.failed) return componentConfig
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_configuration1092)
            	        	if (state.failed) return componentConfig


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:254:3: ( block_configuration )?
            	val alt33 = {
            	val LA33_0 = input.LA(1)

            	if ( (LA33_0==FOR) ) 1
            	else -1
            	}
            	alt33 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:254:3: block_configuration
            	        	pushFollow(FOLLOW_block_configuration_in_component_configuration1101)
            	        	block_configuration70=block_configuration()

            	        	state._fsp-=1
            	        	if (state.failed) return componentConfig


            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_component_configuration1105)
            	if (state.failed) return componentConfig
            	`match`(input,FOR,FOLLOW_FOR_in_component_configuration1107)
            	if (state.failed) return componentConfig
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_configuration1109)
            	if (state.failed) return componentConfig
            	if ( state.backtracking==0 ) {
            	  componentConfig=new ComponentConfiguration(component_specification68,binding_indication69,block_configuration70)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, component_configuration_StartIndex) }
        }
        return componentConfig
    }
    // $ANTLR end "component_configuration"


    // $ANTLR start "v2008_context_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:258:1: v2008_context_declaration returns [ContextDeclaration contextDecl] : contextToken= CONTEXT start_identifier= identifier IS context_items END ( CONTEXT )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_context_declaration(): ContextDeclaration = {
        var contextDecl : ContextDeclaration = null
        val v2008_context_declaration_StartIndex = input.index()
        var contextToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var context_items71: Seq[ContextItem] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return contextDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:258:68: (contextToken= CONTEXT start_identifier= identifier IS context_items END ( CONTEXT )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:259:2: contextToken= CONTEXT start_identifier= identifier IS context_items END ( CONTEXT )? (end_identifier= identifier )? SEMICOLON
            	contextToken=`match`(input,CONTEXT,FOLLOW_CONTEXT_in_v2008_context_declaration1128).asInstanceOf[Token]
            	if (state.failed) return contextDecl
            	pushFollow(FOLLOW_identifier_in_v2008_context_declaration1132)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return contextDecl
            	`match`(input,IS,FOLLOW_IS_in_v2008_context_declaration1134)
            	if (state.failed) return contextDecl
            	pushFollow(FOLLOW_context_items_in_v2008_context_declaration1139)
            	context_items71=context_items()

            	state._fsp-=1
            	if (state.failed) return contextDecl
            	`match`(input,END,FOLLOW_END_in_v2008_context_declaration1142)
            	if (state.failed) return contextDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:261:6: ( CONTEXT )?
            	val alt34 = {
            	val LA34_0 = input.LA(1)

            	if ( (LA34_0==CONTEXT) ) 1
            	else -1
            	}
            	alt34 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:261:6: CONTEXT
            	        	`match`(input,CONTEXT,FOLLOW_CONTEXT_in_v2008_context_declaration1144)
            	        	if (state.failed) return contextDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:261:29: (end_identifier= identifier )?
            	val alt35 = {
            	val LA35_0 = input.LA(1)

            	if ( (LA35_0==BASIC_IDENTIFIER||LA35_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt35 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:261:29: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_v2008_context_declaration1149)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return contextDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_context_declaration1152)
            	if (state.failed) return contextDecl
            	if ( state.backtracking==0 ) {
            	  contextDecl=new ContextDeclaration(contextToken,start_identifier,context_items71,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, v2008_context_declaration_StartIndex) }
        }
        return contextDecl
    }
    // $ANTLR end "v2008_context_declaration"


    // $ANTLR start "package_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:265:1: package_declaration returns [PackageDeclaration packageDecl] : packageToken= PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? sync[syncMessage] ( package_declarative_item sync[syncMessage] )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def package_declaration(): PackageDeclaration = {
        var packageDecl : PackageDeclaration = null
        val package_declaration_StartIndex = input.index()
        var packageToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var package_declarative_item72: DeclarativeItem = null
        var generic_clause73: Seq[InterfaceList.AbstractInterfaceElement] = null
        var generic_map_aspect74: AssociationList = null



        	val declarativeItems=new Buffer[DeclarativeItem]()
        	val syncMessage="package declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return packageDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:269:3: (packageToken= PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? sync[syncMessage] ( package_declarative_item sync[syncMessage] )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:270:2: packageToken= PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? sync[syncMessage] ( package_declarative_item sync[syncMessage] )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON
            	packageToken=`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_declaration1177).asInstanceOf[Token]
            	if (state.failed) return packageDecl
            	pushFollow(FOLLOW_identifier_in_package_declaration1181)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return packageDecl
            	`match`(input,IS,FOLLOW_IS_in_package_declaration1183)
            	if (state.failed) return packageDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:271:3: ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )?
            	val alt37 = {
            	val LA37_0 = input.LA(1)

            	if ( (LA37_0==GENERIC) && ((vhdl2008))) 1
            	else -1
            	}
            	alt37 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:271:4: {...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )?
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return packageDecl}
            	        	    throw new FailedPredicateException(input, "package_declaration", "vhdl2008")
            	        	}
            	        	pushFollow(FOLLOW_generic_clause_in_package_declaration1191)
            	        	generic_clause73=generic_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return packageDecl
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_declaration1193)
            	        	if (state.failed) return packageDecl
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:272:3: ( generic_map_aspect SEMICOLON )?
            	        	val alt36 = {
            	        	val LA36_0 = input.LA(1)

            	        	if ( (LA36_0==GENERIC) ) 1
            	        	else -1
            	        	}
            	        	alt36 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:272:4: generic_map_aspect SEMICOLON
            	        	        	pushFollow(FOLLOW_generic_map_aspect_in_package_declaration1198)
            	        	        	generic_map_aspect74=generic_map_aspect()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return packageDecl
            	        	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_declaration1200)
            	        	        	if (state.failed) return packageDecl


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	pushFollow(FOLLOW_sync_in_package_declaration1208)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return packageDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:273:21: ( package_declarative_item sync[syncMessage] )*
            	var loop38_quitflag = false
            	while (!loop38_quitflag) {
            	    val alt38 = {
            	val LA38_0 = input.LA(1)

            	if ( (LA38_0==FUNCTION||LA38_0==IMPURE||LA38_0==PROCEDURE||LA38_0==PURE) ) 1
            	else if ( (LA38_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA38_0==ALIAS||LA38_0==ATTRIBUTE||LA38_0==COMPONENT||(LA38_0>=CONSTANT && LA38_0<=DISCONNECT)||LA38_0==FILE||LA38_0==GROUP||(LA38_0>=SHARED && LA38_0<=SIGNAL)||LA38_0==SUBTYPE||LA38_0==TYPE||(LA38_0>=USE && LA38_0<=VARIABLE)) ) 1
            	else if ( ((LA38_0>=NATURE && LA38_0<=TERMINAL)||LA38_0==SUBNATURE) && ((ams))) 1

            	else -1
            	}
            	    alt38 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:273:22: package_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_package_declarative_item_in_package_declaration1212)
            		    	package_declarative_item72=package_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return packageDecl
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += package_declarative_item72
            		    	}
            		    	pushFollow(FOLLOW_sync_in_package_declaration1215)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return packageDecl


            		case _ => loop38_quitflag = true
            	    }
            	}

            	`match`(input,END,FOLLOW_END_in_package_declaration1221)
            	if (state.failed) return packageDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:274:6: ( PACKAGE )?
            	val alt39 = {
            	val LA39_0 = input.LA(1)

            	if ( (LA39_0==PACKAGE) ) 1
            	else -1
            	}
            	alt39 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:274:6: PACKAGE
            	        	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_declaration1223)
            	        	if (state.failed) return packageDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:274:29: (end_identifier= identifier )?
            	val alt40 = {
            	val LA40_0 = input.LA(1)

            	if ( (LA40_0==BASIC_IDENTIFIER||LA40_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt40 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:274:29: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_package_declaration1228)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return packageDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_declaration1231)
            	if (state.failed) return packageDecl
            	if ( state.backtracking==0 ) {
            	  packageDecl=new PackageDeclaration(packageToken,start_identifier,generic_clause73,generic_map_aspect74,declarativeItems.result,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, package_declaration_StartIndex) }
        }
        return packageDecl
    }
    // $ANTLR end "package_declaration"


    // $ANTLR start "package_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:277:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    final def package_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val package_declarative_item_StartIndex = input.index()
        var subprogram_declaration75: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration76: SubprogramInstantiationDeclaration = null
        var package_declaration77: PackageDeclaration = null
        var v2008_package_instantiation_declaration78: PackageInstantiationDeclaration = null
        var type_declaration79: AbstractTypeDeclaration = null
        var subtype_declaration80: SubTypeDeclaration = null
        var constant_declaration81: ConstantDeclaration = null
        var signal_declaration82: SignalDeclaration = null
        var variable_declaration83: VariableDeclaration = null
        var file_declaration84: FileDeclaration = null
        var alias_declaration85: AliasDeclaration = null
        var component_declaration86: ComponentDeclaration = null
        var attribute_declaration87: AttributeDeclaration = null
        var attribute_specification88: AttributeSpecification = null
        var disconnection_specification89: DisconnectionSpecification = null
        var use_clause90: UseClause = null
        var group_template_declaration91: GroupTemplateDeclaration = null
        var group_declaration92: GroupDeclaration = null
        var ams_nature_declaration93: AbstractTypeDeclaration = null
        var ams_subnature_declaration94: SubNatureDeclaration = null
        var ams_terminal_declaration95: TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:277:57: ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) )
            val alt43 = dfa43.predict(input)
            alt43 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:278:2: subprogram_declaration
                    	pushFollow(FOLLOW_subprogram_declaration_in_package_declarative_item1249)
                    	subprogram_declaration75=subprogram_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declaration75
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:279:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "package_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:279:17: ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration )
                    	val alt41 = {
                    	val LA41_0 = input.LA(1)

                    	if ( (LA41_0==FUNCTION||LA41_0==PROCEDURE) ) 1
                    	else if ( (LA41_0==PACKAGE) ) {
                    	val LA41_2 = input.LA(2)

                    	if ( (LA41_2==BASIC_IDENTIFIER||LA41_2==EXTENDED_IDENTIFIER) ) {
                    	val LA41_3 = input.LA(3)

                    	if ( (LA41_3==IS) ) {
                    	val LA41_4 = input.LA(4)

                    	if ( (LA41_4==NEW) ) 3
                    	else if ( (LA41_4==ALIAS||LA41_4==ATTRIBUTE||LA41_4==COMPONENT||(LA41_4>=CONSTANT && LA41_4<=DISCONNECT)||LA41_4==END||LA41_4==FILE||LA41_4==FUNCTION||(LA41_4>=GENERIC && LA41_4<=GROUP)||LA41_4==IMPURE||LA41_4==PACKAGE||LA41_4==PROCEDURE||LA41_4==PURE||(LA41_4>=SHARED && LA41_4<=SIGNAL)||LA41_4==SUBTYPE||LA41_4==TYPE||(LA41_4>=USE && LA41_4<=VARIABLE)||(LA41_4>=NATURE && LA41_4<=TERMINAL)||LA41_4==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 41, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 41, 3, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 41, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 41, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt41 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:279:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_package_declarative_item1259)
                    	        	v2008_subprogram_instantiation_declaration76=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration76
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:280:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_package_declarative_item1268)
                    	        	package_declaration77=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration77
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:281:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_package_declarative_item1277)
                    	        	v2008_package_instantiation_declaration78=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration78
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:283:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_package_declarative_item1289)
                    	type_declaration79=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration79
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:284:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_package_declarative_item1296)
                    	subtype_declaration80=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration80
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:285:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_package_declarative_item1303)
                    	constant_declaration81=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration81
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:286:4: signal_declaration
                    	pushFollow(FOLLOW_signal_declaration_in_package_declarative_item1310)
                    	signal_declaration82=signal_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=signal_declaration82
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:287:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_package_declarative_item1317)
                    	variable_declaration83=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration83
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:288:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_package_declarative_item1324)
                    	file_declaration84=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration84
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:289:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_package_declarative_item1331)
                    	alias_declaration85=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration85
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:290:4: component_declaration
                    	pushFollow(FOLLOW_component_declaration_in_package_declarative_item1338)
                    	component_declaration86=component_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=component_declaration86
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:291:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_package_declarative_item1345)
                    	attribute_declaration87=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration87
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:292:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_package_declarative_item1352)
                    	attribute_specification88=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification88
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:293:4: disconnection_specification
                    	pushFollow(FOLLOW_disconnection_specification_in_package_declarative_item1359)
                    	disconnection_specification89=disconnection_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=disconnection_specification89
                    	}

                case 14 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:294:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_package_declarative_item1366)
                    	use_clause90=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause90
                    	}

                case 15 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:295:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_package_declarative_item1373)
                    	group_template_declaration91=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration91
                    	}

                case 16 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:296:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_package_declarative_item1380)
                    	group_declaration92=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration92
                    	}

                case 17 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:298:4: {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "package_declarative_item", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:298:13: ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
                    	val alt42 = input.LA(1) match {
                    	case NATURE => 1
                    	case SUBNATURE => 2
                    	case TERMINAL => 3
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 42, 0, input)

                    	    throw nvae
                    	}

                    	alt42 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:299:3: ams_nature_declaration
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_package_declarative_item1396)
                    	        	ams_nature_declaration93=ams_nature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_nature_declaration93
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:300:5: ams_subnature_declaration
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_package_declarative_item1404)
                    	        	ams_subnature_declaration94=ams_subnature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_subnature_declaration94
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:301:5: ams_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_package_declarative_item1412)
                    	        	ams_terminal_declaration95=ams_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_terminal_declaration95
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, package_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "package_declarative_item"


    // $ANTLR start "package_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:304:1: package_body returns [PackageBodyDeclaration packageBody] : packageToken= PACKAGE BODY start_identifier= identifier IS sync[syncMessage] ( package_body_declarative_item sync[syncMessage] )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def package_body(): PackageBodyDeclaration = {
        var packageBody : PackageBodyDeclaration = null
        val package_body_StartIndex = input.index()
        var packageToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var package_body_declarative_item96: DeclarativeItem = null



        	val declarativeItems = new Buffer[DeclarativeItem]()
        	val syncMessage="package declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return packageBody }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:308:3: (packageToken= PACKAGE BODY start_identifier= identifier IS sync[syncMessage] ( package_body_declarative_item sync[syncMessage] )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:309:2: packageToken= PACKAGE BODY start_identifier= identifier IS sync[syncMessage] ( package_body_declarative_item sync[syncMessage] )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON
            	packageToken=`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_body1436).asInstanceOf[Token]
            	if (state.failed) return packageBody
            	`match`(input,BODY,FOLLOW_BODY_in_package_body1438)
            	if (state.failed) return packageBody
            	pushFollow(FOLLOW_identifier_in_package_body1442)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return packageBody
            	`match`(input,IS,FOLLOW_IS_in_package_body1444)
            	if (state.failed) return packageBody
            	pushFollow(FOLLOW_sync_in_package_body1448)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return packageBody
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:310:21: ( package_body_declarative_item sync[syncMessage] )*
            	var loop44_quitflag = false
            	while (!loop44_quitflag) {
            	    val alt44 = {
            	val LA44_0 = input.LA(1)

            	if ( (LA44_0==FUNCTION||LA44_0==IMPURE||LA44_0==PROCEDURE||LA44_0==PURE) ) 1
            	else if ( (LA44_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA44_0==ALIAS||LA44_0==ATTRIBUTE||LA44_0==CONSTANT||LA44_0==FILE||LA44_0==GROUP||LA44_0==SHARED||LA44_0==SUBTYPE||LA44_0==TYPE||(LA44_0>=USE && LA44_0<=VARIABLE)) ) 1

            	else -1
            	}
            	    alt44 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:310:22: package_body_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_package_body_declarative_item_in_package_body1452)
            		    	package_body_declarative_item96=package_body_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return packageBody
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += package_body_declarative_item96
            		    	}
            		    	pushFollow(FOLLOW_sync_in_package_body1455)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return packageBody


            		case _ => loop44_quitflag = true
            	    }
            	}

            	`match`(input,END,FOLLOW_END_in_package_body1461)
            	if (state.failed) return packageBody
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:311:6: ( PACKAGE BODY )?
            	val alt45 = {
            	val LA45_0 = input.LA(1)

            	if ( (LA45_0==PACKAGE) ) 1
            	else -1
            	}
            	alt45 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:311:7: PACKAGE BODY
            	        	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_body1464)
            	        	if (state.failed) return packageBody
            	        	`match`(input,BODY,FOLLOW_BODY_in_package_body1466)
            	        	if (state.failed) return packageBody


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:311:36: (end_identifier= identifier )?
            	val alt46 = {
            	val LA46_0 = input.LA(1)

            	if ( (LA46_0==BASIC_IDENTIFIER||LA46_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt46 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:311:36: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_package_body1472)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return packageBody


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_body1475)
            	if (state.failed) return packageBody
            	if ( state.backtracking==0 ) {
            	  packageBody = new PackageBodyDeclaration(packageToken,start_identifier,declarativeItems.result,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, package_body_StartIndex) }
        }
        return packageBody
    }
    // $ANTLR end "package_body"


    // $ANTLR start "package_body_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:314:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    final def package_body_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val package_body_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body97: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration98: SubprogramInstantiationDeclaration = null
        var package_declaration99: PackageDeclaration = null
        var package_body100: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration101: PackageInstantiationDeclaration = null
        var type_declaration102: AbstractTypeDeclaration = null
        var subtype_declaration103: SubTypeDeclaration = null
        var constant_declaration104: ConstantDeclaration = null
        var variable_declaration105: VariableDeclaration = null
        var file_declaration106: FileDeclaration = null
        var alias_declaration107: AliasDeclaration = null
        var use_clause108: UseClause = null
        var attribute_declaration109: AttributeDeclaration = null
        var attribute_specification110: AttributeSpecification = null
        var group_template_declaration111: GroupTemplateDeclaration = null
        var group_declaration112: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:314:62: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration )
            val alt48 = dfa48.predict(input)
            alt48 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:315:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item1495)
                    	subprogram_declartion_or_body97=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body97
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:316:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "package_body_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:316:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt47 = {
                    	val LA47_0 = input.LA(1)

                    	if ( (LA47_0==FUNCTION||LA47_0==PROCEDURE) ) 1
                    	else if ( (LA47_0==PACKAGE) ) {
                    	val LA47_2 = input.LA(2)

                    	if ( (LA47_2==BODY) ) 3
                    	else if ( (LA47_2==BASIC_IDENTIFIER||LA47_2==EXTENDED_IDENTIFIER) ) {
                    	val LA47_4 = input.LA(3)

                    	if ( (LA47_4==IS) ) {
                    	val LA47_5 = input.LA(4)

                    	if ( (LA47_5==NEW) ) 4
                    	else if ( (LA47_5==ALIAS||LA47_5==ATTRIBUTE||LA47_5==COMPONENT||(LA47_5>=CONSTANT && LA47_5<=DISCONNECT)||LA47_5==END||LA47_5==FILE||LA47_5==FUNCTION||(LA47_5>=GENERIC && LA47_5<=GROUP)||LA47_5==IMPURE||LA47_5==PACKAGE||LA47_5==PROCEDURE||LA47_5==PURE||(LA47_5>=SHARED && LA47_5<=SIGNAL)||LA47_5==SUBTYPE||LA47_5==TYPE||(LA47_5>=USE && LA47_5<=VARIABLE)||(LA47_5>=NATURE && LA47_5<=TERMINAL)||LA47_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 47, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 47, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 47, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 47, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt47 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:316:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_package_body_declarative_item1505)
                    	        	v2008_subprogram_instantiation_declaration98=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration98
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:317:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_package_body_declarative_item1514)
                    	        	package_declaration99=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration99
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:318:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_package_body_declarative_item1523)
                    	        	package_body100=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body100
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:319:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_package_body_declarative_item1532)
                    	        	v2008_package_instantiation_declaration101=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration101
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:321:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_package_body_declarative_item1544)
                    	type_declaration102=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration102
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:322:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_package_body_declarative_item1551)
                    	subtype_declaration103=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration103
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:323:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_package_body_declarative_item1558)
                    	constant_declaration104=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration104
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:324:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_package_body_declarative_item1565)
                    	variable_declaration105=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration105
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:325:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_package_body_declarative_item1572)
                    	file_declaration106=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration106
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:326:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_package_body_declarative_item1579)
                    	alias_declaration107=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration107
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:327:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_package_body_declarative_item1586)
                    	use_clause108=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause108
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:328:4: {...}? => attribute_declaration
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "package_body_declarative_item", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_attribute_declaration_in_package_body_declarative_item1595)
                    	attribute_declaration109=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration109
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:329:21: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_package_body_declarative_item1603)
                    	attribute_specification110=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification110
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:330:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_package_body_declarative_item1611)
                    	group_template_declaration111=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration111
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:331:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_package_body_declarative_item1618)
                    	group_declaration112=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration112
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, package_body_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "package_body_declarative_item"


    // $ANTLR start "v2008_package_instantiation_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:333:1: v2008_package_instantiation_declaration returns [PackageInstantiationDeclaration packageInstantiationDecl] : PACKAGE identifier IS NEW selected_name ( generic_map_aspect )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_package_instantiation_declaration(): PackageInstantiationDeclaration = {
        var packageInstantiationDecl : PackageInstantiationDeclaration = null
        val v2008_package_instantiation_declaration_StartIndex = input.index()
        var PACKAGE113: Token = null
        var identifier114: Identifier = null
        var selected_name115: SelectedName = null
        var generic_map_aspect116: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return packageInstantiationDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:333:108: ( PACKAGE identifier IS NEW selected_name ( generic_map_aspect )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:334:2: PACKAGE identifier IS NEW selected_name ( generic_map_aspect )? SEMICOLON
            	PACKAGE113=`match`(input,PACKAGE,FOLLOW_PACKAGE_in_v2008_package_instantiation_declaration1633).asInstanceOf[Token]
            	if (state.failed) return packageInstantiationDecl
            	pushFollow(FOLLOW_identifier_in_v2008_package_instantiation_declaration1635)
            	identifier114=identifier()

            	state._fsp-=1
            	if (state.failed) return packageInstantiationDecl
            	`match`(input,IS,FOLLOW_IS_in_v2008_package_instantiation_declaration1637)
            	if (state.failed) return packageInstantiationDecl
            	`match`(input,NEW,FOLLOW_NEW_in_v2008_package_instantiation_declaration1639)
            	if (state.failed) return packageInstantiationDecl
            	pushFollow(FOLLOW_selected_name_in_v2008_package_instantiation_declaration1641)
            	selected_name115=selected_name()

            	state._fsp-=1
            	if (state.failed) return packageInstantiationDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:335:3: ( generic_map_aspect )?
            	val alt49 = {
            	val LA49_0 = input.LA(1)

            	if ( (LA49_0==GENERIC) ) 1
            	else -1
            	}
            	alt49 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:335:3: generic_map_aspect
            	        	pushFollow(FOLLOW_generic_map_aspect_in_v2008_package_instantiation_declaration1645)
            	        	generic_map_aspect116=generic_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return packageInstantiationDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_package_instantiation_declaration1648)
            	if (state.failed) return packageInstantiationDecl
            	if ( state.backtracking==0 ) {
            	  packageInstantiationDecl=new PackageInstantiationDeclaration(PACKAGE113,identifier114,selected_name115,generic_map_aspect116)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, v2008_package_instantiation_declaration_StartIndex) }
        }
        return packageInstantiationDecl
    }
    // $ANTLR end "v2008_package_instantiation_declaration"


    // $ANTLR start "designator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:338:1: designator returns [Identifier id] : ( identifier | STRING_LITERAL );
    @throws(classOf[RecognitionException])
    final def designator(): Identifier = {
        var id : Identifier = null
        val designator_StartIndex = input.index()
        var STRING_LITERAL118: Token = null
        var identifier117: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return id }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:338:36: ( identifier | STRING_LITERAL )
            val alt50 = {
            val LA50_0 = input.LA(1)

            if ( (LA50_0==BASIC_IDENTIFIER||LA50_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA50_0==STRING_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 50, 0, input)

                throw nvae
            }
            }
            alt50 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:339:2: identifier
                    	pushFollow(FOLLOW_identifier_in_designator1664)
                    	identifier117=identifier()

                    	state._fsp-=1
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=identifier117
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:340:4: STRING_LITERAL
                    	STRING_LITERAL118=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_designator1671).asInstanceOf[Token]
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(STRING_LITERAL118)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, designator_StartIndex) }
        }
        return id
    }
    // $ANTLR end "designator"


    // $ANTLR start "subprogram_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:342:1: subprogram_specification returns [SubProgramDeclaration decl] : ( PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | impure= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark );
    @throws(classOf[RecognitionException])
    final def subprogram_specification(): SubProgramDeclaration = {
        var decl : SubProgramDeclaration = null
        val subprogram_specification_StartIndex = input.index()
        var impure: Token = null
        var PROCEDURE119: Token = null
        var FUNCTION124: Token = null
        var identifier120: Identifier = null
        var generic_clause121: Seq[InterfaceList.AbstractInterfaceElement] = null
        var generic_map_aspect122: AssociationList = null
        var parameter_interface_list_procedure123: Seq[InterfaceList.AbstractInterfaceElement] = null
        var designator125: Identifier = null
        var generic_clause126: Seq[InterfaceList.AbstractInterfaceElement] = null
        var generic_map_aspect127: AssociationList = null
        var parameter_interface_list_function128: Seq[InterfaceList.AbstractInterfaceElement] = null
        var type_mark129: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return decl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:342:63: ( PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | impure= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark )
            val alt60 = {
            val LA60_0 = input.LA(1)

            if ( (LA60_0==PROCEDURE) ) 1
            else if ( (LA60_0==FUNCTION||LA60_0==IMPURE||LA60_0==PURE) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return decl}
                val nvae = new NoViableAltException("", 60, 0, input)

                throw nvae
            }
            }
            alt60 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:343:2: PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )?
                    	PROCEDURE119=`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_subprogram_specification1690).asInstanceOf[Token]
                    	if (state.failed) return decl
                    	pushFollow(FOLLOW_identifier_in_subprogram_specification1692)
                    	identifier120=identifier()

                    	state._fsp-=1
                    	if (state.failed) return decl
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:344:2: ({...}? => generic_clause ( generic_map_aspect )? )?
                    	val alt52 = {
                    	val LA52_0 = input.LA(1)

                    	if ( (LA52_0==GENERIC) && ((vhdl2008))) 1
                    	else -1
                    	}
                    	alt52 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:344:3: {...}? => generic_clause ( generic_map_aspect )?
                    	        	if ( !((vhdl2008)) ) {
                    	        	    if (state.backtracking>0) {state.failed=true; return decl}
                    	        	    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                    	        	}
                    	        	pushFollow(FOLLOW_generic_clause_in_subprogram_specification1698)
                    	        	generic_clause121=generic_clause()

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:344:31: ( generic_map_aspect )?
                    	        	val alt51 = {
                    	        	val LA51_0 = input.LA(1)

                    	        	if ( (LA51_0==GENERIC) ) 1
                    	        	else -1
                    	        	}
                    	        	alt51 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:344:31: generic_map_aspect
                    	        	        	pushFollow(FOLLOW_generic_map_aspect_in_subprogram_specification1700)
                    	        	        	generic_map_aspect122=generic_map_aspect()

                    	        	        	state._fsp-=1
                    	        	        	if (state.failed) return decl


                    	        	    case _ =>
                    	        	}



                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:345:2: ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )?
                    	val alt54 = {
                    	val LA54_0 = input.LA(1)

                    	if ( (LA54_0==PARAMETER) && ((vhdl2008))) 1
                    	else if ( (LA54_0==LPAREN) ) 1
                    	else -1
                    	}
                    	alt54 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:345:3: ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:345:3: ({...}? => PARAMETER )?
                    	        	val alt53 = {
                    	        	val LA53_0 = input.LA(1)

                    	        	if ( (LA53_0==PARAMETER) && ((vhdl2008))) 1
                    	        	else -1
                    	        	}
                    	        	alt53 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:345:4: {...}? => PARAMETER
                    	        	        	if ( !((vhdl2008)) ) {
                    	        	        	    if (state.backtracking>0) {state.failed=true; return decl}
                    	        	        	    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                    	        	        	}
                    	        	        	`match`(input,PARAMETER,FOLLOW_PARAMETER_in_subprogram_specification1710)
                    	        	        	if (state.failed) return decl


                    	        	    case _ =>
                    	        	}

                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_subprogram_specification1714)
                    	        	if (state.failed) return decl
                    	        	pushFollow(FOLLOW_parameter_interface_list_procedure_in_subprogram_specification1716)
                    	        	parameter_interface_list_procedure123=parameter_interface_list_procedure()

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_subprogram_specification1718)
                    	        	if (state.failed) return decl


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  decl=new ProcedureDeclaration(PROCEDURE119,identifier120,generic_clause121,generic_map_aspect122,parameter_interface_list_procedure123)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:347:4: ( PURE | impure= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:347:4: ( PURE | impure= IMPURE )?
                    	val alt55 = {
                    	val LA55_0 = input.LA(1)

                    	if ( (LA55_0==PURE) ) 1
                    	else if ( (LA55_0==IMPURE) ) 2
                    	else -1
                    	}
                    	alt55 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:347:5: PURE
                    	        	`match`(input,PURE,FOLLOW_PURE_in_subprogram_specification1730)
                    	        	if (state.failed) return decl

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:347:12: impure= IMPURE
                    	        	impure=`match`(input,IMPURE,FOLLOW_IMPURE_in_subprogram_specification1736).asInstanceOf[Token]
                    	        	if (state.failed) return decl


                    	    case _ =>
                    	}

                    	FUNCTION124=`match`(input,FUNCTION,FOLLOW_FUNCTION_in_subprogram_specification1740).asInstanceOf[Token]
                    	if (state.failed) return decl
                    	pushFollow(FOLLOW_designator_in_subprogram_specification1742)
                    	designator125=designator()

                    	state._fsp-=1
                    	if (state.failed) return decl
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:348:2: ({...}? => generic_clause ( generic_map_aspect )? )?
                    	val alt57 = {
                    	val LA57_0 = input.LA(1)

                    	if ( (LA57_0==GENERIC) && ((vhdl2008))) 1
                    	else -1
                    	}
                    	alt57 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:348:3: {...}? => generic_clause ( generic_map_aspect )?
                    	        	if ( !((vhdl2008)) ) {
                    	        	    if (state.backtracking>0) {state.failed=true; return decl}
                    	        	    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                    	        	}
                    	        	pushFollow(FOLLOW_generic_clause_in_subprogram_specification1748)
                    	        	generic_clause126=generic_clause()

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:348:31: ( generic_map_aspect )?
                    	        	val alt56 = {
                    	        	val LA56_0 = input.LA(1)

                    	        	if ( (LA56_0==GENERIC) ) 1
                    	        	else -1
                    	        	}
                    	        	alt56 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:348:31: generic_map_aspect
                    	        	        	pushFollow(FOLLOW_generic_map_aspect_in_subprogram_specification1750)
                    	        	        	generic_map_aspect127=generic_map_aspect()

                    	        	        	state._fsp-=1
                    	        	        	if (state.failed) return decl


                    	        	    case _ =>
                    	        	}



                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:349:2: ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )?
                    	val alt59 = {
                    	val LA59_0 = input.LA(1)

                    	if ( (LA59_0==PARAMETER) && ((vhdl2008))) 1
                    	else if ( (LA59_0==LPAREN) ) 1
                    	else -1
                    	}
                    	alt59 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:349:3: ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:349:3: ({...}? => PARAMETER )?
                    	        	val alt58 = {
                    	        	val LA58_0 = input.LA(1)

                    	        	if ( (LA58_0==PARAMETER) && ((vhdl2008))) 1
                    	        	else -1
                    	        	}
                    	        	alt58 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:349:4: {...}? => PARAMETER
                    	        	        	if ( !((vhdl2008)) ) {
                    	        	        	    if (state.backtracking>0) {state.failed=true; return decl}
                    	        	        	    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                    	        	        	}
                    	        	        	`match`(input,PARAMETER,FOLLOW_PARAMETER_in_subprogram_specification1760)
                    	        	        	if (state.failed) return decl


                    	        	    case _ =>
                    	        	}

                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_subprogram_specification1764)
                    	        	if (state.failed) return decl
                    	        	pushFollow(FOLLOW_parameter_interface_list_function_in_subprogram_specification1766)
                    	        	parameter_interface_list_function128=parameter_interface_list_function()

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_subprogram_specification1768)
                    	        	if (state.failed) return decl


                    	    case _ =>
                    	}

                    	`match`(input,RETURN,FOLLOW_RETURN_in_subprogram_specification1772)
                    	if (state.failed) return decl
                    	pushFollow(FOLLOW_type_mark_in_subprogram_specification1774)
                    	type_mark129=type_mark()

                    	state._fsp-=1
                    	if (state.failed) return decl
                    	if ( state.backtracking==0 ) {
                    	  decl=new FunctionDeclaration(FUNCTION124,impure==null,designator125,generic_clause126,generic_map_aspect127,parameter_interface_list_function128,type_mark129)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, subprogram_specification_StartIndex) }
        }
        return decl
    }
    // $ANTLR end "subprogram_specification"


    // $ANTLR start "subprogram_declartion_or_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:352:1: subprogram_declartion_or_body returns [DeclarativeItem declOrBody] : subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def subprogram_declartion_or_body(): DeclarativeItem = {
        var declOrBody : DeclarativeItem = null
        val subprogram_declartion_or_body_StartIndex = input.index()
        var subprogram_specification130: SubProgramDeclaration = null
        var subprogram_body131: SubProgramDefinition = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return declOrBody }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:352:68: ( subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:353:2: subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON
            	pushFollow(FOLLOW_subprogram_specification_in_subprogram_declartion_or_body1791)
            	subprogram_specification130=subprogram_specification()

            	state._fsp-=1
            	if (state.failed) return declOrBody
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:353:27: ( subprogram_body[$subprogram_specification.decl] )?
            	val alt61 = {
            	val LA61_0 = input.LA(1)

            	if ( (LA61_0==IS) ) 1
            	else -1
            	}
            	alt61 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:353:28: subprogram_body[$subprogram_specification.decl]
            	        	pushFollow(FOLLOW_subprogram_body_in_subprogram_declartion_or_body1794)
            	        	subprogram_body131=subprogram_body(subprogram_specification130)

            	        	state._fsp-=1
            	        	if (state.failed) return declOrBody


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subprogram_declartion_or_body1799)
            	if (state.failed) return declOrBody
            	if ( state.backtracking==0 ) {
            	  declOrBody=if (subprogram_body131!=null) subprogram_body131 else subprogram_specification130
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, subprogram_declartion_or_body_StartIndex) }
        }
        return declOrBody
    }
    // $ANTLR end "subprogram_declartion_or_body"


    // $ANTLR start "subprogram_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:356:1: subprogram_declaration returns [DeclarativeItem subprogramDecl] : subprogram_specification SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def subprogram_declaration(): DeclarativeItem = {
        var subprogramDecl : DeclarativeItem = null
        val subprogram_declaration_StartIndex = input.index()
        var subprogram_specification132: SubProgramDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return subprogramDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:356:65: ( subprogram_specification SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:357:2: subprogram_specification SEMICOLON
            	pushFollow(FOLLOW_subprogram_specification_in_subprogram_declaration1818)
            	subprogram_specification132=subprogram_specification()

            	state._fsp-=1
            	if (state.failed) return subprogramDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subprogram_declaration1820)
            	if (state.failed) return subprogramDecl
            	if ( state.backtracking==0 ) {
            	  subprogramDecl=subprogram_specification132
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, subprogram_declaration_StartIndex) }
        }
        return subprogramDecl
    }
    // $ANTLR end "subprogram_declaration"


    // $ANTLR start "subprogram_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:360:1: subprogram_body[SubProgramDeclaration subprogramDecl] returns [SubProgramDefinition subProgramDef] : IS sync[syncMessage] ( subprogram_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? ;
    @throws(classOf[RecognitionException])
    final def subprogram_body(subprogramDecl: SubProgramDeclaration): SubProgramDefinition = {
        var subProgramDef : SubProgramDefinition = null
        val subprogram_body_StartIndex = input.index()
        var endIdent: Identifier = null
        var subprogram_declarative_item133: DeclarativeItem = null
        var sequence_of_statements134: Seq[SequentialStatement] = null



        	val declItems=new Buffer[DeclarativeItem]()
        	val syncMessage="subprogram declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return subProgramDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:364:3: ( IS sync[syncMessage] ( subprogram_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:365:2: IS sync[syncMessage] ( subprogram_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )?
            	`match`(input,IS,FOLLOW_IS_in_subprogram_body1842)
            	if (state.failed) return subProgramDef
            	pushFollow(FOLLOW_sync_in_subprogram_body1846)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return subProgramDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:366:21: ( subprogram_declarative_item sync[syncMessage] )*
            	var loop62_quitflag = false
            	while (!loop62_quitflag) {
            	    val alt62 = {
            	val LA62_0 = input.LA(1)

            	if ( (LA62_0==FUNCTION||LA62_0==IMPURE||LA62_0==PROCEDURE||LA62_0==PURE) ) 1
            	else if ( (LA62_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA62_0==ALIAS||LA62_0==ATTRIBUTE||LA62_0==CONSTANT||LA62_0==FILE||LA62_0==GROUP||LA62_0==SHARED||LA62_0==SUBTYPE||LA62_0==TYPE||(LA62_0>=USE && LA62_0<=VARIABLE)) ) 1

            	else -1
            	}
            	    alt62 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:366:22: subprogram_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_subprogram_declarative_item_in_subprogram_body1850)
            		    	subprogram_declarative_item133=subprogram_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return subProgramDef
            		    	if ( state.backtracking==0 ) {
            		    	  declItems += subprogram_declarative_item133
            		    	}
            		    	pushFollow(FOLLOW_sync_in_subprogram_body1853)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return subProgramDef


            		case _ => loop62_quitflag = true
            	    }
            	}

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_subprogram_body1860)
            	if (state.failed) return subProgramDef
            	pushFollow(FOLLOW_sequence_of_statements_in_subprogram_body1864)
            	sequence_of_statements134=sequence_of_statements()

            	state._fsp-=1
            	if (state.failed) return subProgramDef
            	`match`(input,END,FOLLOW_END_in_subprogram_body1867)
            	if (state.failed) return subProgramDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:369:6: ({...}? => PROCEDURE | {...}? => FUNCTION )?
            	val alt63 = {
            	val LA63_0 = input.LA(1)

            	if ( (LA63_0==PROCEDURE) && ((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) 1
            	else if ( (LA63_0==FUNCTION) && ((subprogramDecl.isInstanceOf[FunctionDeclaration]))) 2
            	else -1
            	}
            	alt63 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:369:7: {...}? => PROCEDURE
            	        	if ( !((subprogramDecl.isInstanceOf[ProcedureDeclaration])) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return subProgramDef}
            	        	    throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[ProcedureDeclaration]")
            	        	}
            	        	`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_subprogram_body1872)
            	        	if (state.failed) return subProgramDef

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:369:74: {...}? => FUNCTION
            	        	if ( !((subprogramDecl.isInstanceOf[FunctionDeclaration])) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return subProgramDef}
            	        	    throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[FunctionDeclaration]")
            	        	}
            	        	`match`(input,FUNCTION,FOLLOW_FUNCTION_in_subprogram_body1878)
            	        	if (state.failed) return subProgramDef


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:369:147: (endIdent= designator )?
            	val alt64 = {
            	val LA64_0 = input.LA(1)

            	if ( (LA64_0==BASIC_IDENTIFIER||LA64_0==EXTENDED_IDENTIFIER||LA64_0==STRING_LITERAL) ) 1
            	else -1
            	}
            	alt64 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:369:147: endIdent= designator
            	        	pushFollow(FOLLOW_designator_in_subprogram_body1884)
            	        	endIdent=designator()

            	        	state._fsp-=1
            	        	if (state.failed) return subProgramDef


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {

            	  		subProgramDef = subprogramDecl match {
            	  			case procDecl : ProcedureDeclaration => 
            	  				new ProcedureDefinition(subprogramDecl.position,procDecl.identifier,procDecl.genericInterfaceList,procDecl.genericAssociationList,procDecl.parameterInterfaceList,declItems.result,sequence_of_statements134,endIdent)
            	  			case funcDecl : FunctionDeclaration =>
            	  				new FunctionDefinition(subprogramDecl.position,funcDecl.isPure,funcDecl.identifier,funcDecl.genericInterfaceList,funcDecl.genericAssociationList,funcDecl.parameterInterfaceList,funcDecl.returnType,declItems.result,sequence_of_statements134,endIdent)
            	  		}	
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, subprogram_body_StartIndex) }
        }
        return subProgramDef
    }
    // $ANTLR end "subprogram_body"


    // $ANTLR start "subprogram_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:379:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    final def subprogram_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val subprogram_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body135: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration136: SubprogramInstantiationDeclaration = null
        var package_declaration137: PackageDeclaration = null
        var package_body138: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration139: PackageInstantiationDeclaration = null
        var type_declaration140: AbstractTypeDeclaration = null
        var subtype_declaration141: SubTypeDeclaration = null
        var constant_declaration142: ConstantDeclaration = null
        var variable_declaration143: VariableDeclaration = null
        var file_declaration144: FileDeclaration = null
        var alias_declaration145: AliasDeclaration = null
        var attribute_declaration146: AttributeDeclaration = null
        var attribute_specification147: AttributeSpecification = null
        var use_clause148: UseClause = null
        var group_template_declaration149: GroupTemplateDeclaration = null
        var group_declaration150: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:379:60: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            val alt66 = dfa66.predict(input)
            alt66 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:380:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item1906)
                    	subprogram_declartion_or_body135=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body135
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:381:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "subprogram_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:381:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt65 = {
                    	val LA65_0 = input.LA(1)

                    	if ( (LA65_0==FUNCTION||LA65_0==PROCEDURE) ) 1
                    	else if ( (LA65_0==PACKAGE) ) {
                    	val LA65_2 = input.LA(2)

                    	if ( (LA65_2==BODY) ) 3
                    	else if ( (LA65_2==BASIC_IDENTIFIER||LA65_2==EXTENDED_IDENTIFIER) ) {
                    	val LA65_4 = input.LA(3)

                    	if ( (LA65_4==IS) ) {
                    	val LA65_5 = input.LA(4)

                    	if ( (LA65_5==NEW) ) 4
                    	else if ( (LA65_5==ALIAS||LA65_5==ATTRIBUTE||LA65_5==COMPONENT||(LA65_5>=CONSTANT && LA65_5<=DISCONNECT)||LA65_5==END||LA65_5==FILE||LA65_5==FUNCTION||(LA65_5>=GENERIC && LA65_5<=GROUP)||LA65_5==IMPURE||LA65_5==PACKAGE||LA65_5==PROCEDURE||LA65_5==PURE||(LA65_5>=SHARED && LA65_5<=SIGNAL)||LA65_5==SUBTYPE||LA65_5==TYPE||(LA65_5>=USE && LA65_5<=VARIABLE)||(LA65_5>=NATURE && LA65_5<=TERMINAL)||LA65_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 65, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 65, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 65, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 65, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt65 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:381:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_subprogram_declarative_item1916)
                    	        	v2008_subprogram_instantiation_declaration136=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration136
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:382:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_subprogram_declarative_item1925)
                    	        	package_declaration137=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration137
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:383:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_subprogram_declarative_item1934)
                    	        	package_body138=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body138
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:384:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_subprogram_declarative_item1943)
                    	        	v2008_package_instantiation_declaration139=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration139
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:386:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_subprogram_declarative_item1955)
                    	type_declaration140=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration140
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:387:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_subprogram_declarative_item1962)
                    	subtype_declaration141=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration141
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:388:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_subprogram_declarative_item1969)
                    	constant_declaration142=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration142
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:389:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_subprogram_declarative_item1976)
                    	variable_declaration143=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration143
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:390:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_subprogram_declarative_item1983)
                    	file_declaration144=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration144
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:391:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_subprogram_declarative_item1990)
                    	alias_declaration145=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration145
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:392:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_subprogram_declarative_item1997)
                    	attribute_declaration146=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration146
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:393:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_subprogram_declarative_item2004)
                    	attribute_specification147=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification147
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:394:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_subprogram_declarative_item2011)
                    	use_clause148=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause148
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:395:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_subprogram_declarative_item2018)
                    	group_template_declaration149=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration149
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:396:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_subprogram_declarative_item2025)
                    	group_declaration150=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration150
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, subprogram_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "subprogram_declarative_item"


    // $ANTLR start "v2008_subprogram_instantiation_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:398:1: v2008_subprogram_instantiation_declaration returns [SubprogramInstantiationDeclaration subprogramInstantiationDecl] : ( PROCEDURE | functionToken= FUNCTION ) identifier IS NEW selected_name ( signature )? ( generic_map_aspect )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_subprogram_instantiation_declaration(): SubprogramInstantiationDeclaration = {
        var subprogramInstantiationDecl : SubprogramInstantiationDeclaration = null
        val v2008_subprogram_instantiation_declaration_StartIndex = input.index()
        var functionToken: Token = null
        var PROCEDURE151: Token = null
        var identifier152: Identifier = null
        var selected_name153: SelectedName = null
        var signature154: Signature = null
        var generic_map_aspect155: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return subprogramInstantiationDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:398:117: ( ( PROCEDURE | functionToken= FUNCTION ) identifier IS NEW selected_name ( signature )? ( generic_map_aspect )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:399:2: ( PROCEDURE | functionToken= FUNCTION ) identifier IS NEW selected_name ( signature )? ( generic_map_aspect )? SEMICOLON
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:399:2: ( PROCEDURE | functionToken= FUNCTION )
            	val alt67 = {
            	val LA67_0 = input.LA(1)

            	if ( (LA67_0==PROCEDURE) ) 1
            	else if ( (LA67_0==FUNCTION) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return subprogramInstantiationDecl}
            	    val nvae = new NoViableAltException("", 67, 0, input)

            	    throw nvae
            	}
            	}
            	alt67 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:399:3: PROCEDURE
            	        	PROCEDURE151=`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_v2008_subprogram_instantiation_declaration2041).asInstanceOf[Token]
            	        	if (state.failed) return subprogramInstantiationDecl

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:399:15: functionToken= FUNCTION
            	        	functionToken=`match`(input,FUNCTION,FOLLOW_FUNCTION_in_v2008_subprogram_instantiation_declaration2047).asInstanceOf[Token]
            	        	if (state.failed) return subprogramInstantiationDecl


            	    case _ =>
            	}

            	pushFollow(FOLLOW_identifier_in_v2008_subprogram_instantiation_declaration2050)
            	identifier152=identifier()

            	state._fsp-=1
            	if (state.failed) return subprogramInstantiationDecl
            	`match`(input,IS,FOLLOW_IS_in_v2008_subprogram_instantiation_declaration2052)
            	if (state.failed) return subprogramInstantiationDecl
            	`match`(input,NEW,FOLLOW_NEW_in_v2008_subprogram_instantiation_declaration2056)
            	if (state.failed) return subprogramInstantiationDecl
            	pushFollow(FOLLOW_selected_name_in_v2008_subprogram_instantiation_declaration2058)
            	selected_name153=selected_name()

            	state._fsp-=1
            	if (state.failed) return subprogramInstantiationDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:400:21: ( signature )?
            	val alt68 = {
            	val LA68_0 = input.LA(1)

            	if ( (LA68_0==LBRACKET) ) 1
            	else -1
            	}
            	alt68 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:400:21: signature
            	        	pushFollow(FOLLOW_signature_in_v2008_subprogram_instantiation_declaration2060)
            	        	signature154=signature()

            	        	state._fsp-=1
            	        	if (state.failed) return subprogramInstantiationDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:401:4: ( generic_map_aspect )?
            	val alt69 = {
            	val LA69_0 = input.LA(1)

            	if ( (LA69_0==GENERIC) ) 1
            	else -1
            	}
            	alt69 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:401:4: generic_map_aspect
            	        	pushFollow(FOLLOW_generic_map_aspect_in_v2008_subprogram_instantiation_declaration2066)
            	        	generic_map_aspect155=generic_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return subprogramInstantiationDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_subprogram_instantiation_declaration2069)
            	if (state.failed) return subprogramInstantiationDecl
            	if ( state.backtracking==0 ) {
            	  subprogramInstantiationDecl=new SubprogramInstantiationDeclaration(if (PROCEDURE151!=null) PROCEDURE151 else functionToken,PROCEDURE151!=null,identifier152,selected_name153,signature154,generic_map_aspect155)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, v2008_subprogram_instantiation_declaration_StartIndex) }
        }
        return subprogramInstantiationDecl
    }
    // $ANTLR end "v2008_subprogram_instantiation_declaration"


    // $ANTLR start "type_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:404:1: type_declaration returns [AbstractTypeDeclaration typeDecl] : TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def type_declaration(): AbstractTypeDeclaration = {
        var typeDecl : AbstractTypeDeclaration = null
        val type_declaration_StartIndex = input.index()
        var TYPE157: Token = null
        var identifier156: Identifier = null
        var type_definition158: AbstractTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return typeDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:404:61: ( TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:405:2: TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON
            	TYPE157=`match`(input,TYPE,FOLLOW_TYPE_in_type_declaration2085).asInstanceOf[Token]
            	if (state.failed) return typeDecl
            	pushFollow(FOLLOW_identifier_in_type_declaration2087)
            	identifier156=identifier()

            	state._fsp-=1
            	if (state.failed) return typeDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:405:18: ( IS type_definition[$identifier.id,toPosition($TYPE)] )?
            	val alt70 = {
            	val LA70_0 = input.LA(1)

            	if ( (LA70_0==IS) ) 1
            	else -1
            	}
            	alt70 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:405:19: IS type_definition[$identifier.id,toPosition($TYPE)]
            	        	`match`(input,IS,FOLLOW_IS_in_type_declaration2090)
            	        	if (state.failed) return typeDecl
            	        	pushFollow(FOLLOW_type_definition_in_type_declaration2092)
            	        	type_definition158=type_definition(identifier156, toPosition(TYPE157))

            	        	state._fsp-=1
            	        	if (state.failed) return typeDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration2097)
            	if (state.failed) return typeDecl
            	if ( state.backtracking==0 ) {

            	  		typeDecl=if (type_definition158!=null) type_definition158
            	  			  else new IncompleteTypeDeclaration(TYPE157,identifier156)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, type_declaration_StartIndex) }
        }
        return typeDecl
    }
    // $ANTLR end "type_declaration"


    // $ANTLR start "type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:411:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | numeric_type_definition[$id,pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );
    @throws(classOf[RecognitionException])
    final def type_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
        var typeDef : AbstractTypeDeclaration = null
        val type_definition_StartIndex = input.index()
        var enumeration_type_definition159: EnumerationTypeDefinition = null
        var numeric_type_definition160: AbstractTypeDeclaration = null
        var array_type_definition161: ArrayTypeDefinition = null
        var record_type_definition162: RecordTypeDefinition = null
        var access_type_definition163: AccessTypeDefinition = null
        var file_type_definition164: FileTypeDefinition = null
        var protected_type_body165: ProtectedTypeBodyDeclaration = null
        var protected_type_declaration166: ProtectedTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return typeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:411:87: ( enumeration_type_definition[$id,$pos] | numeric_type_definition[$id,pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] )
            val alt71 = dfa71.predict(input)
            alt71 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:412:2: enumeration_type_definition[$id,$pos]
                    	pushFollow(FOLLOW_enumeration_type_definition_in_type_definition2115)
                    	enumeration_type_definition159=enumeration_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=enumeration_type_definition159
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:413:4: numeric_type_definition[$id,pos]
                    	pushFollow(FOLLOW_numeric_type_definition_in_type_definition2123)
                    	numeric_type_definition160=numeric_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=numeric_type_definition160
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:414:4: array_type_definition[$id,$pos]
                    	pushFollow(FOLLOW_array_type_definition_in_type_definition2132)
                    	array_type_definition161=array_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=array_type_definition161
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:415:4: record_type_definition[$id,$pos]
                    	pushFollow(FOLLOW_record_type_definition_in_type_definition2140)
                    	record_type_definition162=record_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=record_type_definition162
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:416:4: access_type_definition[$id,$pos]
                    	pushFollow(FOLLOW_access_type_definition_in_type_definition2148)
                    	access_type_definition163=access_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=access_type_definition163
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:417:4: file_type_definition[$id,$pos]
                    	pushFollow(FOLLOW_file_type_definition_in_type_definition2156)
                    	file_type_definition164=file_type_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=file_type_definition164
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:418:4: protected_type_body[$id,$pos]
                    	pushFollow(FOLLOW_protected_type_body_in_type_definition2164)
                    	protected_type_body165=protected_type_body(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=protected_type_body165
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:419:4: protected_type_declaration[$id,$pos]
                    	pushFollow(FOLLOW_protected_type_declaration_in_type_definition2172)
                    	protected_type_declaration166=protected_type_declaration(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return typeDef
                    	if ( state.backtracking==0 ) {
                    	  typeDef=protected_type_declaration166
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, type_definition_StartIndex) }
        }
        return typeDef
    }
    // $ANTLR end "type_definition"


    // $ANTLR start "ams_nature_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:421:1: ams_nature_declaration returns [AbstractTypeDeclaration natureDecl] : NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_nature_declaration(): AbstractTypeDeclaration = {
        var natureDecl : AbstractTypeDeclaration = null
        val ams_nature_declaration_StartIndex = input.index()
        var NATURE168: Token = null
        var identifier167: Identifier = null
        var ams_nature_definition169: AbstractTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return natureDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:421:69: ( NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:422:2: NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON
            	NATURE168=`match`(input,NATURE,FOLLOW_NATURE_in_ams_nature_declaration2190).asInstanceOf[Token]
            	if (state.failed) return natureDecl
            	pushFollow(FOLLOW_identifier_in_ams_nature_declaration2192)
            	identifier167=identifier()

            	state._fsp-=1
            	if (state.failed) return natureDecl
            	`match`(input,IS,FOLLOW_IS_in_ams_nature_declaration2194)
            	if (state.failed) return natureDecl
            	pushFollow(FOLLOW_ams_nature_definition_in_ams_nature_declaration2196)
            	ams_nature_definition169=ams_nature_definition(identifier167, toPosition(NATURE168))

            	state._fsp-=1
            	if (state.failed) return natureDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_nature_declaration2199)
            	if (state.failed) return natureDecl
            	if ( state.backtracking==0 ) {
            	  natureDecl=ams_nature_definition169
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, ams_nature_declaration_StartIndex) }
        }
        return natureDecl
    }
    // $ANTLR end "ams_nature_declaration"


    // $ANTLR start "ams_terminal_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:425:1: ams_terminal_declaration returns [TerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_terminal_declaration(): TerminalDeclaration = {
        var terminalDecl : TerminalDeclaration = null
        val ams_terminal_declaration_StartIndex = input.index()
        var TERMINAL170: Token = null
        var identifier_list171: Seq[Identifier] = null
        var ams_subnature_indication172: SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return terminalDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:425:69: ( TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:426:2: TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON
            	TERMINAL170=`match`(input,TERMINAL,FOLLOW_TERMINAL_in_ams_terminal_declaration2215).asInstanceOf[Token]
            	if (state.failed) return terminalDecl
            	pushFollow(FOLLOW_identifier_list_in_ams_terminal_declaration2217)
            	identifier_list171=identifier_list()

            	state._fsp-=1
            	if (state.failed) return terminalDecl
            	`match`(input,COLON,FOLLOW_COLON_in_ams_terminal_declaration2219)
            	if (state.failed) return terminalDecl
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_terminal_declaration2221)
            	ams_subnature_indication172=ams_subnature_indication()

            	state._fsp-=1
            	if (state.failed) return terminalDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_terminal_declaration2223)
            	if (state.failed) return terminalDecl
            	if ( state.backtracking==0 ) {
            	  terminalDecl=new TerminalDeclaration(TERMINAL170,identifier_list171,ams_subnature_indication172)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, ams_terminal_declaration_StartIndex) }
        }
        return terminalDecl
    }
    // $ANTLR end "ams_terminal_declaration"


    // $ANTLR start "ams_nature_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:429:1: ams_nature_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration natureDef] : ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] );
    @throws(classOf[RecognitionException])
    final def ams_nature_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
        var natureDef : AbstractTypeDeclaration = null
        val ams_nature_definition_StartIndex = input.index()
        var ams_scalar_nature_definition173: ScalarNatureDefinition = null
        var ams_array_nature_definition174: ArrayNatureTypeDefinition = null
        var ams_record_nature_definition175: RecordNatureDefinition = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return natureDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:429:95: ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] )
            val alt72 = input.LA(1) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL => 1
            case ARRAY => 2
            case RECORD => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return natureDef}
                val nvae = new NoViableAltException("", 72, 0, input)

                throw nvae
            }

            alt72 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:430:2: ams_scalar_nature_definition[$id,pos]
                    	pushFollow(FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition2241)
                    	ams_scalar_nature_definition173=ams_scalar_nature_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return natureDef
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_scalar_nature_definition173
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:431:4: ams_array_nature_definition[$id,pos]
                    	pushFollow(FOLLOW_ams_array_nature_definition_in_ams_nature_definition2249)
                    	ams_array_nature_definition174=ams_array_nature_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return natureDef
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_array_nature_definition174
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:432:4: ams_record_nature_definition[$id,pos]
                    	pushFollow(FOLLOW_ams_record_nature_definition_in_ams_nature_definition2257)
                    	ams_record_nature_definition175=ams_record_nature_definition(id, pos)

                    	state._fsp-=1
                    	if (state.failed) return natureDef
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_record_nature_definition175
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, ams_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_nature_definition"


    // $ANTLR start "ams_through_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:434:1: ams_through_aspect returns [(Seq[Identifier],Option[Expression],Option[Expression]) through_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH ;
    @throws(classOf[RecognitionException])
    final def ams_through_aspect(): (Seq[Identifier],Option[Expression],Option[Expression]) = {
        var through_aspect : (Seq[Identifier],Option[Expression],Option[Expression]) = null
        val ams_through_aspect_StartIndex = input.index()
        var toleranceExpression: Expression = null
        var defaultExpression: Expression = null
        var identifier_list176: Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return through_aspect }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:434:104: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:435:2: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH
            	pushFollow(FOLLOW_identifier_list_in_ams_through_aspect2273)
            	identifier_list176=identifier_list()

            	state._fsp-=1
            	if (state.failed) return through_aspect
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:435:18: ( TOLERANCE toleranceExpression= expression )?
            	val alt73 = {
            	val LA73_0 = input.LA(1)

            	if ( (LA73_0==TOLERANCE) ) 1
            	else -1
            	}
            	alt73 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:435:19: TOLERANCE toleranceExpression= expression
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_through_aspect2276)
            	        	if (state.failed) return through_aspect
            	        	pushFollow(FOLLOW_expression_in_ams_through_aspect2280)
            	        	toleranceExpression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return through_aspect


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:435:62: ( VAR_ASSIGN defaultExpression= expression )?
            	val alt74 = {
            	val LA74_0 = input.LA(1)

            	if ( (LA74_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt74 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:435:63: VAR_ASSIGN defaultExpression= expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_through_aspect2285)
            	        	if (state.failed) return through_aspect
            	        	pushFollow(FOLLOW_expression_in_ams_through_aspect2289)
            	        	defaultExpression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return through_aspect


            	    case _ =>
            	}

            	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_through_aspect2293)
            	if (state.failed) return through_aspect
            	if ( state.backtracking==0 ) {
            	  through_aspect=(identifier_list176,toleranceExpression,defaultExpression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, ams_through_aspect_StartIndex) }
        }
        return through_aspect
    }
    // $ANTLR end "ams_through_aspect"


    // $ANTLR start "ams_quantity_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:438:1: ams_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : QUANTITY (terminal= ams_terminal_aspect | identifier_list ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) ) ) SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_quantity_declaration(): AbstractQuantityDeclaration = {
        var quantityDecl : AbstractQuantityDeclaration = null
        val ams_quantity_declaration_StartIndex = input.index()
        var across: Token = null
        var through: Token = null
        var QUANTITY177: Token = null
        var terminal: (Name,Option[Name]) = null
        var toleranceExpression: Expression = null
        var defaultExpression: Expression = null
        var expr: Expression = null
        var identifier_list178: Seq[Identifier] = null
        var ams_through_aspect179: (Seq[Identifier],Option[Expression],Option[Expression]) = null
        var subtype_indication180: SubTypeIndication = null
        var ams_source_aspect181: Either[(Expression,Expression),Expression] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return quantityDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:438:77: ( QUANTITY (terminal= ams_terminal_aspect | identifier_list ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) ) ) SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:439:3: QUANTITY (terminal= ams_terminal_aspect | identifier_list ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) ) ) SEMICOLON
            	QUANTITY177=`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_quantity_declaration2310).asInstanceOf[Token]
            	if (state.failed) return quantityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:439:12: (terminal= ams_terminal_aspect | identifier_list ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) ) )
            	val alt82 = {
            	val LA82_0 = input.LA(1)

            	if ( (LA82_0==BASIC_IDENTIFIER||LA82_0==EXTENDED_IDENTIFIER) ) {
            	val LA82_1 = input.LA(2)

            	if ( (LA82_1==TO||(LA82_1>=SEMICOLON && LA82_1<=LPAREN)||LA82_1==LBRACKET||LA82_1==DOT||LA82_1==APOSTROPHE) ) 1
            	else if ( (LA82_1==VAR_ASSIGN||LA82_1==COMMA||LA82_1==COLON||(LA82_1>=TOLERANCE && LA82_1<=THROUGH)) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	    val nvae = new NoViableAltException("", 82, 1, input)

            	    throw nvae
            	}
            	}
            	else if ( (LA82_0==STRING_LITERAL) ) 1
            	else if ( (LA82_0==DLT) && ((vhdl2008))) 1
            	else {
            	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	    val nvae = new NoViableAltException("", 82, 0, input)

            	    throw nvae
            	}
            	}
            	alt82 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:439:13: terminal= ams_terminal_aspect
            	        	pushFollow(FOLLOW_ams_terminal_aspect_in_ams_quantity_declaration2315)
            	        	terminal=ams_terminal_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl
            	        	if ( state.backtracking==0 ) {
            	        	  quantityDecl=new BranchQuantityDeclaration(QUANTITY177,None,None,terminal)
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:440:8: identifier_list ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) )
            	        	pushFollow(FOLLOW_identifier_list_in_ams_quantity_declaration2326)
            	        	identifier_list178=identifier_list()

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:441:7: ( ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect | COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect ) )
            	        	val alt81 = {
            	        	val LA81_0 = input.LA(1)

            	        	if ( (LA81_0==VAR_ASSIGN||(LA81_0>=TOLERANCE && LA81_0<=THROUGH)) ) 1
            	        	else if ( (LA81_0==COLON) ) 2
            	        	else {
            	        	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	        	    val nvae = new NoViableAltException("", 81, 0, input)

            	        	    throw nvae
            	        	}
            	        	}
            	        	alt81 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:5: ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? (across= ACROSS | through= THROUGH ) ({...}? => ams_through_aspect )? terminal= ams_terminal_aspect
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:5: ( TOLERANCE toleranceExpression= expression )?
            	        	        	val alt75 = {
            	        	        	val LA75_0 = input.LA(1)

            	        	        	if ( (LA75_0==TOLERANCE) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt75 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:6: TOLERANCE toleranceExpression= expression
            	        	        	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_quantity_declaration2342)
            	        	        	        	if (state.failed) return quantityDecl
            	        	        	        	pushFollow(FOLLOW_expression_in_ams_quantity_declaration2346)
            	        	        	        	toleranceExpression=expression()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return quantityDecl


            	        	        	    case _ =>
            	        	        	}

            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:49: ( VAR_ASSIGN defaultExpression= expression )?
            	        	        	val alt76 = {
            	        	        	val LA76_0 = input.LA(1)

            	        	        	if ( (LA76_0==VAR_ASSIGN) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt76 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:50: VAR_ASSIGN defaultExpression= expression
            	        	        	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_quantity_declaration2351)
            	        	        	        	if (state.failed) return quantityDecl
            	        	        	        	pushFollow(FOLLOW_expression_in_ams_quantity_declaration2355)
            	        	        	        	defaultExpression=expression()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return quantityDecl


            	        	        	    case _ =>
            	        	        	}

            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:92: (across= ACROSS | through= THROUGH )
            	        	        	val alt77 = {
            	        	        	val LA77_0 = input.LA(1)

            	        	        	if ( (LA77_0==ACROSS) ) 1
            	        	        	else if ( (LA77_0==THROUGH) ) 2
            	        	        	else {
            	        	        	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	        	        	    val nvae = new NoViableAltException("", 77, 0, input)

            	        	        	    throw nvae
            	        	        	}
            	        	        	}
            	        	        	alt77 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:93: across= ACROSS
            	        	        	        	across=`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_quantity_declaration2362).asInstanceOf[Token]
            	        	        	        	if (state.failed) return quantityDecl

            	        	        	    case 2 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:107: through= THROUGH
            	        	        	        	through=`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_quantity_declaration2366).asInstanceOf[Token]
            	        	        	        	if (state.failed) return quantityDecl


            	        	        	    case _ =>
            	        	        	}

            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:124: ({...}? => ams_through_aspect )?
            	        	        	val alt78 = {
            	        	        	val LA78_0 = input.LA(1)

            	        	        	if ( (LA78_0==BASIC_IDENTIFIER||LA78_0==EXTENDED_IDENTIFIER) ) {
            	        	        	val LA78_1 = input.LA(2)

            	        	        	if ( (LA78_1==VAR_ASSIGN||LA78_1==COMMA||LA78_1==TOLERANCE||LA78_1==THROUGH) && ((through==null))) 1
            	        	        	else -1
            	        	        	}
            	        	        	else -1
            	        	        	}
            	        	        	alt78 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:442:125: {...}? => ams_through_aspect
            	        	        	        	if ( !((through==null)) ) {
            	        	        	        	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	        	        	        	    throw new FailedPredicateException(input, "ams_quantity_declaration", "$through==null")
            	        	        	        	}
            	        	        	        	pushFollow(FOLLOW_ams_through_aspect_in_ams_quantity_declaration2372)
            	        	        	        	ams_through_aspect179=ams_through_aspect()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return quantityDecl


            	        	        	    case _ =>
            	        	        	}

            	        	        	pushFollow(FOLLOW_ams_terminal_aspect_in_ams_quantity_declaration2378)
            	        	        	terminal=ams_terminal_aspect()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return quantityDecl
            	        	        	if ( state.backtracking==0 ) {

            	        	        	   						quantityDecl = if (across!=null) new BranchQuantityDeclaration(QUANTITY177,(identifier_list178,Option(toleranceExpression),Option(defaultExpression)),ams_through_aspect179,terminal)
            	        	        	   								else new BranchQuantityDeclaration(QUANTITY177,None,(identifier_list178,Option(toleranceExpression),Option(defaultExpression)),terminal)
            	        	        	   					
            	        	        	}

            	        	    case 2 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:447:7: COLON subtype_indication ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect )
            	        	        	`match`(input,COLON,FOLLOW_COLON_in_ams_quantity_declaration2394)
            	        	        	if (state.failed) return quantityDecl
            	        	        	pushFollow(FOLLOW_subtype_indication_in_ams_quantity_declaration2396)
            	        	        	subtype_indication180=subtype_indication()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return quantityDecl
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:448:6: ( ( VAR_ASSIGN expr= expression )? | ams_source_aspect )
            	        	        	val alt80 = {
            	        	        	val LA80_0 = input.LA(1)

            	        	        	if ( (LA80_0==VAR_ASSIGN||LA80_0==SEMICOLON) ) 1
            	        	        	else if ( ((LA80_0>=SPECTRUM && LA80_0<=NOISE)) ) 2
            	        	        	else {
            	        	        	    if (state.backtracking>0) {state.failed=true; return quantityDecl}
            	        	        	    val nvae = new NoViableAltException("", 80, 0, input)

            	        	        	    throw nvae
            	        	        	}
            	        	        	}
            	        	        	alt80 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:449:6: ( VAR_ASSIGN expr= expression )?
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:449:6: ( VAR_ASSIGN expr= expression )?
            	        	        	        	val alt79 = {
            	        	        	        	val LA79_0 = input.LA(1)

            	        	        	        	if ( (LA79_0==VAR_ASSIGN) ) 1
            	        	        	        	else -1
            	        	        	        	}
            	        	        	        	alt79 match {
            	        	        	        	    case 1 =>
            	        	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:449:7: VAR_ASSIGN expr= expression
            	        	        	        	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_quantity_declaration2412)
            	        	        	        	        	if (state.failed) return quantityDecl
            	        	        	        	        	pushFollow(FOLLOW_expression_in_ams_quantity_declaration2416)
            	        	        	        	        	expr=expression()

            	        	        	        	        	state._fsp-=1
            	        	        	        	        	if (state.failed) return quantityDecl


            	        	        	        	    case _ =>
            	        	        	        	}

            	        	        	        	if ( state.backtracking==0 ) {
            	        	        	        	  quantityDecl=new FreeQuantityDeclaration(QUANTITY177,identifier_list178,subtype_indication180,expr)
            	        	        	        	}

            	        	        	    case 2 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:450:7: ams_source_aspect
            	        	        	        	pushFollow(FOLLOW_ams_source_aspect_in_ams_quantity_declaration2428)
            	        	        	        	ams_source_aspect181=ams_source_aspect()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return quantityDecl
            	        	        	        	if ( state.backtracking==0 ) {
            	        	        	        	  quantityDecl=new SourceQuantityDeclaration(QUANTITY177,identifier_list178,subtype_indication180,ams_source_aspect181)
            	        	        	        	}


            	        	        	    case _ =>
            	        	        	}



            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_quantity_declaration2446)
            	if (state.failed) return quantityDecl



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, ams_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_quantity_declaration"


    // $ANTLR start "ams_terminal_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:455:1: ams_terminal_aspect returns [(Name,Option[Name]) terminal_aspect] : plus_terminal_name= name ( TO minus_terminal_name= name )? ;
    @throws(classOf[RecognitionException])
    final def ams_terminal_aspect(): (Name,Option[Name]) = {
        var terminal_aspect : (Name,Option[Name]) = null
        val ams_terminal_aspect_StartIndex = input.index()
        var plus_terminal_name: Name = null
        var minus_terminal_name: Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return terminal_aspect }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:455:68: (plus_terminal_name= name ( TO minus_terminal_name= name )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:456:2: plus_terminal_name= name ( TO minus_terminal_name= name )?
            	pushFollow(FOLLOW_name_in_ams_terminal_aspect2463)
            	plus_terminal_name=name()

            	state._fsp-=1
            	if (state.failed) return terminal_aspect
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:456:26: ( TO minus_terminal_name= name )?
            	val alt83 = {
            	val LA83_0 = input.LA(1)

            	if ( (LA83_0==TO) ) 1
            	else -1
            	}
            	alt83 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:456:27: TO minus_terminal_name= name
            	        	`match`(input,TO,FOLLOW_TO_in_ams_terminal_aspect2466)
            	        	if (state.failed) return terminal_aspect
            	        	pushFollow(FOLLOW_name_in_ams_terminal_aspect2470)
            	        	minus_terminal_name=name()

            	        	state._fsp-=1
            	        	if (state.failed) return terminal_aspect


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  terminal_aspect=(plus_terminal_name,minus_terminal_name)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, ams_terminal_aspect_StartIndex) }
        }
        return terminal_aspect
    }
    // $ANTLR end "ams_terminal_aspect"


    // $ANTLR start "ams_source_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:459:1: ams_source_aspect returns [Either[(Expression,Expression),Expression] source_aspect] : ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression );
    @throws(classOf[RecognitionException])
    final def ams_source_aspect(): Either[(Expression,Expression),Expression] = {
        var source_aspect : Either[(Expression,Expression),Expression] = null
        val ams_source_aspect_StartIndex = input.index()
        var magnitude_simple_expression: Expression = null
        var phase_simple_expression: Expression = null
        var power_simple_expression: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return source_aspect }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:459:87: ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression )
            val alt84 = {
            val LA84_0 = input.LA(1)

            if ( (LA84_0==SPECTRUM) ) 1
            else if ( (LA84_0==NOISE) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return source_aspect}
                val nvae = new NoViableAltException("", 84, 0, input)

                throw nvae
            }
            }
            alt84 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:460:2: SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression
                    	`match`(input,SPECTRUM,FOLLOW_SPECTRUM_in_ams_source_aspect2489)
                    	if (state.failed) return source_aspect
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect2493)
                    	magnitude_simple_expression=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return source_aspect
                    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_source_aspect2495)
                    	if (state.failed) return source_aspect
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect2499)
                    	phase_simple_expression=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return source_aspect
                    	if ( state.backtracking==0 ) {
                    	  source_aspect=Left((magnitude_simple_expression,phase_simple_expression))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:461:4: NOISE power_simple_expression= simple_expression
                    	`match`(input,NOISE,FOLLOW_NOISE_in_ams_source_aspect2506)
                    	if (state.failed) return source_aspect
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect2510)
                    	power_simple_expression=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return source_aspect
                    	if ( state.backtracking==0 ) {
                    	  source_aspect=Right(power_simple_expression)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, ams_source_aspect_StartIndex) }
        }
        return source_aspect
    }
    // $ANTLR end "ams_source_aspect"


    // $ANTLR start "constant_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:463:1: constant_declaration returns [ConstantDeclaration constantDecl] : CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def constant_declaration(): ConstantDeclaration = {
        var constantDecl : ConstantDeclaration = null
        val constant_declaration_StartIndex = input.index()
        var CONSTANT182: Token = null
        var identifier_list183: Seq[Identifier] = null
        var subtype_indication184: SubTypeIndication = null
        var expression185: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return constantDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:463:65: ( CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:464:2: CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
            	CONSTANT182=`match`(input,CONSTANT,FOLLOW_CONSTANT_in_constant_declaration2526).asInstanceOf[Token]
            	if (state.failed) return constantDecl
            	pushFollow(FOLLOW_identifier_list_in_constant_declaration2528)
            	identifier_list183=identifier_list()

            	state._fsp-=1
            	if (state.failed) return constantDecl
            	`match`(input,COLON,FOLLOW_COLON_in_constant_declaration2530)
            	if (state.failed) return constantDecl
            	pushFollow(FOLLOW_subtype_indication_in_constant_declaration2532)
            	subtype_indication184=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return constantDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:464:52: ( VAR_ASSIGN expression )?
            	val alt85 = {
            	val LA85_0 = input.LA(1)

            	if ( (LA85_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt85 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:464:53: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_constant_declaration2535)
            	        	if (state.failed) return constantDecl
            	        	pushFollow(FOLLOW_expression_in_constant_declaration2537)
            	        	expression185=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return constantDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_constant_declaration2541)
            	if (state.failed) return constantDecl
            	if ( state.backtracking==0 ) {
            	  constantDecl=new ConstantDeclaration(CONSTANT182,identifier_list183,subtype_indication184,expression185)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, constant_declaration_StartIndex) }
        }
        return constantDecl
    }
    // $ANTLR end "constant_declaration"


    // $ANTLR start "signal_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:467:1: signal_declaration returns [SignalDeclaration signalDecl] : SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def signal_declaration(): SignalDeclaration = {
        var signalDecl : SignalDeclaration = null
        val signal_declaration_StartIndex = input.index()
        var reg: Token = null
        var bus: Token = null
        var SIGNAL186: Token = null
        var identifier_list187: Seq[Identifier] = null
        var subtype_indication188: SubTypeIndication = null
        var expression189: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return signalDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:467:59: ( SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:2: SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON
            	SIGNAL186=`match`(input,SIGNAL,FOLLOW_SIGNAL_in_signal_declaration2560).asInstanceOf[Token]
            	if (state.failed) return signalDecl
            	pushFollow(FOLLOW_identifier_list_in_signal_declaration2562)
            	identifier_list187=identifier_list()

            	state._fsp-=1
            	if (state.failed) return signalDecl
            	`match`(input,COLON,FOLLOW_COLON_in_signal_declaration2564)
            	if (state.failed) return signalDecl
            	pushFollow(FOLLOW_subtype_indication_in_signal_declaration2566)
            	subtype_indication188=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return signalDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:50: (reg= REGISTER | bus= BUS )?
            	val alt86 = {
            	val LA86_0 = input.LA(1)

            	if ( (LA86_0==REGISTER) ) 1
            	else if ( (LA86_0==BUS) ) 2
            	else -1
            	}
            	alt86 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:51: reg= REGISTER
            	        	reg=`match`(input,REGISTER,FOLLOW_REGISTER_in_signal_declaration2571).asInstanceOf[Token]
            	        	if (state.failed) return signalDecl

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:64: bus= BUS
            	        	bus=`match`(input,BUS,FOLLOW_BUS_in_signal_declaration2575).asInstanceOf[Token]
            	        	if (state.failed) return signalDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:74: ( VAR_ASSIGN expression )?
            	val alt87 = {
            	val LA87_0 = input.LA(1)

            	if ( (LA87_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt87 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:468:75: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_signal_declaration2580)
            	        	if (state.failed) return signalDecl
            	        	pushFollow(FOLLOW_expression_in_signal_declaration2582)
            	        	expression189=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return signalDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_signal_declaration2586)
            	if (state.failed) return signalDecl
            	if ( state.backtracking==0 ) {

            	  		val signalType=
            	  			if(reg!=null) Some(SignalDeclaration.Type.REGISTER)
            	  			else if (bus!=null) Some(SignalDeclaration.Type.BUS)
            	  			else None
            	  		signalDecl=new SignalDeclaration(SIGNAL186,identifier_list187,subtype_indication188,signalType,expression189)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, signal_declaration_StartIndex) }
        }
        return signalDecl
    }
    // $ANTLR end "signal_declaration"


    // $ANTLR start "variable_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:477:1: variable_declaration returns [VariableDeclaration varDecl] : ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def variable_declaration(): VariableDeclaration = {
        var varDecl : VariableDeclaration = null
        val variable_declaration_StartIndex = input.index()
        var VARIABLE190: Token = null
        var SHARED191: Token = null
        var identifier_list192: Seq[Identifier] = null
        var subtype_indication193: SubTypeIndication = null
        var expression194: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return varDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:477:60: ( ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:478:2: ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:478:2: ( SHARED )?
            	val alt88 = {
            	val LA88_0 = input.LA(1)

            	if ( (LA88_0==SHARED) ) 1
            	else -1
            	}
            	alt88 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:478:2: SHARED
            	        	SHARED191=`match`(input,SHARED,FOLLOW_SHARED_in_variable_declaration2603).asInstanceOf[Token]
            	        	if (state.failed) return varDecl


            	    case _ =>
            	}

            	VARIABLE190=`match`(input,VARIABLE,FOLLOW_VARIABLE_in_variable_declaration2606).asInstanceOf[Token]
            	if (state.failed) return varDecl
            	pushFollow(FOLLOW_identifier_list_in_variable_declaration2608)
            	identifier_list192=identifier_list()

            	state._fsp-=1
            	if (state.failed) return varDecl
            	`match`(input,COLON,FOLLOW_COLON_in_variable_declaration2610)
            	if (state.failed) return varDecl
            	pushFollow(FOLLOW_subtype_indication_in_variable_declaration2612)
            	subtype_indication193=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return varDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:478:60: ( VAR_ASSIGN expression )?
            	val alt89 = {
            	val LA89_0 = input.LA(1)

            	if ( (LA89_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt89 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:478:61: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_variable_declaration2615)
            	        	if (state.failed) return varDecl
            	        	pushFollow(FOLLOW_expression_in_variable_declaration2617)
            	        	expression194=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return varDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration2621)
            	if (state.failed) return varDecl
            	if ( state.backtracking==0 ) {
            	  varDecl=new VariableDeclaration(VARIABLE190,SHARED191!=null,identifier_list192,subtype_indication193,expression194)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, variable_declaration_StartIndex) }
        }
        return varDecl
    }
    // $ANTLR end "variable_declaration"


    // $ANTLR start "file_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:481:1: file_declaration returns [FileDeclaration fileDecl] : FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def file_declaration(): FileDeclaration = {
        var fileDecl : FileDeclaration = null
        val file_declaration_StartIndex = input.index()
        var FILE195: Token = null
        var file_open_kind_expression: Expression = null
        var file_logical_name: Expression = null
        var identifier_list196: Seq[Identifier] = null
        var subtype_indication197: SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return fileDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:481:53: ( FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:482:2: FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON
            	FILE195=`match`(input,FILE,FOLLOW_FILE_in_file_declaration2638).asInstanceOf[Token]
            	if (state.failed) return fileDecl
            	pushFollow(FOLLOW_identifier_list_in_file_declaration2640)
            	identifier_list196=identifier_list()

            	state._fsp-=1
            	if (state.failed) return fileDecl
            	`match`(input,COLON,FOLLOW_COLON_in_file_declaration2642)
            	if (state.failed) return fileDecl
            	pushFollow(FOLLOW_subtype_indication_in_file_declaration2644)
            	subtype_indication197=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return fileDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:482:48: ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )?
            	val alt91 = {
            	val LA91_0 = input.LA(1)

            	if ( (LA91_0==IS||LA91_0==OPEN) ) 1
            	else -1
            	}
            	alt91 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:482:49: ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:482:49: ( OPEN file_open_kind_expression= expression )?
            	        	val alt90 = {
            	        	val LA90_0 = input.LA(1)

            	        	if ( (LA90_0==OPEN) ) 1
            	        	else -1
            	        	}
            	        	alt90 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:482:50: OPEN file_open_kind_expression= expression
            	        	        	`match`(input,OPEN,FOLLOW_OPEN_in_file_declaration2648)
            	        	        	if (state.failed) return fileDecl
            	        	        	pushFollow(FOLLOW_expression_in_file_declaration2652)
            	        	        	file_open_kind_expression=expression()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return fileDecl


            	        	    case _ =>
            	        	}

            	        	`match`(input,IS,FOLLOW_IS_in_file_declaration2656)
            	        	if (state.failed) return fileDecl
            	        	pushFollow(FOLLOW_expression_in_file_declaration2660)
            	        	file_logical_name=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return fileDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_file_declaration2664)
            	if (state.failed) return fileDecl
            	if ( state.backtracking==0 ) {
            	  fileDecl=new FileDeclaration(FILE195,identifier_list196,subtype_indication197,file_open_kind_expression,file_logical_name)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, file_declaration_StartIndex) }
        }
        return fileDecl
    }
    // $ANTLR end "file_declaration"


    // $ANTLR start "alias_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:485:1: alias_declaration returns [AliasDeclaration aliasDecl] : ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def alias_declaration(): AliasDeclaration = {
        var aliasDecl : AliasDeclaration = null
        val alias_declaration_StartIndex = input.index()
        var ALIAS198: Token = null
        var alias_designator199: Identifier = null
        var subtype_indication200: SubTypeIndication = null
        var name201: Name = null
        var signature202: Signature = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return aliasDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:485:56: ( ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:486:2: ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON
            	ALIAS198=`match`(input,ALIAS,FOLLOW_ALIAS_in_alias_declaration2681).asInstanceOf[Token]
            	if (state.failed) return aliasDecl
            	pushFollow(FOLLOW_alias_designator_in_alias_declaration2683)
            	alias_designator199=alias_designator()

            	state._fsp-=1
            	if (state.failed) return aliasDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:486:25: ( COLON subtype_indication )?
            	val alt92 = {
            	val LA92_0 = input.LA(1)

            	if ( (LA92_0==COLON) ) 1
            	else -1
            	}
            	alt92 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:486:26: COLON subtype_indication
            	        	`match`(input,COLON,FOLLOW_COLON_in_alias_declaration2686)
            	        	if (state.failed) return aliasDecl
            	        	pushFollow(FOLLOW_subtype_indication_in_alias_declaration2688)
            	        	subtype_indication200=subtype_indication()

            	        	state._fsp-=1
            	        	if (state.failed) return aliasDecl


            	    case _ =>
            	}

            	`match`(input,IS,FOLLOW_IS_in_alias_declaration2692)
            	if (state.failed) return aliasDecl
            	pushFollow(FOLLOW_name_in_alias_declaration2694)
            	name201=name()

            	state._fsp-=1
            	if (state.failed) return aliasDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:486:61: ( signature )?
            	val alt93 = {
            	val LA93_0 = input.LA(1)

            	if ( (LA93_0==LBRACKET) ) 1
            	else -1
            	}
            	alt93 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:486:61: signature
            	        	pushFollow(FOLLOW_signature_in_alias_declaration2696)
            	        	signature202=signature()

            	        	state._fsp-=1
            	        	if (state.failed) return aliasDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_alias_declaration2699)
            	if (state.failed) return aliasDecl
            	if ( state.backtracking==0 ) {
            	  aliasDecl=new AliasDeclaration(ALIAS198,alias_designator199,subtype_indication200,name201,signature202)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, alias_declaration_StartIndex) }
        }
        return aliasDecl
    }
    // $ANTLR end "alias_declaration"


    // $ANTLR start "alias_designator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:489:1: alias_designator returns [Identifier id] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL );
    @throws(classOf[RecognitionException])
    final def alias_designator(): Identifier = {
        var id : Identifier = null
        val alias_designator_StartIndex = input.index()
        var CHARACTER_LITERAL204: Token = null
        var STRING_LITERAL205: Token = null
        var identifier203: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return id }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:489:42: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
            val alt94 = input.LA(1) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 1
            case CHARACTER_LITERAL => 2
            case STRING_LITERAL => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 94, 0, input)

                throw nvae
            }

            alt94 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:490:2: identifier
                    	pushFollow(FOLLOW_identifier_in_alias_designator2716)
                    	identifier203=identifier()

                    	state._fsp-=1
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=identifier203
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:491:4: CHARACTER_LITERAL
                    	CHARACTER_LITERAL204=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_alias_designator2723).asInstanceOf[Token]
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(CHARACTER_LITERAL204)
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:492:4: STRING_LITERAL
                    	STRING_LITERAL205=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_alias_designator2729).asInstanceOf[Token]
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(STRING_LITERAL205)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, alias_designator_StartIndex) }
        }
        return id
    }
    // $ANTLR end "alias_designator"


    // $ANTLR start "component_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:494:1: component_declaration returns [ComponentDeclaration componentDecl] : componentToken= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def component_declaration(): ComponentDeclaration = {
        var componentDecl : ComponentDeclaration = null
        val component_declaration_StartIndex = input.index()
        var componentToken: Token = null
        var start_identifier: Identifier = null
        var end_identifier: Identifier = null
        var generic_clause206: Seq[InterfaceList.AbstractInterfaceElement] = null
        var port_clause207: Seq[InterfaceList.AbstractInterfaceElement] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return componentDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:494:68: (componentToken= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:495:2: componentToken= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON
            	componentToken=`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_declaration2747).asInstanceOf[Token]
            	if (state.failed) return componentDecl
            	pushFollow(FOLLOW_identifier_in_component_declaration2751)
            	start_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return componentDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:495:55: ( IS )?
            	val alt95 = {
            	val LA95_0 = input.LA(1)

            	if ( (LA95_0==IS) ) 1
            	else -1
            	}
            	alt95 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:495:55: IS
            	        	`match`(input,IS,FOLLOW_IS_in_component_declaration2753)
            	        	if (state.failed) return componentDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:496:3: ( generic_clause SEMICOLON )?
            	val alt96 = {
            	val LA96_0 = input.LA(1)

            	if ( (LA96_0==GENERIC) ) 1
            	else -1
            	}
            	alt96 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:496:4: generic_clause SEMICOLON
            	        	pushFollow(FOLLOW_generic_clause_in_component_declaration2759)
            	        	generic_clause206=generic_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_declaration2761)
            	        	if (state.failed) return componentDecl


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:497:3: ( port_clause )?
            	val alt97 = {
            	val LA97_0 = input.LA(1)

            	if ( (LA97_0==PORT) ) 1
            	else -1
            	}
            	alt97 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:497:3: port_clause
            	        	pushFollow(FOLLOW_port_clause_in_component_declaration2767)
            	        	port_clause207=port_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl


            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_component_declaration2771)
            	if (state.failed) return componentDecl
            	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_declaration2773)
            	if (state.failed) return componentDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:498:30: (end_identifier= identifier )?
            	val alt98 = {
            	val LA98_0 = input.LA(1)

            	if ( (LA98_0==BASIC_IDENTIFIER||LA98_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt98 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:498:30: end_identifier= identifier
            	        	pushFollow(FOLLOW_identifier_in_component_declaration2777)
            	        	end_identifier=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_declaration2780)
            	if (state.failed) return componentDecl
            	if ( state.backtracking==0 ) {
            	  componentDecl=new ComponentDeclaration(componentToken,start_identifier,generic_clause206,port_clause207,end_identifier)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, component_declaration_StartIndex) }
        }
        return componentDecl
    }
    // $ANTLR end "component_declaration"


    // $ANTLR start "attribute_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:501:1: attribute_declaration returns [AttributeDeclaration attributeDecl] : ATTRIBUTE identifier COLON type_mark SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def attribute_declaration(): AttributeDeclaration = {
        var attributeDecl : AttributeDeclaration = null
        val attribute_declaration_StartIndex = input.index()
        var ATTRIBUTE208: Token = null
        var identifier209: Identifier = null
        var type_mark210: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return attributeDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:501:68: ( ATTRIBUTE identifier COLON type_mark SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:502:2: ATTRIBUTE identifier COLON type_mark SEMICOLON
            	ATTRIBUTE208=`match`(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_declaration2796).asInstanceOf[Token]
            	if (state.failed) return attributeDecl
            	pushFollow(FOLLOW_identifier_in_attribute_declaration2798)
            	identifier209=identifier()

            	state._fsp-=1
            	if (state.failed) return attributeDecl
            	`match`(input,COLON,FOLLOW_COLON_in_attribute_declaration2800)
            	if (state.failed) return attributeDecl
            	pushFollow(FOLLOW_type_mark_in_attribute_declaration2802)
            	type_mark210=type_mark()

            	state._fsp-=1
            	if (state.failed) return attributeDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute_declaration2804)
            	if (state.failed) return attributeDecl
            	if ( state.backtracking==0 ) {
            	  attributeDecl=new AttributeDeclaration(ATTRIBUTE208,identifier209,type_mark210)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, attribute_declaration_StartIndex) }
        }
        return attributeDecl
    }
    // $ANTLR end "attribute_declaration"


    // $ANTLR start "attribute_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:505:1: attribute_specification returns [AttributeSpecification attributeSpec] : ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def attribute_specification(): AttributeSpecification = {
        var attributeSpec : AttributeSpecification = null
        val attribute_specification_StartIndex = input.index()
        var ATTRIBUTE211: Token = null
        var identifier212: Identifier = null
        var entity_name_list213: Either[Seq[(Identifier,Option[Signature])],Identifier] = null
        var entity_class214: EntityClass.Value = null
        var expression215: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return attributeSpec }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:505:72: ( ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:506:2: ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON
            	ATTRIBUTE211=`match`(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_specification2822).asInstanceOf[Token]
            	if (state.failed) return attributeSpec
            	pushFollow(FOLLOW_identifier_in_attribute_specification2824)
            	identifier212=identifier()

            	state._fsp-=1
            	if (state.failed) return attributeSpec
            	`match`(input,OF,FOLLOW_OF_in_attribute_specification2826)
            	if (state.failed) return attributeSpec
            	pushFollow(FOLLOW_entity_name_list_in_attribute_specification2828)
            	entity_name_list213=entity_name_list()

            	state._fsp-=1
            	if (state.failed) return attributeSpec
            	`match`(input,COLON,FOLLOW_COLON_in_attribute_specification2830)
            	if (state.failed) return attributeSpec
            	pushFollow(FOLLOW_entity_class_in_attribute_specification2832)
            	entity_class214=entity_class()

            	state._fsp-=1
            	if (state.failed) return attributeSpec
            	`match`(input,IS,FOLLOW_IS_in_attribute_specification2834)
            	if (state.failed) return attributeSpec
            	pushFollow(FOLLOW_expression_in_attribute_specification2836)
            	expression215=expression()

            	state._fsp-=1
            	if (state.failed) return attributeSpec
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute_specification2838)
            	if (state.failed) return attributeSpec
            	if ( state.backtracking==0 ) {
            	  attributeSpec=new AttributeSpecification(ATTRIBUTE211,identifier212,entity_name_list213,entity_class214,expression215)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, attribute_specification_StartIndex) }
        }
        return attributeSpec
    }
    // $ANTLR end "attribute_specification"


    // $ANTLR start "entity_designator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:509:1: entity_designator returns [(Identifier,Option[Signature]) designator] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? ;
    @throws(classOf[RecognitionException])
    final def entity_designator(): (Identifier,Option[Signature]) = {
        var designator : (Identifier,Option[Signature]) = null
        val entity_designator_StartIndex = input.index()
        var CHARACTER_LITERAL217: Token = null
        var STRING_LITERAL218: Token = null
        var identifier216: Identifier = null
        var signature219: Signature = null



        	var id:Identifier=null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return designator }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:512:3: ( ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:513:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:513:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
            	val alt99 = input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 1
            	case CHARACTER_LITERAL => 2
            	case STRING_LITERAL => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return designator}
            	    val nvae = new NoViableAltException("", 99, 0, input)

            	    throw nvae
            	}

            	alt99 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:514:2: identifier
            	        	pushFollow(FOLLOW_identifier_in_entity_designator2865)
            	        	identifier216=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return designator
            	        	if ( state.backtracking==0 ) {
            	        	  id=identifier216
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:515:4: CHARACTER_LITERAL
            	        	CHARACTER_LITERAL217=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_entity_designator2872).asInstanceOf[Token]
            	        	if (state.failed) return designator
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(CHARACTER_LITERAL217)
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:516:4: STRING_LITERAL
            	        	STRING_LITERAL218=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_entity_designator2878).asInstanceOf[Token]
            	        	if (state.failed) return designator
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(STRING_LITERAL218)
            	        	}


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:517:4: ( signature )?
            	val alt100 = {
            	val LA100_0 = input.LA(1)

            	if ( (LA100_0==LBRACKET) ) 1
            	else -1
            	}
            	alt100 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:517:4: signature
            	        	pushFollow(FOLLOW_signature_in_entity_designator2884)
            	        	signature219=signature()

            	        	state._fsp-=1
            	        	if (state.failed) return designator


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  designator=(id,Option(signature219))
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, entity_designator_StartIndex) }
        }
        return designator
    }
    // $ANTLR end "entity_designator"


    // $ANTLR start "entity_name_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:520:1: entity_name_list returns [Either[Seq[(Identifier,Option[Signature])],Identifier] list] : (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL );
    @throws(classOf[RecognitionException])
    final def entity_name_list(): Either[Seq[(Identifier,Option[Signature])],Identifier] = {
        var list : Either[Seq[(Identifier,Option[Signature])],Identifier] = null
        val entity_name_list_StartIndex = input.index()
        var OTHERS220: Token = null
        var ALL221: Token = null
        var e1: (Identifier,Option[Signature]) = null
        var e2: (Identifier,Option[Signature]) = null



        	val elements=new Buffer[(Identifier,Option[Signature])]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:523:3: (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL )
            val alt102 = input.LA(1) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL | CHARACTER_LITERAL => 1
            case OTHERS => 2
            case ALL => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return list}
                val nvae = new NoViableAltException("", 102, 0, input)

                throw nvae
            }

            alt102 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:524:2: e1= entity_designator ( COMMA e2= entity_designator )*
                    	pushFollow(FOLLOW_entity_designator_in_entity_name_list2908)
                    	e1=entity_designator()

                    	state._fsp-=1
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  elements += e1
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:524:51: ( COMMA e2= entity_designator )*
                    	var loop101_quitflag = false
                    	while (!loop101_quitflag) {
                    	    val alt101 = {
                    	val LA101_0 = input.LA(1)

                    	if ( (LA101_0==COMMA) ) 1

                    	else -1
                    	}
                    	    alt101 match {
                    		case 1 =>
                    		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:524:52: COMMA e2= entity_designator
                    		    	`match`(input,COMMA,FOLLOW_COMMA_in_entity_name_list2912)
                    		    	if (state.failed) return list
                    		    	pushFollow(FOLLOW_entity_designator_in_entity_name_list2916)
                    		    	e2=entity_designator()

                    		    	state._fsp-=1
                    		    	if (state.failed) return list
                    		    	if ( state.backtracking==0 ) {
                    		    	  elements += e2
                    		    	}


                    		case _ => loop101_quitflag = true
                    	    }
                    	}

                    	if ( state.backtracking==0 ) {
                    	  list=Left(elements.result)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:525:4: OTHERS
                    	OTHERS220=`match`(input,OTHERS,FOLLOW_OTHERS_in_entity_name_list2927).asInstanceOf[Token]
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(OTHERS220))
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:526:4: ALL
                    	ALL221=`match`(input,ALL,FOLLOW_ALL_in_entity_name_list2934).asInstanceOf[Token]
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(ALL221))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, entity_name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "entity_name_list"


    // $ANTLR start "entity_class"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:528:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );
    @throws(classOf[RecognitionException])
    final def entity_class(): EntityClass.Value = {
        var entityClass : EntityClass.Value = null
        val entity_class_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return entityClass }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:528:54: ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) )
            val alt104 = dfa104.predict(input)
            alt104 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:529:2: ENTITY
                    	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_class2949)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.ENTITY
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:530:4: ARCHITECTURE
                    	`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_entity_class2956)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.ARCHITECTURE
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:531:4: CONFIGURATION
                    	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_entity_class2963)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.CONFIGURATION
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:532:4: PACKAGE
                    	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_entity_class2970)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.PACKAGE
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:533:4: PROCEDURE
                    	`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_entity_class2977)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.PROCEDURE
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:534:4: FUNCTION
                    	`match`(input,FUNCTION,FOLLOW_FUNCTION_in_entity_class2984)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.FUNCTION
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:535:4: TYPE
                    	`match`(input,TYPE,FOLLOW_TYPE_in_entity_class2991)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.TYPE
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:536:4: SUBTYPE
                    	`match`(input,SUBTYPE,FOLLOW_SUBTYPE_in_entity_class2998)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.SUBTYPE
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:537:4: CONSTANT
                    	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_entity_class3005)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.CONSTANT
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:538:4: SIGNAL
                    	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_entity_class3012)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.SIGNAL
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:539:4: VARIABLE
                    	`match`(input,VARIABLE,FOLLOW_VARIABLE_in_entity_class3019)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.VARIABLE
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:540:4: FILE
                    	`match`(input,FILE,FOLLOW_FILE_in_entity_class3026)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.FILE
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:541:4: COMPONENT
                    	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_entity_class3033)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.COMPONENT
                    	}

                case 14 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:542:4: LABEL
                    	`match`(input,LABEL,FOLLOW_LABEL_in_entity_class3040)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.LABEL
                    	}

                case 15 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:543:4: LITERAL
                    	`match`(input,LITERAL,FOLLOW_LITERAL_in_entity_class3047)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.LITERAL
                    	}

                case 16 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:544:4: UNITS
                    	`match`(input,UNITS,FOLLOW_UNITS_in_entity_class3054)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.UNITS
                    	}

                case 17 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:545:4: GROUP
                    	`match`(input,GROUP,FOLLOW_GROUP_in_entity_class3061)
                    	if (state.failed) return entityClass
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.GROUP
                    	}

                case 18 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:548:4: {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return entityClass}
                    	    throw new FailedPredicateException(input, "entity_class", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:548:12: ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
                    	val alt103 = input.LA(1) match {
                    	case NATURE => 1
                    	case SUBNATURE => 2
                    	case QUANTITY => 3
                    	case TERMINAL => 4
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return entityClass}
                    	    val nvae = new NoViableAltException("", 103, 0, input)

                    	    throw nvae
                    	}

                    	alt103 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:549:5: NATURE
                    	        	`match`(input,NATURE,FOLLOW_NATURE_in_entity_class3081)
                    	        	if (state.failed) return entityClass
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.NATURE
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:550:5: SUBNATURE
                    	        	`match`(input,SUBNATURE,FOLLOW_SUBNATURE_in_entity_class3089)
                    	        	if (state.failed) return entityClass
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.SUBNATURE
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:551:5: QUANTITY
                    	        	`match`(input,QUANTITY,FOLLOW_QUANTITY_in_entity_class3097)
                    	        	if (state.failed) return entityClass
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.QUANTITY
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:552:5: TERMINAL
                    	        	`match`(input,TERMINAL,FOLLOW_TERMINAL_in_entity_class3105)
                    	        	if (state.failed) return entityClass
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.TERMINAL
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, entity_class_StartIndex) }
        }
        return entityClass
    }
    // $ANTLR end "entity_class"


    // $ANTLR start "configuration_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:555:1: configuration_specification returns [ConfigurationSpecification configSpec] : forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )? ;
    @throws(classOf[RecognitionException])
    final def configuration_specification(): ConfigurationSpecification = {
        var configSpec : ConfigurationSpecification = null
        val configuration_specification_StartIndex = input.index()
        var forToken: Token = null
        var component_specification222: ComponentSpecification = null
        var binding_indication223: BindingIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return configSpec }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:555:77: (forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:556:2: forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )?
            	forToken=`match`(input,FOR,FOLLOW_FOR_in_configuration_specification3126).asInstanceOf[Token]
            	if (state.failed) return configSpec
            	pushFollow(FOLLOW_component_specification_in_configuration_specification3128)
            	component_specification222=component_specification()

            	state._fsp-=1
            	if (state.failed) return configSpec
            	pushFollow(FOLLOW_binding_indication_in_configuration_specification3132)
            	binding_indication223=binding_indication()

            	state._fsp-=1
            	if (state.failed) return configSpec
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_configuration_specification3134)
            	if (state.failed) return configSpec
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:559:2: ({...}? => END FOR SEMICOLON )?
            	val alt105 = {
            	val LA105_0 = input.LA(1)

            	if ( (LA105_0==END) && ((vhdl2008))) 1
            	else -1
            	}
            	alt105 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:559:3: {...}? => END FOR SEMICOLON
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return configSpec}
            	        	    throw new FailedPredicateException(input, "configuration_specification", "vhdl2008")
            	        	}
            	        	`match`(input,END,FOLLOW_END_in_configuration_specification3143)
            	        	if (state.failed) return configSpec
            	        	`match`(input,FOR,FOLLOW_FOR_in_configuration_specification3145)
            	        	if (state.failed) return configSpec
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_configuration_specification3147)
            	        	if (state.failed) return configSpec


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  configSpec= new ConfigurationSpecification(forToken,component_specification222,binding_indication223)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, configuration_specification_StartIndex) }
        }
        return configSpec
    }
    // $ANTLR end "configuration_specification"


    // $ANTLR start "instantiation_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:562:1: instantiation_list returns [Either[Seq[Identifier],Identifier] list] : ( identifier_list | OTHERS | ALL );
    @throws(classOf[RecognitionException])
    final def instantiation_list(): Either[Seq[Identifier],Identifier] = {
        var list : Either[Seq[Identifier],Identifier] = null
        val instantiation_list_StartIndex = input.index()
        var OTHERS225: Token = null
        var ALL226: Token = null
        var identifier_list224: Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:562:72: ( identifier_list | OTHERS | ALL )
            val alt106 = input.LA(1) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 1
            case OTHERS => 2
            case ALL => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return list}
                val nvae = new NoViableAltException("", 106, 0, input)

                throw nvae
            }

            alt106 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:563:2: identifier_list
                    	pushFollow(FOLLOW_identifier_list_in_instantiation_list3167)
                    	identifier_list224=identifier_list()

                    	state._fsp-=1
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  list=Left(identifier_list224)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:564:4: OTHERS
                    	OTHERS225=`match`(input,OTHERS,FOLLOW_OTHERS_in_instantiation_list3174).asInstanceOf[Token]
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(OTHERS225))
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:565:4: ALL
                    	ALL226=`match`(input,ALL,FOLLOW_ALL_in_instantiation_list3181).asInstanceOf[Token]
                    	if (state.failed) return list
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(ALL226))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, instantiation_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "instantiation_list"


    // $ANTLR start "component_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:567:1: component_specification returns [ComponentSpecification spec] : instantiation_list COLON selected_name ;
    @throws(classOf[RecognitionException])
    final def component_specification(): ComponentSpecification = {
        var spec : ComponentSpecification = null
        val component_specification_StartIndex = input.index()
        var instantiation_list227: Either[Seq[Identifier],Identifier] = null
        var selected_name228: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return spec }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:567:63: ( instantiation_list COLON selected_name )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:568:2: instantiation_list COLON selected_name
            	pushFollow(FOLLOW_instantiation_list_in_component_specification3198)
            	instantiation_list227=instantiation_list()

            	state._fsp-=1
            	if (state.failed) return spec
            	`match`(input,COLON,FOLLOW_COLON_in_component_specification3200)
            	if (state.failed) return spec
            	pushFollow(FOLLOW_selected_name_in_component_specification3202)
            	selected_name228=selected_name()

            	state._fsp-=1
            	if (state.failed) return spec
            	if ( state.backtracking==0 ) {
            	  spec = new ComponentSpecification(instantiation_list227,selected_name228)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, component_specification_StartIndex) }
        }
        return spec
    }
    // $ANTLR end "component_specification"


    // $ANTLR start "entity_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:571:1: entity_aspect returns [Option[Either[(SelectedName,Option[Identifier]),SelectedName]] entityAspect] : ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN );
    @throws(classOf[RecognitionException])
    final def entity_aspect(): Option[Either[(SelectedName,Option[Identifier]),SelectedName]] = {
        var entityAspect : Option[Either[(SelectedName,Option[Identifier]),SelectedName]] = null
        val entity_aspect_StartIndex = input.index()
        var entity_name: SelectedName = null
        var architecture_identifier: Identifier = null
        var configuration_name: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return entityAspect }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:571:104: ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN )
            val alt108 = input.LA(1) match {
            case ENTITY => 1
            case CONFIGURATION => 2
            case OPEN => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return entityAspect}
                val nvae = new NoViableAltException("", 108, 0, input)

                throw nvae
            }

            alt108 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:572:2: ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
                    	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_aspect3218)
                    	if (state.failed) return entityAspect
                    	pushFollow(FOLLOW_selected_name_in_entity_aspect3222)
                    	entity_name=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return entityAspect
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:572:35: ( LPAREN architecture_identifier= identifier RPAREN )?
                    	val alt107 = {
                    	val LA107_0 = input.LA(1)

                    	if ( (LA107_0==LPAREN) ) 1
                    	else -1
                    	}
                    	alt107 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:572:36: LPAREN architecture_identifier= identifier RPAREN
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_entity_aspect3225)
                    	        	if (state.failed) return entityAspect
                    	        	pushFollow(FOLLOW_identifier_in_entity_aspect3229)
                    	        	architecture_identifier=identifier()

                    	        	state._fsp-=1
                    	        	if (state.failed) return entityAspect
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_entity_aspect3231)
                    	        	if (state.failed) return entityAspect


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  entityAspect=Option(Left((entity_name,Option(architecture_identifier))))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:573:4: CONFIGURATION configuration_name= selected_name
                    	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_entity_aspect3240)
                    	if (state.failed) return entityAspect
                    	pushFollow(FOLLOW_selected_name_in_entity_aspect3245)
                    	configuration_name=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return entityAspect
                    	if ( state.backtracking==0 ) {
                    	  entityAspect=Option(Right(configuration_name))
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:574:4: OPEN
                    	`match`(input,OPEN,FOLLOW_OPEN_in_entity_aspect3252)
                    	if (state.failed) return entityAspect
                    	if ( state.backtracking==0 ) {
                    	  entityAspect=None
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, entity_aspect_StartIndex) }
        }
        return entityAspect
    }
    // $ANTLR end "entity_aspect"


    // $ANTLR start "binding_indication"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:576:1: binding_indication returns [BindingIndication indication] : ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? ;
    @throws(classOf[RecognitionException])
    final def binding_indication(): BindingIndication = {
        var indication : BindingIndication = null
        val binding_indication_StartIndex = input.index()
        var entity_aspect229: Option[Either[(SelectedName,Option[Identifier]),SelectedName]] = null
        var generic_map_aspect230: AssociationList = null
        var port_map_aspect231: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return indication }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:576:59: ( ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:577:2: ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:577:2: ( USE entity_aspect )?
            	val alt109 = {
            	val LA109_0 = input.LA(1)

            	if ( (LA109_0==USE) ) 1
            	else -1
            	}
            	alt109 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:577:3: USE entity_aspect
            	        	`match`(input,USE,FOLLOW_USE_in_binding_indication3270)
            	        	if (state.failed) return indication
            	        	pushFollow(FOLLOW_entity_aspect_in_binding_indication3272)
            	        	entity_aspect229=entity_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return indication


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:578:2: ( generic_map_aspect )?
            	val alt110 = {
            	val LA110_0 = input.LA(1)

            	if ( (LA110_0==GENERIC) ) 1
            	else -1
            	}
            	alt110 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:578:2: generic_map_aspect
            	        	pushFollow(FOLLOW_generic_map_aspect_in_binding_indication3277)
            	        	generic_map_aspect230=generic_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return indication


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:579:2: ( port_map_aspect )?
            	val alt111 = {
            	val LA111_0 = input.LA(1)

            	if ( (LA111_0==PORT) ) 1
            	else -1
            	}
            	alt111 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:579:2: port_map_aspect
            	        	pushFollow(FOLLOW_port_map_aspect_in_binding_indication3281)
            	        	port_map_aspect231=port_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return indication


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  indication = new BindingIndication(entity_aspect229,generic_map_aspect230,port_map_aspect231)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, binding_indication_StartIndex) }
        }
        return indication
    }
    // $ANTLR end "binding_indication"


    // $ANTLR start "disconnection_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:582:1: disconnection_specification returns [DisconnectionSpecification disconnectSpec] : DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def disconnection_specification(): DisconnectionSpecification = {
        var disconnectSpec : DisconnectionSpecification = null
        val disconnection_specification_StartIndex = input.index()
        var id: Token = null
        var DISCONNECT233: Token = null
        var selected_name_list232: Seq[SelectedName] = null
        var type_mark234: SelectedName = null
        var expression235: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return disconnectSpec }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:582:81: ( DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:583:2: DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON
            	DISCONNECT233=`match`(input,DISCONNECT,FOLLOW_DISCONNECT_in_disconnection_specification3298).asInstanceOf[Token]
            	if (state.failed) return disconnectSpec
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:583:13: ( selected_name_list | id= OTHERS | id= ALL )
            	val alt112 = input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL => 1
            	case OTHERS => 2
            	case ALL => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return disconnectSpec}
            	    val nvae = new NoViableAltException("", 112, 0, input)

            	    throw nvae
            	}

            	alt112 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:583:14: selected_name_list
            	        	pushFollow(FOLLOW_selected_name_list_in_disconnection_specification3301)
            	        	selected_name_list232=selected_name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return disconnectSpec

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:583:35: id= OTHERS
            	        	id=`match`(input,OTHERS,FOLLOW_OTHERS_in_disconnection_specification3307).asInstanceOf[Token]
            	        	if (state.failed) return disconnectSpec

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:583:47: id= ALL
            	        	id=`match`(input,ALL,FOLLOW_ALL_in_disconnection_specification3313).asInstanceOf[Token]
            	        	if (state.failed) return disconnectSpec


            	    case _ =>
            	}

            	`match`(input,COLON,FOLLOW_COLON_in_disconnection_specification3316)
            	if (state.failed) return disconnectSpec
            	pushFollow(FOLLOW_type_mark_in_disconnection_specification3318)
            	type_mark234=type_mark()

            	state._fsp-=1
            	if (state.failed) return disconnectSpec
            	`match`(input,AFTER,FOLLOW_AFTER_in_disconnection_specification3320)
            	if (state.failed) return disconnectSpec
            	pushFollow(FOLLOW_expression_in_disconnection_specification3322)
            	expression235=expression()

            	state._fsp-=1
            	if (state.failed) return disconnectSpec
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_disconnection_specification3324)
            	if (state.failed) return disconnectSpec
            	if ( state.backtracking==0 ) {

            	  		val signal_list = if (id==null) Left(selected_name_list232) else Right(toIdentifier(id))
            	  		disconnectSpec= new DisconnectionSpecification(DISCONNECT233,signal_list,type_mark234,expression235)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, disconnection_specification_StartIndex) }
        }
        return disconnectSpec
    }
    // $ANTLR end "disconnection_specification"


    // $ANTLR start "ams_step_limit_specification"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:589:1: ams_step_limit_specification returns [StepLimitSpecification stepLimitSpec] : LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_step_limit_specification(): StepLimitSpecification = {
        var stepLimitSpec : StepLimitSpecification = null
        val ams_step_limit_specification_StartIndex = input.index()
        var id: Token = null
        var LIMIT237: Token = null
        var selected_name_list236: Seq[SelectedName] = null
        var type_mark238: SelectedName = null
        var expression239: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return stepLimitSpec }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:589:77: ( LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:590:2: LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON
            	LIMIT237=`match`(input,LIMIT,FOLLOW_LIMIT_in_ams_step_limit_specification3340).asInstanceOf[Token]
            	if (state.failed) return stepLimitSpec
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:590:8: ( selected_name_list | id= OTHERS | id= ALL )
            	val alt113 = input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL => 1
            	case OTHERS => 2
            	case ALL => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return stepLimitSpec}
            	    val nvae = new NoViableAltException("", 113, 0, input)

            	    throw nvae
            	}

            	alt113 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:590:9: selected_name_list
            	        	pushFollow(FOLLOW_selected_name_list_in_ams_step_limit_specification3343)
            	        	selected_name_list236=selected_name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return stepLimitSpec

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:590:30: id= OTHERS
            	        	id=`match`(input,OTHERS,FOLLOW_OTHERS_in_ams_step_limit_specification3349).asInstanceOf[Token]
            	        	if (state.failed) return stepLimitSpec

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:590:42: id= ALL
            	        	id=`match`(input,ALL,FOLLOW_ALL_in_ams_step_limit_specification3355).asInstanceOf[Token]
            	        	if (state.failed) return stepLimitSpec


            	    case _ =>
            	}

            	`match`(input,COLON,FOLLOW_COLON_in_ams_step_limit_specification3359)
            	if (state.failed) return stepLimitSpec
            	pushFollow(FOLLOW_type_mark_in_ams_step_limit_specification3361)
            	type_mark238=type_mark()

            	state._fsp-=1
            	if (state.failed) return stepLimitSpec
            	`match`(input,WITH,FOLLOW_WITH_in_ams_step_limit_specification3363)
            	if (state.failed) return stepLimitSpec
            	pushFollow(FOLLOW_expression_in_ams_step_limit_specification3365)
            	expression239=expression()

            	state._fsp-=1
            	if (state.failed) return stepLimitSpec
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_step_limit_specification3367)
            	if (state.failed) return stepLimitSpec
            	if ( state.backtracking==0 ) {

            	  		val signal_list = if (id==null) Left(selected_name_list236) else Right(toIdentifier(id))
            	  		stepLimitSpec = new StepLimitSpecification(LIMIT237,signal_list,type_mark238,expression239)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, ams_step_limit_specification_StartIndex) }
        }
        return stepLimitSpec
    }
    // $ANTLR end "ams_step_limit_specification"


    // $ANTLR start "entity_class_entry"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:596:1: entity_class_entry returns [GroupTemplateDeclaration.EntityClassEntry entry] : entity_class ( BOX )? ;
    @throws(classOf[RecognitionException])
    final def entity_class_entry(): GroupTemplateDeclaration.EntityClassEntry = {
        var entry : GroupTemplateDeclaration.EntityClassEntry = null
        val entity_class_entry_StartIndex = input.index()
        var BOX241: Token = null
        var entity_class240: EntityClass.Value = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return entry }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:596:78: ( entity_class ( BOX )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:597:2: entity_class ( BOX )?
            	pushFollow(FOLLOW_entity_class_in_entity_class_entry3384)
            	entity_class240=entity_class()

            	state._fsp-=1
            	if (state.failed) return entry
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:597:15: ( BOX )?
            	val alt114 = {
            	val LA114_0 = input.LA(1)

            	if ( (LA114_0==BOX) ) 1
            	else -1
            	}
            	alt114 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:597:15: BOX
            	        	BOX241=`match`(input,BOX,FOLLOW_BOX_in_entity_class_entry3386).asInstanceOf[Token]
            	        	if (state.failed) return entry


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  entry = new GroupTemplateDeclaration.EntityClassEntry(entity_class240,BOX241!=null)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, entity_class_entry_StartIndex) }
        }
        return entry
    }
    // $ANTLR end "entity_class_entry"


    // $ANTLR start "group_template_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:600:1: group_template_declaration returns [GroupTemplateDeclaration groupTemplateDecl] : GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def group_template_declaration(): GroupTemplateDeclaration = {
        var groupTemplateDecl : GroupTemplateDeclaration = null
        val group_template_declaration_StartIndex = input.index()
        var GROUP242: Token = null
        var e1: GroupTemplateDeclaration.EntityClassEntry = null
        var e2: GroupTemplateDeclaration.EntityClassEntry = null
        var identifier243: Identifier = null



        	val elements=new Buffer[GroupTemplateDeclaration.EntityClassEntry]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return groupTemplateDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:603:2: ( GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:604:2: GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON
            	GROUP242=`match`(input,GROUP,FOLLOW_GROUP_in_group_template_declaration3408).asInstanceOf[Token]
            	if (state.failed) return groupTemplateDecl
            	pushFollow(FOLLOW_identifier_in_group_template_declaration3410)
            	identifier243=identifier()

            	state._fsp-=1
            	if (state.failed) return groupTemplateDecl
            	`match`(input,IS,FOLLOW_IS_in_group_template_declaration3412)
            	if (state.failed) return groupTemplateDecl
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_group_template_declaration3414)
            	if (state.failed) return groupTemplateDecl
            	pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration3418)
            	e1=entity_class_entry()

            	state._fsp-=1
            	if (state.failed) return groupTemplateDecl
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:604:74: ( COMMA e2= entity_class_entry )*
            	var loop115_quitflag = false
            	while (!loop115_quitflag) {
            	    val alt115 = {
            	val LA115_0 = input.LA(1)

            	if ( (LA115_0==COMMA) ) 1

            	else -1
            	}
            	    alt115 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:604:75: COMMA e2= entity_class_entry
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_group_template_declaration3422)
            		    	if (state.failed) return groupTemplateDecl
            		    	pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration3426)
            		    	e2=entity_class_entry()

            		    	state._fsp-=1
            		    	if (state.failed) return groupTemplateDecl
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop115_quitflag = true
            	    }
            	}

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_group_template_declaration3433)
            	if (state.failed) return groupTemplateDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_group_template_declaration3435)
            	if (state.failed) return groupTemplateDecl
            	if ( state.backtracking==0 ) {
            	  groupTemplateDecl=new GroupTemplateDeclaration(GROUP242,identifier243,elements.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, group_template_declaration_StartIndex) }
        }
        return groupTemplateDecl
    }
    // $ANTLR end "group_template_declaration"


    // $ANTLR start "group_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:607:1: group_declaration returns [GroupDeclaration groupDecl] : GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def group_declaration(): GroupDeclaration = {
        var groupDecl : GroupDeclaration = null
        val group_declaration_StartIndex = input.index()
        var GROUP244: Token = null
        var identifier245: Identifier = null
        var selected_name246: SelectedName = null
        var group_constituent_list247: Seq[Either[Name,Identifier]] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return groupDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:607:56: ( GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:608:2: GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON
            	GROUP244=`match`(input,GROUP,FOLLOW_GROUP_in_group_declaration3455).asInstanceOf[Token]
            	if (state.failed) return groupDecl
            	pushFollow(FOLLOW_identifier_in_group_declaration3457)
            	identifier245=identifier()

            	state._fsp-=1
            	if (state.failed) return groupDecl
            	`match`(input,COLON,FOLLOW_COLON_in_group_declaration3459)
            	if (state.failed) return groupDecl
            	pushFollow(FOLLOW_selected_name_in_group_declaration3461)
            	selected_name246=selected_name()

            	state._fsp-=1
            	if (state.failed) return groupDecl
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_group_declaration3463)
            	if (state.failed) return groupDecl
            	pushFollow(FOLLOW_group_constituent_list_in_group_declaration3465)
            	group_constituent_list247=group_constituent_list()

            	state._fsp-=1
            	if (state.failed) return groupDecl
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_group_declaration3467)
            	if (state.failed) return groupDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_group_declaration3469)
            	if (state.failed) return groupDecl
            	if ( state.backtracking==0 ) {
            	  groupDecl=new GroupDeclaration(GROUP244,identifier245,selected_name246,group_constituent_list247)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, group_declaration_StartIndex) }
        }
        return groupDecl
    }
    // $ANTLR end "group_declaration"


    // $ANTLR start "group_constituent"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:611:1: group_constituent returns [Either[Name,Identifier] constituent] : ( name | CHARACTER_LITERAL );
    @throws(classOf[RecognitionException])
    final def group_constituent(): Either[Name,Identifier] = {
        var constituent : Either[Name,Identifier] = null
        val group_constituent_StartIndex = input.index()
        var CHARACTER_LITERAL249: Token = null
        var name248: Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return constituent }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:611:66: ( name | CHARACTER_LITERAL )
            val alt116 = {
            val LA116_0 = input.LA(1)

            if ( (LA116_0==BASIC_IDENTIFIER||LA116_0==EXTENDED_IDENTIFIER||LA116_0==STRING_LITERAL) ) 1
            else if ( (LA116_0==DLT) && ((vhdl2008))) 1
            else if ( (LA116_0==CHARACTER_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return constituent}
                val nvae = new NoViableAltException("", 116, 0, input)

                throw nvae
            }
            }
            alt116 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:612:2: name
                    	pushFollow(FOLLOW_name_in_group_constituent3486)
                    	name248=name()

                    	state._fsp-=1
                    	if (state.failed) return constituent
                    	if ( state.backtracking==0 ) {
                    	  constituent=Left(name248)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:613:4: CHARACTER_LITERAL
                    	CHARACTER_LITERAL249=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_group_constituent3493).asInstanceOf[Token]
                    	if (state.failed) return constituent
                    	if ( state.backtracking==0 ) {
                    	  constituent=Right(toIdentifier(CHARACTER_LITERAL249))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, group_constituent_StartIndex) }
        }
        return constituent
    }
    // $ANTLR end "group_constituent"


    // $ANTLR start "group_constituent_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:615:1: group_constituent_list returns [Seq[Either[Name,Identifier]] list] : c1= group_constituent ( COMMA c2= group_constituent )* ;
    @throws(classOf[RecognitionException])
    final def group_constituent_list(): Seq[Either[Name,Identifier]] = {
        var list : Seq[Either[Name,Identifier]] = null
        val group_constituent_list_StartIndex = input.index()
        var c1: Either[Name,Identifier] = null
        var c2: Either[Name,Identifier] = null



        	val elements=new Buffer[Either[Name,Identifier]]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:618:3: (c1= group_constituent ( COMMA c2= group_constituent )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:619:2: c1= group_constituent ( COMMA c2= group_constituent )*
            	pushFollow(FOLLOW_group_constituent_in_group_constituent_list3514)
            	c1=group_constituent()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += c1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:619:52: ( COMMA c2= group_constituent )*
            	var loop117_quitflag = false
            	while (!loop117_quitflag) {
            	    val alt117 = {
            	val LA117_0 = input.LA(1)

            	if ( (LA117_0==COMMA) ) 1

            	else -1
            	}
            	    alt117 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:619:53: COMMA c2= group_constituent
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_group_constituent_list3518)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_group_constituent_in_group_constituent_list3522)
            		    	c2=group_constituent()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += c2
            		    	}


            		case _ => loop117_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, group_constituent_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "group_constituent_list"


    // $ANTLR start "use_clause"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:622:1: use_clause returns [UseClause useClause] : USE selected_name_list SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def use_clause(): UseClause = {
        var useClause : UseClause = null
        val use_clause_StartIndex = input.index()
        var USE250: Token = null
        var selected_name_list251: Seq[SelectedName] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return useClause }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:622:42: ( USE selected_name_list SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:623:2: USE selected_name_list SEMICOLON
            	USE250=`match`(input,USE,FOLLOW_USE_in_use_clause3546).asInstanceOf[Token]
            	if (state.failed) return useClause
            	pushFollow(FOLLOW_selected_name_list_in_use_clause3548)
            	selected_name_list251=selected_name_list()

            	state._fsp-=1
            	if (state.failed) return useClause
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_use_clause3550)
            	if (state.failed) return useClause
            	if ( state.backtracking==0 ) {
            	  useClause=new UseClause(USE250,selected_name_list251)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, use_clause_StartIndex) }
        }
        return useClause
    }
    // $ANTLR end "use_clause"


    // $ANTLR start "enumeration_literal"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:627:1: enumeration_literal returns [Identifier id] : ( identifier | CHARACTER_LITERAL );
    @throws(classOf[RecognitionException])
    final def enumeration_literal(): Identifier = {
        var id : Identifier = null
        val enumeration_literal_StartIndex = input.index()
        var CHARACTER_LITERAL253: Token = null
        var identifier252: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return id }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:627:45: ( identifier | CHARACTER_LITERAL )
            val alt118 = {
            val LA118_0 = input.LA(1)

            if ( (LA118_0==BASIC_IDENTIFIER||LA118_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA118_0==CHARACTER_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 118, 0, input)

                throw nvae
            }
            }
            alt118 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:628:2: identifier
                    	pushFollow(FOLLOW_identifier_in_enumeration_literal3569)
                    	identifier252=identifier()

                    	state._fsp-=1
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=identifier252
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:629:4: CHARACTER_LITERAL
                    	CHARACTER_LITERAL253=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_enumeration_literal3576).asInstanceOf[Token]
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(CHARACTER_LITERAL253)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, enumeration_literal_StartIndex) }
        }
        return id
    }
    // $ANTLR end "enumeration_literal"


    // $ANTLR start "enumeration_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:631:1: enumeration_type_definition[Identifier id,Position pos] returns [EnumerationTypeDefinition enumTypeDef] : LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN ;
    @throws(classOf[RecognitionException])
    final def enumeration_type_definition(id: Identifier, pos: Position): EnumerationTypeDefinition = {
        var enumTypeDef : EnumerationTypeDefinition = null
        val enumeration_type_definition_StartIndex = input.index()
        var e1: Identifier = null
        var e2: Identifier = null



        	val elements=new Buffer[Identifier]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return enumTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:634:3: ( LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:635:2: LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_enumeration_type_definition3597)
            	if (state.failed) return enumTypeDef
            	pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition3601)
            	e1=enumeration_literal()

            	state._fsp-=1
            	if (state.failed) return enumTypeDef
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:635:52: ( COMMA e2= enumeration_literal )*
            	var loop119_quitflag = false
            	while (!loop119_quitflag) {
            	    val alt119 = {
            	val LA119_0 = input.LA(1)

            	if ( (LA119_0==COMMA) ) 1

            	else -1
            	}
            	    alt119 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:635:53: COMMA e2= enumeration_literal
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_enumeration_type_definition3605)
            		    	if (state.failed) return enumTypeDef
            		    	pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition3609)
            		    	e2=enumeration_literal()

            		    	state._fsp-=1
            		    	if (state.failed) return enumTypeDef
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop119_quitflag = true
            	    }
            	}

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_enumeration_type_definition3615)
            	if (state.failed) return enumTypeDef
            	if ( state.backtracking==0 ) {
            	  enumTypeDef=new EnumerationTypeDefinition(pos,id,elements.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, enumeration_type_definition_StartIndex) }
        }
        return enumTypeDef
    }
    // $ANTLR end "enumeration_type_definition"


    // $ANTLR start "numeric_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:638:1: numeric_type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration numericTypeDef] : range_constraint ( UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )? ;
    @throws(classOf[RecognitionException])
    final def numeric_type_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
        var numericTypeDef : AbstractTypeDeclaration = null
        val numeric_type_definition_StartIndex = input.index()
        var baseIdent: Identifier = null
        var idx: Identifier = null
        var endIdent: Identifier = null
        var range_constraint254: Range = null
        var physical_literal255: PhysicalLiteral = null



        	val elements=new Buffer[PhysicalTypeDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return numericTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:641:3: ( range_constraint ( UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:642:2: range_constraint ( UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )?
            	pushFollow(FOLLOW_range_constraint_in_numeric_type_definition3637)
            	range_constraint254=range_constraint()

            	state._fsp-=1
            	if (state.failed) return numericTypeDef
            	if ( state.backtracking==0 ) {
            	  numericTypeDef=new IntegerOrFloatingPointTypeDefinition(pos,id,range_constraint254)
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:643:2: ( UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )?
            	val alt122 = {
            	val LA122_0 = input.LA(1)

            	if ( (LA122_0==UNITS) ) 1
            	else -1
            	}
            	alt122 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:644:3: UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )?
            	        	`match`(input,UNITS,FOLLOW_UNITS_in_numeric_type_definition3646)
            	        	if (state.failed) return numericTypeDef
            	        	pushFollow(FOLLOW_identifier_in_numeric_type_definition3652)
            	        	baseIdent=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return numericTypeDef
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_numeric_type_definition3654)
            	        	if (state.failed) return numericTypeDef
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:646:3: (idx= identifier EQ physical_literal SEMICOLON )*
            	        	var loop120_quitflag = false
            	        	while (!loop120_quitflag) {
            	        	    val alt120 = {
            	        	val LA120_0 = input.LA(1)

            	        	if ( (LA120_0==BASIC_IDENTIFIER||LA120_0==EXTENDED_IDENTIFIER) ) 1

            	        	else -1
            	        	}
            	        	    alt120 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:647:4: idx= identifier EQ physical_literal SEMICOLON
            	        		    	pushFollow(FOLLOW_identifier_in_numeric_type_definition3665)
            	        		    	idx=identifier()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return numericTypeDef
            	        		    	`match`(input,EQ,FOLLOW_EQ_in_numeric_type_definition3667)
            	        		    	if (state.failed) return numericTypeDef
            	        		    	pushFollow(FOLLOW_physical_literal_in_numeric_type_definition3669)
            	        		    	physical_literal255=physical_literal()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return numericTypeDef
            	        		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_numeric_type_definition3671)
            	        		    	if (state.failed) return numericTypeDef
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  elements += new PhysicalTypeDefinition.Element(idx,physical_literal255)
            	        		    	}


            	        		case _ => loop120_quitflag = true
            	        	    }
            	        	}

            	        	`match`(input,END,FOLLOW_END_in_numeric_type_definition3686)
            	        	if (state.failed) return numericTypeDef
            	        	`match`(input,UNITS,FOLLOW_UNITS_in_numeric_type_definition3688)
            	        	if (state.failed) return numericTypeDef
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:650:21: (endIdent= identifier )?
            	        	val alt121 = {
            	        	val LA121_0 = input.LA(1)

            	        	if ( (LA121_0==BASIC_IDENTIFIER||LA121_0==EXTENDED_IDENTIFIER) ) 1
            	        	else -1
            	        	}
            	        	alt121 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:650:21: endIdent= identifier
            	        	        	pushFollow(FOLLOW_identifier_in_numeric_type_definition3692)
            	        	        	endIdent=identifier()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return numericTypeDef


            	        	    case _ =>
            	        	}

            	        	if ( state.backtracking==0 ) {
            	        	  numericTypeDef=new PhysicalTypeDefinition(pos,id,range_constraint254,baseIdent,elements.result,endIdent)
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, numeric_type_definition_StartIndex) }
        }
        return numericTypeDef
    }
    // $ANTLR end "numeric_type_definition"


    // $ANTLR start "index_subtype_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:654:1: index_subtype_definition returns [SelectedName typeMark] : type_mark RANGE BOX ;
    @throws(classOf[RecognitionException])
    final def index_subtype_definition(): SelectedName = {
        var typeMark : SelectedName = null
        val index_subtype_definition_StartIndex = input.index()
        var type_mark256: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return typeMark }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:654:58: ( type_mark RANGE BOX )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:655:2: type_mark RANGE BOX
            	pushFollow(FOLLOW_type_mark_in_index_subtype_definition3715)
            	type_mark256=type_mark()

            	state._fsp-=1
            	if (state.failed) return typeMark
            	`match`(input,RANGE,FOLLOW_RANGE_in_index_subtype_definition3717)
            	if (state.failed) return typeMark
            	`match`(input,BOX,FOLLOW_BOX_in_index_subtype_definition3719)
            	if (state.failed) return typeMark
            	if ( state.backtracking==0 ) {
            	  typeMark=type_mark256
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, index_subtype_definition_StartIndex) }
        }
        return typeMark
    }
    // $ANTLR end "index_subtype_definition"


    // $ANTLR start "array_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:657:1: array_type_definition[Identifier id,Position pos] returns [ArrayTypeDefinition arrayTypeDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication ;
    @throws(classOf[RecognitionException])
    final def array_type_definition(id: Identifier, pos: Position): ArrayTypeDefinition = {
        var arrayTypeDef : ArrayTypeDefinition = null
        val array_type_definition_StartIndex = input.index()
        var type1: SelectedName = null
        var type2: SelectedName = null
        var subtype_indication257: SubTypeIndication = null
        var index_constraint258: Seq[DiscreteRange] = null



        	val unConstraintList=new Buffer[SelectedName]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return arrayTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:660:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:661:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication
            	`match`(input,ARRAY,FOLLOW_ARRAY_in_array_type_definition3743)
            	if (state.failed) return arrayTypeDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:661:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
            	val alt124 = dfa124.predict(input)
            	alt124 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:662:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_array_type_definition3749)
            	        	if (state.failed) return arrayTypeDef
            	        	pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition3753)
            	        	type1=index_subtype_definition()

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef
            	        	if ( state.backtracking==0 ) {
            	        	  unConstraintList += type1
            	        	}
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:662:79: ( COMMA type2= index_subtype_definition )*
            	        	var loop123_quitflag = false
            	        	while (!loop123_quitflag) {
            	        	    val alt123 = {
            	        	val LA123_0 = input.LA(1)

            	        	if ( (LA123_0==COMMA) ) 1

            	        	else -1
            	        	}
            	        	    alt123 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:662:80: COMMA type2= index_subtype_definition
            	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_array_type_definition3758)
            	        		    	if (state.failed) return arrayTypeDef
            	        		    	pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition3762)
            	        		    	type2=index_subtype_definition()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return arrayTypeDef
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  unConstraintList += type2
            	        		    	}


            	        		case _ => loop123_quitflag = true
            	        	    }
            	        	}

            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_array_type_definition3768)
            	        	if (state.failed) return arrayTypeDef

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:663:5: index_constraint
            	        	pushFollow(FOLLOW_index_constraint_in_array_type_definition3774)
            	        	index_constraint258=index_constraint()

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef


            	    case _ =>
            	}

            	`match`(input,OF,FOLLOW_OF_in_array_type_definition3780)
            	if (state.failed) return arrayTypeDef
            	pushFollow(FOLLOW_subtype_indication_in_array_type_definition3782)
            	subtype_indication257=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return arrayTypeDef
            	if ( state.backtracking==0 ) {

            	  		val result = unConstraintList.result
            	  		arrayTypeDef = if (result.nonEmpty) new ArrayTypeDefinition(pos,id,Left(result),subtype_indication257)
            	  				else new ArrayTypeDefinition(pos,id,Right(index_constraint258),subtype_indication257)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, array_type_definition_StartIndex) }
        }
        return arrayTypeDef
    }
    // $ANTLR end "array_type_definition"


    // $ANTLR start "record_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:671:1: record_type_definition[Identifier id,Position pos] returns [RecordTypeDefinition recordTypeDef] : RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? ;
    @throws(classOf[RecognitionException])
    final def record_type_definition(id: Identifier, pos: Position): RecordTypeDefinition = {
        var recordTypeDef : RecordTypeDefinition = null
        val record_type_definition_StartIndex = input.index()
        var identifier_list259: Seq[Identifier] = null
        var subtype_indication260: SubTypeIndication = null
        var identifier261: Identifier = null



        	val elements=new Buffer[RecordTypeDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return recordTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:674:3: ( RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:675:2: RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )?
            	`match`(input,RECORD,FOLLOW_RECORD_in_record_type_definition3805)
            	if (state.failed) return recordTypeDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:676:2: ( identifier_list COLON subtype_indication SEMICOLON )+
            	var cnt125 = 0
            	var loop125_quitflag = false
            	while (!loop125_quitflag) {
            	    val alt125 = {
            	val LA125_0 = input.LA(1)

            	if ( (LA125_0==BASIC_IDENTIFIER||LA125_0==EXTENDED_IDENTIFIER) ) 1

            	else -1
            	}
            	    alt125 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:677:3: identifier_list COLON subtype_indication SEMICOLON
            		    	pushFollow(FOLLOW_identifier_list_in_record_type_definition3813)
            		    	identifier_list259=identifier_list()

            		    	state._fsp-=1
            		    	if (state.failed) return recordTypeDef
            		    	`match`(input,COLON,FOLLOW_COLON_in_record_type_definition3815)
            		    	if (state.failed) return recordTypeDef
            		    	pushFollow(FOLLOW_subtype_indication_in_record_type_definition3817)
            		    	subtype_indication260=subtype_indication()

            		    	state._fsp-=1
            		    	if (state.failed) return recordTypeDef
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_definition3819)
            		    	if (state.failed) return recordTypeDef
            		    	if ( state.backtracking==0 ) {
            		    	  elements += new RecordTypeDefinition.Element(identifier_list259, subtype_indication260)
            		    	}


            		case _ =>
            		    if ( cnt125 >= 1 ) loop125_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return recordTypeDef}
            	            val eee = new EarlyExitException(125, input)
            	            throw eee
            	      }
            	    }
            	    cnt125+=1
            	}

            	`match`(input,END,FOLLOW_END_in_record_type_definition3830)
            	if (state.failed) return recordTypeDef
            	`match`(input,RECORD,FOLLOW_RECORD_in_record_type_definition3832)
            	if (state.failed) return recordTypeDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:680:13: ( identifier )?
            	val alt126 = {
            	val LA126_0 = input.LA(1)

            	if ( (LA126_0==BASIC_IDENTIFIER||LA126_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt126 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:680:13: identifier
            	        	pushFollow(FOLLOW_identifier_in_record_type_definition3834)
            	        	identifier261=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return recordTypeDef


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  recordTypeDef=new RecordTypeDefinition(pos,id,elements.result,identifier261)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, record_type_definition_StartIndex) }
        }
        return recordTypeDef
    }
    // $ANTLR end "record_type_definition"


    // $ANTLR start "access_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:683:1: access_type_definition[Identifier id,Position pos] returns [AccessTypeDefinition accessTypeDef] : ACCESS subtype_indication ;
    @throws(classOf[RecognitionException])
    final def access_type_definition(id: Identifier, pos: Position): AccessTypeDefinition = {
        var accessTypeDef : AccessTypeDefinition = null
        val access_type_definition_StartIndex = input.index()
        var subtype_indication262: SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return accessTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:683:97: ( ACCESS subtype_indication )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:684:2: ACCESS subtype_indication
            	`match`(input,ACCESS,FOLLOW_ACCESS_in_access_type_definition3852)
            	if (state.failed) return accessTypeDef
            	pushFollow(FOLLOW_subtype_indication_in_access_type_definition3854)
            	subtype_indication262=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return accessTypeDef
            	if ( state.backtracking==0 ) {
            	  accessTypeDef=new AccessTypeDefinition(pos,id,subtype_indication262)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, access_type_definition_StartIndex) }
        }
        return accessTypeDef
    }
    // $ANTLR end "access_type_definition"


    // $ANTLR start "file_type_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:687:1: file_type_definition[Identifier id,Position pos] returns [FileTypeDefinition fileTypeDef] : FILE OF type_mark ;
    @throws(classOf[RecognitionException])
    final def file_type_definition(id: Identifier, pos: Position): FileTypeDefinition = {
        var fileTypeDef : FileTypeDefinition = null
        val file_type_definition_StartIndex = input.index()
        var type_mark263: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return fileTypeDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:687:91: ( FILE OF type_mark )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:688:2: FILE OF type_mark
            	`match`(input,FILE,FOLLOW_FILE_in_file_type_definition3873)
            	if (state.failed) return fileTypeDef
            	`match`(input,OF,FOLLOW_OF_in_file_type_definition3875)
            	if (state.failed) return fileTypeDef
            	pushFollow(FOLLOW_type_mark_in_file_type_definition3877)
            	type_mark263=type_mark()

            	state._fsp-=1
            	if (state.failed) return fileTypeDef
            	if ( state.backtracking==0 ) {
            	  fileTypeDef=new FileTypeDefinition(pos,id,type_mark263)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, file_type_definition_StartIndex) }
        }
        return fileTypeDef
    }
    // $ANTLR end "file_type_definition"


    // $ANTLR start "ams_scalar_nature_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:691:1: ams_scalar_nature_definition[Identifier id,Position pos] returns [ScalarNatureDefinition natureDef] : t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE ;
    @throws(classOf[RecognitionException])
    final def ams_scalar_nature_definition(id: Identifier, pos: Position): ScalarNatureDefinition = {
        var natureDef : ScalarNatureDefinition = null
        val ams_scalar_nature_definition_StartIndex = input.index()
        var t1: SelectedName = null
        var t2: SelectedName = null
        var identifier264: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return natureDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:691:101: (t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:692:2: t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE
            	pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition3897)
            	t1=type_mark()

            	state._fsp-=1
            	if (state.failed) return natureDef
            	`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_scalar_nature_definition3899)
            	if (state.failed) return natureDef
            	pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition3903)
            	t2=type_mark()

            	state._fsp-=1
            	if (state.failed) return natureDef
            	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_scalar_nature_definition3905)
            	if (state.failed) return natureDef
            	pushFollow(FOLLOW_identifier_in_ams_scalar_nature_definition3907)
            	identifier264=identifier()

            	state._fsp-=1
            	if (state.failed) return natureDef
            	`match`(input,REFERENCE,FOLLOW_REFERENCE_in_ams_scalar_nature_definition3909)
            	if (state.failed) return natureDef
            	if ( state.backtracking==0 ) {
            	  natureDef=new ScalarNatureDefinition(pos,id,t1,t2,identifier264)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, ams_scalar_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_scalar_nature_definition"


    // $ANTLR start "ams_array_nature_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:695:1: ams_array_nature_definition[Identifier id,Position pos] returns [ArrayNatureTypeDefinition natureDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication ;
    @throws(classOf[RecognitionException])
    final def ams_array_nature_definition(id: Identifier, pos: Position): ArrayNatureTypeDefinition = {
        var natureDef : ArrayNatureTypeDefinition = null
        val ams_array_nature_definition_StartIndex = input.index()
        var type1: SelectedName = null
        var type2: SelectedName = null
        var ams_subnature_indication265: SubNatureIndication = null
        var index_constraint266: Seq[DiscreteRange] = null



        	val unConstraintList=new Buffer[SelectedName]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return natureDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:698:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:699:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication
            	`match`(input,ARRAY,FOLLOW_ARRAY_in_ams_array_nature_definition3930)
            	if (state.failed) return natureDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:699:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
            	val alt128 = dfa128.predict(input)
            	alt128 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:700:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_ams_array_nature_definition3936)
            	        	if (state.failed) return natureDef
            	        	pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition3940)
            	        	type1=index_subtype_definition()

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef
            	        	if ( state.backtracking==0 ) {
            	        	  unConstraintList += type1
            	        	}
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:700:79: ( COMMA type2= index_subtype_definition )*
            	        	var loop127_quitflag = false
            	        	while (!loop127_quitflag) {
            	        	    val alt127 = {
            	        	val LA127_0 = input.LA(1)

            	        	if ( (LA127_0==COMMA) ) 1

            	        	else -1
            	        	}
            	        	    alt127 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:700:80: COMMA type2= index_subtype_definition
            	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_array_nature_definition3945)
            	        		    	if (state.failed) return natureDef
            	        		    	pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition3949)
            	        		    	type2=index_subtype_definition()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return natureDef
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  unConstraintList += type2
            	        		    	}


            	        		case _ => loop127_quitflag = true
            	        	    }
            	        	}

            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_ams_array_nature_definition3955)
            	        	if (state.failed) return natureDef

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:701:5: index_constraint
            	        	pushFollow(FOLLOW_index_constraint_in_ams_array_nature_definition3961)
            	        	index_constraint266=index_constraint()

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef


            	    case _ =>
            	}

            	`match`(input,OF,FOLLOW_OF_in_ams_array_nature_definition3966)
            	if (state.failed) return natureDef
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_array_nature_definition3968)
            	ams_subnature_indication265=ams_subnature_indication()

            	state._fsp-=1
            	if (state.failed) return natureDef
            	if ( state.backtracking==0 ) {

            	  		val result = unConstraintList.result
            	  		natureDef = if (result.nonEmpty) new ArrayNatureTypeDefinition(pos,id,Left(result),ams_subnature_indication265)
            	  			     else new ArrayNatureTypeDefinition(pos,id,Right(index_constraint266),ams_subnature_indication265)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, ams_array_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_array_nature_definition"


    // $ANTLR start "ams_record_nature_definition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:709:1: ams_record_nature_definition[Identifier id,Position pos] returns [RecordNatureDefinition natureDef] : RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? ;
    @throws(classOf[RecognitionException])
    final def ams_record_nature_definition(id: Identifier, pos: Position): RecordNatureDefinition = {
        var natureDef : RecordNatureDefinition = null
        val ams_record_nature_definition_StartIndex = input.index()
        var identifier_list267: Seq[Identifier] = null
        var ams_subnature_indication268: SubNatureIndication = null
        var identifier269: Identifier = null



        	val elements=new Buffer[RecordNatureDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return natureDef }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:712:3: ( RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:713:2: RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )?
            	`match`(input,RECORD,FOLLOW_RECORD_in_ams_record_nature_definition3989)
            	if (state.failed) return natureDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:714:2: ( identifier_list COLON ams_subnature_indication SEMICOLON )+
            	var cnt129 = 0
            	var loop129_quitflag = false
            	while (!loop129_quitflag) {
            	    val alt129 = {
            	val LA129_0 = input.LA(1)

            	if ( (LA129_0==BASIC_IDENTIFIER||LA129_0==EXTENDED_IDENTIFIER) ) 1

            	else -1
            	}
            	    alt129 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:715:3: identifier_list COLON ams_subnature_indication SEMICOLON
            		    	pushFollow(FOLLOW_identifier_list_in_ams_record_nature_definition3996)
            		    	identifier_list267=identifier_list()

            		    	state._fsp-=1
            		    	if (state.failed) return natureDef
            		    	`match`(input,COLON,FOLLOW_COLON_in_ams_record_nature_definition3998)
            		    	if (state.failed) return natureDef
            		    	pushFollow(FOLLOW_ams_subnature_indication_in_ams_record_nature_definition4000)
            		    	ams_subnature_indication268=ams_subnature_indication()

            		    	state._fsp-=1
            		    	if (state.failed) return natureDef
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_record_nature_definition4002)
            		    	if (state.failed) return natureDef
            		    	if ( state.backtracking==0 ) {
            		    	  elements += new RecordNatureDefinition.Element(identifier_list267, ams_subnature_indication268)
            		    	}


            		case _ =>
            		    if ( cnt129 >= 1 ) loop129_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return natureDef}
            	            val eee = new EarlyExitException(129, input)
            	            throw eee
            	      }
            	    }
            	    cnt129+=1
            	}

            	`match`(input,END,FOLLOW_END_in_ams_record_nature_definition4013)
            	if (state.failed) return natureDef
            	`match`(input,RECORD,FOLLOW_RECORD_in_ams_record_nature_definition4015)
            	if (state.failed) return natureDef
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:718:13: ( identifier )?
            	val alt130 = {
            	val LA130_0 = input.LA(1)

            	if ( (LA130_0==BASIC_IDENTIFIER||LA130_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt130 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:718:13: identifier
            	        	pushFollow(FOLLOW_identifier_in_ams_record_nature_definition4017)
            	        	identifier269=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  natureDef=new RecordNatureDefinition(pos,id,elements.result,identifier269)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, ams_record_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_record_nature_definition"


    // $ANTLR start "ams_subnature_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:721:1: ams_subnature_declaration returns [SubNatureDeclaration subnatureDecl] : SUBNATURE identifier IS ams_subnature_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_subnature_declaration(): SubNatureDeclaration = {
        var subnatureDecl : SubNatureDeclaration = null
        val ams_subnature_declaration_StartIndex = input.index()
        var SUBNATURE270: Token = null
        var identifier271: Identifier = null
        var ams_subnature_indication272: SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return subnatureDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:721:72: ( SUBNATURE identifier IS ams_subnature_indication SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:722:2: SUBNATURE identifier IS ams_subnature_indication SEMICOLON
            	SUBNATURE270=`match`(input,SUBNATURE,FOLLOW_SUBNATURE_in_ams_subnature_declaration4034).asInstanceOf[Token]
            	if (state.failed) return subnatureDecl
            	pushFollow(FOLLOW_identifier_in_ams_subnature_declaration4036)
            	identifier271=identifier()

            	state._fsp-=1
            	if (state.failed) return subnatureDecl
            	`match`(input,IS,FOLLOW_IS_in_ams_subnature_declaration4038)
            	if (state.failed) return subnatureDecl
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_subnature_declaration4040)
            	ams_subnature_indication272=ams_subnature_indication()

            	state._fsp-=1
            	if (state.failed) return subnatureDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_subnature_declaration4042)
            	if (state.failed) return subnatureDecl
            	if ( state.backtracking==0 ) {
            	  subnatureDecl= new SubNatureDeclaration(SUBNATURE270,identifier271,ams_subnature_indication272)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, ams_subnature_declaration_StartIndex) }
        }
        return subnatureDecl
    }
    // $ANTLR end "ams_subnature_declaration"


    // $ANTLR start "ams_subnature_indication"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:725:1: ams_subnature_indication returns [SubNatureIndication subNature] : ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? ;
    @throws(classOf[RecognitionException])
    final def ams_subnature_indication(): SubNatureIndication = {
        var subNature : SubNatureIndication = null
        val ams_subnature_indication_StartIndex = input.index()
        var e1: Expression = null
        var e2: Expression = null
        var ams_nature_mark273: SelectedName = null
        var index_constraint274: Seq[DiscreteRange] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return subNature }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:725:66: ( ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:726:2: ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
            	pushFollow(FOLLOW_ams_nature_mark_in_ams_subnature_indication4059)
            	ams_nature_mark273=ams_nature_mark()

            	state._fsp-=1
            	if (state.failed) return subNature
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:726:18: ( index_constraint )?
            	val alt131 = {
            	val LA131_0 = input.LA(1)

            	if ( (LA131_0==LPAREN) ) 1
            	else -1
            	}
            	alt131 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:726:18: index_constraint
            	        	pushFollow(FOLLOW_index_constraint_in_ams_subnature_indication4061)
            	        	index_constraint274=index_constraint()

            	        	state._fsp-=1
            	        	if (state.failed) return subNature


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:726:36: ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
            	val alt132 = {
            	val LA132_0 = input.LA(1)

            	if ( (LA132_0==TOLERANCE) ) 1
            	else -1
            	}
            	alt132 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:726:37: TOLERANCE e1= expression ACROSS e2= expression THROUGH
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_subnature_indication4065)
            	        	if (state.failed) return subNature
            	        	pushFollow(FOLLOW_expression_in_ams_subnature_indication4069)
            	        	e1=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return subNature
            	        	`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_subnature_indication4071)
            	        	if (state.failed) return subNature
            	        	pushFollow(FOLLOW_expression_in_ams_subnature_indication4075)
            	        	e2=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return subNature
            	        	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_subnature_indication4077)
            	        	if (state.failed) return subNature


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  subNature=new SubNatureIndication(ams_nature_mark273,index_constraint274,e1,e2)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, ams_subnature_indication_StartIndex) }
        }
        return subNature
    }
    // $ANTLR end "ams_subnature_indication"


    // $ANTLR start "ams_nature_mark"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:729:1: ams_nature_mark returns [SelectedName typeName] : selected_name ;
    @throws(classOf[RecognitionException])
    final def ams_nature_mark(): SelectedName = {
        var typeName : SelectedName = null
        val ams_nature_mark_StartIndex = input.index()
        var selected_name275: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return typeName }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:729:49: ( selected_name )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:730:3: selected_name
            	pushFollow(FOLLOW_selected_name_in_ams_nature_mark4097)
            	selected_name275=selected_name()

            	state._fsp-=1
            	if (state.failed) return typeName
            	if ( state.backtracking==0 ) {
            	  typeName=selected_name275
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, ams_nature_mark_StartIndex) }
        }
        return typeName
    }
    // $ANTLR end "ams_nature_mark"


    // $ANTLR start "protected_type_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:732:1: protected_type_declaration[Identifier id,Position pos] returns [ProtectedTypeDeclaration protectedTypeDecl] : PROTECTED sync[syncMessage] ( protected_type_declarative_item sync[syncMessage] )* END PROTECTED ( identifier )? ;
    @throws(classOf[RecognitionException])
    final def protected_type_declaration(id: Identifier, pos: Position): ProtectedTypeDeclaration = {
        var protectedTypeDecl : ProtectedTypeDeclaration = null
        val protected_type_declaration_StartIndex = input.index()
        var protected_type_declarative_item276: DeclarativeItem = null
        var identifier277: Identifier = null



        	val items=new Buffer[DeclarativeItem]()
        	val syncMessage="protected_type declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return protectedTypeDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:736:3: ( PROTECTED sync[syncMessage] ( protected_type_declarative_item sync[syncMessage] )* END PROTECTED ( identifier )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:737:2: PROTECTED sync[syncMessage] ( protected_type_declarative_item sync[syncMessage] )* END PROTECTED ( identifier )?
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_declaration4119)
            	if (state.failed) return protectedTypeDecl
            	pushFollow(FOLLOW_sync_in_protected_type_declaration4123)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return protectedTypeDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:738:21: ( protected_type_declarative_item sync[syncMessage] )*
            	var loop133_quitflag = false
            	while (!loop133_quitflag) {
            	    val alt133 = {
            	val LA133_0 = input.LA(1)

            	if ( (LA133_0==ATTRIBUTE||LA133_0==FUNCTION||LA133_0==IMPURE||LA133_0==PROCEDURE||LA133_0==PURE||LA133_0==USE) ) 1

            	else -1
            	}
            	    alt133 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:738:22: protected_type_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_protected_type_declarative_item_in_protected_type_declaration4127)
            		    	protected_type_declarative_item276=protected_type_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeDecl
            		    	if ( state.backtracking==0 ) {
            		    	  items += protected_type_declarative_item276
            		    	}
            		    	pushFollow(FOLLOW_sync_in_protected_type_declaration4130)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeDecl


            		case _ => loop133_quitflag = true
            	    }
            	}

            	`match`(input,END,FOLLOW_END_in_protected_type_declaration4136)
            	if (state.failed) return protectedTypeDecl
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_declaration4138)
            	if (state.failed) return protectedTypeDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:739:16: ( identifier )?
            	val alt134 = {
            	val LA134_0 = input.LA(1)

            	if ( (LA134_0==BASIC_IDENTIFIER||LA134_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt134 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:739:16: identifier
            	        	pushFollow(FOLLOW_identifier_in_protected_type_declaration4140)
            	        	identifier277=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return protectedTypeDecl


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  protectedTypeDecl=new ProtectedTypeDeclaration(pos,id,items.result,identifier277)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, protected_type_declaration_StartIndex) }
        }
        return protectedTypeDecl
    }
    // $ANTLR end "protected_type_declaration"


    // $ANTLR start "protected_type_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:742:1: protected_type_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => v2008_subprogram_instantiation_declaration | attribute_specification | use_clause );
    @throws(classOf[RecognitionException])
    final def protected_type_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val protected_type_declarative_item_StartIndex = input.index()
        var subprogram_declaration278: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration279: SubprogramInstantiationDeclaration = null
        var attribute_specification280: AttributeSpecification = null
        var use_clause281: UseClause = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:742:64: ( subprogram_declaration | {...}? => v2008_subprogram_instantiation_declaration | attribute_specification | use_clause )
            val alt135 = input.LA(1) match {
            case PROCEDURE => {
            val LA135_1 = input.LA(2)

            if ( (LA135_1==BASIC_IDENTIFIER||LA135_1==EXTENDED_IDENTIFIER) ) {
            val LA135_6 = input.LA(3)

            if ( (LA135_6==GENERIC||(LA135_6>=SEMICOLON && LA135_6<=LPAREN)||LA135_6==PARAMETER) ) 1
            else if ( (LA135_6==IS) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 135, 6, input)

                throw nvae
            }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 135, 1, input)

                throw nvae
            }
            }
            case IMPURE | PURE => 1
            case FUNCTION => {
            val LA135_3 = input.LA(2)

            if ( (LA135_3==BASIC_IDENTIFIER||LA135_3==EXTENDED_IDENTIFIER) ) {
            val LA135_7 = input.LA(3)

            if ( (LA135_7==GENERIC||LA135_7==RETURN||LA135_7==LPAREN||LA135_7==PARAMETER) ) 1
            else if ( (LA135_7==IS) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 135, 7, input)

                throw nvae
            }
            }
            else if ( (LA135_3==STRING_LITERAL) ) 1
            else {
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 135, 3, input)

                throw nvae
            }
            }
            case ATTRIBUTE => 3
            case USE => 4
            case _ =>
                if (state.backtracking>0) {state.failed=true; return item}
                val nvae = new NoViableAltException("", 135, 0, input)

                throw nvae
            }

            alt135 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:743:2: subprogram_declaration
                    	pushFollow(FOLLOW_subprogram_declaration_in_protected_type_declarative_item4159)
                    	subprogram_declaration278=subprogram_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declaration278
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:744:4: {...}? => v2008_subprogram_instantiation_declaration
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "protected_type_declarative_item", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_declarative_item4168)
                    	v2008_subprogram_instantiation_declaration279=v2008_subprogram_instantiation_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=v2008_subprogram_instantiation_declaration279
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:745:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_protected_type_declarative_item4175)
                    	attribute_specification280=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification280
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:746:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_protected_type_declarative_item4182)
                    	use_clause281=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause281
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, protected_type_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "protected_type_declarative_item"


    // $ANTLR start "protected_type_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:748:1: protected_type_body[Identifier id,Position pos] returns [ProtectedTypeBodyDeclaration protectedTypeBody] : PROTECTED BODY sync[syncMessage] ( protected_type_body_declarative_item sync[syncMessage] )* END PROTECTED BODY ( identifier )? ;
    @throws(classOf[RecognitionException])
    final def protected_type_body(id: Identifier, pos: Position): ProtectedTypeBodyDeclaration = {
        var protectedTypeBody : ProtectedTypeBodyDeclaration = null
        val protected_type_body_StartIndex = input.index()
        var protected_type_body_declarative_item282: DeclarativeItem = null
        var identifier283: Identifier = null



        	val items=new Buffer[DeclarativeItem]()
        	val syncMessage="protected_type declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return protectedTypeBody }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:752:3: ( PROTECTED BODY sync[syncMessage] ( protected_type_body_declarative_item sync[syncMessage] )* END PROTECTED BODY ( identifier )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:753:2: PROTECTED BODY sync[syncMessage] ( protected_type_body_declarative_item sync[syncMessage] )* END PROTECTED BODY ( identifier )?
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_body4202)
            	if (state.failed) return protectedTypeBody
            	`match`(input,BODY,FOLLOW_BODY_in_protected_type_body4204)
            	if (state.failed) return protectedTypeBody
            	pushFollow(FOLLOW_sync_in_protected_type_body4208)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return protectedTypeBody
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:754:21: ( protected_type_body_declarative_item sync[syncMessage] )*
            	var loop136_quitflag = false
            	while (!loop136_quitflag) {
            	    val alt136 = {
            	val LA136_0 = input.LA(1)

            	if ( (LA136_0==FUNCTION||LA136_0==IMPURE||LA136_0==PROCEDURE||LA136_0==PURE) ) 1
            	else if ( (LA136_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA136_0==ALIAS||LA136_0==ATTRIBUTE||LA136_0==CONSTANT||LA136_0==FILE||LA136_0==GROUP||LA136_0==SHARED||LA136_0==SUBTYPE||LA136_0==TYPE||(LA136_0>=USE && LA136_0<=VARIABLE)) ) 1

            	else -1
            	}
            	    alt136 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:754:22: protected_type_body_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_protected_type_body_declarative_item_in_protected_type_body4212)
            		    	protected_type_body_declarative_item282=protected_type_body_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeBody
            		    	if ( state.backtracking==0 ) {
            		    	  items += protected_type_body_declarative_item282
            		    	}
            		    	pushFollow(FOLLOW_sync_in_protected_type_body4215)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeBody


            		case _ => loop136_quitflag = true
            	    }
            	}

            	`match`(input,END,FOLLOW_END_in_protected_type_body4221)
            	if (state.failed) return protectedTypeBody
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_body4223)
            	if (state.failed) return protectedTypeBody
            	`match`(input,BODY,FOLLOW_BODY_in_protected_type_body4225)
            	if (state.failed) return protectedTypeBody
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:755:21: ( identifier )?
            	val alt137 = {
            	val LA137_0 = input.LA(1)

            	if ( (LA137_0==BASIC_IDENTIFIER||LA137_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt137 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:755:21: identifier
            	        	pushFollow(FOLLOW_identifier_in_protected_type_body4227)
            	        	identifier283=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return protectedTypeBody


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  protectedTypeBody=new ProtectedTypeBodyDeclaration(pos,id,items.result,identifier283)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, protected_type_body_StartIndex) }
        }
        return protectedTypeBody
    }
    // $ANTLR end "protected_type_body"


    // $ANTLR start "protected_type_body_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:758:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    final def protected_type_body_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val protected_type_body_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body284: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration285: SubprogramInstantiationDeclaration = null
        var package_declaration286: PackageDeclaration = null
        var package_body287: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration288: PackageInstantiationDeclaration = null
        var type_declaration289: AbstractTypeDeclaration = null
        var subtype_declaration290: SubTypeDeclaration = null
        var constant_declaration291: ConstantDeclaration = null
        var variable_declaration292: VariableDeclaration = null
        var file_declaration293: FileDeclaration = null
        var alias_declaration294: AliasDeclaration = null
        var attribute_declaration295: AttributeDeclaration = null
        var attribute_specification296: AttributeSpecification = null
        var use_clause297: UseClause = null
        var group_template_declaration298: GroupTemplateDeclaration = null
        var group_declaration299: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:758:69: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            val alt139 = dfa139.predict(input)
            alt139 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:759:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item4246)
                    	subprogram_declartion_or_body284=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body284
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:760:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "protected_type_body_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:760:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt138 = {
                    	val LA138_0 = input.LA(1)

                    	if ( (LA138_0==FUNCTION||LA138_0==PROCEDURE) ) 1
                    	else if ( (LA138_0==PACKAGE) ) {
                    	val LA138_2 = input.LA(2)

                    	if ( (LA138_2==BODY) ) 3
                    	else if ( (LA138_2==BASIC_IDENTIFIER||LA138_2==EXTENDED_IDENTIFIER) ) {
                    	val LA138_4 = input.LA(3)

                    	if ( (LA138_4==IS) ) {
                    	val LA138_5 = input.LA(4)

                    	if ( (LA138_5==NEW) ) 4
                    	else if ( (LA138_5==ALIAS||LA138_5==ATTRIBUTE||LA138_5==COMPONENT||(LA138_5>=CONSTANT && LA138_5<=DISCONNECT)||LA138_5==END||LA138_5==FILE||LA138_5==FUNCTION||(LA138_5>=GENERIC && LA138_5<=GROUP)||LA138_5==IMPURE||LA138_5==PACKAGE||LA138_5==PROCEDURE||LA138_5==PURE||(LA138_5>=SHARED && LA138_5<=SIGNAL)||LA138_5==SUBTYPE||LA138_5==TYPE||(LA138_5>=USE && LA138_5<=VARIABLE)||(LA138_5>=NATURE && LA138_5<=TERMINAL)||LA138_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 138, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 138, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 138, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 138, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt138 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:760:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_body_declarative_item4256)
                    	        	v2008_subprogram_instantiation_declaration285=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration285
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:761:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_protected_type_body_declarative_item4265)
                    	        	package_declaration286=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration286
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:762:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_protected_type_body_declarative_item4274)
                    	        	package_body287=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body287
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:763:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_protected_type_body_declarative_item4283)
                    	        	v2008_package_instantiation_declaration288=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration288
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:765:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_protected_type_body_declarative_item4295)
                    	type_declaration289=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration289
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:766:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_protected_type_body_declarative_item4302)
                    	subtype_declaration290=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration290
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:767:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_protected_type_body_declarative_item4309)
                    	constant_declaration291=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration291
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:768:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_protected_type_body_declarative_item4316)
                    	variable_declaration292=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration292
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:769:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_protected_type_body_declarative_item4322)
                    	file_declaration293=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration293
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:770:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_protected_type_body_declarative_item4329)
                    	alias_declaration294=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration294
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:771:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_protected_type_body_declarative_item4336)
                    	attribute_declaration295=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration295
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:772:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_protected_type_body_declarative_item4343)
                    	attribute_specification296=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification296
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:773:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_protected_type_body_declarative_item4350)
                    	use_clause297=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause297
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:774:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_protected_type_body_declarative_item4357)
                    	group_template_declaration298=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration298
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:775:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_protected_type_body_declarative_item4364)
                    	group_declaration299=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration299
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, protected_type_body_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "protected_type_body_declarative_item"


    // $ANTLR start "subtype_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:777:1: subtype_declaration returns [SubTypeDeclaration subTypeDecl] : SUBTYPE identifier IS subtype_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def subtype_declaration(): SubTypeDeclaration = {
        var subTypeDecl : SubTypeDeclaration = null
        val subtype_declaration_StartIndex = input.index()
        var SUBTYPE300: Token = null
        var identifier301: Identifier = null
        var subtype_indication302: SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return subTypeDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:777:62: ( SUBTYPE identifier IS subtype_indication SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:778:2: SUBTYPE identifier IS subtype_indication SEMICOLON
            	SUBTYPE300=`match`(input,SUBTYPE,FOLLOW_SUBTYPE_in_subtype_declaration4381).asInstanceOf[Token]
            	if (state.failed) return subTypeDecl
            	pushFollow(FOLLOW_identifier_in_subtype_declaration4383)
            	identifier301=identifier()

            	state._fsp-=1
            	if (state.failed) return subTypeDecl
            	`match`(input,IS,FOLLOW_IS_in_subtype_declaration4385)
            	if (state.failed) return subTypeDecl
            	pushFollow(FOLLOW_subtype_indication_in_subtype_declaration4387)
            	subtype_indication302=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return subTypeDecl
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration4389)
            	if (state.failed) return subTypeDecl
            	if ( state.backtracking==0 ) {
            	  subTypeDecl=new SubTypeDeclaration(SUBTYPE300,identifier301,subtype_indication302)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, subtype_declaration_StartIndex) }
        }
        return subTypeDecl
    }
    // $ANTLR end "subtype_declaration"


    // $ANTLR start "subtype_indication"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:781:1: subtype_indication returns [SubTypeIndication subType] : ({...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )? | n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )? );
    @throws(classOf[RecognitionException])
    final def subtype_indication(): SubTypeIndication = {
        var subType : SubTypeIndication = null
        val subtype_indication_StartIndex = input.index()
        var n1: SelectedName = null
        var n2: SelectedName = null
        var v2008_resolution_indication303: SelectedName = null
        var selected_name304: SelectedName = null
        var v2008_constraint305: Either[Range,Seq[DiscreteRange]] = null
        var expression306: Expression = null
        var constraint307: Either[Range,Seq[DiscreteRange]] = null
        var expression308: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return subType }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:781:56: ({...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )? | n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )? )
            val alt146 = {
            val LA146_0 = input.LA(1)

            if ( (LA146_0==BASIC_IDENTIFIER||LA146_0==EXTENDED_IDENTIFIER) ) {
            val LA146_1 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return subType}
                val nvae = new NoViableAltException("", 146, 1, input)

                throw nvae
            }
            }
            else if ( (LA146_0==STRING_LITERAL) ) {
            val LA146_2 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return subType}
                val nvae = new NoViableAltException("", 146, 2, input)

                throw nvae
            }
            }
            else if ( (LA146_0==LPAREN) && ((vhdl2008))) 1
            else {
                if (state.backtracking>0) {state.failed=true; return subType}
                val nvae = new NoViableAltException("", 146, 0, input)

                throw nvae
            }
            }
            alt146 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:2: {...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )?
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return subType}
                    	    throw new FailedPredicateException(input, "subtype_indication", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:15: ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )?
                    	val alt140 = {
                    	val LA140_0 = input.LA(1)

                    	if ( (LA140_0==BASIC_IDENTIFIER||LA140_0==EXTENDED_IDENTIFIER) ) {
                    	val LA140_1 = input.LA(2)

                    	if ( (synpred3_Parser()) ) 1
                    	else -1
                    	}
                    	else if ( (LA140_0==STRING_LITERAL) ) {
                    	val LA140_2 = input.LA(2)

                    	if ( (synpred3_Parser()) ) 1
                    	else -1
                    	}
                    	else if ( (LA140_0==LPAREN) && (synpred3_Parser())) 1
                    	else -1
                    	}
                    	alt140 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:16: ( v2008_resolution_indication selected_name )=> v2008_resolution_indication
                    	        	pushFollow(FOLLOW_v2008_resolution_indication_in_subtype_indication4415)
                    	        	v2008_resolution_indication303=v2008_resolution_indication()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	pushFollow(FOLLOW_selected_name_in_subtype_indication4419)
                    	selected_name304=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return subType
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:105: ( v2008_constraint )?
                    	val alt141 = {
                    	val LA141_0 = input.LA(1)

                    	if ( (LA141_0==RANGE||LA141_0==LPAREN||LA141_0==BASIC_IDENTIFIER||LA141_0==EXTENDED_IDENTIFIER) ) 1
                    	else -1
                    	}
                    	alt141 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:105: v2008_constraint
                    	        	pushFollow(FOLLOW_v2008_constraint_in_subtype_indication4421)
                    	        	v2008_constraint305=v2008_constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:123: ({...}? => TOLERANCE expression )?
                    	val alt142 = {
                    	val LA142_0 = input.LA(1)

                    	if ( (LA142_0==TOLERANCE) && ((ams))) 1
                    	else -1
                    	}
                    	alt142 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:124: {...}? => TOLERANCE expression
                    	        	if ( !((ams)) ) {
                    	        	    if (state.backtracking>0) {state.failed=true; return subType}
                    	        	    throw new FailedPredicateException(input, "subtype_indication", "ams")
                    	        	}
                    	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_subtype_indication4428)
                    	        	if (state.failed) return subType
                    	        	pushFollow(FOLLOW_expression_in_subtype_indication4430)
                    	        	expression306=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  subType=new SubTypeIndication(v2008_resolution_indication303,selected_name304,v2008_constraint305,expression306)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:4: n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )?
                    	pushFollow(FOLLOW_selected_name_in_subtype_indication4444)
                    	n1=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return subType
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:23: (n2= selected_name )?
                    	val alt143 = {
                    	val LA143_0 = input.LA(1)

                    	if ( (LA143_0==BASIC_IDENTIFIER||LA143_0==EXTENDED_IDENTIFIER||LA143_0==STRING_LITERAL) ) 1
                    	else -1
                    	}
                    	alt143 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:23: n2= selected_name
                    	        	pushFollow(FOLLOW_selected_name_in_subtype_indication4448)
                    	        	n2=selected_name()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:39: ( constraint )?
                    	val alt144 = {
                    	val LA144_0 = input.LA(1)

                    	if ( (LA144_0==RANGE||LA144_0==LPAREN) ) 1
                    	else -1
                    	}
                    	alt144 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:39: constraint
                    	        	pushFollow(FOLLOW_constraint_in_subtype_indication4451)
                    	        	constraint307=constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:51: ({...}? => TOLERANCE expression )?
                    	val alt145 = {
                    	val LA145_0 = input.LA(1)

                    	if ( (LA145_0==TOLERANCE) && ((ams))) 1
                    	else -1
                    	}
                    	alt145 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:784:52: {...}? => TOLERANCE expression
                    	        	if ( !((ams)) ) {
                    	        	    if (state.backtracking>0) {state.failed=true; return subType}
                    	        	    throw new FailedPredicateException(input, "subtype_indication", "ams")
                    	        	}
                    	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_subtype_indication4458)
                    	        	if (state.failed) return subType
                    	        	pushFollow(FOLLOW_expression_in_subtype_indication4460)
                    	        	expression308=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subType


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {

                    	  		subType=if (n2!=null) new SubTypeIndication(n1,n2,constraint307,expression308)
                    	  			else new SubTypeIndication(None,n1,constraint307,expression308)
                    	  		
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, subtype_indication_StartIndex) }
        }
        return subType
    }
    // $ANTLR end "subtype_indication"


    // $ANTLR start "v2008_resolution_indication"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:790:1: v2008_resolution_indication returns [SelectedName resolutionIndication] : ( selected_name | LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN );
    @throws(classOf[RecognitionException])
    final def v2008_resolution_indication(): SelectedName = {
        var resolutionIndication : SelectedName = null
        val v2008_resolution_indication_StartIndex = input.index()
        var selected_name309: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return resolutionIndication }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:790:72: ( selected_name | LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN )
            val alt149 = {
            val LA149_0 = input.LA(1)

            if ( (LA149_0==BASIC_IDENTIFIER||LA149_0==EXTENDED_IDENTIFIER||LA149_0==STRING_LITERAL) ) 1
            else if ( (LA149_0==LPAREN) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return resolutionIndication}
                val nvae = new NoViableAltException("", 149, 0, input)

                throw nvae
            }
            }
            alt149 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:791:2: selected_name
                    	pushFollow(FOLLOW_selected_name_in_v2008_resolution_indication4479)
                    	selected_name309=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return resolutionIndication
                    	if ( state.backtracking==0 ) {
                    	  resolutionIndication=selected_name309
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:4: LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN
                    	`match`(input,LPAREN,FOLLOW_LPAREN_in_v2008_resolution_indication4486)
                    	if (state.failed) return resolutionIndication
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:11: ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* )
                    	val alt148 = {
                    	val LA148_0 = input.LA(1)

                    	if ( (LA148_0==BASIC_IDENTIFIER||LA148_0==EXTENDED_IDENTIFIER) ) {
                    	val LA148_1 = input.LA(2)

                    	if ( (LA148_1==RPAREN||LA148_1==DOT) ) 1
                    	else if ( (LA148_1==LPAREN||LA148_1==BASIC_IDENTIFIER||LA148_1==EXTENDED_IDENTIFIER||LA148_1==STRING_LITERAL) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return resolutionIndication}
                    	    val nvae = new NoViableAltException("", 148, 1, input)

                    	    throw nvae
                    	}
                    	}
                    	else if ( (LA148_0==LPAREN||LA148_0==STRING_LITERAL) ) 1
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return resolutionIndication}
                    	    val nvae = new NoViableAltException("", 148, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt148 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:12: v2008_resolution_indication
                    	        	pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4489)
                    	        	v2008_resolution_indication()

                    	        	state._fsp-=1
                    	        	if (state.failed) return resolutionIndication

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:42: identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )*
                    	        	pushFollow(FOLLOW_identifier_in_v2008_resolution_indication4493)
                    	        	identifier()

                    	        	state._fsp-=1
                    	        	if (state.failed) return resolutionIndication
                    	        	pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4495)
                    	        	v2008_resolution_indication()

                    	        	state._fsp-=1
                    	        	if (state.failed) return resolutionIndication
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:81: ( COMMA identifier v2008_resolution_indication )*
                    	        	var loop147_quitflag = false
                    	        	while (!loop147_quitflag) {
                    	        	    val alt147 = {
                    	        	val LA147_0 = input.LA(1)

                    	        	if ( (LA147_0==COMMA) ) 1

                    	        	else -1
                    	        	}
                    	        	    alt147 match {
                    	        		case 1 =>
                    	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:792:82: COMMA identifier v2008_resolution_indication
                    	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_v2008_resolution_indication4498)
                    	        		    	if (state.failed) return resolutionIndication
                    	        		    	pushFollow(FOLLOW_identifier_in_v2008_resolution_indication4500)
                    	        		    	identifier()

                    	        		    	state._fsp-=1
                    	        		    	if (state.failed) return resolutionIndication
                    	        		    	pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication4502)
                    	        		    	v2008_resolution_indication()

                    	        		    	state._fsp-=1
                    	        		    	if (state.failed) return resolutionIndication


                    	        		case _ => loop147_quitflag = true
                    	        	    }
                    	        	}



                    	    case _ =>
                    	}

                    	`match`(input,RPAREN,FOLLOW_RPAREN_in_v2008_resolution_indication4507)
                    	if (state.failed) return resolutionIndication


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, v2008_resolution_indication_StartIndex) }
        }
        return resolutionIndication
    }
    // $ANTLR end "v2008_resolution_indication"


    // $ANTLR start "direction"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:794:1: direction returns [Range.Direction.Value rangeDirection] : ( TO | DOWNTO );
    @throws(classOf[RecognitionException])
    final def direction(): Range.Direction.Value = {
        var rangeDirection : Range.Direction.Value = null
        val direction_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return rangeDirection }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:794:58: ( TO | DOWNTO )
            val alt150 = {
            val LA150_0 = input.LA(1)

            if ( (LA150_0==TO) ) 1
            else if ( (LA150_0==DOWNTO) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return rangeDirection}
                val nvae = new NoViableAltException("", 150, 0, input)

                throw nvae
            }
            }
            alt150 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:795:2: TO
                    	`match`(input,TO,FOLLOW_TO_in_direction4520)
                    	if (state.failed) return rangeDirection
                    	if ( state.backtracking==0 ) {
                    	  rangeDirection=Range.Direction.To
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:796:4: DOWNTO
                    	`match`(input,DOWNTO,FOLLOW_DOWNTO_in_direction4527)
                    	if (state.failed) return rangeDirection
                    	if ( state.backtracking==0 ) {
                    	  rangeDirection=Range.Direction.Downto
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, direction_StartIndex) }
        }
        return rangeDirection
    }
    // $ANTLR end "direction"


    // $ANTLR start "range_constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:798:1: range_constraint returns [Range rangeContraint] : RANGE range ;
    @throws(classOf[RecognitionException])
    final def range_constraint(): Range = {
        var rangeContraint : Range = null
        val range_constraint_StartIndex = input.index()
        var range310: Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return rangeContraint }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:798:49: ( RANGE range )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:799:2: RANGE range
            	`match`(input,RANGE,FOLLOW_RANGE_in_range_constraint4542)
            	if (state.failed) return rangeContraint
            	pushFollow(FOLLOW_range_in_range_constraint4544)
            	range310=range()

            	state._fsp-=1
            	if (state.failed) return rangeContraint
            	if ( state.backtracking==0 ) {
            	  rangeContraint=range310
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, range_constraint_StartIndex) }
        }
        return rangeContraint
    }
    // $ANTLR end "range_constraint"


    // $ANTLR start "index_constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:801:1: index_constraint returns [Seq[DiscreteRange] ranges] : LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN ;
    @throws(classOf[RecognitionException])
    final def index_constraint(): Seq[DiscreteRange] = {
        var ranges : Seq[DiscreteRange] = null
        val index_constraint_StartIndex = input.index()
        var d1: DiscreteRange = null
        var d2: DiscreteRange = null



        	val list=new Buffer[DiscreteRange]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return ranges }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:804:3: ( LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:805:2: LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_index_constraint4563)
            	if (state.failed) return ranges
            	pushFollow(FOLLOW_discrete_range_in_index_constraint4567)
            	d1=discrete_range()

            	state._fsp-=1
            	if (state.failed) return ranges
            	if ( state.backtracking==0 ) {
            	  list += d1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:805:39: ( COMMA d2= discrete_range )*
            	var loop151_quitflag = false
            	while (!loop151_quitflag) {
            	    val alt151 = {
            	val LA151_0 = input.LA(1)

            	if ( (LA151_0==COMMA) ) 1

            	else -1
            	}
            	    alt151 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:805:40: COMMA d2= discrete_range
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_index_constraint4571)
            		    	if (state.failed) return ranges
            		    	pushFollow(FOLLOW_discrete_range_in_index_constraint4576)
            		    	d2=discrete_range()

            		    	state._fsp-=1
            		    	if (state.failed) return ranges
            		    	if ( state.backtracking==0 ) {
            		    	  list += d2
            		    	}


            		case _ => loop151_quitflag = true
            	    }
            	}

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_index_constraint4582)
            	if (state.failed) return ranges
            	if ( state.backtracking==0 ) {
            	  ranges = list.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, index_constraint_StartIndex) }
        }
        return ranges
    }
    // $ANTLR end "index_constraint"


    // $ANTLR start "range"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:808:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );
    @throws(classOf[RecognitionException])
    final def range(): Range = {
        var range_ : Range = null
        val range_StartIndex = input.index()
        var from: Expression = null
        var to: Expression = null
        var direction311: Range.Direction.Value = null
        var name312: Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return range_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:808:30: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )
            val alt152 = dfa152.predict(input)
            alt152 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:809:2: ( simple_expression direction )=>from= simple_expression direction to= simple_expression
                    	pushFollow(FOLLOW_simple_expression_in_range4609)
                    	from=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return range_
                    	pushFollow(FOLLOW_direction_in_range4611)
                    	direction311=direction()

                    	state._fsp-=1
                    	if (state.failed) return range_
                    	pushFollow(FOLLOW_simple_expression_in_range4615)
                    	to=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return range_
                    	if ( state.backtracking==0 ) {
                    	  range_ =new Range(Left(from,direction311,to))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:810:4: name
                    	pushFollow(FOLLOW_name_in_range4622)
                    	name312=name()

                    	state._fsp-=1
                    	if (state.failed) return range_
                    	if ( state.backtracking==0 ) {
                    	  range_ =new Range(Right(name312))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, range_StartIndex) }
        }
        return range_
    }
    // $ANTLR end "range"


    // $ANTLR start "v2008_constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:812:1: v2008_constraint returns [Either[Range,Seq[DiscreteRange]] constraint_] : ( array_constraint | v2008_record_constraint | range_constraint );
    @throws(classOf[RecognitionException])
    final def v2008_constraint(): Either[Range,Seq[DiscreteRange]] = {
        var constraint_ : Either[Range,Seq[DiscreteRange]] = null
        val v2008_constraint_StartIndex = input.index()
        var range_constraint313: Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return constraint_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:812:75: ( array_constraint | v2008_record_constraint | range_constraint )
            val alt153 = input.LA(1) match {
            case LPAREN => 1
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 2
            case RANGE => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return constraint_}
                val nvae = new NoViableAltException("", 153, 0, input)

                throw nvae
            }

            alt153 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:813:2: array_constraint
                    	pushFollow(FOLLOW_array_constraint_in_v2008_constraint4638)
                    	array_constraint()

                    	state._fsp-=1
                    	if (state.failed) return constraint_

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:814:4: v2008_record_constraint
                    	pushFollow(FOLLOW_v2008_record_constraint_in_v2008_constraint4643)
                    	v2008_record_constraint()

                    	state._fsp-=1
                    	if (state.failed) return constraint_

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:815:4: range_constraint
                    	pushFollow(FOLLOW_range_constraint_in_v2008_constraint4649)
                    	range_constraint313=range_constraint()

                    	state._fsp-=1
                    	if (state.failed) return constraint_
                    	if ( state.backtracking==0 ) {
                    	  constraint_ =Left(range_constraint313)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, v2008_constraint_StartIndex) }
        }
        return constraint_
    }
    // $ANTLR end "v2008_constraint"


    // $ANTLR start "constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:817:1: constraint returns [Either[Range,Seq[DiscreteRange]] constraint_] : ( index_constraint | range_constraint );
    @throws(classOf[RecognitionException])
    final def constraint(): Either[Range,Seq[DiscreteRange]] = {
        var constraint_ : Either[Range,Seq[DiscreteRange]] = null
        val constraint_StartIndex = input.index()
        var index_constraint314: Seq[DiscreteRange] = null
        var range_constraint315: Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return constraint_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:817:69: ( index_constraint | range_constraint )
            val alt154 = {
            val LA154_0 = input.LA(1)

            if ( (LA154_0==LPAREN) ) 1
            else if ( (LA154_0==RANGE) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return constraint_}
                val nvae = new NoViableAltException("", 154, 0, input)

                throw nvae
            }
            }
            alt154 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:818:2: index_constraint
                    	pushFollow(FOLLOW_index_constraint_in_constraint4665)
                    	index_constraint314=index_constraint()

                    	state._fsp-=1
                    	if (state.failed) return constraint_
                    	if ( state.backtracking==0 ) {
                    	  constraint_ =Right(index_constraint314)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:819:4: range_constraint
                    	pushFollow(FOLLOW_range_constraint_in_constraint4672)
                    	range_constraint315=range_constraint()

                    	state._fsp-=1
                    	if (state.failed) return constraint_
                    	if ( state.backtracking==0 ) {
                    	  constraint_ =Left(range_constraint315)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, constraint_StartIndex) }
        }
        return constraint_
    }
    // $ANTLR end "constraint"


    // $ANTLR start "array_constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:821:1: array_constraint : ( index_constraint ( array_constraint | v2008_record_constraint )? | LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )? );
    @throws(classOf[RecognitionException])
    final def array_constraint(): Unit = {
        val array_constraint_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:821:18: ( index_constraint ( array_constraint | v2008_record_constraint )? | LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )? )
            val alt157 = {
            val LA157_0 = input.LA(1)

            if ( (LA157_0==LPAREN) ) {
            val LA157_1 = input.LA(2)

            if ( (LA157_1==OPEN) ) 2
            else if ( (LA157_1==ABS||LA157_1==AND||(LA157_1>=NAND && LA157_1<=NEW)||(LA157_1>=NOR && LA157_1<=NULL)||LA157_1==OR||(LA157_1>=XNOR && LA157_1<=XOR)||LA157_1==LPAREN||LA157_1==DLT||(LA157_1>=PLUS && LA157_1<=MINUS)||LA157_1==BASIC_IDENTIFIER||LA157_1==EXTENDED_IDENTIFIER||(LA157_1>=BASED_LITERAL && LA157_1<=REAL_LITERAL)||LA157_1==STRING_LITERAL||LA157_1==BIT_STRING_LITERAL||LA157_1==CHARACTER_LITERAL) ) 1
            else {
                if (state.backtracking>0) {state.failed=true; return }
                val nvae = new NoViableAltException("", 157, 1, input)

                throw nvae
            }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return }
                val nvae = new NoViableAltException("", 157, 0, input)

                throw nvae
            }
            }
            alt157 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:822:2: index_constraint ( array_constraint | v2008_record_constraint )?
                    	pushFollow(FOLLOW_index_constraint_in_array_constraint4684)
                    	index_constraint()

                    	state._fsp-=1
                    	if (state.failed) return 
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:822:19: ( array_constraint | v2008_record_constraint )?
                    	val alt155 = {
                    	val LA155_0 = input.LA(1)

                    	if ( (LA155_0==LPAREN) ) 1
                    	else if ( (LA155_0==BASIC_IDENTIFIER||LA155_0==EXTENDED_IDENTIFIER) ) 2
                    	else -1
                    	}
                    	alt155 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:822:21: array_constraint
                    	        	pushFollow(FOLLOW_array_constraint_in_array_constraint4688)
                    	        	array_constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return 

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:822:40: v2008_record_constraint
                    	        	pushFollow(FOLLOW_v2008_record_constraint_in_array_constraint4692)
                    	        	v2008_record_constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return 


                    	    case _ =>
                    	}


                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:823:4: LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )?
                    	`match`(input,LPAREN,FOLLOW_LPAREN_in_array_constraint4700)
                    	if (state.failed) return 
                    	`match`(input,OPEN,FOLLOW_OPEN_in_array_constraint4702)
                    	if (state.failed) return 
                    	`match`(input,RPAREN,FOLLOW_RPAREN_in_array_constraint4704)
                    	if (state.failed) return 
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:823:23: ( array_constraint | v2008_record_constraint )?
                    	val alt156 = {
                    	val LA156_0 = input.LA(1)

                    	if ( (LA156_0==LPAREN) ) 1
                    	else if ( (LA156_0==BASIC_IDENTIFIER||LA156_0==EXTENDED_IDENTIFIER) ) 2
                    	else -1
                    	}
                    	alt156 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:823:25: array_constraint
                    	        	pushFollow(FOLLOW_array_constraint_in_array_constraint4708)
                    	        	array_constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return 

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:823:44: v2008_record_constraint
                    	        	pushFollow(FOLLOW_v2008_record_constraint_in_array_constraint4712)
                    	        	v2008_record_constraint()

                    	        	state._fsp-=1
                    	        	if (state.failed) return 


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, array_constraint_StartIndex) }
        }
        return 
    }
    // $ANTLR end "array_constraint"


    // $ANTLR start "v2008_record_constraint"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:825:1: v2008_record_constraint : ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) ) ;
    @throws(classOf[RecognitionException])
    final def v2008_record_constraint(): Unit = {
        val v2008_record_constraint_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:825:25: ( ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:2: ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:2: ( identifier ( array_constraint | v2008_record_constraint ) )
            		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:3: identifier ( array_constraint | v2008_record_constraint )
            		pushFollow(FOLLOW_identifier_in_v2008_record_constraint4725)
            		identifier()

            		state._fsp-=1
            		if (state.failed) return 
            		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:14: ( array_constraint | v2008_record_constraint )
            		val alt158 = {
            		val LA158_0 = input.LA(1)

            		if ( (LA158_0==LPAREN) ) 1
            		else if ( (LA158_0==BASIC_IDENTIFIER||LA158_0==EXTENDED_IDENTIFIER) ) 2
            		else {
            		    if (state.backtracking>0) {state.failed=true; return }
            		    val nvae = new NoViableAltException("", 158, 0, input)

            		    throw nvae
            		}
            		}
            		alt158 match {
            		    case 1 =>
            		        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:15: array_constraint
            		        	pushFollow(FOLLOW_array_constraint_in_v2008_record_constraint4728)
            		        	array_constraint()

            		        	state._fsp-=1
            		        	if (state.failed) return 

            		    case 2 =>
            		        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:34: v2008_record_constraint
            		        	pushFollow(FOLLOW_v2008_record_constraint_in_v2008_record_constraint4732)
            		        	v2008_record_constraint()

            		        	state._fsp-=1
            		        	if (state.failed) return 


            		    case _ =>
            		}




            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:62: ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) )
            		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:63: COMMA ( identifier ( array_constraint | v2008_record_constraint ) )
            		`match`(input,COMMA,FOLLOW_COMMA_in_v2008_record_constraint4739)
            		if (state.failed) return 
            		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:69: ( identifier ( array_constraint | v2008_record_constraint ) )
            			// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:70: identifier ( array_constraint | v2008_record_constraint )
            			pushFollow(FOLLOW_identifier_in_v2008_record_constraint4742)
            			identifier()

            			state._fsp-=1
            			if (state.failed) return 
            			// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:81: ( array_constraint | v2008_record_constraint )
            			val alt159 = {
            			val LA159_0 = input.LA(1)

            			if ( (LA159_0==LPAREN) ) 1
            			else if ( (LA159_0==BASIC_IDENTIFIER||LA159_0==EXTENDED_IDENTIFIER) ) 2
            			else {
            			    if (state.backtracking>0) {state.failed=true; return }
            			    val nvae = new NoViableAltException("", 159, 0, input)

            			    throw nvae
            			}
            			}
            			alt159 match {
            			    case 1 =>
            			        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:82: array_constraint
            			        	pushFollow(FOLLOW_array_constraint_in_v2008_record_constraint4745)
            			        	array_constraint()

            			        	state._fsp-=1
            			        	if (state.failed) return 

            			    case 2 =>
            			        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:826:101: v2008_record_constraint
            			        	pushFollow(FOLLOW_v2008_record_constraint_in_v2008_record_constraint4749)
            			        	v2008_record_constraint()

            			        	state._fsp-=1
            			        	if (state.failed) return 


            			    case _ =>
            			}










        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, v2008_record_constraint_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_record_constraint"


    // $ANTLR start "discrete_range"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:828:1: discrete_range returns [DiscreteRange discreteRange] : ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range );
    @throws(classOf[RecognitionException])
    final def discrete_range(): DiscreteRange = {
        var discreteRange : DiscreteRange = null
        val discrete_range_StartIndex = input.index()
        var subtype_indication316: SubTypeIndication = null
        var range317: Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return discreteRange }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:828:54: ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range )
            val alt160 = dfa160.predict(input)
            alt160 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:829:2: ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication
                    	pushFollow(FOLLOW_subtype_indication_in_discrete_range4800)
                    	subtype_indication316=subtype_indication()

                    	state._fsp-=1
                    	if (state.failed) return discreteRange
                    	if ( state.backtracking==0 ) {
                    	  discreteRange=new DiscreteRange(Right(subtype_indication316))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:830:4: range
                    	pushFollow(FOLLOW_range_in_discrete_range4807)
                    	range317=range()

                    	state._fsp-=1
                    	if (state.failed) return discreteRange
                    	if ( state.backtracking==0 ) {
                    	  discreteRange=new DiscreteRange(Left(range317))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, discrete_range_StartIndex) }
        }
        return discreteRange
    }
    // $ANTLR end "discrete_range"


    // $ANTLR start "type_mark"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:832:1: type_mark returns [SelectedName typeName] : selected_name ;
    @throws(classOf[RecognitionException])
    final def type_mark(): SelectedName = {
        var typeName : SelectedName = null
        val type_mark_StartIndex = input.index()
        var selected_name318: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return typeName }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:832:43: ( selected_name )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:833:2: selected_name
            	pushFollow(FOLLOW_selected_name_in_type_mark4824)
            	selected_name318=selected_name()

            	state._fsp-=1
            	if (state.failed) return typeName
            	if ( state.backtracking==0 ) {
            	  typeName=selected_name318
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, type_mark_StartIndex) }
        }
        return typeName
    }
    // $ANTLR end "type_mark"


    // $ANTLR start "concurrent_statement_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:836:1: concurrent_statement_list returns [Seq[ConcurrentStatement] list] : ( concurrent_statement )* ;
    @throws(classOf[RecognitionException])
    final def concurrent_statement_list(): Seq[ConcurrentStatement] = {
        var list : Seq[ConcurrentStatement] = null
        val concurrent_statement_list_StartIndex = input.index()
        var concurrent_statement319: ConcurrentStatement = null



        	val statementList=new Buffer[ConcurrentStatement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:839:3: ( ( concurrent_statement )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:840:2: ( concurrent_statement )*
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:840:2: ( concurrent_statement )*
            	var loop161_quitflag = false
            	while (!loop161_quitflag) {
            	    val alt161 = {
            	val LA161_0 = input.LA(1)

            	if ( (LA161_0==BASIC_IDENTIFIER||LA161_0==EXTENDED_IDENTIFIER) ) 1
            	else if ( (LA161_0==BREAK) && ((ams))) 1
            	else if ( ((LA161_0>=PLUS && LA161_0<=MINUS)||LA161_0==STRING_LITERAL) ) 1
            	else if ( (LA161_0==DLT) && ((vhdl2008))) 1
            	else if ( (LA161_0==ABS||LA161_0==NEW||(LA161_0>=NOT && LA161_0<=NULL)||LA161_0==LPAREN||(LA161_0>=BASED_LITERAL && LA161_0<=REAL_LITERAL)||LA161_0==BIT_STRING_LITERAL||LA161_0==CHARACTER_LITERAL) ) 1
            	else if ( (LA161_0==AND||LA161_0==NAND||LA161_0==NOR||LA161_0==OR||(LA161_0>=XNOR && LA161_0<=XOR)) && ((vhdl2008))) 1
            	else if ( (LA161_0==ASSERT||LA161_0==CASE||LA161_0==IF||LA161_0==POSTPONED||LA161_0==PROCESS||LA161_0==WITH||LA161_0==PROCEDURAL) ) 1

            	else -1
            	}
            	    alt161 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:840:3: concurrent_statement
            		    	pushFollow(FOLLOW_concurrent_statement_in_concurrent_statement_list4848)
            		    	concurrent_statement319=concurrent_statement()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  statementList += concurrent_statement319
            		    	}


            		case _ => loop161_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=statementList.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, concurrent_statement_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "concurrent_statement_list"


    // $ANTLR start "concurrent_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:843:1: concurrent_statement returns [ConcurrentStatement stmt] : (label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] );
    @throws(classOf[RecognitionException])
    final def concurrent_statement(): ConcurrentStatement = {
        var stmt : ConcurrentStatement = null
        val concurrent_statement_StartIndex = input.index()
        var label: Identifier = null
        var concurrent_statement_with_label320: ConcurrentStatement = null
        var concurrent_statement_optional_label321: ConcurrentStatement = null
        var concurrent_statement_optional_label322: ConcurrentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:843:57: (label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] )
            val alt163 = {
            val LA163_0 = input.LA(1)

            if ( (LA163_0==BASIC_IDENTIFIER||LA163_0==EXTENDED_IDENTIFIER) ) {
            val LA163_1 = input.LA(2)

            if ( (LA163_1==COLON) ) 1
            else if ( (LA163_1==MOD||LA163_1==REM||LA163_1==AMS_ASSIGN||(LA163_1>=SEMICOLON && LA163_1<=LPAREN)||LA163_1==LBRACKET||(LA163_1>=DOT && LA163_1<=AMPERSAND)||(LA163_1>=DOUBLESTAR && LA163_1<=MINUS)||LA163_1==LEQ||LA163_1==APOSTROPHE) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 163, 1, input)

                throw nvae
            }
            }
            else if ( (LA163_0==BREAK) && ((ams))) 2
            else if ( ((LA163_0>=PLUS && LA163_0<=MINUS)||LA163_0==STRING_LITERAL) ) 2
            else if ( (LA163_0==DLT) && ((vhdl2008))) 2
            else if ( (LA163_0==ABS||LA163_0==NEW||(LA163_0>=NOT && LA163_0<=NULL)||LA163_0==LPAREN||(LA163_0>=BASED_LITERAL && LA163_0<=REAL_LITERAL)||LA163_0==BIT_STRING_LITERAL||LA163_0==CHARACTER_LITERAL) ) 2
            else if ( (LA163_0==AND||LA163_0==NAND||LA163_0==NOR||LA163_0==OR||(LA163_0>=XNOR && LA163_0<=XOR)) && ((vhdl2008))) 2
            else if ( (LA163_0==ASSERT||LA163_0==CASE||LA163_0==IF||LA163_0==POSTPONED||LA163_0==PROCESS||LA163_0==WITH||LA163_0==PROCEDURAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 163, 0, input)

                throw nvae
            }
            }
            alt163 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:844:4: label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
                    	pushFollow(FOLLOW_label_colon_in_concurrent_statement4872)
                    	label=label_colon()

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:844:22: ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
                    	val alt162 = dfa162.predict(input)
                    	alt162 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:4: ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label]
                    	        	pushFollow(FOLLOW_concurrent_statement_with_label_in_concurrent_statement4941)
                    	        	concurrent_statement_with_label320=concurrent_statement_with_label(label)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=concurrent_statement_with_label320
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:846:6: concurrent_statement_optional_label[$label.label]
                    	        	pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement4951)
                    	        	concurrent_statement_optional_label321=concurrent_statement_optional_label(label)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=concurrent_statement_optional_label321
                    	        	}


                    	    case _ =>
                    	}


                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:848:5: concurrent_statement_optional_label[$label.label]
                    	pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement4965)
                    	concurrent_statement_optional_label322=concurrent_statement_optional_label(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=concurrent_statement_optional_label322
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, concurrent_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "concurrent_statement"


    // $ANTLR start "concurrent_statement_with_label"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:850:1: concurrent_statement_with_label[Identifier label] returns [ConcurrentStatement stmt] : ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] );
    @throws(classOf[RecognitionException])
    final def concurrent_statement_with_label(label: Identifier): ConcurrentStatement = {
        var stmt : ConcurrentStatement = null
        val concurrent_statement_with_label_StartIndex = input.index()
        var component_instantiation_statement323: ComponentInstantiationStatement = null
        var block_statement324: BlockStatement = null
        var generate_statement325: ConcurrentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:850:86: ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] )
            val alt164 = {
            val LA164_0 = input.LA(1)

            if ( ((LA164_0>=COMPONENT && LA164_0<=CONFIGURATION)||LA164_0==ENTITY||LA164_0==BASIC_IDENTIFIER||LA164_0==EXTENDED_IDENTIFIER||LA164_0==STRING_LITERAL) ) 1
            else if ( (LA164_0==BLOCK) ) 2
            else if ( (LA164_0==FOR||LA164_0==IF) ) 3
            else if ( (LA164_0==CASE) && ((vhdl2008))) 3
            else {
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 164, 0, input)

                throw nvae
            }
            }
            alt164 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:851:2: component_instantiation_statement[$label]
                    	pushFollow(FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label4982)
                    	component_instantiation_statement323=component_instantiation_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=component_instantiation_statement323
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:852:4: block_statement[$label]
                    	pushFollow(FOLLOW_block_statement_in_concurrent_statement_with_label4990)
                    	block_statement324=block_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=block_statement324
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:853:4: generate_statement[$label]
                    	pushFollow(FOLLOW_generate_statement_in_concurrent_statement_with_label4998)
                    	generate_statement325=generate_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=generate_statement325
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, concurrent_statement_with_label_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "concurrent_statement_with_label"


    // $ANTLR start "concurrent_statement_optional_label"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:855:1: concurrent_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null] | concurrent_signal_assignment_statement[$label,postponed!=null] ) );
    @throws(classOf[RecognitionException])
    final def concurrent_statement_optional_label(label: Identifier): ConcurrentStatement = {
        var stmt : ConcurrentStatement = null
        val concurrent_statement_optional_label_StartIndex = input.index()
        var postponed: Token = null
        var ams_concurrent_break_statement326: ConcurrentBreakStatement = null
        var ams_simultaneous_statement327: SimultaneousStatement = null
        var process_statement328: ProcessStatement = null
        var concurrent_assertion_statement329: ConcurrentAssertionStatement = null
        var concurrent_procedure_call_statement330: ConcurrentProcedureCallStatement = null
        var concurrent_signal_assignment_statement331: ConcurrentSignalAssignmentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:855:90: ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null] | concurrent_signal_assignment_statement[$label,postponed!=null] ) )
            val alt167 = dfa167.predict(input)
            alt167 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:856:2: {...}? => ams_concurrent_break_statement[$label]
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return stmt}
                    	    throw new FailedPredicateException(input, "concurrent_statement_optional_label", "ams")
                    	}
                    	pushFollow(FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label5021)
                    	ams_concurrent_break_statement326=ams_concurrent_break_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_concurrent_break_statement326
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:4: ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label]
                    	pushFollow(FOLLOW_ams_simultaneous_statement_in_concurrent_statement_optional_label5057)
                    	ams_simultaneous_statement327=ams_simultaneous_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_statement327
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:858:4: (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null] | concurrent_signal_assignment_statement[$label,postponed!=null] )
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:858:13: (postponed= POSTPONED )?
                    	val alt165 = {
                    	val LA165_0 = input.LA(1)

                    	if ( (LA165_0==POSTPONED) ) 1
                    	else -1
                    	}
                    	alt165 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:858:13: postponed= POSTPONED
                    	        	postponed=`match`(input,POSTPONED,FOLLOW_POSTPONED_in_concurrent_statement_optional_label5068).asInstanceOf[Token]
                    	        	if (state.failed) return stmt


                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:859:3: ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null] | concurrent_signal_assignment_statement[$label,postponed!=null] )
                    	val alt166 = {
                    	val LA166_0 = input.LA(1)

                    	if ( (LA166_0==PROCESS) ) 1
                    	else if ( (LA166_0==ASSERT) ) 2
                    	else if ( (LA166_0==BASIC_IDENTIFIER||LA166_0==EXTENDED_IDENTIFIER) ) {
                    	val LA166_3 = input.LA(2)

                    	if ( (synpred8_Parser()) ) 3
                    	else if ( (true) ) 4
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return stmt}
                    	    val nvae = new NoViableAltException("", 166, 3, input)

                    	    throw nvae
                    	}
                    	}
                    	else if ( (LA166_0==STRING_LITERAL) ) {
                    	val LA166_4 = input.LA(2)

                    	if ( (synpred8_Parser()) ) 3
                    	else if ( (true) ) 4
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return stmt}
                    	    val nvae = new NoViableAltException("", 166, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else if ( (LA166_0==DLT) && ((vhdl2008))) 4
                    	else if ( (LA166_0==WITH||LA166_0==LPAREN) ) 4
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return stmt}
                    	    val nvae = new NoViableAltException("", 166, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt166 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:860:3: process_statement[$label,postponed!=null]
                    	        	pushFollow(FOLLOW_process_statement_in_concurrent_statement_optional_label5078)
                    	        	process_statement328=process_statement(label, postponed!=null)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=process_statement328
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:861:5: concurrent_assertion_statement[$label,postponed!=null]
                    	        	pushFollow(FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label5087)
                    	        	concurrent_assertion_statement329=concurrent_assertion_statement(label, postponed!=null)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=concurrent_assertion_statement329
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:862:5: ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null]
                    	        	pushFollow(FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label5101)
                    	        	concurrent_procedure_call_statement330=concurrent_procedure_call_statement(label, postponed!=null)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=concurrent_procedure_call_statement330
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:863:5: concurrent_signal_assignment_statement[$label,postponed!=null]
                    	        	pushFollow(FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label5110)
                    	        	concurrent_signal_assignment_statement331=concurrent_signal_assignment_statement(label, postponed!=null)

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=concurrent_signal_assignment_statement331
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, concurrent_statement_optional_label_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "concurrent_statement_optional_label"


    // $ANTLR start "generic_map_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:867:1: generic_map_aspect returns [AssociationList list] : GENERIC MAP LPAREN association_list RPAREN ;
    @throws(classOf[RecognitionException])
    final def generic_map_aspect(): AssociationList = {
        var list : AssociationList = null
        val generic_map_aspect_StartIndex = input.index()
        var association_list332: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:867:51: ( GENERIC MAP LPAREN association_list RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:868:2: GENERIC MAP LPAREN association_list RPAREN
            	`match`(input,GENERIC,FOLLOW_GENERIC_in_generic_map_aspect5132)
            	if (state.failed) return list
            	`match`(input,MAP,FOLLOW_MAP_in_generic_map_aspect5134)
            	if (state.failed) return list
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_generic_map_aspect5136)
            	if (state.failed) return list
            	pushFollow(FOLLOW_association_list_in_generic_map_aspect5138)
            	association_list332=association_list()

            	state._fsp-=1
            	if (state.failed) return list
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_generic_map_aspect5140)
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  list=association_list332
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, generic_map_aspect_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_map_aspect"


    // $ANTLR start "port_map_aspect"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:870:1: port_map_aspect returns [AssociationList list] : PORT MAP LPAREN association_list RPAREN ;
    @throws(classOf[RecognitionException])
    final def port_map_aspect(): AssociationList = {
        var list : AssociationList = null
        val port_map_aspect_StartIndex = input.index()
        var association_list333: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:870:48: ( PORT MAP LPAREN association_list RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:871:2: PORT MAP LPAREN association_list RPAREN
            	`match`(input,PORT,FOLLOW_PORT_in_port_map_aspect5157)
            	if (state.failed) return list
            	`match`(input,MAP,FOLLOW_MAP_in_port_map_aspect5159)
            	if (state.failed) return list
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_port_map_aspect5161)
            	if (state.failed) return list
            	pushFollow(FOLLOW_association_list_in_port_map_aspect5163)
            	association_list333=association_list()

            	state._fsp-=1
            	if (state.failed) return list
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_port_map_aspect5165)
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  list=association_list333
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, port_map_aspect_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_map_aspect"


    // $ANTLR start "block_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:873:1: block_statement[Identifier label] returns [BlockStatement blockStmt] : blockToken= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def block_statement(label: Identifier): BlockStatement = {
        var blockStmt : BlockStatement = null
        val block_statement_StartIndex = input.index()
        var blockToken: Token = null
        var guard_expression: Expression = null
        var end_block_label: Identifier = null
        var block_declarative_item334: DeclarativeItem = null
        var generic_clause335: Seq[InterfaceList.AbstractInterfaceElement] = null
        var generic_map_aspect336: AssociationList = null
        var port_clause337: Seq[InterfaceList.AbstractInterfaceElement] = null
        var port_map_aspect338: AssociationList = null
        var concurrent_statement_list339: Seq[ConcurrentStatement] = null



        	val declItems=new Buffer[DeclarativeItem]()
        	val syncMessage="block declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return blockStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:877:3: (blockToken= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:878:2: blockToken= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? sync[syncMessage] ( block_declarative_item sync[syncMessage] )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON
            	blockToken=`match`(input,BLOCK,FOLLOW_BLOCK_in_block_statement5192).asInstanceOf[Token]
            	if (state.failed) return blockStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:878:19: ( LPAREN guard_expression= expression RPAREN )?
            	val alt168 = {
            	val LA168_0 = input.LA(1)

            	if ( (LA168_0==LPAREN) ) 1
            	else -1
            	}
            	alt168 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:878:20: LPAREN guard_expression= expression RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_block_statement5195)
            	        	if (state.failed) return blockStmt
            	        	pushFollow(FOLLOW_expression_in_block_statement5199)
            	        	guard_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_block_statement5201)
            	        	if (state.failed) return blockStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:878:64: ( IS )?
            	val alt169 = {
            	val LA169_0 = input.LA(1)

            	if ( (LA169_0==IS) ) 1
            	else -1
            	}
            	alt169 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:878:64: IS
            	        	`match`(input,IS,FOLLOW_IS_in_block_statement5205)
            	        	if (state.failed) return blockStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:879:3: ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )?
            	val alt171 = {
            	val LA171_0 = input.LA(1)

            	if ( (LA171_0==GENERIC) ) 1
            	else -1
            	}
            	alt171 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:879:4: generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )?
            	        	pushFollow(FOLLOW_generic_clause_in_block_statement5211)
            	        	generic_clause335=generic_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement5213)
            	        	if (state.failed) return blockStmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:879:29: ( generic_map_aspect SEMICOLON )?
            	        	val alt170 = {
            	        	val LA170_0 = input.LA(1)

            	        	if ( (LA170_0==GENERIC) ) 1
            	        	else -1
            	        	}
            	        	alt170 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:879:30: generic_map_aspect SEMICOLON
            	        	        	pushFollow(FOLLOW_generic_map_aspect_in_block_statement5216)
            	        	        	generic_map_aspect336=generic_map_aspect()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return blockStmt
            	        	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement5218)
            	        	        	if (state.failed) return blockStmt


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:880:3: ( port_clause ( port_map_aspect SEMICOLON )? )?
            	val alt173 = {
            	val LA173_0 = input.LA(1)

            	if ( (LA173_0==PORT) ) 1
            	else -1
            	}
            	alt173 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:880:4: port_clause ( port_map_aspect SEMICOLON )?
            	        	pushFollow(FOLLOW_port_clause_in_block_statement5227)
            	        	port_clause337=port_clause()

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:880:16: ( port_map_aspect SEMICOLON )?
            	        	val alt172 = {
            	        	val LA172_0 = input.LA(1)

            	        	if ( (LA172_0==PORT) ) 1
            	        	else -1
            	        	}
            	        	alt172 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:880:17: port_map_aspect SEMICOLON
            	        	        	pushFollow(FOLLOW_port_map_aspect_in_block_statement5230)
            	        	        	port_map_aspect338=port_map_aspect()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return blockStmt
            	        	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement5232)
            	        	        	if (state.failed) return blockStmt


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	pushFollow(FOLLOW_sync_in_block_statement5240)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return blockStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:881:21: ( block_declarative_item sync[syncMessage] )*
            	var loop174_quitflag = false
            	while (!loop174_quitflag) {
            	    val alt174 = {
            	val LA174_0 = input.LA(1)

            	if ( (LA174_0==FUNCTION||LA174_0==IMPURE||LA174_0==PROCEDURE||LA174_0==PURE) ) 1
            	else if ( (LA174_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA174_0==ALIAS||LA174_0==ATTRIBUTE||LA174_0==COMPONENT||(LA174_0>=CONSTANT && LA174_0<=DISCONNECT)||(LA174_0>=FILE && LA174_0<=FOR)||LA174_0==GROUP||(LA174_0>=SHARED && LA174_0<=SIGNAL)||LA174_0==SUBTYPE||LA174_0==TYPE||(LA174_0>=USE && LA174_0<=VARIABLE)) ) 1
            	else if ( ((LA174_0>=NATURE && LA174_0<=QUANTITY)||(LA174_0>=SUBNATURE && LA174_0<=LIMIT)) && ((ams))) 1

            	else -1
            	}
            	    alt174 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:881:22: block_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_block_declarative_item_in_block_statement5244)
            		    	block_declarative_item334=block_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return blockStmt
            		    	if ( state.backtracking==0 ) {
            		    	  declItems += block_declarative_item334
            		    	}
            		    	pushFollow(FOLLOW_sync_in_block_statement5247)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return blockStmt


            		case _ => loop174_quitflag = true
            	    }
            	}

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_block_statement5253)
            	if (state.failed) return blockStmt
            	pushFollow(FOLLOW_concurrent_statement_list_in_block_statement5257)
            	concurrent_statement_list339=concurrent_statement_list()

            	state._fsp-=1
            	if (state.failed) return blockStmt
            	`match`(input,END,FOLLOW_END_in_block_statement5260)
            	if (state.failed) return blockStmt
            	`match`(input,BLOCK,FOLLOW_BLOCK_in_block_statement5262)
            	if (state.failed) return blockStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:884:27: (end_block_label= identifier )?
            	val alt175 = {
            	val LA175_0 = input.LA(1)

            	if ( (LA175_0==BASIC_IDENTIFIER||LA175_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt175 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:884:27: end_block_label= identifier
            	        	pushFollow(FOLLOW_identifier_in_block_statement5266)
            	        	end_block_label=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement5269)
            	if (state.failed) return blockStmt
            	if ( state.backtracking==0 ) {

            	  		blockStmt=new BlockStatement(blockToken,label,guard_expression,generic_clause335,generic_map_aspect336,port_clause337,port_map_aspect338,
            	  			declItems.result,concurrent_statement_list339,end_block_label)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, block_statement_StartIndex) }
        }
        return blockStmt
    }
    // $ANTLR end "block_statement"


    // $ANTLR start "block_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:890:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    final def block_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val block_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body340: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration341: SubprogramInstantiationDeclaration = null
        var package_declaration342: PackageDeclaration = null
        var package_body343: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration344: PackageInstantiationDeclaration = null
        var type_declaration345: AbstractTypeDeclaration = null
        var subtype_declaration346: SubTypeDeclaration = null
        var constant_declaration347: ConstantDeclaration = null
        var signal_declaration348: SignalDeclaration = null
        var variable_declaration349: VariableDeclaration = null
        var file_declaration350: FileDeclaration = null
        var alias_declaration351: AliasDeclaration = null
        var component_declaration352: ComponentDeclaration = null
        var attribute_declaration353: AttributeDeclaration = null
        var attribute_specification354: AttributeSpecification = null
        var configuration_specification355: ConfigurationSpecification = null
        var disconnection_specification356: DisconnectionSpecification = null
        var use_clause357: UseClause = null
        var group_template_declaration358: GroupTemplateDeclaration = null
        var group_declaration359: GroupDeclaration = null
        var ams_step_limit_specification360: StepLimitSpecification = null
        var ams_nature_declaration361: AbstractTypeDeclaration = null
        var ams_subnature_declaration362: SubNatureDeclaration = null
        var ams_quantity_declaration363: AbstractQuantityDeclaration = null
        var ams_terminal_declaration364: TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:890:55: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
            val alt178 = dfa178.predict(input)
            alt178 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:891:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_block_declarative_item5290)
                    	subprogram_declartion_or_body340=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body340
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:892:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "block_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:892:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt176 = {
                    	val LA176_0 = input.LA(1)

                    	if ( (LA176_0==FUNCTION||LA176_0==PROCEDURE) ) 1
                    	else if ( (LA176_0==PACKAGE) ) {
                    	val LA176_2 = input.LA(2)

                    	if ( (LA176_2==BODY) ) 3
                    	else if ( (LA176_2==BASIC_IDENTIFIER||LA176_2==EXTENDED_IDENTIFIER) ) {
                    	val LA176_4 = input.LA(3)

                    	if ( (LA176_4==IS) ) {
                    	val LA176_5 = input.LA(4)

                    	if ( (LA176_5==NEW) ) 4
                    	else if ( (LA176_5==ALIAS||LA176_5==ATTRIBUTE||LA176_5==COMPONENT||(LA176_5>=CONSTANT && LA176_5<=DISCONNECT)||LA176_5==END||LA176_5==FILE||LA176_5==FUNCTION||(LA176_5>=GENERIC && LA176_5<=GROUP)||LA176_5==IMPURE||LA176_5==PACKAGE||LA176_5==PROCEDURE||LA176_5==PURE||(LA176_5>=SHARED && LA176_5<=SIGNAL)||LA176_5==SUBTYPE||LA176_5==TYPE||(LA176_5>=USE && LA176_5<=VARIABLE)||(LA176_5>=NATURE && LA176_5<=TERMINAL)||LA176_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 176, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 176, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 176, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 176, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt176 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:892:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_block_declarative_item5300)
                    	        	v2008_subprogram_instantiation_declaration341=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration341
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:893:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_block_declarative_item5309)
                    	        	package_declaration342=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration342
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:894:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_block_declarative_item5318)
                    	        	package_body343=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body343
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:895:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_block_declarative_item5327)
                    	        	v2008_package_instantiation_declaration344=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration344
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:897:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_block_declarative_item5339)
                    	type_declaration345=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration345
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:898:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_block_declarative_item5346)
                    	subtype_declaration346=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration346
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:899:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_block_declarative_item5353)
                    	constant_declaration347=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration347
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:900:4: signal_declaration
                    	pushFollow(FOLLOW_signal_declaration_in_block_declarative_item5360)
                    	signal_declaration348=signal_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=signal_declaration348
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:901:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_block_declarative_item5367)
                    	variable_declaration349=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration349
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:902:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_block_declarative_item5374)
                    	file_declaration350=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration350
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:903:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_block_declarative_item5381)
                    	alias_declaration351=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration351
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:904:4: component_declaration
                    	pushFollow(FOLLOW_component_declaration_in_block_declarative_item5388)
                    	component_declaration352=component_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=component_declaration352
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:905:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_block_declarative_item5395)
                    	attribute_declaration353=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration353
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:906:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_block_declarative_item5402)
                    	attribute_specification354=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification354
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:907:4: configuration_specification
                    	pushFollow(FOLLOW_configuration_specification_in_block_declarative_item5409)
                    	configuration_specification355=configuration_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=configuration_specification355
                    	}

                case 14 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:908:4: disconnection_specification
                    	pushFollow(FOLLOW_disconnection_specification_in_block_declarative_item5416)
                    	disconnection_specification356=disconnection_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=disconnection_specification356
                    	}

                case 15 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:909:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_block_declarative_item5423)
                    	use_clause357=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause357
                    	}

                case 16 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:910:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_block_declarative_item5430)
                    	group_template_declaration358=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration358
                    	}

                case 17 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:911:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_block_declarative_item5437)
                    	group_declaration359=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration359
                    	}

                case 18 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:914:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "block_declarative_item", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:914:12: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	val alt177 = input.LA(1) match {
                    	case LIMIT => 1
                    	case NATURE => 2
                    	case SUBNATURE => 3
                    	case QUANTITY => 4
                    	case TERMINAL => 5
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 177, 0, input)

                    	    throw nvae
                    	}

                    	alt177 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:915:3: ams_step_limit_specification
                    	        	pushFollow(FOLLOW_ams_step_limit_specification_in_block_declarative_item5454)
                    	        	ams_step_limit_specification360=ams_step_limit_specification()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_step_limit_specification360
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:916:5: ams_nature_declaration
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_block_declarative_item5462)
                    	        	ams_nature_declaration361=ams_nature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_nature_declaration361
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:917:5: ams_subnature_declaration
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_block_declarative_item5470)
                    	        	ams_subnature_declaration362=ams_subnature_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_subnature_declaration362
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:918:5: ams_quantity_declaration
                    	        	pushFollow(FOLLOW_ams_quantity_declaration_in_block_declarative_item5478)
                    	        	ams_quantity_declaration363=ams_quantity_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_quantity_declaration363
                    	        	}

                    	    case 5 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:919:5: ams_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_block_declarative_item5486)
                    	        	ams_terminal_declaration364=ams_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=ams_terminal_declaration364
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, block_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "block_declarative_item"


    // $ANTLR start "process_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:922:1: process_statement[Identifier label,Boolean postponed] returns [ProcessStatement processStmt] : processToken= PROCESS ( LPAREN name_list RPAREN )? ( IS )? sync[syncMessage] ( process_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def process_statement(label: Identifier, postponed: Boolean): ProcessStatement = {
        var processStmt : ProcessStatement = null
        val process_statement_StartIndex = input.index()
        var processToken: Token = null
        var end_process_label: Identifier = null
        var process_declarative_item365: DeclarativeItem = null
        var name_list366: Seq[Name] = null
        var sequence_of_statements367: Seq[SequentialStatement] = null



        	val declItem=new Buffer[DeclarativeItem]()
        	val syncMessage="process declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return processStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:926:3: (processToken= PROCESS ( LPAREN name_list RPAREN )? ( IS )? sync[syncMessage] ( process_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:927:2: processToken= PROCESS ( LPAREN name_list RPAREN )? ( IS )? sync[syncMessage] ( process_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON
            	processToken=`match`(input,PROCESS,FOLLOW_PROCESS_in_process_statement5513).asInstanceOf[Token]
            	if (state.failed) return processStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:927:23: ( LPAREN name_list RPAREN )?
            	val alt179 = {
            	val LA179_0 = input.LA(1)

            	if ( (LA179_0==LPAREN) ) 1
            	else -1
            	}
            	alt179 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:927:24: LPAREN name_list RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_process_statement5516)
            	        	if (state.failed) return processStmt
            	        	pushFollow(FOLLOW_name_list_in_process_statement5518)
            	        	name_list366=name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return processStmt
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_process_statement5520)
            	        	if (state.failed) return processStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:927:50: ( IS )?
            	val alt180 = {
            	val LA180_0 = input.LA(1)

            	if ( (LA180_0==IS) ) 1
            	else -1
            	}
            	alt180 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:927:50: IS
            	        	`match`(input,IS,FOLLOW_IS_in_process_statement5524)
            	        	if (state.failed) return processStmt


            	    case _ =>
            	}

            	pushFollow(FOLLOW_sync_in_process_statement5529)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return processStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:928:21: ( process_declarative_item sync[syncMessage] )*
            	var loop181_quitflag = false
            	while (!loop181_quitflag) {
            	    val alt181 = {
            	val LA181_0 = input.LA(1)

            	if ( (LA181_0==FUNCTION||LA181_0==IMPURE||LA181_0==PROCEDURE||LA181_0==PURE) ) 1
            	else if ( (LA181_0==PACKAGE) && ((vhdl2008))) 1
            	else if ( (LA181_0==ALIAS||LA181_0==ATTRIBUTE||LA181_0==CONSTANT||LA181_0==FILE||LA181_0==GROUP||LA181_0==SHARED||LA181_0==SUBTYPE||LA181_0==TYPE||(LA181_0>=USE && LA181_0<=VARIABLE)) ) 1

            	else -1
            	}
            	    alt181 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:928:22: process_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_process_declarative_item_in_process_statement5533)
            		    	process_declarative_item365=process_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return processStmt
            		    	if ( state.backtracking==0 ) {
            		    	  declItem += process_declarative_item365
            		    	}
            		    	pushFollow(FOLLOW_sync_in_process_statement5537)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return processStmt


            		case _ => loop181_quitflag = true
            	    }
            	}

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_process_statement5543)
            	if (state.failed) return processStmt
            	pushFollow(FOLLOW_sequence_of_statements_in_process_statement5547)
            	sequence_of_statements367=sequence_of_statements()

            	state._fsp-=1
            	if (state.failed) return processStmt
            	`match`(input,END,FOLLOW_END_in_process_statement5550)
            	if (state.failed) return processStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:931:6: ( POSTPONED )?
            	val alt182 = {
            	val LA182_0 = input.LA(1)

            	if ( (LA182_0==POSTPONED) ) 1
            	else -1
            	}
            	alt182 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:931:6: POSTPONED
            	        	`match`(input,POSTPONED,FOLLOW_POSTPONED_in_process_statement5552)
            	        	if (state.failed) return processStmt


            	    case _ =>
            	}

            	`match`(input,PROCESS,FOLLOW_PROCESS_in_process_statement5555)
            	if (state.failed) return processStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:931:42: (end_process_label= identifier )?
            	val alt183 = {
            	val LA183_0 = input.LA(1)

            	if ( (LA183_0==BASIC_IDENTIFIER||LA183_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt183 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:931:42: end_process_label= identifier
            	        	pushFollow(FOLLOW_identifier_in_process_statement5559)
            	        	end_process_label=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return processStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_process_statement5562)
            	if (state.failed) return processStmt
            	if ( state.backtracking==0 ) {
            	  processStmt=new ProcessStatement(processToken,label,postponed,name_list366,declItem.result,sequence_of_statements367,end_process_label)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, process_statement_StartIndex) }
        }
        return processStmt
    }
    // $ANTLR end "process_statement"


    // $ANTLR start "process_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:934:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    final def process_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val process_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body368: DeclarativeItem = null
        var v2008_subprogram_instantiation_declaration369: SubprogramInstantiationDeclaration = null
        var package_declaration370: PackageDeclaration = null
        var package_body371: PackageBodyDeclaration = null
        var v2008_package_instantiation_declaration372: PackageInstantiationDeclaration = null
        var type_declaration373: AbstractTypeDeclaration = null
        var subtype_declaration374: SubTypeDeclaration = null
        var constant_declaration375: ConstantDeclaration = null
        var variable_declaration376: VariableDeclaration = null
        var file_declaration377: FileDeclaration = null
        var alias_declaration378: AliasDeclaration = null
        var attribute_declaration379: AttributeDeclaration = null
        var attribute_specification380: AttributeSpecification = null
        var use_clause381: UseClause = null
        var group_template_declaration382: GroupTemplateDeclaration = null
        var group_declaration383: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:934:57: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            val alt185 = dfa185.predict(input)
            alt185 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:935:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_process_declarative_item5583)
                    	subprogram_declartion_or_body368=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body368
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:936:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    throw new FailedPredicateException(input, "process_declarative_item", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:936:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
                    	val alt184 = {
                    	val LA184_0 = input.LA(1)

                    	if ( (LA184_0==FUNCTION||LA184_0==PROCEDURE) ) 1
                    	else if ( (LA184_0==PACKAGE) ) {
                    	val LA184_2 = input.LA(2)

                    	if ( (LA184_2==BODY) ) 3
                    	else if ( (LA184_2==BASIC_IDENTIFIER||LA184_2==EXTENDED_IDENTIFIER) ) {
                    	val LA184_4 = input.LA(3)

                    	if ( (LA184_4==IS) ) {
                    	val LA184_5 = input.LA(4)

                    	if ( (LA184_5==NEW) ) 4
                    	else if ( (LA184_5==ALIAS||LA184_5==ATTRIBUTE||LA184_5==COMPONENT||(LA184_5>=CONSTANT && LA184_5<=DISCONNECT)||LA184_5==END||LA184_5==FILE||LA184_5==FUNCTION||(LA184_5>=GENERIC && LA184_5<=GROUP)||LA184_5==IMPURE||LA184_5==PACKAGE||LA184_5==PROCEDURE||LA184_5==PURE||(LA184_5>=SHARED && LA184_5<=SIGNAL)||LA184_5==SUBTYPE||LA184_5==TYPE||(LA184_5>=USE && LA184_5<=VARIABLE)||(LA184_5>=NATURE && LA184_5<=TERMINAL)||LA184_5==SUBNATURE) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 184, 5, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 184, 4, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 184, 2, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return item}
                    	    val nvae = new NoViableAltException("", 184, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt184 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:936:18: v2008_subprogram_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_process_declarative_item5593)
                    	        	v2008_subprogram_instantiation_declaration369=v2008_subprogram_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_subprogram_instantiation_declaration369
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:937:6: package_declaration
                    	        	pushFollow(FOLLOW_package_declaration_in_process_declarative_item5602)
                    	        	package_declaration370=package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_declaration370
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:938:6: package_body
                    	        	pushFollow(FOLLOW_package_body_in_process_declarative_item5611)
                    	        	package_body371=package_body()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=package_body371
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:939:6: v2008_package_instantiation_declaration
                    	        	pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_process_declarative_item5620)
                    	        	v2008_package_instantiation_declaration372=v2008_package_instantiation_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return item
                    	        	if ( state.backtracking==0 ) {
                    	        	  item=v2008_package_instantiation_declaration372
                    	        	}


                    	    case _ =>
                    	}


                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:941:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_process_declarative_item5632)
                    	type_declaration373=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration373
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:942:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_process_declarative_item5639)
                    	subtype_declaration374=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration374
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:943:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_process_declarative_item5646)
                    	constant_declaration375=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration375
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:944:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_process_declarative_item5653)
                    	variable_declaration376=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration376
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:945:4: file_declaration
                    	pushFollow(FOLLOW_file_declaration_in_process_declarative_item5660)
                    	file_declaration377=file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=file_declaration377
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:946:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_process_declarative_item5667)
                    	alias_declaration378=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration378
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:947:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_process_declarative_item5674)
                    	attribute_declaration379=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration379
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:948:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_process_declarative_item5681)
                    	attribute_specification380=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification380
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:949:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_process_declarative_item5688)
                    	use_clause381=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause381
                    	}

                case 12 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:950:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_process_declarative_item5695)
                    	group_template_declaration382=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration382
                    	}

                case 13 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:951:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_process_declarative_item5702)
                    	group_declaration383=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration383
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, process_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "process_declarative_item"


    // $ANTLR start "concurrent_procedure_call_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:953:1: concurrent_procedure_call_statement[Identifier label,Boolean postponed] returns [ConcurrentProcedureCallStatement procedureCallStmt] : selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def concurrent_procedure_call_statement(label: Identifier, postponed: Boolean): ConcurrentProcedureCallStatement = {
        var procedureCallStmt : ConcurrentProcedureCallStatement = null
        val concurrent_procedure_call_statement_StartIndex = input.index()
        var selected_name384: SelectedName = null
        var association_list385: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return procedureCallStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:953:134: ( selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:954:2: selected_name ( LPAREN association_list RPAREN )? SEMICOLON
            	pushFollow(FOLLOW_selected_name_in_concurrent_procedure_call_statement5720)
            	selected_name384=selected_name()

            	state._fsp-=1
            	if (state.failed) return procedureCallStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:954:16: ( LPAREN association_list RPAREN )?
            	val alt186 = {
            	val LA186_0 = input.LA(1)

            	if ( (LA186_0==LPAREN) ) 1
            	else -1
            	}
            	alt186 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:954:17: LPAREN association_list RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_concurrent_procedure_call_statement5723)
            	        	if (state.failed) return procedureCallStmt
            	        	pushFollow(FOLLOW_association_list_in_concurrent_procedure_call_statement5725)
            	        	association_list385=association_list()

            	        	state._fsp-=1
            	        	if (state.failed) return procedureCallStmt
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_concurrent_procedure_call_statement5727)
            	        	if (state.failed) return procedureCallStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement5731)
            	if (state.failed) return procedureCallStmt
            	if ( state.backtracking==0 ) {
            	  procedureCallStmt=new ConcurrentProcedureCallStatement(label,postponed,selected_name384,association_list385)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, concurrent_procedure_call_statement_StartIndex) }
        }
        return procedureCallStmt
    }
    // $ANTLR end "concurrent_procedure_call_statement"


    // $ANTLR start "concurrent_assertion_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:957:1: concurrent_assertion_statement[Identifier label,Boolean postponed] returns [ConcurrentAssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def concurrent_assertion_statement(label: Identifier, postponed: Boolean): ConcurrentAssertionStatement = {
        var assertStmt : ConcurrentAssertionStatement = null
        val concurrent_assertion_statement_StartIndex = input.index()
        var ASSERT386: Token = null
        var report_expression: Expression = null
        var severity_expression: Expression = null
        var condition387: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return assertStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:957:118: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:958:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
            	ASSERT386=`match`(input,ASSERT,FOLLOW_ASSERT_in_concurrent_assertion_statement5750).asInstanceOf[Token]
            	if (state.failed) return assertStmt
            	pushFollow(FOLLOW_condition_in_concurrent_assertion_statement5752)
            	condition387=condition()

            	state._fsp-=1
            	if (state.failed) return assertStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:958:20: ( REPORT report_expression= expression )?
            	val alt187 = {
            	val LA187_0 = input.LA(1)

            	if ( (LA187_0==REPORT) ) 1
            	else -1
            	}
            	alt187 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:958:21: REPORT report_expression= expression
            	        	`match`(input,REPORT,FOLLOW_REPORT_in_concurrent_assertion_statement5756)
            	        	if (state.failed) return assertStmt
            	        	pushFollow(FOLLOW_expression_in_concurrent_assertion_statement5760)
            	        	report_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:958:59: ( SEVERITY severity_expression= expression )?
            	val alt188 = {
            	val LA188_0 = input.LA(1)

            	if ( (LA188_0==SEVERITY) ) 1
            	else -1
            	}
            	alt188 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:958:60: SEVERITY severity_expression= expression
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_concurrent_assertion_statement5765)
            	        	if (state.failed) return assertStmt
            	        	pushFollow(FOLLOW_expression_in_concurrent_assertion_statement5769)
            	        	severity_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_assertion_statement5773)
            	if (state.failed) return assertStmt
            	if ( state.backtracking==0 ) {
            	  assertStmt=new ConcurrentAssertionStatement(ASSERT386,label,postponed,condition387,report_expression,severity_expression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, concurrent_assertion_statement_StartIndex) }
        }
        return assertStmt
    }
    // $ANTLR end "concurrent_assertion_statement"


    // $ANTLR start "concurrent_signal_assignment_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:961:1: concurrent_signal_assignment_statement[Identifier label,Boolean postponed] returns [ConcurrentSignalAssignmentStatement concurrentSignalAssignStmt] : ( concurrent_conditional_signal_assignment[$label,$postponed] | concurrent_selected_signal_assignment[$label,$postponed] );
    @throws(classOf[RecognitionException])
    final def concurrent_signal_assignment_statement(label: Identifier, postponed: Boolean): ConcurrentSignalAssignmentStatement = {
        var concurrentSignalAssignStmt : ConcurrentSignalAssignmentStatement = null
        val concurrent_signal_assignment_statement_StartIndex = input.index()
        var concurrent_conditional_signal_assignment388: ConcurrentConditionalSignalAssignment = null
        var concurrent_selected_signal_assignment389: ConcurrentSelectedSignalAssignment = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return concurrentSignalAssignStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:961:149: ( concurrent_conditional_signal_assignment[$label,$postponed] | concurrent_selected_signal_assignment[$label,$postponed] )
            val alt189 = {
            val LA189_0 = input.LA(1)

            if ( (LA189_0==BASIC_IDENTIFIER||LA189_0==EXTENDED_IDENTIFIER||LA189_0==STRING_LITERAL) ) 1
            else if ( (LA189_0==DLT) && ((vhdl2008))) 1
            else if ( (LA189_0==LPAREN) ) 1
            else if ( (LA189_0==WITH) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return concurrentSignalAssignStmt}
                val nvae = new NoViableAltException("", 189, 0, input)

                throw nvae
            }
            }
            alt189 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:962:2: concurrent_conditional_signal_assignment[$label,$postponed]
                    	pushFollow(FOLLOW_concurrent_conditional_signal_assignment_in_concurrent_signal_assignment_statement5797)
                    	concurrent_conditional_signal_assignment388=concurrent_conditional_signal_assignment(label, postponed)

                    	state._fsp-=1
                    	if (state.failed) return concurrentSignalAssignStmt
                    	if ( state.backtracking==0 ) {
                    	  concurrentSignalAssignStmt=concurrent_conditional_signal_assignment388
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:963:4: concurrent_selected_signal_assignment[$label,$postponed]
                    	pushFollow(FOLLOW_concurrent_selected_signal_assignment_in_concurrent_signal_assignment_statement5804)
                    	concurrent_selected_signal_assignment389=concurrent_selected_signal_assignment(label, postponed)

                    	state._fsp-=1
                    	if (state.failed) return concurrentSignalAssignStmt
                    	if ( state.backtracking==0 ) {
                    	  concurrentSignalAssignStmt=concurrent_selected_signal_assignment389
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, concurrent_signal_assignment_statement_StartIndex) }
        }
        return concurrentSignalAssignStmt
    }
    // $ANTLR end "concurrent_signal_assignment_statement"


    // $ANTLR start "concurrent_conditional_signal_assignment"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:965:1: concurrent_conditional_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentConditionalSignalAssignment signalAssignment] : target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def concurrent_conditional_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentConditionalSignalAssignment = {
        var signalAssignment : ConcurrentConditionalSignalAssignment = null
        val concurrent_conditional_signal_assignment_StartIndex = input.index()
        var LEQ390: Token = null
        var GUARDED392: Token = null
        var target391: Target = null
        var delay_mechanism393: DelayMechanism = null



         	val elements=new Buffer[ConcurrentConditionalSignalAssignment.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return signalAssignment }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:968:3: ( target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:969:2: target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON
            	pushFollow(FOLLOW_target_in_concurrent_conditional_signal_assignment5824)
            	target391=target()

            	state._fsp-=1
            	if (state.failed) return signalAssignment
            	LEQ390=`match`(input,LEQ,FOLLOW_LEQ_in_concurrent_conditional_signal_assignment5826).asInstanceOf[Token]
            	if (state.failed) return signalAssignment
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:969:13: ( GUARDED )?
            	val alt190 = {
            	val LA190_0 = input.LA(1)

            	if ( (LA190_0==GUARDED) ) 1
            	else -1
            	}
            	alt190 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:969:13: GUARDED
            	        	GUARDED392=`match`(input,GUARDED,FOLLOW_GUARDED_in_concurrent_conditional_signal_assignment5828).asInstanceOf[Token]
            	        	if (state.failed) return signalAssignment


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:969:22: ( delay_mechanism )?
            	val alt191 = {
            	val LA191_0 = input.LA(1)

            	if ( (LA191_0==INERTIAL||LA191_0==REJECT||LA191_0==TRANSPORT) ) 1
            	else -1
            	}
            	alt191 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:969:22: delay_mechanism
            	        	pushFollow(FOLLOW_delay_mechanism_in_concurrent_conditional_signal_assignment5831)
            	        	delay_mechanism393=delay_mechanism()

            	        	state._fsp-=1
            	        	if (state.failed) return signalAssignment


            	    case _ =>
            	}

            	pushFollow(FOLLOW_conditional_waveforms_in_concurrent_conditional_signal_assignment5838)
            	conditional_waveforms(elements)

            	state._fsp-=1
            	if (state.failed) return signalAssignment
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_conditional_signal_assignment5841)
            	if (state.failed) return signalAssignment
            	if ( state.backtracking==0 ) {
            	  signalAssignment=new ConcurrentConditionalSignalAssignment(LEQ390,label,postponed,target391,GUARDED392!=null,delay_mechanism393,elements.result.reverse)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, concurrent_conditional_signal_assignment_StartIndex) }
        }
        return signalAssignment
    }
    // $ANTLR end "concurrent_conditional_signal_assignment"


    // $ANTLR start "conditional_waveforms"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:973:1: conditional_waveforms[Buffer[ConcurrentConditionalSignalAssignment.When] elements] : waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? ;
    @throws(classOf[RecognitionException])
    final def conditional_waveforms(elements: Buffer[ConcurrentConditionalSignalAssignment.When]): Unit = {
        val conditional_waveforms_StartIndex = input.index()
        var waveform394: Waveform = null
        var condition395: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:973:85: ( waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:974:2: waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
            	pushFollow(FOLLOW_waveform_in_conditional_waveforms5854)
            	waveform394=waveform()

            	state._fsp-=1
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:974:11: ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
            	val alt193 = {
            	val LA193_0 = input.LA(1)

            	if ( (LA193_0==WHEN) ) 1
            	else -1
            	}
            	alt193 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:974:13: WHEN condition ( ELSE conditional_waveforms[elements] )?
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_conditional_waveforms5858)
            	        	if (state.failed) return 
            	        	pushFollow(FOLLOW_condition_in_conditional_waveforms5860)
            	        	condition395=condition()

            	        	state._fsp-=1
            	        	if (state.failed) return 
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:974:28: ( ELSE conditional_waveforms[elements] )?
            	        	val alt192 = {
            	        	val LA192_0 = input.LA(1)

            	        	if ( (LA192_0==ELSE) ) 1
            	        	else -1
            	        	}
            	        	alt192 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:974:30: ELSE conditional_waveforms[elements]
            	        	        	`match`(input,ELSE,FOLLOW_ELSE_in_conditional_waveforms5864)
            	        	        	if (state.failed) return 
            	        	        	pushFollow(FOLLOW_conditional_waveforms_in_conditional_waveforms5866)
            	        	        	conditional_waveforms(elements)

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return 


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  elements += new ConcurrentConditionalSignalAssignment.When(waveform394,condition395)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, conditional_waveforms_StartIndex) }
        }
        return 
    }
    // $ANTLR end "conditional_waveforms"


    // $ANTLR start "concurrent_selected_signal_assignment"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:976:1: concurrent_selected_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentSelectedSignalAssignment signalAssignment] : WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def concurrent_selected_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentSelectedSignalAssignment = {
        var signalAssignment : ConcurrentSelectedSignalAssignment = null
        val concurrent_selected_signal_assignment_StartIndex = input.index()
        var WITH396: Token = null
        var QMARK398: Token = null
        var GUARDED400: Token = null
        var expression397: Expression = null
        var target399: Target = null
        var delay_mechanism401: DelayMechanism = null
        var selected_waveforms402: Seq[ConcurrentSelectedSignalAssignment.When] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return signalAssignment }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:976:137: ( WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:977:2: WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON
            	WITH396=`match`(input,WITH,FOLLOW_WITH_in_concurrent_selected_signal_assignment5892).asInstanceOf[Token]
            	if (state.failed) return signalAssignment
            	pushFollow(FOLLOW_expression_in_concurrent_selected_signal_assignment5894)
            	expression397=expression()

            	state._fsp-=1
            	if (state.failed) return signalAssignment
            	`match`(input,SELECT,FOLLOW_SELECT_in_concurrent_selected_signal_assignment5896)
            	if (state.failed) return signalAssignment
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:977:25: ({...}? => QMARK )?
            	val alt194 = {
            	val LA194_0 = input.LA(1)

            	if ( (LA194_0==QMARK) && ((vhdl2008))) 1
            	else -1
            	}
            	alt194 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:977:26: {...}? => QMARK
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return signalAssignment}
            	        	    throw new FailedPredicateException(input, "concurrent_selected_signal_assignment", "vhdl2008")
            	        	}
            	        	QMARK398=`match`(input,QMARK,FOLLOW_QMARK_in_concurrent_selected_signal_assignment5901).asInstanceOf[Token]
            	        	if (state.failed) return signalAssignment


            	    case _ =>
            	}

            	pushFollow(FOLLOW_target_in_concurrent_selected_signal_assignment5907)
            	target399=target()

            	state._fsp-=1
            	if (state.failed) return signalAssignment
            	`match`(input,LEQ,FOLLOW_LEQ_in_concurrent_selected_signal_assignment5909)
            	if (state.failed) return signalAssignment
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:978:14: ( GUARDED )?
            	val alt195 = {
            	val LA195_0 = input.LA(1)

            	if ( (LA195_0==GUARDED) ) 1
            	else -1
            	}
            	alt195 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:978:14: GUARDED
            	        	GUARDED400=`match`(input,GUARDED,FOLLOW_GUARDED_in_concurrent_selected_signal_assignment5911).asInstanceOf[Token]
            	        	if (state.failed) return signalAssignment


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:978:23: ( delay_mechanism )?
            	val alt196 = {
            	val LA196_0 = input.LA(1)

            	if ( (LA196_0==INERTIAL||LA196_0==REJECT||LA196_0==TRANSPORT) ) 1
            	else -1
            	}
            	alt196 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:978:23: delay_mechanism
            	        	pushFollow(FOLLOW_delay_mechanism_in_concurrent_selected_signal_assignment5914)
            	        	delay_mechanism401=delay_mechanism()

            	        	state._fsp-=1
            	        	if (state.failed) return signalAssignment


            	    case _ =>
            	}

            	pushFollow(FOLLOW_selected_waveforms_in_concurrent_selected_signal_assignment5917)
            	selected_waveforms402=selected_waveforms()

            	state._fsp-=1
            	if (state.failed) return signalAssignment
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_selected_signal_assignment5919)
            	if (state.failed) return signalAssignment
            	if ( state.backtracking==0 ) {
            	  signalAssignment=new ConcurrentSelectedSignalAssignment(WITH396,label,postponed,expression397,QMARK398!=null,target399,GUARDED400!=null,delay_mechanism401,selected_waveforms402)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, concurrent_selected_signal_assignment_StartIndex) }
        }
        return signalAssignment
    }
    // $ANTLR end "concurrent_selected_signal_assignment"


    // $ANTLR start "selected_waveform"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:981:1: selected_waveform returns [ConcurrentSelectedSignalAssignment.When whenClause] : waveform WHEN choices ;
    @throws(classOf[RecognitionException])
    final def selected_waveform(): ConcurrentSelectedSignalAssignment.When = {
        var whenClause : ConcurrentSelectedSignalAssignment.When = null
        val selected_waveform_StartIndex = input.index()
        var waveform403: Waveform = null
        var choices404: Seq[Choices.Choice] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return whenClause }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:981:80: ( waveform WHEN choices )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:982:2: waveform WHEN choices
            	pushFollow(FOLLOW_waveform_in_selected_waveform5937)
            	waveform403=waveform()

            	state._fsp-=1
            	if (state.failed) return whenClause
            	`match`(input,WHEN,FOLLOW_WHEN_in_selected_waveform5939)
            	if (state.failed) return whenClause
            	pushFollow(FOLLOW_choices_in_selected_waveform5941)
            	choices404=choices()

            	state._fsp-=1
            	if (state.failed) return whenClause
            	if ( state.backtracking==0 ) {
            	  whenClause = new ConcurrentSelectedSignalAssignment.When(waveform403,choices404)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, selected_waveform_StartIndex) }
        }
        return whenClause
    }
    // $ANTLR end "selected_waveform"


    // $ANTLR start "selected_waveforms"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:984:1: selected_waveforms returns [Seq[ConcurrentSelectedSignalAssignment.When] waveforms] : s1= selected_waveform ( COMMA s2= selected_waveform )* ;
    @throws(classOf[RecognitionException])
    final def selected_waveforms(): Seq[ConcurrentSelectedSignalAssignment.When] = {
        var waveforms : Seq[ConcurrentSelectedSignalAssignment.When] = null
        val selected_waveforms_StartIndex = input.index()
        var s1: ConcurrentSelectedSignalAssignment.When = null
        var s2: ConcurrentSelectedSignalAssignment.When = null



        	val elements=new Buffer[ConcurrentSelectedSignalAssignment.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return waveforms }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:987:3: (s1= selected_waveform ( COMMA s2= selected_waveform )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:988:2: s1= selected_waveform ( COMMA s2= selected_waveform )*
            	pushFollow(FOLLOW_selected_waveform_in_selected_waveforms5963)
            	s1=selected_waveform()

            	state._fsp-=1
            	if (state.failed) return waveforms
            	if ( state.backtracking==0 ) {
            	  elements += s1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:988:51: ( COMMA s2= selected_waveform )*
            	var loop197_quitflag = false
            	while (!loop197_quitflag) {
            	    val alt197 = {
            	val LA197_0 = input.LA(1)

            	if ( (LA197_0==COMMA) ) 1

            	else -1
            	}
            	    alt197 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:988:52: COMMA s2= selected_waveform
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_selected_waveforms5967)
            		    	if (state.failed) return waveforms
            		    	pushFollow(FOLLOW_selected_waveform_in_selected_waveforms5971)
            		    	s2=selected_waveform()

            		    	state._fsp-=1
            		    	if (state.failed) return waveforms
            		    	if ( state.backtracking==0 ) {
            		    	  elements += s2
            		    	}


            		case _ => loop197_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  waveforms=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, selected_waveforms_StartIndex) }
        }
        return waveforms
    }
    // $ANTLR end "selected_waveforms"


    // $ANTLR start "target"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:991:1: target returns [Target target_] : ( name | aggregate );
    @throws(classOf[RecognitionException])
    final def target(): Target = {
        var target_ : Target = null
        val target_StartIndex = input.index()
        var name405: Name = null
        var aggregate406: Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return target_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:991:33: ( name | aggregate )
            val alt198 = {
            val LA198_0 = input.LA(1)

            if ( (LA198_0==BASIC_IDENTIFIER||LA198_0==EXTENDED_IDENTIFIER||LA198_0==STRING_LITERAL) ) 1
            else if ( (LA198_0==DLT) && ((vhdl2008))) 1
            else if ( (LA198_0==LPAREN) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return target_}
                val nvae = new NoViableAltException("", 198, 0, input)

                throw nvae
            }
            }
            alt198 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:992:2: name
                    	pushFollow(FOLLOW_name_in_target5994)
                    	name405=name()

                    	state._fsp-=1
                    	if (state.failed) return target_
                    	if ( state.backtracking==0 ) {
                    	  target_ = new Target(Left(name405))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:993:4: aggregate
                    	pushFollow(FOLLOW_aggregate_in_target6001)
                    	aggregate406=aggregate()

                    	state._fsp-=1
                    	if (state.failed) return target_
                    	if ( state.backtracking==0 ) {
                    	  target_ = new Target(Right(aggregate406))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, target_StartIndex) }
        }
        return target_
    }
    // $ANTLR end "target"


    // $ANTLR start "component_instantiation_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:995:1: component_instantiation_statement[Identifier label] returns [ComponentInstantiationStatement stmt] : ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def component_instantiation_statement(label: Identifier): ComponentInstantiationStatement = {
        var stmt : ComponentInstantiationStatement = null
        val component_instantiation_statement_StartIndex = input.index()
        var n: SelectedName = null
        var architecture_identifier: Identifier = null
        var generic_map_aspect407: AssociationList = null
        var port_map_aspect408: AssociationList = null



        	var componentType:ComponentInstantiationStatement.ComponentType.Value=null
        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:999:3: ( ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1000:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1000:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name )
            	val alt201 = input.LA(1) match {
            	case COMPONENT | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | STRING_LITERAL => 1
            	case ENTITY => 2
            	case CONFIGURATION => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return stmt}
            	    val nvae = new NoViableAltException("", 201, 0, input)

            	    throw nvae
            	}

            	alt201 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1001:3: ( COMPONENT )? n= selected_name
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1001:3: ( COMPONENT )?
            	        	val alt199 = {
            	        	val LA199_0 = input.LA(1)

            	        	if ( (LA199_0==COMPONENT) ) 1
            	        	else -1
            	        	}
            	        	alt199 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1001:3: COMPONENT
            	        	        	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_instantiation_statement6030)
            	        	        	if (state.failed) return stmt


            	        	    case _ =>
            	        	}

            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6035)
            	        	n=selected_name()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.COMPONENT 
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1002:5: ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
            	        	`match`(input,ENTITY,FOLLOW_ENTITY_in_component_instantiation_statement6043)
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6047)
            	        	n=selected_name()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1002:28: ( LPAREN architecture_identifier= identifier RPAREN )?
            	        	val alt200 = {
            	        	val LA200_0 = input.LA(1)

            	        	if ( (LA200_0==LPAREN) ) 1
            	        	else -1
            	        	}
            	        	alt200 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1002:29: LPAREN architecture_identifier= identifier RPAREN
            	        	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_component_instantiation_statement6050)
            	        	        	if (state.failed) return stmt
            	        	        	pushFollow(FOLLOW_identifier_in_component_instantiation_statement6054)
            	        	        	architecture_identifier=identifier()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt
            	        	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_component_instantiation_statement6056)
            	        	        	if (state.failed) return stmt


            	        	    case _ =>
            	        	}

            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.ENTITY
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1003:5: CONFIGURATION n= selected_name
            	        	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_component_instantiation_statement6066)
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6070)
            	        	n=selected_name()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.CONFIGURATION
            	        	}


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1005:2: ( generic_map_aspect )?
            	val alt202 = {
            	val LA202_0 = input.LA(1)

            	if ( (LA202_0==GENERIC) ) 1
            	else -1
            	}
            	alt202 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1005:2: generic_map_aspect
            	        	pushFollow(FOLLOW_generic_map_aspect_in_component_instantiation_statement6078)
            	        	generic_map_aspect407=generic_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1006:2: ( port_map_aspect )?
            	val alt203 = {
            	val LA203_0 = input.LA(1)

            	if ( (LA203_0==PORT) ) 1
            	else -1
            	}
            	alt203 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1006:2: port_map_aspect
            	        	pushFollow(FOLLOW_port_map_aspect_in_component_instantiation_statement6082)
            	        	port_map_aspect408=port_map_aspect()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_instantiation_statement6085)
            	if (state.failed) return stmt
            	if ( state.backtracking==0 ) {
            	  stmt=new ComponentInstantiationStatement(position,label,componentType,n,architecture_identifier,generic_map_aspect407,port_map_aspect408)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, component_instantiation_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "component_instantiation_statement"


    // $ANTLR start "generate_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1009:1: generate_statement[Identifier label] returns [ConcurrentStatement generateStmt] : ( for_generate_statement[$label] | if_generate_statement[$label] | {...}? => v2008_case_generate_statement[$label] );
    @throws(classOf[RecognitionException])
    final def generate_statement(label: Identifier): ConcurrentStatement = {
        var generateStmt : ConcurrentStatement = null
        val generate_statement_StartIndex = input.index()
        var for_generate_statement409: ForGenerateStatement = null
        var if_generate_statement410: IfGenerateStatement = null
        var v2008_case_generate_statement411: CaseGenerateStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return generateStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1009:81: ( for_generate_statement[$label] | if_generate_statement[$label] | {...}? => v2008_case_generate_statement[$label] )
            val alt204 = {
            val LA204_0 = input.LA(1)

            if ( (LA204_0==FOR) ) 1
            else if ( (LA204_0==IF) ) 2
            else if ( (LA204_0==CASE) && ((vhdl2008))) 3
            else {
                if (state.backtracking>0) {state.failed=true; return generateStmt}
                val nvae = new NoViableAltException("", 204, 0, input)

                throw nvae
            }
            }
            alt204 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1010:2: for_generate_statement[$label]
                    	pushFollow(FOLLOW_for_generate_statement_in_generate_statement6104)
                    	for_generate_statement409=for_generate_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return generateStmt
                    	if ( state.backtracking==0 ) {
                    	  generateStmt=for_generate_statement409
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1011:4: if_generate_statement[$label]
                    	pushFollow(FOLLOW_if_generate_statement_in_generate_statement6112)
                    	if_generate_statement410=if_generate_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return generateStmt
                    	if ( state.backtracking==0 ) {
                    	  generateStmt=if_generate_statement410
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1012:4: {...}? => v2008_case_generate_statement[$label]
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return generateStmt}
                    	    throw new FailedPredicateException(input, "generate_statement", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_case_generate_statement_in_generate_statement6122)
                    	v2008_case_generate_statement411=v2008_case_generate_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return generateStmt
                    	if ( state.backtracking==0 ) {
                    	  generateStmt=v2008_case_generate_statement411
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, generate_statement_StartIndex) }
        }
        return generateStmt
    }
    // $ANTLR end "generate_statement"


    // $ANTLR start "for_generate_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1014:1: for_generate_statement[Identifier label] returns [ForGenerateStatement forGenerateStmt] : FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def for_generate_statement(label: Identifier): ForGenerateStatement = {
        var forGenerateStmt : ForGenerateStatement = null
        val for_generate_statement_StartIndex = input.index()
        var FOR412: Token = null
        var loopIdentifier: Identifier = null
        var body: Parser.generate_statement_body_return = null
        var end_generate_label: Identifier = null
        var discrete_range413: DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return forGenerateStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1014:89: ( FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1015:2: FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
            	FOR412=`match`(input,FOR,FOLLOW_FOR_in_for_generate_statement6140).asInstanceOf[Token]
            	if (state.failed) return forGenerateStmt
            	pushFollow(FOLLOW_identifier_in_for_generate_statement6144)
            	loopIdentifier=identifier()

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt
            	`match`(input,IN,FOLLOW_IN_in_for_generate_statement6146)
            	if (state.failed) return forGenerateStmt
            	pushFollow(FOLLOW_discrete_range_in_for_generate_statement6148)
            	discrete_range413=discrete_range()

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_for_generate_statement6150)
            	if (state.failed) return forGenerateStmt
            	pushFollow(FOLLOW_generate_statement_body_in_for_generate_statement6156)
            	body=generate_statement_body()

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt
            	`match`(input,END,FOLLOW_END_in_for_generate_statement6159)
            	if (state.failed) return forGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_for_generate_statement6161)
            	if (state.failed) return forGenerateStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1017:33: (end_generate_label= identifier )?
            	val alt205 = {
            	val LA205_0 = input.LA(1)

            	if ( (LA205_0==BASIC_IDENTIFIER||LA205_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt205 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1017:33: end_generate_label= identifier
            	        	pushFollow(FOLLOW_identifier_in_for_generate_statement6165)
            	        	end_generate_label=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return forGenerateStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_generate_statement6168)
            	if (state.failed) return forGenerateStmt
            	if ( state.backtracking==0 ) {
            	  forGenerateStmt=new ForGenerateStatement(FOR412,label,loopIdentifier,discrete_range413,(if (body!=null) body.declarativeItems else null),(if (body!=null) body.statementList else null),(if (body!=null) body.endLabel else null),end_generate_label)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, for_generate_statement_StartIndex) }
        }
        return forGenerateStmt
    }
    // $ANTLR end "for_generate_statement"


    // $ANTLR start "if_generate_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1020:1: if_generate_statement[Identifier label] returns [IfGenerateStatement ifGenerateStmt] : IF ({...}? =>ifLabel= label_colon )? ifCondition= condition GENERATE ifBody= generate_statement_body ({...}? => ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )* ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )? )? END GENERATE ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def if_generate_statement(label: Identifier): IfGenerateStatement = {
        var ifGenerateStmt : IfGenerateStatement = null
        val if_generate_statement_StartIndex = input.index()
        var IF414: Token = null
        var ifLabel: Identifier = null
        var ifCondition: Expression = null
        var ifBody: Parser.generate_statement_body_return = null
        var elseifLabel: Identifier = null
        var elsifCondition: Expression = null
        var elseIfBody: Parser.generate_statement_body_return = null
        var elseLabel: Identifier = null
        var elseBody: Parser.generate_statement_body_return = null
        var identifier415: Identifier = null



        	val ifList=new Buffer[IfGenerateStatement.IfThenPart]()
        	var elsePart:Option[IfGenerateStatement.IfThenPart]=None

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return ifGenerateStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1024:3: ( IF ({...}? =>ifLabel= label_colon )? ifCondition= condition GENERATE ifBody= generate_statement_body ({...}? => ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )* ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )? )? END GENERATE ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1025:2: IF ({...}? =>ifLabel= label_colon )? ifCondition= condition GENERATE ifBody= generate_statement_body ({...}? => ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )* ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )? )? END GENERATE ( identifier )? SEMICOLON
            	IF414=`match`(input,IF,FOLLOW_IF_in_if_generate_statement6191).asInstanceOf[Token]
            	if (state.failed) return ifGenerateStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1025:5: ({...}? =>ifLabel= label_colon )?
            	val alt206 = {
            	val LA206_0 = input.LA(1)

            	if ( (LA206_0==BASIC_IDENTIFIER||LA206_0==EXTENDED_IDENTIFIER) ) {
            	val LA206_1 = input.LA(2)

            	if ( (LA206_1==COLON) && ((vhdl2008))) 1
            	else -1
            	}
            	else -1
            	}
            	alt206 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1025:6: {...}? =>ifLabel= label_colon
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return ifGenerateStmt}
            	        	    throw new FailedPredicateException(input, "if_generate_statement", "vhdl2008")
            	        	}
            	        	pushFollow(FOLLOW_label_colon_in_if_generate_statement6198)
            	        	ifLabel=label_colon()

            	        	state._fsp-=1
            	        	if (state.failed) return ifGenerateStmt


            	    case _ =>
            	}

            	pushFollow(FOLLOW_condition_in_if_generate_statement6204)
            	ifCondition=condition()

            	state._fsp-=1
            	if (state.failed) return ifGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement6206)
            	if (state.failed) return ifGenerateStmt
            	pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement6212)
            	ifBody=generate_statement_body()

            	state._fsp-=1
            	if (state.failed) return ifGenerateStmt
            	if ( state.backtracking==0 ) {
            	  ifList += new IfGenerateStatement.IfThenPart(ifLabel,ifCondition,(if (ifBody!=null) ifBody.declarativeItems else null),(if (ifBody!=null) ifBody.statementList else null),(if (ifBody!=null) ifBody.endLabel else null))
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:2: ({...}? => ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )* ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )? )?
            	val alt211 = {
            	val LA211_0 = input.LA(1)

            	if ( ((LA211_0>=ELSE && LA211_0<=ELSIF)) && ((vhdl2008))) 1
            	else if ( (LA211_0==END) ) {
            	val LA211_2 = input.LA(2)

            	if ( ((vhdl2008)) ) 1
            	else -1
            	}
            	else -1
            	}
            	alt211 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:3: {...}? => ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )* ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )?
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return ifGenerateStmt}
            	        	    throw new FailedPredicateException(input, "if_generate_statement", "vhdl2008")
            	        	}
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:16: ( ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body )*
            	        	var loop208_quitflag = false
            	        	while (!loop208_quitflag) {
            	        	    val alt208 = {
            	        	val LA208_0 = input.LA(1)

            	        	if ( (LA208_0==ELSIF) ) 1

            	        	else -1
            	        	}
            	        	    alt208 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:17: ELSIF (elseifLabel= label_colon )? elsifCondition= condition GENERATE elseIfBody= generate_statement_body
            	        		    	`match`(input,ELSIF,FOLLOW_ELSIF_in_if_generate_statement6221)
            	        		    	if (state.failed) return ifGenerateStmt
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:34: (elseifLabel= label_colon )?
            	        		    	val alt207 = {
            	        		    	val LA207_0 = input.LA(1)

            	        		    	if ( (LA207_0==BASIC_IDENTIFIER||LA207_0==EXTENDED_IDENTIFIER) ) {
            	        		    	val LA207_1 = input.LA(2)

            	        		    	if ( (LA207_1==COLON) ) 1
            	        		    	else -1
            	        		    	}
            	        		    	else -1
            	        		    	}
            	        		    	alt207 match {
            	        		    	    case 1 =>
            	        		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1027:34: elseifLabel= label_colon
            	        		    	        	pushFollow(FOLLOW_label_colon_in_if_generate_statement6225)
            	        		    	        	elseifLabel=label_colon()

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return ifGenerateStmt


            	        		    	    case _ =>
            	        		    	}

            	        		    	pushFollow(FOLLOW_condition_in_if_generate_statement6230)
            	        		    	elsifCondition=condition()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return ifGenerateStmt
            	        		    	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement6232)
            	        		    	if (state.failed) return ifGenerateStmt
            	        		    	pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement6238)
            	        		    	elseIfBody=generate_statement_body()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return ifGenerateStmt
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  ifList += new IfGenerateStatement.IfThenPart(elseifLabel,elsifCondition,(if (elseIfBody!=null) elseIfBody.declarativeItems else null),(if (elseIfBody!=null) elseIfBody.statementList else null),(if (elseIfBody!=null) elseIfBody.endLabel else null))
            	        		    	}


            	        		case _ => loop208_quitflag = true
            	        	    }
            	        	}

            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1031:2: ( ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body )?
            	        	val alt210 = {
            	        	val LA210_0 = input.LA(1)

            	        	if ( (LA210_0==ELSE) ) 1
            	        	else -1
            	        	}
            	        	alt210 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1031:3: ELSE (elseLabel= label_colon )? GENERATE elseBody= generate_statement_body
            	        	        	`match`(input,ELSE,FOLLOW_ELSE_in_if_generate_statement6250)
            	        	        	if (state.failed) return ifGenerateStmt
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1031:18: (elseLabel= label_colon )?
            	        	        	val alt209 = {
            	        	        	val LA209_0 = input.LA(1)

            	        	        	if ( (LA209_0==BASIC_IDENTIFIER||LA209_0==EXTENDED_IDENTIFIER) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt209 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1031:18: elseLabel= label_colon
            	        	        	        	pushFollow(FOLLOW_label_colon_in_if_generate_statement6255)
            	        	        	        	elseLabel=label_colon()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return ifGenerateStmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement6258)
            	        	        	if (state.failed) return ifGenerateStmt
            	        	        	pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement6264)
            	        	        	elseBody=generate_statement_body()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return ifGenerateStmt
            	        	        	if ( state.backtracking==0 ) {
            	        	        	  elsePart=Option(new IfGenerateStatement.IfThenPart(elseLabel,NoExpression,(if (elseBody!=null) elseBody.declarativeItems else null),(if (elseBody!=null) elseBody.statementList else null),(if (elseBody!=null) elseBody.endLabel else null)))
            	        	        	}


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_if_generate_statement6277)
            	if (state.failed) return ifGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement6279)
            	if (state.failed) return ifGenerateStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1035:15: ( identifier )?
            	val alt212 = {
            	val LA212_0 = input.LA(1)

            	if ( (LA212_0==BASIC_IDENTIFIER||LA212_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt212 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1035:15: identifier
            	        	pushFollow(FOLLOW_identifier_in_if_generate_statement6281)
            	        	identifier415=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return ifGenerateStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_if_generate_statement6284)
            	if (state.failed) return ifGenerateStmt
            	if ( state.backtracking==0 ) {
            	  ifGenerateStmt=new IfGenerateStatement(IF414,label,ifList.result,elsePart,identifier415)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, if_generate_statement_StartIndex) }
        }
        return ifGenerateStmt
    }
    // $ANTLR end "if_generate_statement"


    // $ANTLR start "v2008_case_generate_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1038:1: v2008_case_generate_statement[Identifier label] returns [CaseGenerateStatement caseGenerateStmt] : CASE expression GENERATE ( WHEN ( label_colon )? choices ARROW body= generate_statement_body )+ END GENERATE ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_case_generate_statement(label: Identifier): CaseGenerateStatement = {
        var caseGenerateStmt : CaseGenerateStatement = null
        val v2008_case_generate_statement_StartIndex = input.index()
        var CASE418: Token = null
        var body: Parser.generate_statement_body_return = null
        var label_colon416: Identifier = null
        var choices417: Seq[Choices.Choice] = null
        var expression419: Expression = null
        var identifier420: Identifier = null



        	val alternatives=new Buffer[CaseGenerateStatement.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return caseGenerateStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1041:3: ( CASE expression GENERATE ( WHEN ( label_colon )? choices ARROW body= generate_statement_body )+ END GENERATE ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1042:2: CASE expression GENERATE ( WHEN ( label_colon )? choices ARROW body= generate_statement_body )+ END GENERATE ( identifier )? SEMICOLON
            	CASE418=`match`(input,CASE,FOLLOW_CASE_in_v2008_case_generate_statement6307).asInstanceOf[Token]
            	if (state.failed) return caseGenerateStmt
            	pushFollow(FOLLOW_expression_in_v2008_case_generate_statement6309)
            	expression419=expression()

            	state._fsp-=1
            	if (state.failed) return caseGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_v2008_case_generate_statement6311)
            	if (state.failed) return caseGenerateStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1043:3: ( WHEN ( label_colon )? choices ARROW body= generate_statement_body )+
            	var cnt214 = 0
            	var loop214_quitflag = false
            	while (!loop214_quitflag) {
            	    val alt214 = {
            	val LA214_0 = input.LA(1)

            	if ( (LA214_0==WHEN) ) 1

            	else -1
            	}
            	    alt214 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1043:4: WHEN ( label_colon )? choices ARROW body= generate_statement_body
            		    	`match`(input,WHEN,FOLLOW_WHEN_in_v2008_case_generate_statement6316)
            		    	if (state.failed) return caseGenerateStmt
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1043:9: ( label_colon )?
            		    	val alt213 = {
            		    	val LA213_0 = input.LA(1)

            		    	if ( (LA213_0==BASIC_IDENTIFIER||LA213_0==EXTENDED_IDENTIFIER) ) {
            		    	val LA213_1 = input.LA(2)

            		    	if ( (LA213_1==COLON) ) 1
            		    	else -1
            		    	}
            		    	else -1
            		    	}
            		    	alt213 match {
            		    	    case 1 =>
            		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1043:9: label_colon
            		    	        	pushFollow(FOLLOW_label_colon_in_v2008_case_generate_statement6318)
            		    	        	label_colon416=label_colon()

            		    	        	state._fsp-=1
            		    	        	if (state.failed) return caseGenerateStmt


            		    	    case _ =>
            		    	}

            		    	pushFollow(FOLLOW_choices_in_v2008_case_generate_statement6321)
            		    	choices417=choices()

            		    	state._fsp-=1
            		    	if (state.failed) return caseGenerateStmt
            		    	`match`(input,ARROW,FOLLOW_ARROW_in_v2008_case_generate_statement6323)
            		    	if (state.failed) return caseGenerateStmt
            		    	pushFollow(FOLLOW_generate_statement_body_in_v2008_case_generate_statement6327)
            		    	body=generate_statement_body()

            		    	state._fsp-=1
            		    	if (state.failed) return caseGenerateStmt
            		    	if ( state.backtracking==0 ) {
            		    	  alternatives += new CaseGenerateStatement.When(label_colon416,choices417,(if (body!=null) body.declarativeItems else null),(if (body!=null) body.statementList else null),(if (body!=null) body.endLabel else null))
            		    	}


            		case _ =>
            		    if ( cnt214 >= 1 ) loop214_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return caseGenerateStmt}
            	            val eee = new EarlyExitException(214, input)
            	            throw eee
            	      }
            	    }
            	    cnt214+=1
            	}

            	`match`(input,END,FOLLOW_END_in_v2008_case_generate_statement6334)
            	if (state.failed) return caseGenerateStmt
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_v2008_case_generate_statement6336)
            	if (state.failed) return caseGenerateStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1044:15: ( identifier )?
            	val alt215 = {
            	val LA215_0 = input.LA(1)

            	if ( (LA215_0==BASIC_IDENTIFIER||LA215_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt215 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1044:15: identifier
            	        	pushFollow(FOLLOW_identifier_in_v2008_case_generate_statement6338)
            	        	identifier420=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return caseGenerateStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_case_generate_statement6341)
            	if (state.failed) return caseGenerateStmt
            	if ( state.backtracking==0 ) {
            	  caseGenerateStmt=new CaseGenerateStatement(CASE418,label,expression419,alternatives.result,identifier420)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, v2008_case_generate_statement_StartIndex) }
        }
        return caseGenerateStmt
    }
    // $ANTLR end "v2008_case_generate_statement"


    // $ANTLR start "generate_statement_body"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1047:1: generate_statement_body returns [Seq[DeclarativeItem] declarativeItems,Seq[ConcurrentStatement] statementList,Identifier endLabel] : ( ( block_declarative_item sync[syncMessage] )* BEGIN )? concurrent_statement_list ({...}? => END ( identifier )? SEMICOLON )? ;
    @throws(classOf[RecognitionException])
    final def generate_statement_body(): Parser.generate_statement_body_return = {
        val retval = new Parser.generate_statement_body_return()
        retval.start = input.LT(1)
        val generate_statement_body_StartIndex = input.index()
        var block_declarative_item421: DeclarativeItem = null
        var concurrent_statement_list422: Seq[ConcurrentStatement] = null
        var identifier423: Identifier = null



        	val items=new Buffer[DeclarativeItem]()
        	val syncMessage="block declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1051:3: ( ( ( block_declarative_item sync[syncMessage] )* BEGIN )? concurrent_statement_list ({...}? => END ( identifier )? SEMICOLON )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1052:2: ( ( block_declarative_item sync[syncMessage] )* BEGIN )? concurrent_statement_list ({...}? => END ( identifier )? SEMICOLON )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1052:2: ( ( block_declarative_item sync[syncMessage] )* BEGIN )?
            	val alt217 = dfa217.predict(input)
            	alt217 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1053:3: ( block_declarative_item sync[syncMessage] )* BEGIN
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1053:3: ( block_declarative_item sync[syncMessage] )*
            	        	var loop216_quitflag = false
            	        	while (!loop216_quitflag) {
            	        	    val alt216 = {
            	        	val LA216_0 = input.LA(1)

            	        	if ( (LA216_0==FUNCTION||LA216_0==IMPURE||LA216_0==PROCEDURE||LA216_0==PURE) ) 1
            	        	else if ( (LA216_0==PACKAGE) && ((vhdl2008))) 1
            	        	else if ( (LA216_0==ALIAS||LA216_0==ATTRIBUTE||LA216_0==COMPONENT||(LA216_0>=CONSTANT && LA216_0<=DISCONNECT)||(LA216_0>=FILE && LA216_0<=FOR)||LA216_0==GROUP||(LA216_0>=SHARED && LA216_0<=SIGNAL)||LA216_0==SUBTYPE||LA216_0==TYPE||(LA216_0>=USE && LA216_0<=VARIABLE)) ) 1
            	        	else if ( ((LA216_0>=NATURE && LA216_0<=QUANTITY)||(LA216_0>=SUBNATURE && LA216_0<=LIMIT)) && ((ams))) 1

            	        	else -1
            	        	}
            	        	    alt216 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1053:4: block_declarative_item sync[syncMessage]
            	        		    	pushFollow(FOLLOW_block_declarative_item_in_generate_statement_body6368)
            	        		    	block_declarative_item421=block_declarative_item()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return retval
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  items += block_declarative_item421
            	        		    	}
            	        		    	pushFollow(FOLLOW_sync_in_generate_statement_body6371)
            	        		    	sync(syncMessage)

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return retval


            	        		case _ => loop216_quitflag = true
            	        	    }
            	        	}

            	        	`match`(input,BEGIN,FOLLOW_BEGIN_in_generate_statement_body6378)
            	        	if (state.failed) return retval


            	    case _ =>
            	}

            	pushFollow(FOLLOW_concurrent_statement_list_in_generate_statement_body6386)
            	concurrent_statement_list422=concurrent_statement_list()

            	state._fsp-=1
            	if (state.failed) return retval
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1057:2: ({...}? => END ( identifier )? SEMICOLON )?
            	val alt219 = {
            	val LA219_0 = input.LA(1)

            	if ( (LA219_0==END) ) {
            	val LA219_1 = input.LA(2)

            	if ( (LA219_1==SEMICOLON||LA219_1==BASIC_IDENTIFIER||LA219_1==EXTENDED_IDENTIFIER) && ((vhdl2008))) 1
            	else -1
            	}
            	else -1
            	}
            	alt219 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1057:3: {...}? => END ( identifier )? SEMICOLON
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return retval}
            	        	    throw new FailedPredicateException(input, "generate_statement_body", "vhdl2008")
            	        	}
            	        	`match`(input,END,FOLLOW_END_in_generate_statement_body6392)
            	        	if (state.failed) return retval
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1057:20: ( identifier )?
            	        	val alt218 = {
            	        	val LA218_0 = input.LA(1)

            	        	if ( (LA218_0==BASIC_IDENTIFIER||LA218_0==EXTENDED_IDENTIFIER) ) 1
            	        	else -1
            	        	}
            	        	alt218 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1057:20: identifier
            	        	        	pushFollow(FOLLOW_identifier_in_generate_statement_body6394)
            	        	        	identifier423=identifier()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return retval


            	        	    case _ =>
            	        	}

            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_generate_statement_body6397)
            	        	if (state.failed) return retval


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {

            	  		retval.declarativeItems=items.result
            	  		retval.statementList=concurrent_statement_list422
            	  		retval.endLabel=identifier423
            	  	
            	}



            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, generate_statement_body_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "generate_statement_body"


    // $ANTLR start "ams_concurrent_break_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1064:1: ams_concurrent_break_statement[Identifier label] returns [ConcurrentBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_concurrent_break_statement(label: Identifier): ConcurrentBreakStatement = {
        var breakStmt : ConcurrentBreakStatement = null
        val ams_concurrent_break_statement_StartIndex = input.index()
        var BREAK424: Token = null
        var ams_break_element_list425: Seq[BreakElement] = null
        var name_list426: Seq[Name] = null
        var expression427: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return breakStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1064:95: ( BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:2: BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON
            	BREAK424=`match`(input,BREAK,FOLLOW_BREAK_in_ams_concurrent_break_statement6416).asInstanceOf[Token]
            	if (state.failed) return breakStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:8: ( ams_break_element_list )?
            	val alt220 = {
            	val LA220_0 = input.LA(1)

            	if ( (LA220_0==FOR||LA220_0==BASIC_IDENTIFIER||LA220_0==EXTENDED_IDENTIFIER||LA220_0==STRING_LITERAL) ) 1
            	else if ( (LA220_0==DLT) && ((vhdl2008))) 1
            	else -1
            	}
            	alt220 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:8: ams_break_element_list
            	        	pushFollow(FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement6418)
            	        	ams_break_element_list425=ams_break_element_list()

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:32: ( ON name_list )?
            	val alt221 = {
            	val LA221_0 = input.LA(1)

            	if ( (LA221_0==ON) ) 1
            	else -1
            	}
            	alt221 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:33: ON name_list
            	        	`match`(input,ON,FOLLOW_ON_in_ams_concurrent_break_statement6422)
            	        	if (state.failed) return breakStmt
            	        	pushFollow(FOLLOW_name_list_in_ams_concurrent_break_statement6424)
            	        	name_list426=name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:48: ( WHEN expression )?
            	val alt222 = {
            	val LA222_0 = input.LA(1)

            	if ( (LA222_0==WHEN) ) 1
            	else -1
            	}
            	alt222 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1065:49: WHEN expression
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_ams_concurrent_break_statement6429)
            	        	if (state.failed) return breakStmt
            	        	pushFollow(FOLLOW_expression_in_ams_concurrent_break_statement6431)
            	        	expression427=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_concurrent_break_statement6435)
            	if (state.failed) return breakStmt
            	if ( state.backtracking==0 ) {
            	  breakStmt=new ConcurrentBreakStatement(BREAK424,label,ams_break_element_list425,name_list426,expression427)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, ams_concurrent_break_statement_StartIndex) }
        }
        return breakStmt
    }
    // $ANTLR end "ams_concurrent_break_statement"


    // $ANTLR start "ams_simultaneous_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1069:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_statement(label: Identifier): SimultaneousStatement = {
        var stmt : SimultaneousStatement = null
        val ams_simultaneous_statement_StartIndex = input.index()
        var ams_simple_simultaneous_statement428: SimpleSimultaneousStatement = null
        var ams_simultaneous_if_statement429: SimultaneousIfStatement = null
        var ams_simultaneous_procedural_statement430: SimultaneousProceduralStatement = null
        var ams_simultaneous_case_statement431: SimultaneousCaseStatement = null
        var ams_simultaneous_null_statement432: SimultaneousNullStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1069:83: ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] )
            val alt223 = dfa223.predict(input)
            alt223 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1070:2: ams_simple_simultaneous_statement[$label]
                    	pushFollow(FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement6453)
                    	ams_simple_simultaneous_statement428=ams_simple_simultaneous_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simple_simultaneous_statement428
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1071:4: ams_simultaneous_if_statement[$label]
                    	pushFollow(FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement6461)
                    	ams_simultaneous_if_statement429=ams_simultaneous_if_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_if_statement429
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1072:4: ams_simultaneous_procedural_statement[$label]
                    	pushFollow(FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement6469)
                    	ams_simultaneous_procedural_statement430=ams_simultaneous_procedural_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_procedural_statement430
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1073:4: ams_simultaneous_case_statement[$label]
                    	pushFollow(FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement6477)
                    	ams_simultaneous_case_statement431=ams_simultaneous_case_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_case_statement431
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1074:4: ams_simultaneous_null_statement[$label]
                    	pushFollow(FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement6485)
                    	ams_simultaneous_null_statement432=ams_simultaneous_null_statement(label)

                    	state._fsp-=1
                    	if (state.failed) return stmt
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_null_statement432
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, ams_simultaneous_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "ams_simultaneous_statement"


    // $ANTLR start "ams_simultaneous_statement_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1076:1: ams_simultaneous_statement_list returns [Seq[SimultaneousStatement] list] : ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* ;
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_statement_list(): Seq[SimultaneousStatement] = {
        var list : Seq[SimultaneousStatement] = null
        val ams_simultaneous_statement_list_StartIndex = input.index()
        var label_colon433: Identifier = null
        var ams_simultaneous_statement434: SimultaneousStatement = null



        	val tmpList=new Buffer[SimultaneousStatement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1079:3: ( ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1080:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1080:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
            	var loop225_quitflag = false
            	while (!loop225_quitflag) {
            	    val alt225 = {
            	val LA225_0 = input.LA(1)

            	if ( ((LA225_0>=PLUS && LA225_0<=MINUS)||LA225_0==BASIC_IDENTIFIER||LA225_0==EXTENDED_IDENTIFIER||LA225_0==STRING_LITERAL) ) 1
            	else if ( (LA225_0==DLT) && ((vhdl2008))) 1
            	else if ( (LA225_0==ABS||LA225_0==NEW||(LA225_0>=NOT && LA225_0<=NULL)||LA225_0==LPAREN||(LA225_0>=BASED_LITERAL && LA225_0<=REAL_LITERAL)||LA225_0==BIT_STRING_LITERAL||LA225_0==CHARACTER_LITERAL) ) 1
            	else if ( (LA225_0==AND||LA225_0==NAND||LA225_0==NOR||LA225_0==OR||(LA225_0>=XNOR && LA225_0<=XOR)) && ((vhdl2008))) 1
            	else if ( (LA225_0==CASE||LA225_0==IF||LA225_0==PROCEDURAL) ) 1

            	else -1
            	}
            	    alt225 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1080:3: ( label_colon )? ams_simultaneous_statement[$label_colon.label]
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1080:3: ( label_colon )?
            		    	val alt224 = {
            		    	val LA224_0 = input.LA(1)

            		    	if ( (LA224_0==BASIC_IDENTIFIER||LA224_0==EXTENDED_IDENTIFIER) ) {
            		    	val LA224_1 = input.LA(2)

            		    	if ( (LA224_1==COLON) ) 1
            		    	else -1
            		    	}
            		    	else -1
            		    	}
            		    	alt224 match {
            		    	    case 1 =>
            		    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1080:3: label_colon
            		    	        	pushFollow(FOLLOW_label_colon_in_ams_simultaneous_statement_list6506)
            		    	        	label_colon433=label_colon()

            		    	        	state._fsp-=1
            		    	        	if (state.failed) return list


            		    	    case _ =>
            		    	}

            		    	pushFollow(FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list6509)
            		    	ams_simultaneous_statement434=ams_simultaneous_statement(label_colon433)

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += ams_simultaneous_statement434
            		    	}


            		case _ => loop225_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=tmpList.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, ams_simultaneous_statement_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "ams_simultaneous_statement_list"


    // $ANTLR start "ams_simple_simultaneous_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1083:1: ams_simple_simultaneous_statement[Identifier label] returns [SimpleSimultaneousStatement stmt] : e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_simple_simultaneous_statement(label: Identifier): SimpleSimultaneousStatement = {
        var stmt : SimpleSimultaneousStatement = null
        val ams_simple_simultaneous_statement_StartIndex = input.index()
        var e1: Expression = null
        var e2: Expression = null
        var tolerance_expression: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1083:96: (e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1084:2: e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON
            	pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6535)
            	e1=simple_expression()

            	state._fsp-=1
            	if (state.failed) return stmt
            	`match`(input,AMS_ASSIGN,FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement6537)
            	if (state.failed) return stmt
            	pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6541)
            	e2=simple_expression()

            	state._fsp-=1
            	if (state.failed) return stmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1084:55: ( TOLERANCE tolerance_expression= expression )?
            	val alt226 = {
            	val LA226_0 = input.LA(1)

            	if ( (LA226_0==TOLERANCE) ) 1
            	else -1
            	}
            	alt226 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1084:56: TOLERANCE tolerance_expression= expression
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement6544)
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_expression_in_ams_simple_simultaneous_statement6548)
            	        	tolerance_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement6552)
            	if (state.failed) return stmt
            	if ( state.backtracking==0 ) {
            	  stmt=new SimpleSimultaneousStatement(label,e1,e2,tolerance_expression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, ams_simple_simultaneous_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "ams_simple_simultaneous_statement"


    // $ANTLR start "ams_simultaneous_if_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1087:1: ams_simultaneous_if_statement[Identifier label] returns [SimultaneousIfStatement ifStmt] : IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_if_statement(label: Identifier): SimultaneousIfStatement = {
        var ifStmt : SimultaneousIfStatement = null
        val ams_simultaneous_if_statement_StartIndex = input.index()
        var IF435: Token = null
        var if_condition: Expression = null
        var if_simultaneous_statement: Seq[SimultaneousStatement] = null
        var elsif_condition: Expression = null
        var else_if_simultaneous_statement: Seq[SimultaneousStatement] = null
        var else_simultaneous_statement: Seq[SimultaneousStatement] = null
        var identifier436: Identifier = null



        	val ifList=new Buffer[SimultaneousIfStatement.IfUsePart]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return ifStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1090:3: ( IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1091:2: IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE ( identifier )? SEMICOLON
            	IF435=`match`(input,IF,FOLLOW_IF_in_ams_simultaneous_if_statement6578).asInstanceOf[Token]
            	if (state.failed) return ifStmt
            	pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement6582)
            	if_condition=condition()

            	state._fsp-=1
            	if (state.failed) return ifStmt
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement6584)
            	if (state.failed) return ifStmt
            	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6590)
            	if_simultaneous_statement=ams_simultaneous_statement_list()

            	state._fsp-=1
            	if (state.failed) return ifStmt
            	if ( state.backtracking==0 ) {
            	  ifList += new SimultaneousIfStatement.IfUsePart(if_condition,if_simultaneous_statement)
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1093:2: ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )*
            	var loop227_quitflag = false
            	while (!loop227_quitflag) {
            	    val alt227 = {
            	val LA227_0 = input.LA(1)

            	if ( (LA227_0==ELSIF) ) 1

            	else -1
            	}
            	    alt227 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1093:3: ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list
            		    	`match`(input,ELSIF,FOLLOW_ELSIF_in_ams_simultaneous_if_statement6596)
            		    	if (state.failed) return ifStmt
            		    	pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement6600)
            		    	elsif_condition=condition()

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt
            		    	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement6602)
            		    	if (state.failed) return ifStmt
            		    	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6608)
            		    	else_if_simultaneous_statement=ams_simultaneous_statement_list()

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt
            		    	if ( state.backtracking==0 ) {
            		    	  ifList += new SimultaneousIfStatement.IfUsePart(elsif_condition,else_if_simultaneous_statement)
            		    	}


            		case _ => loop227_quitflag = true
            	    }
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1097:2: ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )?
            	val alt228 = {
            	val LA228_0 = input.LA(1)

            	if ( (LA228_0==ELSE) ) 1
            	else -1
            	}
            	alt228 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1097:3: ELSE else_simultaneous_statement= ams_simultaneous_statement_list
            	        	`match`(input,ELSE,FOLLOW_ELSE_in_ams_simultaneous_if_statement6620)
            	        	if (state.failed) return ifStmt
            	        	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6626)
            	        	else_simultaneous_statement=ams_simultaneous_statement_list()

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt


            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_if_statement6631)
            	if (state.failed) return ifStmt
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement6633)
            	if (state.failed) return ifStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1099:10: ( identifier )?
            	val alt229 = {
            	val LA229_0 = input.LA(1)

            	if ( (LA229_0==BASIC_IDENTIFIER||LA229_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt229 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1099:10: identifier
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_if_statement6635)
            	        	identifier436=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement6638)
            	if (state.failed) return ifStmt
            	if ( state.backtracking==0 ) {
            	  ifStmt=new SimultaneousIfStatement(IF435,label,ifList.result,else_simultaneous_statement,identifier436)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, ams_simultaneous_if_statement_StartIndex) }
        }
        return ifStmt
    }
    // $ANTLR end "ams_simultaneous_if_statement"


    // $ANTLR start "ams_simultaneous_case_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1102:1: ams_simultaneous_case_statement[Identifier label] returns [SimultaneousCaseStatement caseStmt] : caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_case_statement(label: Identifier): SimultaneousCaseStatement = {
        var caseStmt : SimultaneousCaseStatement = null
        val ams_simultaneous_case_statement_StartIndex = input.index()
        var caseToken: Token = null
        var choices437: Seq[Choices.Choice] = null
        var ams_simultaneous_statement_list438: Seq[SimultaneousStatement] = null
        var expression439: Expression = null
        var identifier440: Identifier = null



        	val alternatives=new Buffer[SimultaneousCaseStatement.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return caseStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1105:3: (caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1106:2: caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE ( identifier )? SEMICOLON
            	caseToken=`match`(input,CASE,FOLLOW_CASE_in_ams_simultaneous_case_statement6667).asInstanceOf[Token]
            	if (state.failed) return caseStmt
            	pushFollow(FOLLOW_expression_in_ams_simultaneous_case_statement6669)
            	expression439=expression()

            	state._fsp-=1
            	if (state.failed) return caseStmt
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_case_statement6671)
            	if (state.failed) return caseStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1107:3: ( WHEN choices ARROW ams_simultaneous_statement_list )+
            	var cnt230 = 0
            	var loop230_quitflag = false
            	while (!loop230_quitflag) {
            	    val alt230 = {
            	val LA230_0 = input.LA(1)

            	if ( (LA230_0==WHEN) ) 1

            	else -1
            	}
            	    alt230 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1107:4: WHEN choices ARROW ams_simultaneous_statement_list
            		    	`match`(input,WHEN,FOLLOW_WHEN_in_ams_simultaneous_case_statement6676)
            		    	if (state.failed) return caseStmt
            		    	pushFollow(FOLLOW_choices_in_ams_simultaneous_case_statement6678)
            		    	choices437=choices()

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt
            		    	`match`(input,ARROW,FOLLOW_ARROW_in_ams_simultaneous_case_statement6680)
            		    	if (state.failed) return caseStmt
            		    	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement6682)
            		    	ams_simultaneous_statement_list438=ams_simultaneous_statement_list()

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt
            		    	if ( state.backtracking==0 ) {
            		    	  alternatives += new SimultaneousCaseStatement.When(choices437,ams_simultaneous_statement_list438)
            		    	}


            		case _ =>
            		    if ( cnt230 >= 1 ) loop230_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	            val eee = new EarlyExitException(230, input)
            	            throw eee
            	      }
            	    }
            	    cnt230+=1
            	}

            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_case_statement6689)
            	if (state.failed) return caseStmt
            	`match`(input,CASE,FOLLOW_CASE_in_ams_simultaneous_case_statement6691)
            	if (state.failed) return caseStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1108:11: ( identifier )?
            	val alt231 = {
            	val LA231_0 = input.LA(1)

            	if ( (LA231_0==BASIC_IDENTIFIER||LA231_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt231 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1108:11: identifier
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_case_statement6693)
            	        	identifier440=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return caseStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement6696)
            	if (state.failed) return caseStmt
            	if ( state.backtracking==0 ) {
            	  caseStmt=new SimultaneousCaseStatement(caseToken,label,expression439,alternatives.result,identifier440)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, ams_simultaneous_case_statement_StartIndex) }
        }
        return caseStmt
    }
    // $ANTLR end "ams_simultaneous_case_statement"


    // $ANTLR start "ams_simultaneous_procedural_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1111:1: ams_simultaneous_procedural_statement[Identifier label] returns [SimultaneousProceduralStatement proceduralStmt] : proceduralToken= PROCEDURAL ( IS )? sync[syncMessage] ( ams_simultaneous_procedural_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_procedural_statement(label: Identifier): SimultaneousProceduralStatement = {
        var proceduralStmt : SimultaneousProceduralStatement = null
        val ams_simultaneous_procedural_statement_StartIndex = input.index()
        var proceduralToken: Token = null
        var end_procedural_label: Identifier = null
        var ams_simultaneous_procedural_declarative_item441: DeclarativeItem = null
        var sequence_of_statements442: Seq[SequentialStatement] = null



        	val items=new Buffer[DeclarativeItem]()
        	val syncMessage="simultaneous procedural declarative item"

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return proceduralStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1115:3: (proceduralToken= PROCEDURAL ( IS )? sync[syncMessage] ( ams_simultaneous_procedural_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1116:2: proceduralToken= PROCEDURAL ( IS )? sync[syncMessage] ( ams_simultaneous_procedural_declarative_item sync[syncMessage] )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON
            	proceduralToken=`match`(input,PROCEDURAL,FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement6721).asInstanceOf[Token]
            	if (state.failed) return proceduralStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1116:29: ( IS )?
            	val alt232 = {
            	val LA232_0 = input.LA(1)

            	if ( (LA232_0==IS) ) 1
            	else -1
            	}
            	alt232 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1116:29: IS
            	        	`match`(input,IS,FOLLOW_IS_in_ams_simultaneous_procedural_statement6723)
            	        	if (state.failed) return proceduralStmt


            	    case _ =>
            	}

            	pushFollow(FOLLOW_sync_in_ams_simultaneous_procedural_statement6728)
            	sync(syncMessage)

            	state._fsp-=1
            	if (state.failed) return proceduralStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1117:21: ( ams_simultaneous_procedural_declarative_item sync[syncMessage] )*
            	var loop233_quitflag = false
            	while (!loop233_quitflag) {
            	    val alt233 = {
            	val LA233_0 = input.LA(1)

            	if ( (LA233_0==ALIAS||LA233_0==ATTRIBUTE||LA233_0==CONSTANT||LA233_0==FUNCTION||LA233_0==GROUP||LA233_0==IMPURE||LA233_0==PROCEDURE||LA233_0==PURE||LA233_0==SHARED||LA233_0==SUBTYPE||LA233_0==TYPE||(LA233_0>=USE && LA233_0<=VARIABLE)) ) 1

            	else -1
            	}
            	    alt233 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1117:22: ams_simultaneous_procedural_declarative_item sync[syncMessage]
            		    	pushFollow(FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement6732)
            		    	ams_simultaneous_procedural_declarative_item441=ams_simultaneous_procedural_declarative_item()

            		    	state._fsp-=1
            		    	if (state.failed) return proceduralStmt
            		    	if ( state.backtracking==0 ) {
            		    	  items += ams_simultaneous_procedural_declarative_item441
            		    	}
            		    	pushFollow(FOLLOW_sync_in_ams_simultaneous_procedural_statement6735)
            		    	sync(syncMessage)

            		    	state._fsp-=1
            		    	if (state.failed) return proceduralStmt


            		case _ => loop233_quitflag = true
            	    }
            	}

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement6741)
            	if (state.failed) return proceduralStmt
            	pushFollow(FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement6745)
            	sequence_of_statements442=sequence_of_statements()

            	state._fsp-=1
            	if (state.failed) return proceduralStmt
            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_procedural_statement6748)
            	if (state.failed) return proceduralStmt
            	`match`(input,PROCEDURAL,FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement6750)
            	if (state.failed) return proceduralStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1120:37: (end_procedural_label= identifier )?
            	val alt234 = {
            	val LA234_0 = input.LA(1)

            	if ( (LA234_0==BASIC_IDENTIFIER||LA234_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt234 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1120:37: end_procedural_label= identifier
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_procedural_statement6754)
            	        	end_procedural_label=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return proceduralStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement6757)
            	if (state.failed) return proceduralStmt
            	if ( state.backtracking==0 ) {
            	  proceduralStmt=new SimultaneousProceduralStatement(proceduralToken,label,items.result,sequence_of_statements442,end_procedural_label)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, ams_simultaneous_procedural_statement_StartIndex) }
        }
        return proceduralStmt
    }
    // $ANTLR end "ams_simultaneous_procedural_statement"


    // $ANTLR start "ams_simultaneous_procedural_declarative_item"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1123:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_procedural_declarative_item(): DeclarativeItem = {
        var item : DeclarativeItem = null
        val ams_simultaneous_procedural_declarative_item_StartIndex = input.index()
        var subprogram_declartion_or_body443: DeclarativeItem = null
        var type_declaration444: AbstractTypeDeclaration = null
        var subtype_declaration445: SubTypeDeclaration = null
        var constant_declaration446: ConstantDeclaration = null
        var variable_declaration447: VariableDeclaration = null
        var alias_declaration448: AliasDeclaration = null
        var attribute_declaration449: AttributeDeclaration = null
        var attribute_specification450: AttributeSpecification = null
        var use_clause451: UseClause = null
        var group_template_declaration452: GroupTemplateDeclaration = null
        var group_declaration453: GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return item }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1123:77: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            val alt235 = dfa235.predict(input)
            alt235 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1124:2: subprogram_declartion_or_body
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item6775)
                    	subprogram_declartion_or_body443=subprogram_declartion_or_body()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subprogram_declartion_or_body443
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1125:4: type_declaration
                    	pushFollow(FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item6782)
                    	type_declaration444=type_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=type_declaration444
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1126:4: subtype_declaration
                    	pushFollow(FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item6789)
                    	subtype_declaration445=subtype_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=subtype_declaration445
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1127:4: constant_declaration
                    	pushFollow(FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item6796)
                    	constant_declaration446=constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=constant_declaration446
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1128:4: variable_declaration
                    	pushFollow(FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item6803)
                    	variable_declaration447=variable_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=variable_declaration447
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1129:4: alias_declaration
                    	pushFollow(FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item6810)
                    	alias_declaration448=alias_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=alias_declaration448
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1130:4: attribute_declaration
                    	pushFollow(FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item6817)
                    	attribute_declaration449=attribute_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_declaration449
                    	}

                case 8 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1131:4: attribute_specification
                    	pushFollow(FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item6824)
                    	attribute_specification450=attribute_specification()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=attribute_specification450
                    	}

                case 9 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1132:4: use_clause
                    	pushFollow(FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item6831)
                    	use_clause451=use_clause()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=use_clause451
                    	}

                case 10 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1133:4: group_template_declaration
                    	pushFollow(FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item6838)
                    	group_template_declaration452=group_template_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_template_declaration452
                    	}

                case 11 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1134:4: group_declaration
                    	pushFollow(FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item6845)
                    	group_declaration453=group_declaration()

                    	state._fsp-=1
                    	if (state.failed) return item
                    	if ( state.backtracking==0 ) {
                    	  item=group_declaration453
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, ams_simultaneous_procedural_declarative_item_StartIndex) }
        }
        return item
    }
    // $ANTLR end "ams_simultaneous_procedural_declarative_item"


    // $ANTLR start "ams_simultaneous_null_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1136:1: ams_simultaneous_null_statement[Identifier label] returns [SimultaneousNullStatement nullStmt] : NULL SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_simultaneous_null_statement(label: Identifier): SimultaneousNullStatement = {
        var nullStmt : SimultaneousNullStatement = null
        val ams_simultaneous_null_statement_StartIndex = input.index()
        var NULL454: Token = null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return nullStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1136:96: ( NULL SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1137:2: NULL SEMICOLON
            	NULL454=`match`(input,NULL,FOLLOW_NULL_in_ams_simultaneous_null_statement6862).asInstanceOf[Token]
            	if (state.failed) return nullStmt
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement6864)
            	if (state.failed) return nullStmt
            	if ( state.backtracking==0 ) {
            	  nullStmt=new SimultaneousNullStatement(NULL454,label)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, ams_simultaneous_null_statement_StartIndex) }
        }
        return nullStmt
    }
    // $ANTLR end "ams_simultaneous_null_statement"


    // $ANTLR start "sequence_of_statements"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1141:1: sequence_of_statements returns [Seq[SequentialStatement] list] : ( sequential_statement )* ;
    @throws(classOf[RecognitionException])
    final def sequence_of_statements(): Seq[SequentialStatement] = {
        var list : Seq[SequentialStatement] = null
        val sequence_of_statements_StartIndex = input.index()
        var sequential_statement455: SequentialStatement = null



        	val tmpList=new Buffer[SequentialStatement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1144:3: ( ( sequential_statement )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1145:2: ( sequential_statement )*
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1145:2: ( sequential_statement )*
            	var loop236_quitflag = false
            	while (!loop236_quitflag) {
            	    val alt236 = {
            	val LA236_0 = input.LA(1)

            	if ( (LA236_0==ASSERT||LA236_0==REPORT||LA236_0==WAIT||LA236_0==BASIC_IDENTIFIER||LA236_0==EXTENDED_IDENTIFIER||LA236_0==STRING_LITERAL) ) 1
            	else if ( (LA236_0==DLT) && ((vhdl2008))) 1
            	else if ( (LA236_0==LPAREN) ) 1
            	else if ( (LA236_0==WITH) && ((vhdl2008))) 1
            	else if ( (LA236_0==CASE||LA236_0==EXIT||LA236_0==FOR||LA236_0==IF||LA236_0==LOOP||LA236_0==NEXT||LA236_0==NULL||LA236_0==RETURN||LA236_0==WHILE) ) 1
            	else if ( (LA236_0==BREAK) && ((ams))) 1

            	else -1
            	}
            	    alt236 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1145:3: sequential_statement
            		    	pushFollow(FOLLOW_sequential_statement_in_sequence_of_statements6886)
            		    	sequential_statement455=sequential_statement()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList +=sequential_statement455
            		    	}


            		case _ => loop236_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=tmpList.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, sequence_of_statements_StartIndex) }
        }
        return list
    }
    // $ANTLR end "sequence_of_statements"


    // $ANTLR start "sequential_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1148:1: sequential_statement returns [SequentialStatement stmt] : (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( procedure_call_statement[null] )=> procedure_call_statement[$label.label] | assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) ;
    @throws(classOf[RecognitionException])
    final def sequential_statement(): SequentialStatement = {
        var stmt : SequentialStatement = null
        val sequential_statement_StartIndex = input.index()
        var label: Identifier = null
        var wait_statement456: WaitStatement = null
        var assertion_statement457: AssertionStatement = null
        var report_statement458: ReportStatement = null
        var procedure_call_statement459: ProcedureCallStatement = null
        var assignment_statement460: SequentialStatement = null
        var if_statement461: IfStatement = null
        var case_statement462: CaseStatement = null
        var loop_statement463: SequentialStatement = null
        var next_statement464: NextStatement = null
        var exit_statement465: ExitStatement = null
        var return_statement466: ReturnStatement = null
        var null_statement467: NullStatement = null
        var ams_break_statement468: AMSBreakStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1148:57: ( (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( procedure_call_statement[null] )=> procedure_call_statement[$label.label] | assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1149:2: (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( procedure_call_statement[null] )=> procedure_call_statement[$label.label] | assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1149:7: (label= label_colon )?
            	val alt237 = dfa237.predict(input)
            	alt237 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1149:7: label= label_colon
            	        	pushFollow(FOLLOW_label_colon_in_sequential_statement6907)
            	        	label=label_colon()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1150:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( procedure_call_statement[null] )=> procedure_call_statement[$label.label] | assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
            	val alt238 = dfa238.predict(input)
            	alt238 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1150:3: wait_statement[$label.label]
            	        	pushFollow(FOLLOW_wait_statement_in_sequential_statement6913)
            	        	wait_statement456=wait_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=wait_statement456
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1151:4: assertion_statement[$label.label]
            	        	pushFollow(FOLLOW_assertion_statement_in_sequential_statement6921)
            	        	assertion_statement457=assertion_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=assertion_statement457
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1152:4: report_statement[$label.label]
            	        	pushFollow(FOLLOW_report_statement_in_sequential_statement6929)
            	        	report_statement458=report_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=report_statement458
            	        	}

            	    case 4 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1153:4: ( procedure_call_statement[null] )=> procedure_call_statement[$label.label]
            	        	pushFollow(FOLLOW_procedure_call_statement_in_sequential_statement6942)
            	        	procedure_call_statement459=procedure_call_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=procedure_call_statement459
            	        	}

            	    case 5 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1154:4: assignment_statement[$label.label]
            	        	pushFollow(FOLLOW_assignment_statement_in_sequential_statement6950)
            	        	assignment_statement460=assignment_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=assignment_statement460
            	        	}

            	    case 6 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1155:4: if_statement[$label.label]
            	        	pushFollow(FOLLOW_if_statement_in_sequential_statement6959)
            	        	if_statement461=if_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=if_statement461
            	        	}

            	    case 7 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1156:4: case_statement[$label.label]
            	        	pushFollow(FOLLOW_case_statement_in_sequential_statement6967)
            	        	case_statement462=case_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=case_statement462
            	        	}

            	    case 8 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1157:4: loop_statement[$label.label]
            	        	pushFollow(FOLLOW_loop_statement_in_sequential_statement6975)
            	        	loop_statement463=loop_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=loop_statement463
            	        	}

            	    case 9 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1158:4: next_statement[$label.label]
            	        	pushFollow(FOLLOW_next_statement_in_sequential_statement6983)
            	        	next_statement464=next_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=next_statement464
            	        	}

            	    case 10 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1159:4: exit_statement[$label.label]
            	        	pushFollow(FOLLOW_exit_statement_in_sequential_statement6991)
            	        	exit_statement465=exit_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=exit_statement465
            	        	}

            	    case 11 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1160:4: return_statement[$label.label]
            	        	pushFollow(FOLLOW_return_statement_in_sequential_statement6999)
            	        	return_statement466=return_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=return_statement466
            	        	}

            	    case 12 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1161:4: null_statement[$label.label]
            	        	pushFollow(FOLLOW_null_statement_in_sequential_statement7007)
            	        	null_statement467=null_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=null_statement467
            	        	}

            	    case 13 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1162:4: {...}? => ams_break_statement[$label.label]
            	        	if ( !((ams)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return stmt}
            	        	    throw new FailedPredicateException(input, "sequential_statement", "ams")
            	        	}
            	        	pushFollow(FOLLOW_ams_break_statement_in_sequential_statement7017)
            	        	ams_break_statement468=ams_break_statement(label)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=ams_break_statement468
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, sequential_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "sequential_statement"


    // $ANTLR start "wait_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1165:1: wait_statement[Identifier label] returns [WaitStatement waitStmt] : WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def wait_statement(label: Identifier): WaitStatement = {
        var waitStmt : WaitStatement = null
        val wait_statement_StartIndex = input.index()
        var WAIT469: Token = null
        var name_list470: Seq[Name] = null
        var condition471: Expression = null
        var expression472: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return waitStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1165:67: ( WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:2: WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON
            	WAIT469=`match`(input,WAIT,FOLLOW_WAIT_in_wait_statement7038).asInstanceOf[Token]
            	if (state.failed) return waitStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:7: ( ON name_list )?
            	val alt239 = {
            	val LA239_0 = input.LA(1)

            	if ( (LA239_0==ON) ) 1
            	else -1
            	}
            	alt239 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:8: ON name_list
            	        	`match`(input,ON,FOLLOW_ON_in_wait_statement7041)
            	        	if (state.failed) return waitStmt
            	        	pushFollow(FOLLOW_name_list_in_wait_statement7043)
            	        	name_list470=name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:23: ( UNTIL condition )?
            	val alt240 = {
            	val LA240_0 = input.LA(1)

            	if ( (LA240_0==UNTIL) ) 1
            	else -1
            	}
            	alt240 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:24: UNTIL condition
            	        	`match`(input,UNTIL,FOLLOW_UNTIL_in_wait_statement7048)
            	        	if (state.failed) return waitStmt
            	        	pushFollow(FOLLOW_condition_in_wait_statement7050)
            	        	condition471=condition()

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:42: ( FOR expression )?
            	val alt241 = {
            	val LA241_0 = input.LA(1)

            	if ( (LA241_0==FOR) ) 1
            	else -1
            	}
            	alt241 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1166:43: FOR expression
            	        	`match`(input,FOR,FOLLOW_FOR_in_wait_statement7055)
            	        	if (state.failed) return waitStmt
            	        	pushFollow(FOLLOW_expression_in_wait_statement7057)
            	        	expression472=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_wait_statement7061)
            	if (state.failed) return waitStmt
            	if ( state.backtracking==0 ) {
            	  waitStmt=new WaitStatement(WAIT469,label,name_list470,condition471,expression472)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, wait_statement_StartIndex) }
        }
        return waitStmt
    }
    // $ANTLR end "wait_statement"


    // $ANTLR start "assertion_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1169:1: assertion_statement[Identifier label] returns [AssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def assertion_statement(label: Identifier): AssertionStatement = {
        var assertStmt : AssertionStatement = null
        val assertion_statement_StartIndex = input.index()
        var ASSERT473: Token = null
        var report_expression: Expression = null
        var severity_expression: Expression = null
        var condition474: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return assertStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1169:79: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1170:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
            	ASSERT473=`match`(input,ASSERT,FOLLOW_ASSERT_in_assertion_statement7082).asInstanceOf[Token]
            	if (state.failed) return assertStmt
            	pushFollow(FOLLOW_condition_in_assertion_statement7084)
            	condition474=condition()

            	state._fsp-=1
            	if (state.failed) return assertStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1170:19: ( REPORT report_expression= expression )?
            	val alt242 = {
            	val LA242_0 = input.LA(1)

            	if ( (LA242_0==REPORT) ) 1
            	else -1
            	}
            	alt242 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1170:20: REPORT report_expression= expression
            	        	`match`(input,REPORT,FOLLOW_REPORT_in_assertion_statement7087)
            	        	if (state.failed) return assertStmt
            	        	pushFollow(FOLLOW_expression_in_assertion_statement7091)
            	        	report_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1170:58: ( SEVERITY severity_expression= expression )?
            	val alt243 = {
            	val LA243_0 = input.LA(1)

            	if ( (LA243_0==SEVERITY) ) 1
            	else -1
            	}
            	alt243 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1170:59: SEVERITY severity_expression= expression
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_assertion_statement7096)
            	        	if (state.failed) return assertStmt
            	        	pushFollow(FOLLOW_expression_in_assertion_statement7100)
            	        	severity_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_assertion_statement7104)
            	if (state.failed) return assertStmt
            	if ( state.backtracking==0 ) {
            	  assertStmt=new AssertionStatement(ASSERT473,label,condition474,report_expression,severity_expression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, assertion_statement_StartIndex) }
        }
        return assertStmt
    }
    // $ANTLR end "assertion_statement"


    // $ANTLR start "report_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1173:1: report_statement[Identifier label] returns [ReportStatement reportStmt] : REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def report_statement(label: Identifier): ReportStatement = {
        var reportStmt : ReportStatement = null
        val report_statement_StartIndex = input.index()
        var REPORT475: Token = null
        var report_expression: Expression = null
        var severity_expression: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return reportStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1173:73: ( REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1174:2: REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON
            	REPORT475=`match`(input,REPORT,FOLLOW_REPORT_in_report_statement7129).asInstanceOf[Token]
            	if (state.failed) return reportStmt
            	pushFollow(FOLLOW_expression_in_report_statement7133)
            	report_expression=expression()

            	state._fsp-=1
            	if (state.failed) return reportStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1174:38: ( SEVERITY severity_expression= expression )?
            	val alt244 = {
            	val LA244_0 = input.LA(1)

            	if ( (LA244_0==SEVERITY) ) 1
            	else -1
            	}
            	alt244 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1174:39: SEVERITY severity_expression= expression
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_report_statement7136)
            	        	if (state.failed) return reportStmt
            	        	pushFollow(FOLLOW_expression_in_report_statement7140)
            	        	severity_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return reportStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_report_statement7144)
            	if (state.failed) return reportStmt
            	if ( state.backtracking==0 ) {
            	  reportStmt=new ReportStatement(REPORT475,label,report_expression,severity_expression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, report_statement_StartIndex) }
        }
        return reportStmt
    }
    // $ANTLR end "report_statement"


    // $ANTLR start "force_mode"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1177:1: force_mode returns [InterfaceList.Mode.Value mode] : ( IN | OUT );
    @throws(classOf[RecognitionException])
    final def force_mode(): InterfaceList.Mode.Value = {
        var mode : InterfaceList.Mode.Value = null
        val force_mode_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return mode }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1177:52: ( IN | OUT )
            val alt245 = {
            val LA245_0 = input.LA(1)

            if ( (LA245_0==IN) ) 1
            else if ( (LA245_0==OUT) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return mode}
                val nvae = new NoViableAltException("", 245, 0, input)

                throw nvae
            }
            }
            alt245 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1178:2: IN
                    	`match`(input,IN,FOLLOW_IN_in_force_mode7161)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.IN
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1179:4: OUT
                    	`match`(input,OUT,FOLLOW_OUT_in_force_mode7168)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.OUT
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, force_mode_StartIndex) }
        }
        return mode
    }
    // $ANTLR end "force_mode"


    // $ANTLR start "v2008_conditional_expressions"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1181:1: v2008_conditional_expressions[Buffer[ConditionalVariableAssignment.When] elements] : expression ( WHEN condition ( ELSE v2008_conditional_expressions[$elements] )? )? ;
    @throws(classOf[RecognitionException])
    final def v2008_conditional_expressions(elements: Buffer[ConditionalVariableAssignment.When]): Unit = {
        val v2008_conditional_expressions_StartIndex = input.index()
        var expression476: Expression = null
        var condition477: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1181:85: ( expression ( WHEN condition ( ELSE v2008_conditional_expressions[$elements] )? )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1182:2: expression ( WHEN condition ( ELSE v2008_conditional_expressions[$elements] )? )?
            	pushFollow(FOLLOW_expression_in_v2008_conditional_expressions7180)
            	expression476=expression()

            	state._fsp-=1
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1182:13: ( WHEN condition ( ELSE v2008_conditional_expressions[$elements] )? )?
            	val alt247 = {
            	val LA247_0 = input.LA(1)

            	if ( (LA247_0==WHEN) ) 1
            	else -1
            	}
            	alt247 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1182:15: WHEN condition ( ELSE v2008_conditional_expressions[$elements] )?
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_v2008_conditional_expressions7184)
            	        	if (state.failed) return 
            	        	pushFollow(FOLLOW_condition_in_v2008_conditional_expressions7186)
            	        	condition477=condition()

            	        	state._fsp-=1
            	        	if (state.failed) return 
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1182:30: ( ELSE v2008_conditional_expressions[$elements] )?
            	        	val alt246 = {
            	        	val LA246_0 = input.LA(1)

            	        	if ( (LA246_0==ELSE) ) 1
            	        	else -1
            	        	}
            	        	alt246 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1182:32: ELSE v2008_conditional_expressions[$elements]
            	        	        	`match`(input,ELSE,FOLLOW_ELSE_in_v2008_conditional_expressions7190)
            	        	        	if (state.failed) return 
            	        	        	pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_expressions7192)
            	        	        	v2008_conditional_expressions(elements)

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return 


            	        	    case _ =>
            	        	}



            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  elements += new ConditionalVariableAssignment.When(expression476,condition477)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, v2008_conditional_expressions_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_conditional_expressions"


    // $ANTLR start "v2008_selected_expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1184:1: v2008_selected_expression returns [SelectedVariableAssignment.When whenClause] : expression WHEN choices ;
    @throws(classOf[RecognitionException])
    final def v2008_selected_expression(): SelectedVariableAssignment.When = {
        var whenClause : SelectedVariableAssignment.When = null
        val v2008_selected_expression_StartIndex = input.index()
        var expression478: Expression = null
        var choices479: Seq[Choices.Choice] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return whenClause }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1184:79: ( expression WHEN choices )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1185:2: expression WHEN choices
            	pushFollow(FOLLOW_expression_in_v2008_selected_expression7214)
            	expression478=expression()

            	state._fsp-=1
            	if (state.failed) return whenClause
            	`match`(input,WHEN,FOLLOW_WHEN_in_v2008_selected_expression7216)
            	if (state.failed) return whenClause
            	pushFollow(FOLLOW_choices_in_v2008_selected_expression7218)
            	choices479=choices()

            	state._fsp-=1
            	if (state.failed) return whenClause
            	if ( state.backtracking==0 ) {
            	  whenClause = new SelectedVariableAssignment.When(expression478,choices479)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, v2008_selected_expression_StartIndex) }
        }
        return whenClause
    }
    // $ANTLR end "v2008_selected_expression"


    // $ANTLR start "v2008_selected_expressions"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1187:1: v2008_selected_expressions returns [Seq[SelectedVariableAssignment.When] expressions] : s1= v2008_selected_expression ( COMMA s2= v2008_selected_expression )* ;
    @throws(classOf[RecognitionException])
    final def v2008_selected_expressions(): Seq[SelectedVariableAssignment.When] = {
        var expressions : Seq[SelectedVariableAssignment.When] = null
        val v2008_selected_expressions_StartIndex = input.index()
        var s1: SelectedVariableAssignment.When = null
        var s2: SelectedVariableAssignment.When = null



        	val elements=new Buffer[SelectedVariableAssignment.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return expressions }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1190:3: (s1= v2008_selected_expression ( COMMA s2= v2008_selected_expression )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1191:2: s1= v2008_selected_expression ( COMMA s2= v2008_selected_expression )*
            	pushFollow(FOLLOW_v2008_selected_expression_in_v2008_selected_expressions7241)
            	s1=v2008_selected_expression()

            	state._fsp-=1
            	if (state.failed) return expressions
            	if ( state.backtracking==0 ) {
            	  elements += s1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1191:60: ( COMMA s2= v2008_selected_expression )*
            	var loop248_quitflag = false
            	while (!loop248_quitflag) {
            	    val alt248 = {
            	val LA248_0 = input.LA(1)

            	if ( (LA248_0==COMMA) ) 1

            	else -1
            	}
            	    alt248 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1191:61: COMMA s2= v2008_selected_expression
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_v2008_selected_expressions7246)
            		    	if (state.failed) return expressions
            		    	pushFollow(FOLLOW_v2008_selected_expression_in_v2008_selected_expressions7250)
            		    	s2=v2008_selected_expression()

            		    	state._fsp-=1
            		    	if (state.failed) return expressions
            		    	if ( state.backtracking==0 ) {
            		    	  elements += s2
            		    	}


            		case _ => loop248_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  expressions=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, v2008_selected_expressions_StartIndex) }
        }
        return expressions
    }
    // $ANTLR end "v2008_selected_expressions"


    // $ANTLR start "assignment_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1194:1: assignment_statement[Identifier label] returns [SequentialStatement assignmentStmt] : ({...}? => ( v2008_conditional_assignment[$label] | v2008_selected_assignment[$label] ) | simple_assignment[$label] );
    @throws(classOf[RecognitionException])
    final def assignment_statement(label: Identifier): SequentialStatement = {
        var assignmentStmt : SequentialStatement = null
        val assignment_statement_StartIndex = input.index()
        var v2008_conditional_assignment480: SequentialStatement = null
        var v2008_selected_assignment481: SequentialStatement = null
        var simple_assignment482: SequentialStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return assignmentStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1194:85: ({...}? => ( v2008_conditional_assignment[$label] | v2008_selected_assignment[$label] ) | simple_assignment[$label] )
            val alt250 = {
            val LA250_0 = input.LA(1)

            if ( (LA250_0==BASIC_IDENTIFIER||LA250_0==EXTENDED_IDENTIFIER) ) {
            val LA250_1 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                val nvae = new NoViableAltException("", 250, 1, input)

                throw nvae
            }
            }
            else if ( (LA250_0==STRING_LITERAL) ) {
            val LA250_2 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                val nvae = new NoViableAltException("", 250, 2, input)

                throw nvae
            }
            }
            else if ( (LA250_0==DLT) && ((vhdl2008))) {
            val LA250_3 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( ((vhdl2008)) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                val nvae = new NoViableAltException("", 250, 3, input)

                throw nvae
            }
            }
            else if ( (LA250_0==LPAREN) ) {
            val LA250_4 = input.LA(2)

            if ( ((vhdl2008)) ) 1
            else if ( (true) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                val nvae = new NoViableAltException("", 250, 4, input)

                throw nvae
            }
            }
            else if ( (LA250_0==WITH) && ((vhdl2008))) 1
            else {
                if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                val nvae = new NoViableAltException("", 250, 0, input)

                throw nvae
            }
            }
            alt250 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1195:2: {...}? => ( v2008_conditional_assignment[$label] | v2008_selected_assignment[$label] )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                    	    throw new FailedPredicateException(input, "assignment_statement", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1195:15: ( v2008_conditional_assignment[$label] | v2008_selected_assignment[$label] )
                    	val alt249 = {
                    	val LA249_0 = input.LA(1)

                    	if ( (LA249_0==BASIC_IDENTIFIER||LA249_0==EXTENDED_IDENTIFIER||LA249_0==STRING_LITERAL) ) 1
                    	else if ( (LA249_0==DLT) && ((vhdl2008))) 1
                    	else if ( (LA249_0==LPAREN) ) 1
                    	else if ( (LA249_0==WITH) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return assignmentStmt}
                    	    val nvae = new NoViableAltException("", 249, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt249 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1196:8: v2008_conditional_assignment[$label]
                    	        	pushFollow(FOLLOW_v2008_conditional_assignment_in_assignment_statement7283)
                    	        	v2008_conditional_assignment480=v2008_conditional_assignment(label)

                    	        	state._fsp-=1
                    	        	if (state.failed) return assignmentStmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  assignmentStmt=v2008_conditional_assignment480
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1197:10: v2008_selected_assignment[$label]
                    	        	pushFollow(FOLLOW_v2008_selected_assignment_in_assignment_statement7297)
                    	        	v2008_selected_assignment481=v2008_selected_assignment(label)

                    	        	state._fsp-=1
                    	        	if (state.failed) return assignmentStmt
                    	        	if ( state.backtracking==0 ) {
                    	        	  assignmentStmt=v2008_selected_assignment481
                    	        	}


                    	    case _ =>
                    	}


                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1199:4: simple_assignment[$label]
                    	pushFollow(FOLLOW_simple_assignment_in_assignment_statement7314)
                    	simple_assignment482=simple_assignment(label)

                    	state._fsp-=1
                    	if (state.failed) return assignmentStmt
                    	if ( state.backtracking==0 ) {
                    	  assignmentStmt=simple_assignment482
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, assignment_statement_StartIndex) }
        }
        return assignmentStmt
    }
    // $ANTLR end "assignment_statement"


    // $ANTLR start "simple_assignment"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1201:1: simple_assignment[Identifier label] returns [SequentialStatement stmt] : target ( VAR_ASSIGN expression | LEQ ( delay_mechanism )? waveform ) SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def simple_assignment(label: Identifier): SequentialStatement = {
        var stmt : SequentialStatement = null
        val simple_assignment_StartIndex = input.index()
        var VAR_ASSIGN483: Token = null
        var LEQ486: Token = null
        var target484: Target = null
        var expression485: Expression = null
        var delay_mechanism487: DelayMechanism = null
        var waveform488: Waveform = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1201:72: ( target ( VAR_ASSIGN expression | LEQ ( delay_mechanism )? waveform ) SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1202:2: target ( VAR_ASSIGN expression | LEQ ( delay_mechanism )? waveform ) SEMICOLON
            	pushFollow(FOLLOW_target_in_simple_assignment7333)
            	target484=target()

            	state._fsp-=1
            	if (state.failed) return stmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1202:9: ( VAR_ASSIGN expression | LEQ ( delay_mechanism )? waveform )
            	val alt252 = {
            	val LA252_0 = input.LA(1)

            	if ( (LA252_0==VAR_ASSIGN) ) 1
            	else if ( (LA252_0==LEQ) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return stmt}
            	    val nvae = new NoViableAltException("", 252, 0, input)

            	    throw nvae
            	}
            	}
            	alt252 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1203:3: VAR_ASSIGN expression
            	        	VAR_ASSIGN483=`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_simple_assignment7339).asInstanceOf[Token]
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_expression_in_simple_assignment7341)
            	        	expression485=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=new SimpleVariableAssignmentStatement(VAR_ASSIGN483,label,target484,expression485)
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1204:5: LEQ ( delay_mechanism )? waveform
            	        	LEQ486=`match`(input,LEQ,FOLLOW_LEQ_in_simple_assignment7349).asInstanceOf[Token]
            	        	if (state.failed) return stmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1204:9: ( delay_mechanism )?
            	        	val alt251 = {
            	        	val LA251_0 = input.LA(1)

            	        	if ( (LA251_0==INERTIAL||LA251_0==REJECT||LA251_0==TRANSPORT) ) 1
            	        	else -1
            	        	}
            	        	alt251 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1204:9: delay_mechanism
            	        	        	pushFollow(FOLLOW_delay_mechanism_in_simple_assignment7351)
            	        	        	delay_mechanism487=delay_mechanism()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt


            	        	    case _ =>
            	        	}

            	        	pushFollow(FOLLOW_waveform_in_simple_assignment7354)
            	        	waveform488=waveform()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=new SimpleWaveformAssignmentStatement(LEQ486,label,target484,delay_mechanism487,waveform488)
            	        	}


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_assignment7367)
            	if (state.failed) return stmt



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, simple_assignment_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "simple_assignment"


    // $ANTLR start "v2008_conditional_assignment"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1207:1: v2008_conditional_assignment[Identifier label] returns [SequentialStatement stmt] : target ( LEQ ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] ) | VAR_ASSIGN v2008_conditional_expressions[expressions] ) SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_conditional_assignment(label: Identifier): SequentialStatement = {
        var stmt : SequentialStatement = null
        val v2008_conditional_assignment_StartIndex = input.index()
        var LEQ489: Token = null
        var VAR_ASSIGN492: Token = null
        var forceMode: InterfaceList.Mode.Value = null
        var target490: Target = null
        var delay_mechanism491: DelayMechanism = null



         	val waveforms=new Buffer[ConcurrentConditionalSignalAssignment.When]()
         	val expressions=new Buffer[ConditionalVariableAssignment.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1211:3: ( target ( LEQ ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] ) | VAR_ASSIGN v2008_conditional_expressions[expressions] ) SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1212:2: target ( LEQ ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] ) | VAR_ASSIGN v2008_conditional_expressions[expressions] ) SEMICOLON
            	pushFollow(FOLLOW_target_in_v2008_conditional_assignment7386)
            	target490=target()

            	state._fsp-=1
            	if (state.failed) return stmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1212:9: ( LEQ ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] ) | VAR_ASSIGN v2008_conditional_expressions[expressions] )
            	val alt257 = {
            	val LA257_0 = input.LA(1)

            	if ( (LA257_0==LEQ) ) 1
            	else if ( (LA257_0==VAR_ASSIGN) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return stmt}
            	    val nvae = new NoViableAltException("", 257, 0, input)

            	    throw nvae
            	}
            	}
            	alt257 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1213:3: LEQ ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] )
            	        	LEQ489=`match`(input,LEQ,FOLLOW_LEQ_in_v2008_conditional_assignment7392).asInstanceOf[Token]
            	        	if (state.failed) return stmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1213:7: ( RELEASE (forceMode= force_mode )? | ( delay_mechanism )? conditional_waveforms[waveforms] | FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions] )
            	        	val alt256 = {
            	        	val LA256_0 = input.LA(1)

            	        	if ( (LA256_0==RELEASE) ) 1
            	        	else if ( (LA256_0==INERTIAL||LA256_0==REJECT||LA256_0==TRANSPORT||(LA256_0>=PLUS && LA256_0<=MINUS)||LA256_0==BASIC_IDENTIFIER||LA256_0==EXTENDED_IDENTIFIER||LA256_0==STRING_LITERAL) ) 2
            	        	else if ( (LA256_0==DLT) && ((vhdl2008))) 2
            	        	else if ( (LA256_0==ABS||LA256_0==NEW||(LA256_0>=NOT && LA256_0<=NULL)||LA256_0==LPAREN||(LA256_0>=BASED_LITERAL && LA256_0<=REAL_LITERAL)||LA256_0==BIT_STRING_LITERAL||LA256_0==CHARACTER_LITERAL) ) 2
            	        	else if ( (LA256_0==AND||LA256_0==NAND||LA256_0==NOR||LA256_0==OR||(LA256_0>=XNOR && LA256_0<=XOR)||LA256_0==CONDITION_OPERATOR) && ((vhdl2008))) 2
            	        	else if ( (LA256_0==UNAFFECTED) ) 2
            	        	else if ( (LA256_0==FORCE) ) 3
            	        	else {
            	        	    if (state.backtracking>0) {state.failed=true; return stmt}
            	        	    val nvae = new NoViableAltException("", 256, 0, input)

            	        	    throw nvae
            	        	}
            	        	}
            	        	alt256 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1214:4: RELEASE (forceMode= force_mode )?
            	        	        	`match`(input,RELEASE,FOLLOW_RELEASE_in_v2008_conditional_assignment7399)
            	        	        	if (state.failed) return stmt
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1214:21: (forceMode= force_mode )?
            	        	        	val alt253 = {
            	        	        	val LA253_0 = input.LA(1)

            	        	        	if ( (LA253_0==IN||LA253_0==OUT) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt253 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1214:21: forceMode= force_mode
            	        	        	        	pushFollow(FOLLOW_force_mode_in_v2008_conditional_assignment7403)
            	        	        	        	forceMode=force_mode()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return stmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	if ( state.backtracking==0 ) {
            	        	        	  stmt=new SimpleReleaseAssignment(LEQ489,label,target490,forceMode)
            	        	        	}

            	        	    case 2 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1215:6: ( delay_mechanism )? conditional_waveforms[waveforms]
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1215:6: ( delay_mechanism )?
            	        	        	val alt254 = {
            	        	        	val LA254_0 = input.LA(1)

            	        	        	if ( (LA254_0==INERTIAL||LA254_0==REJECT||LA254_0==TRANSPORT) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt254 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1215:6: delay_mechanism
            	        	        	        	pushFollow(FOLLOW_delay_mechanism_in_v2008_conditional_assignment7413)
            	        	        	        	delay_mechanism491=delay_mechanism()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return stmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	pushFollow(FOLLOW_conditional_waveforms_in_v2008_conditional_assignment7416)
            	        	        	conditional_waveforms(waveforms)

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt
            	        	        	if ( state.backtracking==0 ) {
            	        	        	  stmt=new ConditionalWaveformAssignment(LEQ489,label,target490,delay_mechanism491,waveforms.result.reverse)
            	        	        	}

            	        	    case 3 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1216:6: FORCE (forceMode= force_mode )? v2008_conditional_expressions[expressions]
            	        	        	`match`(input,FORCE,FOLLOW_FORCE_in_v2008_conditional_assignment7426)
            	        	        	if (state.failed) return stmt
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1216:21: (forceMode= force_mode )?
            	        	        	val alt255 = {
            	        	        	val LA255_0 = input.LA(1)

            	        	        	if ( (LA255_0==IN||LA255_0==OUT) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt255 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1216:21: forceMode= force_mode
            	        	        	        	pushFollow(FOLLOW_force_mode_in_v2008_conditional_assignment7430)
            	        	        	        	forceMode=force_mode()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return stmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_assignment7433)
            	        	        	v2008_conditional_expressions(expressions)

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt
            	        	        	if ( state.backtracking==0 ) {
            	        	        	  stmt=new ConditionalForceAssignment(LEQ489,label,target490,forceMode,expressions.result.reverse)
            	        	        	}


            	        	    case _ =>
            	        	}


            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1218:12: VAR_ASSIGN v2008_conditional_expressions[expressions]
            	        	VAR_ASSIGN492=`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_v2008_conditional_assignment7457).asInstanceOf[Token]
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_assignment7459)
            	        	v2008_conditional_expressions(expressions)

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=new ConditionalVariableAssignment(VAR_ASSIGN492,label,target490,expressions.result.reverse)
            	        	}


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_conditional_assignment7473)
            	if (state.failed) return stmt



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, v2008_conditional_assignment_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "v2008_conditional_assignment"


    // $ANTLR start "v2008_selected_assignment"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1221:1: v2008_selected_assignment[Identifier label] returns [SequentialStatement stmt] : WITH expression SELECT ( QMARK )? target ( LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions ) | VAR_ASSIGN selectedExpression= v2008_selected_expressions ) SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def v2008_selected_assignment(label: Identifier): SequentialStatement = {
        var stmt : SequentialStatement = null
        val v2008_selected_assignment_StartIndex = input.index()
        var WITH493: Token = null
        var QMARK495: Token = null
        var selectedExpression: Seq[SelectedVariableAssignment.When] = null
        var expression494: Expression = null
        var target496: Target = null
        var delay_mechanism497: DelayMechanism = null
        var selected_waveforms498: Seq[ConcurrentSelectedSignalAssignment.When] = null
        var force_mode499: InterfaceList.Mode.Value = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return stmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1221:80: ( WITH expression SELECT ( QMARK )? target ( LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions ) | VAR_ASSIGN selectedExpression= v2008_selected_expressions ) SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1222:2: WITH expression SELECT ( QMARK )? target ( LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions ) | VAR_ASSIGN selectedExpression= v2008_selected_expressions ) SEMICOLON
            	WITH493=`match`(input,WITH,FOLLOW_WITH_in_v2008_selected_assignment7489).asInstanceOf[Token]
            	if (state.failed) return stmt
            	pushFollow(FOLLOW_expression_in_v2008_selected_assignment7491)
            	expression494=expression()

            	state._fsp-=1
            	if (state.failed) return stmt
            	`match`(input,SELECT,FOLLOW_SELECT_in_v2008_selected_assignment7493)
            	if (state.failed) return stmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1222:25: ( QMARK )?
            	val alt258 = {
            	val LA258_0 = input.LA(1)

            	if ( (LA258_0==QMARK) ) 1
            	else -1
            	}
            	alt258 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1222:25: QMARK
            	        	QMARK495=`match`(input,QMARK,FOLLOW_QMARK_in_v2008_selected_assignment7495).asInstanceOf[Token]
            	        	if (state.failed) return stmt


            	    case _ =>
            	}

            	pushFollow(FOLLOW_target_in_v2008_selected_assignment7498)
            	target496=target()

            	state._fsp-=1
            	if (state.failed) return stmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1223:2: ( LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions ) | VAR_ASSIGN selectedExpression= v2008_selected_expressions )
            	val alt262 = {
            	val LA262_0 = input.LA(1)

            	if ( (LA262_0==LEQ) ) 1
            	else if ( (LA262_0==VAR_ASSIGN) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return stmt}
            	    val nvae = new NoViableAltException("", 262, 0, input)

            	    throw nvae
            	}
            	}
            	alt262 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1224:3: LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions )
            	        	`match`(input,LEQ,FOLLOW_LEQ_in_v2008_selected_assignment7506)
            	        	if (state.failed) return stmt
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1224:7: ( ( delay_mechanism )? selected_waveforms | FORCE ( force_mode )? selectedExpression= v2008_selected_expressions )
            	        	val alt261 = {
            	        	val LA261_0 = input.LA(1)

            	        	if ( (LA261_0==INERTIAL||LA261_0==REJECT||LA261_0==TRANSPORT||(LA261_0>=PLUS && LA261_0<=MINUS)||LA261_0==BASIC_IDENTIFIER||LA261_0==EXTENDED_IDENTIFIER||LA261_0==STRING_LITERAL) ) 1
            	        	else if ( (LA261_0==DLT) && ((vhdl2008))) 1
            	        	else if ( (LA261_0==ABS||LA261_0==NEW||(LA261_0>=NOT && LA261_0<=NULL)||LA261_0==LPAREN||(LA261_0>=BASED_LITERAL && LA261_0<=REAL_LITERAL)||LA261_0==BIT_STRING_LITERAL||LA261_0==CHARACTER_LITERAL) ) 1
            	        	else if ( (LA261_0==AND||LA261_0==NAND||LA261_0==NOR||LA261_0==OR||(LA261_0>=XNOR && LA261_0<=XOR)||LA261_0==CONDITION_OPERATOR) && ((vhdl2008))) 1
            	        	else if ( (LA261_0==UNAFFECTED) ) 1
            	        	else if ( (LA261_0==FORCE) ) 2
            	        	else {
            	        	    if (state.backtracking>0) {state.failed=true; return stmt}
            	        	    val nvae = new NoViableAltException("", 261, 0, input)

            	        	    throw nvae
            	        	}
            	        	}
            	        	alt261 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1225:4: ( delay_mechanism )? selected_waveforms
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1225:4: ( delay_mechanism )?
            	        	        	val alt259 = {
            	        	        	val LA259_0 = input.LA(1)

            	        	        	if ( (LA259_0==INERTIAL||LA259_0==REJECT||LA259_0==TRANSPORT) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt259 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1225:4: delay_mechanism
            	        	        	        	pushFollow(FOLLOW_delay_mechanism_in_v2008_selected_assignment7513)
            	        	        	        	delay_mechanism497=delay_mechanism()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return stmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	pushFollow(FOLLOW_selected_waveforms_in_v2008_selected_assignment7516)
            	        	        	selected_waveforms498=selected_waveforms()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt
            	        	        	if ( state.backtracking==0 ) {
            	        	        	  stmt=new SelectedWaveformAssignment(WITH493,label,expression494,QMARK495!=null,target496,delay_mechanism497,selected_waveforms498)
            	        	        	}

            	        	    case 2 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1226:6: FORCE ( force_mode )? selectedExpression= v2008_selected_expressions
            	        	        	`match`(input,FORCE,FOLLOW_FORCE_in_v2008_selected_assignment7525)
            	        	        	if (state.failed) return stmt
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1226:12: ( force_mode )?
            	        	        	val alt260 = {
            	        	        	val LA260_0 = input.LA(1)

            	        	        	if ( (LA260_0==IN||LA260_0==OUT) ) 1
            	        	        	else -1
            	        	        	}
            	        	        	alt260 match {
            	        	        	    case 1 =>
            	        	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1226:12: force_mode
            	        	        	        	pushFollow(FOLLOW_force_mode_in_v2008_selected_assignment7527)
            	        	        	        	force_mode499=force_mode()

            	        	        	        	state._fsp-=1
            	        	        	        	if (state.failed) return stmt


            	        	        	    case _ =>
            	        	        	}

            	        	        	pushFollow(FOLLOW_v2008_selected_expressions_in_v2008_selected_assignment7532)
            	        	        	selectedExpression=v2008_selected_expressions()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt
            	        	        	if ( state.backtracking==0 ) {
            	        	        	  stmt=new SelectedForceAssignment(WITH493,label,expression494,QMARK495!=null,target496,force_mode499,selectedExpression)
            	        	        	}


            	        	    case _ =>
            	        	}


            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1228:5: VAR_ASSIGN selectedExpression= v2008_selected_expressions
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_v2008_selected_assignment7548)
            	        	if (state.failed) return stmt
            	        	pushFollow(FOLLOW_v2008_selected_expressions_in_v2008_selected_assignment7552)
            	        	selectedExpression=v2008_selected_expressions()

            	        	state._fsp-=1
            	        	if (state.failed) return stmt
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=new SelectedVariableAssignment(WITH493,label,expression494,QMARK495!=null,target496,selectedExpression)
            	        	}


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_v2008_selected_assignment7559)
            	if (state.failed) return stmt



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, v2008_selected_assignment_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "v2008_selected_assignment"


    // $ANTLR start "delay_mechanism"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1231:1: delay_mechanism returns [DelayMechanism mechanism] : ( TRANSPORT | ( REJECT expression )? INERTIAL );
    @throws(classOf[RecognitionException])
    final def delay_mechanism(): DelayMechanism = {
        var mechanism : DelayMechanism = null
        val delay_mechanism_StartIndex = input.index()
        var expression500: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return mechanism }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1231:52: ( TRANSPORT | ( REJECT expression )? INERTIAL )
            val alt264 = {
            val LA264_0 = input.LA(1)

            if ( (LA264_0==TRANSPORT) ) 1
            else if ( (LA264_0==INERTIAL||LA264_0==REJECT) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return mechanism}
                val nvae = new NoViableAltException("", 264, 0, input)

                throw nvae
            }
            }
            alt264 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1232:2: TRANSPORT
                    	`match`(input,TRANSPORT,FOLLOW_TRANSPORT_in_delay_mechanism7580)
                    	if (state.failed) return mechanism
                    	if ( state.backtracking==0 ) {
                    	  mechanism=new DelayMechanism(DelayMechanism.DelayType.TRANSPORT,None)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1233:4: ( REJECT expression )? INERTIAL
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1233:4: ( REJECT expression )?
                    	val alt263 = {
                    	val LA263_0 = input.LA(1)

                    	if ( (LA263_0==REJECT) ) 1
                    	else -1
                    	}
                    	alt263 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1233:5: REJECT expression
                    	        	`match`(input,REJECT,FOLLOW_REJECT_in_delay_mechanism7588)
                    	        	if (state.failed) return mechanism
                    	        	pushFollow(FOLLOW_expression_in_delay_mechanism7590)
                    	        	expression500=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return mechanism


                    	    case _ =>
                    	}

                    	`match`(input,INERTIAL,FOLLOW_INERTIAL_in_delay_mechanism7594)
                    	if (state.failed) return mechanism
                    	if ( state.backtracking==0 ) {
                    	  mechanism=new DelayMechanism(DelayMechanism.DelayType.INERTIAL,expression500)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, delay_mechanism_StartIndex) }
        }
        return mechanism
    }
    // $ANTLR end "delay_mechanism"


    // $ANTLR start "waveform_element"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1235:1: waveform_element returns [Waveform.Element element] : value_expression= expression ( AFTER time_expression= expression )? ;
    @throws(classOf[RecognitionException])
    final def waveform_element(): Waveform.Element = {
        var element : Waveform.Element = null
        val waveform_element_StartIndex = input.index()
        var value_expression: Expression = null
        var time_expression: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1235:53: (value_expression= expression ( AFTER time_expression= expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1236:2: value_expression= expression ( AFTER time_expression= expression )?
            	pushFollow(FOLLOW_expression_in_waveform_element7611)
            	value_expression=expression()

            	state._fsp-=1
            	if (state.failed) return element
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1236:30: ( AFTER time_expression= expression )?
            	val alt265 = {
            	val LA265_0 = input.LA(1)

            	if ( (LA265_0==AFTER) ) 1
            	else -1
            	}
            	alt265 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1236:31: AFTER time_expression= expression
            	        	`match`(input,AFTER,FOLLOW_AFTER_in_waveform_element7614)
            	        	if (state.failed) return element
            	        	pushFollow(FOLLOW_expression_in_waveform_element7618)
            	        	time_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return element


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  element=new Waveform.Element(value_expression,time_expression)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, waveform_element_StartIndex) }
        }
        return element
    }
    // $ANTLR end "waveform_element"


    // $ANTLR start "waveform"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1239:1: waveform returns [Waveform waveForm] : (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED );
    @throws(classOf[RecognitionException])
    final def waveform(): Waveform = {
        var waveForm : Waveform = null
        val waveform_StartIndex = input.index()
        var e1: Waveform.Element = null
        var e2: Waveform.Element = null



        	val elements=new Buffer[Waveform.Element]()
        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return waveForm }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1243:3: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
            val alt267 = {
            val LA267_0 = input.LA(1)

            if ( ((LA267_0>=PLUS && LA267_0<=MINUS)||LA267_0==BASIC_IDENTIFIER||LA267_0==EXTENDED_IDENTIFIER||LA267_0==STRING_LITERAL) ) 1
            else if ( (LA267_0==DLT) && ((vhdl2008))) 1
            else if ( (LA267_0==ABS||LA267_0==NEW||(LA267_0>=NOT && LA267_0<=NULL)||LA267_0==LPAREN||(LA267_0>=BASED_LITERAL && LA267_0<=REAL_LITERAL)||LA267_0==BIT_STRING_LITERAL||LA267_0==CHARACTER_LITERAL) ) 1
            else if ( (LA267_0==AND||LA267_0==NAND||LA267_0==NOR||LA267_0==OR||(LA267_0>=XNOR && LA267_0<=XOR)||LA267_0==CONDITION_OPERATOR) && ((vhdl2008))) 1
            else if ( (LA267_0==UNAFFECTED) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return waveForm}
                val nvae = new NoViableAltException("", 267, 0, input)

                throw nvae
            }
            }
            alt267 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1244:2: e1= waveform_element ( COMMA e2= waveform_element )*
                    	pushFollow(FOLLOW_waveform_element_in_waveform7646)
                    	e1=waveform_element()

                    	state._fsp-=1
                    	if (state.failed) return waveForm
                    	if ( state.backtracking==0 ) {
                    	  elements += e1
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1244:47: ( COMMA e2= waveform_element )*
                    	var loop266_quitflag = false
                    	while (!loop266_quitflag) {
                    	    val alt266 = {
                    	val LA266_0 = input.LA(1)

                    	if ( (LA266_0==COMMA) ) 1

                    	else -1
                    	}
                    	    alt266 match {
                    		case 1 =>
                    		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1244:48: COMMA e2= waveform_element
                    		    	`match`(input,COMMA,FOLLOW_COMMA_in_waveform7650)
                    		    	if (state.failed) return waveForm
                    		    	pushFollow(FOLLOW_waveform_element_in_waveform7654)
                    		    	e2=waveform_element()

                    		    	state._fsp-=1
                    		    	if (state.failed) return waveForm
                    		    	if ( state.backtracking==0 ) {
                    		    	  elements += e2
                    		    	}


                    		case _ => loop266_quitflag = true
                    	    }
                    	}

                    	if ( state.backtracking==0 ) {
                    	  waveForm=new Waveform(position,elements.result)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1245:4: UNAFFECTED
                    	`match`(input,UNAFFECTED,FOLLOW_UNAFFECTED_in_waveform7664)
                    	if (state.failed) return waveForm
                    	if ( state.backtracking==0 ) {
                    	  waveForm=new Waveform(position,Seq())
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, waveform_StartIndex) }
        }
        return waveForm
    }
    // $ANTLR end "waveform"


    // $ANTLR start "procedure_call_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1247:1: procedure_call_statement[Identifier label] returns [ProcedureCallStatement procedureCallStmt] : selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def procedure_call_statement(label: Identifier): ProcedureCallStatement = {
        var procedureCallStmt : ProcedureCallStatement = null
        val procedure_call_statement_StartIndex = input.index()
        var selected_name501: SelectedName = null
        var association_list502: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return procedureCallStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1247:95: ( selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1248:2: selected_name ( LPAREN association_list RPAREN )? SEMICOLON
            	pushFollow(FOLLOW_selected_name_in_procedure_call_statement7684)
            	selected_name501=selected_name()

            	state._fsp-=1
            	if (state.failed) return procedureCallStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1248:16: ( LPAREN association_list RPAREN )?
            	val alt268 = {
            	val LA268_0 = input.LA(1)

            	if ( (LA268_0==LPAREN) ) 1
            	else -1
            	}
            	alt268 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1248:17: LPAREN association_list RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_procedure_call_statement7687)
            	        	if (state.failed) return procedureCallStmt
            	        	pushFollow(FOLLOW_association_list_in_procedure_call_statement7689)
            	        	association_list502=association_list()

            	        	state._fsp-=1
            	        	if (state.failed) return procedureCallStmt
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_procedure_call_statement7691)
            	        	if (state.failed) return procedureCallStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_call_statement7695)
            	if (state.failed) return procedureCallStmt
            	if ( state.backtracking==0 ) {
            	  procedureCallStmt=new ProcedureCallStatement(label,selected_name501,association_list502)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, procedure_call_statement_StartIndex) }
        }
        return procedureCallStmt
    }
    // $ANTLR end "procedure_call_statement"


    // $ANTLR start "if_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1251:1: if_statement[Identifier label] returns [IfStatement ifStmt] : ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def if_statement(label: Identifier): IfStatement = {
        var ifStmt : IfStatement = null
        val if_statement_StartIndex = input.index()
        var ifToken: Token = null
        var if_condition: Expression = null
        var if_sequential_statement: Seq[SequentialStatement] = null
        var elsif_condition: Expression = null
        var elsif_sequential_statement: Seq[SequentialStatement] = null
        var else_sequential_statement: Seq[SequentialStatement] = null
        var identifier503: Identifier = null



        	val ifList=new Buffer[IfStatement.IfThenPart]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return ifStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1254:3: (ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1255:2: ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF ( identifier )? SEMICOLON
            	ifToken=`match`(input,IF,FOLLOW_IF_in_if_statement7719).asInstanceOf[Token]
            	if (state.failed) return ifStmt
            	pushFollow(FOLLOW_condition_in_if_statement7723)
            	if_condition=condition()

            	state._fsp-=1
            	if (state.failed) return ifStmt
            	`match`(input,THEN,FOLLOW_THEN_in_if_statement7725)
            	if (state.failed) return ifStmt
            	pushFollow(FOLLOW_sequence_of_statements_in_if_statement7731)
            	if_sequential_statement=sequence_of_statements()

            	state._fsp-=1
            	if (state.failed) return ifStmt
            	if ( state.backtracking==0 ) {
            	  ifList += new IfStatement.IfThenPart(if_condition,if_sequential_statement)
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1257:2: ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )*
            	var loop269_quitflag = false
            	while (!loop269_quitflag) {
            	    val alt269 = {
            	val LA269_0 = input.LA(1)

            	if ( (LA269_0==ELSIF) ) 1

            	else -1
            	}
            	    alt269 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1257:3: ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements
            		    	`match`(input,ELSIF,FOLLOW_ELSIF_in_if_statement7737)
            		    	if (state.failed) return ifStmt
            		    	pushFollow(FOLLOW_condition_in_if_statement7741)
            		    	elsif_condition=condition()

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt
            		    	`match`(input,THEN,FOLLOW_THEN_in_if_statement7743)
            		    	if (state.failed) return ifStmt
            		    	pushFollow(FOLLOW_sequence_of_statements_in_if_statement7750)
            		    	elsif_sequential_statement=sequence_of_statements()

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt
            		    	if ( state.backtracking==0 ) {
            		    	  ifList += new IfStatement.IfThenPart(elsif_condition,elsif_sequential_statement)
            		    	}


            		case _ => loop269_quitflag = true
            	    }
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1261:2: ( ELSE else_sequential_statement= sequence_of_statements )?
            	val alt270 = {
            	val LA270_0 = input.LA(1)

            	if ( (LA270_0==ELSE) ) 1
            	else -1
            	}
            	alt270 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1261:3: ELSE else_sequential_statement= sequence_of_statements
            	        	`match`(input,ELSE,FOLLOW_ELSE_in_if_statement7763)
            	        	if (state.failed) return ifStmt
            	        	pushFollow(FOLLOW_sequence_of_statements_in_if_statement7770)
            	        	else_sequential_statement=sequence_of_statements()

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt


            	    case _ =>
            	}

            	`match`(input,END,FOLLOW_END_in_if_statement7775)
            	if (state.failed) return ifStmt
            	`match`(input,IF,FOLLOW_IF_in_if_statement7777)
            	if (state.failed) return ifStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1263:9: ( identifier )?
            	val alt271 = {
            	val LA271_0 = input.LA(1)

            	if ( (LA271_0==BASIC_IDENTIFIER||LA271_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt271 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1263:9: identifier
            	        	pushFollow(FOLLOW_identifier_in_if_statement7779)
            	        	identifier503=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_if_statement7782)
            	if (state.failed) return ifStmt
            	if ( state.backtracking==0 ) {
            	  ifStmt=new IfStatement(ifToken,label,ifList.result,else_sequential_statement,identifier503)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, if_statement_StartIndex) }
        }
        return ifStmt
    }
    // $ANTLR end "if_statement"


    // $ANTLR start "case_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1266:1: case_statement[Identifier label] returns [CaseStatement caseStmt] : caseToken= CASE ({...}? =>qmarkToken= QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? ( identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def case_statement(label: Identifier): CaseStatement = {
        var caseStmt : CaseStatement = null
        val case_statement_StartIndex = input.index()
        var caseToken: Token = null
        var qmarkToken: Token = null
        var choices504: Seq[Choices.Choice] = null
        var sequence_of_statements505: Seq[SequentialStatement] = null
        var expression506: Expression = null
        var identifier507: Identifier = null



        	val alternatives=new Buffer[CaseStatement.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return caseStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1269:3: (caseToken= CASE ({...}? =>qmarkToken= QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? ( identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1270:2: caseToken= CASE ({...}? =>qmarkToken= QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? ( identifier )? SEMICOLON
            	caseToken=`match`(input,CASE,FOLLOW_CASE_in_case_statement7806).asInstanceOf[Token]
            	if (state.failed) return caseStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1270:17: ({...}? =>qmarkToken= QMARK )?
            	val alt272 = {
            	val LA272_0 = input.LA(1)

            	if ( (LA272_0==QMARK) && ((vhdl2008))) 1
            	else -1
            	}
            	alt272 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1270:18: {...}? =>qmarkToken= QMARK
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	        	    throw new FailedPredicateException(input, "case_statement", "vhdl2008")
            	        	}
            	        	qmarkToken=`match`(input,QMARK,FOLLOW_QMARK_in_case_statement7813).asInstanceOf[Token]
            	        	if (state.failed) return caseStmt


            	    case _ =>
            	}

            	pushFollow(FOLLOW_expression_in_case_statement7817)
            	expression506=expression()

            	state._fsp-=1
            	if (state.failed) return caseStmt
            	`match`(input,IS,FOLLOW_IS_in_case_statement7819)
            	if (state.failed) return caseStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1271:3: ( WHEN choices ARROW sequence_of_statements )+
            	var cnt273 = 0
            	var loop273_quitflag = false
            	while (!loop273_quitflag) {
            	    val alt273 = {
            	val LA273_0 = input.LA(1)

            	if ( (LA273_0==WHEN) ) 1

            	else -1
            	}
            	    alt273 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1271:4: WHEN choices ARROW sequence_of_statements
            		    	`match`(input,WHEN,FOLLOW_WHEN_in_case_statement7824)
            		    	if (state.failed) return caseStmt
            		    	pushFollow(FOLLOW_choices_in_case_statement7826)
            		    	choices504=choices()

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt
            		    	`match`(input,ARROW,FOLLOW_ARROW_in_case_statement7828)
            		    	if (state.failed) return caseStmt
            		    	pushFollow(FOLLOW_sequence_of_statements_in_case_statement7830)
            		    	sequence_of_statements505=sequence_of_statements()

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt
            		    	if ( state.backtracking==0 ) {
            		    	  alternatives += new CaseStatement.When(choices504,sequence_of_statements505)
            		    	}


            		case _ =>
            		    if ( cnt273 >= 1 ) loop273_quitflag = true
            		    else {
            		    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	            val eee = new EarlyExitException(273, input)
            	            throw eee
            	      }
            	    }
            	    cnt273+=1
            	}

            	`match`(input,END,FOLLOW_END_in_case_statement7837)
            	if (state.failed) return caseStmt
            	`match`(input,CASE,FOLLOW_CASE_in_case_statement7839)
            	if (state.failed) return caseStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1272:11: ({...}? => QMARK )?
            	val alt274 = {
            	val LA274_0 = input.LA(1)

            	if ( (LA274_0==QMARK) && ((vhdl2008))) 1
            	else -1
            	}
            	alt274 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1272:12: {...}? => QMARK
            	        	if ( !((vhdl2008)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	        	    throw new FailedPredicateException(input, "case_statement", "vhdl2008")
            	        	}
            	        	`match`(input,QMARK,FOLLOW_QMARK_in_case_statement7844)
            	        	if (state.failed) return caseStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1272:33: ( identifier )?
            	val alt275 = {
            	val LA275_0 = input.LA(1)

            	if ( (LA275_0==BASIC_IDENTIFIER||LA275_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt275 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1272:33: identifier
            	        	pushFollow(FOLLOW_identifier_in_case_statement7848)
            	        	identifier507=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return caseStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_case_statement7851)
            	if (state.failed) return caseStmt
            	if ( state.backtracking==0 ) {
            	  caseStmt=new CaseStatement(caseToken,label,qmarkToken!=null,expression506,alternatives.result,identifier507)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, case_statement_StartIndex) }
        }
        return caseStmt
    }
    // $ANTLR end "case_statement"


    // $ANTLR start "iteration_scheme"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1275:1: iteration_scheme returns [Either[Expression,(Identifier,DiscreteRange)] scheme] : ( WHILE condition | FOR identifier IN discrete_range );
    @throws(classOf[RecognitionException])
    final def iteration_scheme(): Either[Expression,(Identifier,DiscreteRange)] = {
        var scheme : Either[Expression,(Identifier,DiscreteRange)] = null
        val iteration_scheme_StartIndex = input.index()
        var condition508: Expression = null
        var identifier509: Identifier = null
        var discrete_range510: DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return scheme }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1275:82: ( WHILE condition | FOR identifier IN discrete_range )
            val alt276 = {
            val LA276_0 = input.LA(1)

            if ( (LA276_0==WHILE) ) 1
            else if ( (LA276_0==FOR) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return scheme}
                val nvae = new NoViableAltException("", 276, 0, input)

                throw nvae
            }
            }
            alt276 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1276:2: WHILE condition
                    	`match`(input,WHILE,FOLLOW_WHILE_in_iteration_scheme7867)
                    	if (state.failed) return scheme
                    	pushFollow(FOLLOW_condition_in_iteration_scheme7869)
                    	condition508=condition()

                    	state._fsp-=1
                    	if (state.failed) return scheme
                    	if ( state.backtracking==0 ) {
                    	  scheme=Left(condition508)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1277:4: FOR identifier IN discrete_range
                    	`match`(input,FOR,FOLLOW_FOR_in_iteration_scheme7876)
                    	if (state.failed) return scheme
                    	pushFollow(FOLLOW_identifier_in_iteration_scheme7878)
                    	identifier509=identifier()

                    	state._fsp-=1
                    	if (state.failed) return scheme
                    	`match`(input,IN,FOLLOW_IN_in_iteration_scheme7880)
                    	if (state.failed) return scheme
                    	pushFollow(FOLLOW_discrete_range_in_iteration_scheme7882)
                    	discrete_range510=discrete_range()

                    	state._fsp-=1
                    	if (state.failed) return scheme
                    	if ( state.backtracking==0 ) {
                    	  scheme=Right((identifier509,discrete_range510))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, iteration_scheme_StartIndex) }
        }
        return scheme
    }
    // $ANTLR end "iteration_scheme"


    // $ANTLR start "loop_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1279:1: loop_statement[Identifier label] returns [SequentialStatement loopStmt] : (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def loop_statement(label: Identifier): SequentialStatement = {
        var loopStmt : SequentialStatement = null
        val loop_statement_StartIndex = input.index()
        var stmtType: Either[Expression,(Identifier,DiscreteRange)] = null
        var end_loop_label: Identifier = null
        var sequence_of_statements511: Seq[SequentialStatement] = null



        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return loopStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1282:3: ( (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1283:2: (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1283:10: (stmtType= iteration_scheme )?
            	val alt277 = {
            	val LA277_0 = input.LA(1)

            	if ( (LA277_0==FOR||LA277_0==WHILE) ) 1
            	else -1
            	}
            	alt277 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1283:10: stmtType= iteration_scheme
            	        	pushFollow(FOLLOW_iteration_scheme_in_loop_statement7908)
            	        	stmtType=iteration_scheme()

            	        	state._fsp-=1
            	        	if (state.failed) return loopStmt


            	    case _ =>
            	}

            	`match`(input,LOOP,FOLLOW_LOOP_in_loop_statement7911)
            	if (state.failed) return loopStmt
            	pushFollow(FOLLOW_sequence_of_statements_in_loop_statement7915)
            	sequence_of_statements511=sequence_of_statements()

            	state._fsp-=1
            	if (state.failed) return loopStmt
            	`match`(input,END,FOLLOW_END_in_loop_statement7918)
            	if (state.failed) return loopStmt
            	`match`(input,LOOP,FOLLOW_LOOP_in_loop_statement7920)
            	if (state.failed) return loopStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1285:25: (end_loop_label= identifier )?
            	val alt278 = {
            	val LA278_0 = input.LA(1)

            	if ( (LA278_0==BASIC_IDENTIFIER||LA278_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt278 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1285:25: end_loop_label= identifier
            	        	pushFollow(FOLLOW_identifier_in_loop_statement7924)
            	        	end_loop_label=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return loopStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_loop_statement7927)
            	if (state.failed) return loopStmt
            	if ( state.backtracking==0 ) {
            	  		
            	  		loopStmt=Option(stmtType) match {
            	  			case Some(x) => x match {
            	  				case Left(condition) =>new WhileStatement(position,label,condition,sequence_of_statements511,end_loop_label)
            	  				case Right((identifier,discreteRange)) =>new ForStatement(position,label,identifier,discreteRange,sequence_of_statements511,end_loop_label)
            	  			}
            	  			case None =>new LoopStatement(position,label,sequence_of_statements511,end_loop_label)
            	  		}
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, loop_statement_StartIndex) }
        }
        return loopStmt
    }
    // $ANTLR end "loop_statement"


    // $ANTLR start "next_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1296:1: next_statement[Identifier label] returns [NextStatement nextStmt] : NEXT ( identifier )? ( WHEN condition )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def next_statement(label: Identifier): NextStatement = {
        var nextStmt : NextStatement = null
        val next_statement_StartIndex = input.index()
        var NEXT512: Token = null
        var identifier513: Identifier = null
        var condition514: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return nextStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1296:67: ( NEXT ( identifier )? ( WHEN condition )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1297:2: NEXT ( identifier )? ( WHEN condition )? SEMICOLON
            	NEXT512=`match`(input,NEXT,FOLLOW_NEXT_in_next_statement7944).asInstanceOf[Token]
            	if (state.failed) return nextStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1297:7: ( identifier )?
            	val alt279 = {
            	val LA279_0 = input.LA(1)

            	if ( (LA279_0==BASIC_IDENTIFIER||LA279_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt279 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1297:7: identifier
            	        	pushFollow(FOLLOW_identifier_in_next_statement7946)
            	        	identifier513=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return nextStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1297:19: ( WHEN condition )?
            	val alt280 = {
            	val LA280_0 = input.LA(1)

            	if ( (LA280_0==WHEN) ) 1
            	else -1
            	}
            	alt280 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1297:20: WHEN condition
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_next_statement7950)
            	        	if (state.failed) return nextStmt
            	        	pushFollow(FOLLOW_condition_in_next_statement7952)
            	        	condition514=condition()

            	        	state._fsp-=1
            	        	if (state.failed) return nextStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_next_statement7956)
            	if (state.failed) return nextStmt
            	if ( state.backtracking==0 ) {
            	  nextStmt=new NextStatement(NEXT512,label,identifier513,condition514)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, next_statement_StartIndex) }
        }
        return nextStmt
    }
    // $ANTLR end "next_statement"


    // $ANTLR start "exit_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1300:1: exit_statement[Identifier label] returns [ExitStatement exitStmt] : EXIT ( identifier )? ( WHEN condition )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def exit_statement(label: Identifier): ExitStatement = {
        var exitStmt : ExitStatement = null
        val exit_statement_StartIndex = input.index()
        var EXIT515: Token = null
        var identifier516: Identifier = null
        var condition517: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return exitStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1300:67: ( EXIT ( identifier )? ( WHEN condition )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1301:2: EXIT ( identifier )? ( WHEN condition )? SEMICOLON
            	EXIT515=`match`(input,EXIT,FOLLOW_EXIT_in_exit_statement7974).asInstanceOf[Token]
            	if (state.failed) return exitStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1301:7: ( identifier )?
            	val alt281 = {
            	val LA281_0 = input.LA(1)

            	if ( (LA281_0==BASIC_IDENTIFIER||LA281_0==EXTENDED_IDENTIFIER) ) 1
            	else -1
            	}
            	alt281 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1301:7: identifier
            	        	pushFollow(FOLLOW_identifier_in_exit_statement7976)
            	        	identifier516=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return exitStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1301:19: ( WHEN condition )?
            	val alt282 = {
            	val LA282_0 = input.LA(1)

            	if ( (LA282_0==WHEN) ) 1
            	else -1
            	}
            	alt282 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1301:20: WHEN condition
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_exit_statement7980)
            	        	if (state.failed) return exitStmt
            	        	pushFollow(FOLLOW_condition_in_exit_statement7982)
            	        	condition517=condition()

            	        	state._fsp-=1
            	        	if (state.failed) return exitStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_exit_statement7986)
            	if (state.failed) return exitStmt
            	if ( state.backtracking==0 ) {
            	  exitStmt=new ExitStatement(EXIT515,label,identifier516,condition517)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, exit_statement_StartIndex) }
        }
        return exitStmt
    }
    // $ANTLR end "exit_statement"


    // $ANTLR start "return_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1304:1: return_statement[Identifier label] returns [ReturnStatement returnStmt] : RETURN ( expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def return_statement(label: Identifier): ReturnStatement = {
        var returnStmt : ReturnStatement = null
        val return_statement_StartIndex = input.index()
        var RETURN518: Token = null
        var expression519: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return returnStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1304:73: ( RETURN ( expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1305:2: RETURN ( expression )? SEMICOLON
            	RETURN518=`match`(input,RETURN,FOLLOW_RETURN_in_return_statement8004).asInstanceOf[Token]
            	if (state.failed) return returnStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1305:9: ( expression )?
            	val alt283 = {
            	val LA283_0 = input.LA(1)

            	if ( ((LA283_0>=PLUS && LA283_0<=MINUS)||LA283_0==BASIC_IDENTIFIER||LA283_0==EXTENDED_IDENTIFIER||LA283_0==STRING_LITERAL) ) 1
            	else if ( (LA283_0==DLT) && ((vhdl2008))) 1
            	else if ( (LA283_0==ABS||LA283_0==NEW||(LA283_0>=NOT && LA283_0<=NULL)||LA283_0==LPAREN||(LA283_0>=BASED_LITERAL && LA283_0<=REAL_LITERAL)||LA283_0==BIT_STRING_LITERAL||LA283_0==CHARACTER_LITERAL) ) 1
            	else if ( (LA283_0==AND||LA283_0==NAND||LA283_0==NOR||LA283_0==OR||(LA283_0>=XNOR && LA283_0<=XOR)||LA283_0==CONDITION_OPERATOR) && ((vhdl2008))) 1
            	else -1
            	}
            	alt283 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1305:9: expression
            	        	pushFollow(FOLLOW_expression_in_return_statement8006)
            	        	expression519=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return returnStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_statement8009)
            	if (state.failed) return returnStmt
            	if ( state.backtracking==0 ) {
            	  returnStmt=new ReturnStatement(RETURN518,label,expression519)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, return_statement_StartIndex) }
        }
        return returnStmt
    }
    // $ANTLR end "return_statement"


    // $ANTLR start "null_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1308:1: null_statement[Identifier label] returns [NullStatement nullStmt] : NULL SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def null_statement(label: Identifier): NullStatement = {
        var nullStmt : NullStatement = null
        val null_statement_StartIndex = input.index()
        var NULL520: Token = null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return nullStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1308:67: ( NULL SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1309:2: NULL SEMICOLON
            	NULL520=`match`(input,NULL,FOLLOW_NULL_in_null_statement8028).asInstanceOf[Token]
            	if (state.failed) return nullStmt
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_null_statement8030)
            	if (state.failed) return nullStmt
            	if ( state.backtracking==0 ) {
            	  nullStmt=new NullStatement(NULL520,label)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, null_statement_StartIndex) }
        }
        return nullStmt
    }
    // $ANTLR end "null_statement"


    // $ANTLR start "ams_break_statement"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1312:1: ams_break_statement[Identifier label] returns [AMSBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    final def ams_break_statement(label: Identifier): AMSBreakStatement = {
        var breakStmt : AMSBreakStatement = null
        val ams_break_statement_StartIndex = input.index()
        var BREAK521: Token = null
        var ams_break_element_list522: Seq[BreakElement] = null
        var expression523: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return breakStmt }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1312:77: ( BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1313:2: BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON
            	BREAK521=`match`(input,BREAK,FOLLOW_BREAK_in_ams_break_statement8047).asInstanceOf[Token]
            	if (state.failed) return breakStmt
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1313:8: ( ams_break_element_list )?
            	val alt284 = {
            	val LA284_0 = input.LA(1)

            	if ( (LA284_0==FOR||LA284_0==BASIC_IDENTIFIER||LA284_0==EXTENDED_IDENTIFIER||LA284_0==STRING_LITERAL) ) 1
            	else if ( (LA284_0==DLT) && ((vhdl2008))) 1
            	else -1
            	}
            	alt284 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1313:8: ams_break_element_list
            	        	pushFollow(FOLLOW_ams_break_element_list_in_ams_break_statement8049)
            	        	ams_break_element_list522=ams_break_element_list()

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1313:32: ( WHEN expression )?
            	val alt285 = {
            	val LA285_0 = input.LA(1)

            	if ( (LA285_0==WHEN) ) 1
            	else -1
            	}
            	alt285 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1313:33: WHEN expression
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_ams_break_statement8053)
            	        	if (state.failed) return breakStmt
            	        	pushFollow(FOLLOW_expression_in_ams_break_statement8055)
            	        	expression523=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt


            	    case _ =>
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_break_statement8059)
            	if (state.failed) return breakStmt
            	if ( state.backtracking==0 ) {
            	  breakStmt=new AMSBreakStatement(BREAK521,label,ams_break_element_list522,expression523)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, ams_break_statement_StartIndex) }
        }
        return breakStmt
    }
    // $ANTLR end "ams_break_statement"


    // $ANTLR start "ams_break_element_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1316:1: ams_break_element_list returns [Seq[BreakElement] list] : e1= ams_break_element ( COMMA e2= ams_break_element )* ;
    @throws(classOf[RecognitionException])
    final def ams_break_element_list(): Seq[BreakElement] = {
        var list : Seq[BreakElement] = null
        val ams_break_element_list_StartIndex = input.index()
        var e1: BreakElement = null
        var e2: BreakElement = null



        	val elements=new Buffer[BreakElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1319:3: (e1= ams_break_element ( COMMA e2= ams_break_element )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1320:2: e1= ams_break_element ( COMMA e2= ams_break_element )*
            	pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list8081)
            	e1=ams_break_element()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1320:53: ( COMMA e2= ams_break_element )*
            	var loop286_quitflag = false
            	while (!loop286_quitflag) {
            	    val alt286 = {
            	val LA286_0 = input.LA(1)

            	if ( (LA286_0==COMMA) ) 1

            	else -1
            	}
            	    alt286 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1320:54: COMMA e2= ams_break_element
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_break_element_list8085)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list8089)
            		    	e2=ams_break_element()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop286_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, ams_break_element_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "ams_break_element_list"


    // $ANTLR start "ams_break_element"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1323:1: ams_break_element returns [BreakElement breakElement] : ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression ;
    @throws(classOf[RecognitionException])
    final def ams_break_element(): BreakElement = {
        var breakElement : BreakElement = null
        val ams_break_element_StartIndex = input.index()
        var quantity_name1: Name = null
        var quantity_name2: Name = null
        var expr: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return breakElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1323:55: ( ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1324:2: ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1324:2: ( FOR quantity_name1= name USE )?
            	val alt287 = {
            	val LA287_0 = input.LA(1)

            	if ( (LA287_0==FOR) ) 1
            	else -1
            	}
            	alt287 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1324:3: FOR quantity_name1= name USE
            	        	`match`(input,FOR,FOLLOW_FOR_in_ams_break_element8113)
            	        	if (state.failed) return breakElement
            	        	pushFollow(FOLLOW_name_in_ams_break_element8117)
            	        	quantity_name1=name()

            	        	state._fsp-=1
            	        	if (state.failed) return breakElement
            	        	`match`(input,USE,FOLLOW_USE_in_ams_break_element8119)
            	        	if (state.failed) return breakElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_name_in_ams_break_element8125)
            	quantity_name2=name()

            	state._fsp-=1
            	if (state.failed) return breakElement
            	`match`(input,ARROW,FOLLOW_ARROW_in_ams_break_element8127)
            	if (state.failed) return breakElement
            	pushFollow(FOLLOW_expression_in_ams_break_element8131)
            	expr=expression()

            	state._fsp-=1
            	if (state.failed) return breakElement
            	if ( state.backtracking==0 ) {
            	  breakElement=new BreakElement(quantity_name1,quantity_name2,expr)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, ams_break_element_StartIndex) }
        }
        return breakElement
    }
    // $ANTLR end "ams_break_element"


    // $ANTLR start "interface_element_generic"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1328:1: interface_element_generic returns [InterfaceList.AbstractInterfaceElement element] : ( interface_constant_declaration | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) );
    @throws(classOf[RecognitionException])
    final def interface_element_generic(): InterfaceList.AbstractInterfaceElement = {
        var element : InterfaceList.AbstractInterfaceElement = null
        val interface_element_generic_StartIndex = input.index()
        var interface_constant_declaration524: InterfaceList.InterfaceConstantDeclaration = null
        var v2008_interface_type_declaration525: InterfaceList.InterfaceTypeDeclaration = null
        var v2008_interface_subprogram_declaration526: InterfaceList.AbstractInterfaceElement = null
        var v2008_interface_package_declaration527: InterfaceList.InterfacePackageDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1328:84: ( interface_constant_declaration | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) )
            val alt289 = {
            val LA289_0 = input.LA(1)

            if ( (LA289_0==CONSTANT||LA289_0==BASIC_IDENTIFIER||LA289_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA289_0==FUNCTION||LA289_0==IMPURE||LA289_0==PACKAGE||LA289_0==PROCEDURE||LA289_0==PURE||LA289_0==TYPE||LA289_0==SEMICOLON||LA289_0==RPAREN) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 289, 0, input)

                throw nvae
            }
            }
            alt289 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1329:2: interface_constant_declaration
                    	pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_generic8148)
                    	interface_constant_declaration524=interface_constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_constant_declaration524
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1330:4: {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_generic", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1330:17: ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
                    	val alt288 = input.LA(1) match {
                    	case SEMICOLON | RPAREN => 1
                    	case TYPE => 2
                    	case FUNCTION | IMPURE | PROCEDURE | PURE => 3
                    	case PACKAGE => 4
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 288, 0, input)

                    	    throw nvae
                    	}

                    	alt288 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1331:3: 
                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1331:5: v2008_interface_type_declaration
                    	        	pushFollow(FOLLOW_v2008_interface_type_declaration_in_interface_element_generic8164)
                    	        	v2008_interface_type_declaration525=v2008_interface_type_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=v2008_interface_type_declaration525
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1332:5: v2008_interface_subprogram_declaration
                    	        	pushFollow(FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_generic8172)
                    	        	v2008_interface_subprogram_declaration526=v2008_interface_subprogram_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=v2008_interface_subprogram_declaration526
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1333:5: v2008_interface_package_declaration
                    	        	pushFollow(FOLLOW_v2008_interface_package_declaration_in_interface_element_generic8180)
                    	        	v2008_interface_package_declaration527=v2008_interface_package_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=v2008_interface_package_declaration527
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, interface_element_generic_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_generic"


    // $ANTLR start "interface_element_port"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1336:1: interface_element_port returns [InterfaceList.AbstractInterfaceElement element] : ( interface_signal_declaration_port | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
    @throws(classOf[RecognitionException])
    final def interface_element_port(): InterfaceList.AbstractInterfaceElement = {
        var element : InterfaceList.AbstractInterfaceElement = null
        val interface_element_port_StartIndex = input.index()
        var interface_signal_declaration_port528: InterfaceList.InterfaceSignalDeclaration = null
        var ams_interface_terminal_declaration529: InterfaceList.InterfaceTerminalDeclaration = null
        var ams_interface_quantity_declaration530: InterfaceList.InterfaceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1336:81: ( interface_signal_declaration_port | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
            val alt291 = {
            val LA291_0 = input.LA(1)

            if ( (LA291_0==SIGNAL||LA291_0==BASIC_IDENTIFIER||LA291_0==EXTENDED_IDENTIFIER) ) 1
            else if ( ((LA291_0>=TERMINAL && LA291_0<=QUANTITY)) && ((ams))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 291, 0, input)

                throw nvae
            }
            }
            alt291 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1337:2: interface_signal_declaration_port
                    	pushFollow(FOLLOW_interface_signal_declaration_port_in_interface_element_port8199)
                    	interface_signal_declaration_port528=interface_signal_declaration_port()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_signal_declaration_port528
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1338:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_port", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1338:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	val alt290 = {
                    	val LA290_0 = input.LA(1)

                    	if ( (LA290_0==TERMINAL) ) 1
                    	else if ( (LA290_0==QUANTITY) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 290, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt290 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1339:3: ams_interface_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_port8212)
                    	        	ams_interface_terminal_declaration529=ams_interface_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_terminal_declaration529
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1340:5: ams_interface_quantity_declaration
                    	        	pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_port8220)
                    	        	ams_interface_quantity_declaration530=ams_interface_quantity_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_quantity_declaration530
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, interface_element_port_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_port"


    // $ANTLR start "interface_element_procedure"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1343:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( interface_variable_or_constant_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
    @throws(classOf[RecognitionException])
    final def interface_element_procedure(): InterfaceList.AbstractInterfaceElement = {
        var element : InterfaceList.AbstractInterfaceElement = null
        val interface_element_procedure_StartIndex = input.index()
        var interface_variable_or_constant_declaration531: InterfaceList.AbstractInterfaceElement = null
        var interface_signal_declaration_procedure532: InterfaceList.InterfaceSignalDeclaration = null
        var interface_file_declaration533: InterfaceList.InterfaceFileDeclaration = null
        var ams_interface_terminal_declaration534: InterfaceList.InterfaceTerminalDeclaration = null
        var ams_interface_quantity_declaration535: InterfaceList.InterfaceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1343:86: ( interface_variable_or_constant_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
            val alt293 = {
            val LA293_0 = input.LA(1)

            if ( (LA293_0==CONSTANT||LA293_0==VARIABLE||LA293_0==BASIC_IDENTIFIER||LA293_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA293_0==SIGNAL) ) 2
            else if ( (LA293_0==FILE) ) 3
            else if ( ((LA293_0>=TERMINAL && LA293_0<=QUANTITY)) && ((ams))) 4
            else {
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 293, 0, input)

                throw nvae
            }
            }
            alt293 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1344:2: interface_variable_or_constant_declaration
                    	pushFollow(FOLLOW_interface_variable_or_constant_declaration_in_interface_element_procedure8240)
                    	interface_variable_or_constant_declaration531=interface_variable_or_constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_variable_or_constant_declaration531
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1345:4: interface_signal_declaration_procedure
                    	pushFollow(FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure8249)
                    	interface_signal_declaration_procedure532=interface_signal_declaration_procedure()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_signal_declaration_procedure532
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1346:4: interface_file_declaration
                    	pushFollow(FOLLOW_interface_file_declaration_in_interface_element_procedure8256)
                    	interface_file_declaration533=interface_file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_file_declaration533
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1347:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_procedure", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1347:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	val alt292 = {
                    	val LA292_0 = input.LA(1)

                    	if ( (LA292_0==TERMINAL) ) 1
                    	else if ( (LA292_0==QUANTITY) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 292, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt292 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1348:3: ams_interface_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure8270)
                    	        	ams_interface_terminal_declaration534=ams_interface_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_terminal_declaration534
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1349:5: ams_interface_quantity_declaration
                    	        	pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure8278)
                    	        	ams_interface_quantity_declaration535=ams_interface_quantity_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_quantity_declaration535
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, interface_element_procedure_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_procedure"


    // $ANTLR start "interface_element_function"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1352:1: interface_element_function returns [InterfaceList.AbstractInterfaceElement element] : ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
    @throws(classOf[RecognitionException])
    final def interface_element_function(): InterfaceList.AbstractInterfaceElement = {
        var element : InterfaceList.AbstractInterfaceElement = null
        val interface_element_function_StartIndex = input.index()
        var interface_constant_declaration536: InterfaceList.InterfaceConstantDeclaration = null
        var interface_signal_declaration_function537: InterfaceList.InterfaceSignalDeclaration = null
        var interface_file_declaration538: InterfaceList.InterfaceFileDeclaration = null
        var ams_interface_terminal_declaration539: InterfaceList.InterfaceTerminalDeclaration = null
        var ams_interface_quantity_declaration540: InterfaceList.InterfaceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1352:85: ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
            val alt295 = {
            val LA295_0 = input.LA(1)

            if ( (LA295_0==CONSTANT||LA295_0==BASIC_IDENTIFIER||LA295_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA295_0==SIGNAL) ) 2
            else if ( (LA295_0==FILE) ) 3
            else if ( ((LA295_0>=TERMINAL && LA295_0<=QUANTITY)) && ((ams))) 4
            else {
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 295, 0, input)

                throw nvae
            }
            }
            alt295 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1353:2: interface_constant_declaration
                    	pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_function8299)
                    	interface_constant_declaration536=interface_constant_declaration()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_constant_declaration536
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1354:4: interface_signal_declaration_function
                    	pushFollow(FOLLOW_interface_signal_declaration_function_in_interface_element_function8307)
                    	interface_signal_declaration_function537=interface_signal_declaration_function()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_signal_declaration_function537
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1355:4: interface_file_declaration
                    	pushFollow(FOLLOW_interface_file_declaration_in_interface_element_function8314)
                    	interface_file_declaration538=interface_file_declaration()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	if ( state.backtracking==0 ) {
                    	  element=interface_file_declaration538
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1356:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_function", "ams")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1356:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	val alt294 = {
                    	val LA294_0 = input.LA(1)

                    	if ( (LA294_0==TERMINAL) ) 1
                    	else if ( (LA294_0==QUANTITY) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 294, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt294 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1357:3: ams_interface_terminal_declaration
                    	        	pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_function8328)
                    	        	ams_interface_terminal_declaration539=ams_interface_terminal_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_terminal_declaration539
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1358:5: ams_interface_quantity_declaration
                    	        	pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_function8336)
                    	        	ams_interface_quantity_declaration540=ams_interface_quantity_declaration()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_quantity_declaration540
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, interface_element_function_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_function"


    // $ANTLR start "parameter_interface_list_procedure"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1361:1: parameter_interface_list_procedure returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* ;
    @throws(classOf[RecognitionException])
    final def parameter_interface_list_procedure(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val parameter_interface_list_procedure_StartIndex = input.index()
        var e1: InterfaceList.AbstractInterfaceElement = null
        var e2: InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1364:3: (e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1365:2: e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )*
            	pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8363)
            	e1=interface_element_procedure()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1365:58: ( SEMICOLON e2= interface_element_procedure )*
            	var loop296_quitflag = false
            	while (!loop296_quitflag) {
            	    val alt296 = {
            	val LA296_0 = input.LA(1)

            	if ( (LA296_0==SEMICOLON) ) 1

            	else -1
            	}
            	    alt296 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1365:59: SEMICOLON e2= interface_element_procedure
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_parameter_interface_list_procedure8367)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8371)
            		    	e2=interface_element_procedure()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop296_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, parameter_interface_list_procedure_StartIndex) }
        }
        return list
    }
    // $ANTLR end "parameter_interface_list_procedure"


    // $ANTLR start "parameter_interface_list_function"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1368:1: parameter_interface_list_function returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_function ( SEMICOLON e2= interface_element_function )* ;
    @throws(classOf[RecognitionException])
    final def parameter_interface_list_function(): Seq[InterfaceList.AbstractInterfaceElement] = {
        var list : Seq[InterfaceList.AbstractInterfaceElement] = null
        val parameter_interface_list_function_StartIndex = input.index()
        var e1: InterfaceList.AbstractInterfaceElement = null
        var e2: InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1371:3: (e1= interface_element_function ( SEMICOLON e2= interface_element_function )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1372:2: e1= interface_element_function ( SEMICOLON e2= interface_element_function )*
            	pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function8400)
            	e1=interface_element_function()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1372:58: ( SEMICOLON e2= interface_element_function )*
            	var loop297_quitflag = false
            	while (!loop297_quitflag) {
            	    val alt297 = {
            	val LA297_0 = input.LA(1)

            	if ( (LA297_0==SEMICOLON) ) 1

            	else -1
            	}
            	    alt297 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1372:59: SEMICOLON e2= interface_element_function
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_parameter_interface_list_function8405)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function8409)
            		    	e2=interface_element_function()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop297_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, parameter_interface_list_function_StartIndex) }
        }
        return list
    }
    // $ANTLR end "parameter_interface_list_function"


    // $ANTLR start "interface_variable_or_constant_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1375:1: interface_variable_or_constant_declaration returns [InterfaceList.AbstractInterfaceElement element] : ( VARIABLE identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? | CONSTANT identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? | identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? );
    @throws(classOf[RecognitionException])
    final def interface_variable_or_constant_declaration(): InterfaceList.AbstractInterfaceElement = {
        var element : InterfaceList.AbstractInterfaceElement = null
        val interface_variable_or_constant_declaration_StartIndex = input.index()
        var identifier_list541: Seq[Identifier] = null
        var interface_mode542: InterfaceList.Mode.Value = null
        var subtype_indication543: SubTypeIndication = null
        var expression544: Expression = null
        var identifier_list545: Seq[Identifier] = null
        var subtype_indication546: SubTypeIndication = null
        var expression547: Expression = null
        var interface_mode548: InterfaceList.Mode.Value = null
        var identifier_list549: Seq[Identifier] = null
        var subtype_indication550: SubTypeIndication = null
        var expression551: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1375:101: ( VARIABLE identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? | CONSTANT identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? | identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? )
            val alt304 = input.LA(1) match {
            case VARIABLE => 1
            case CONSTANT => 2
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 304, 0, input)

                throw nvae
            }

            alt304 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1376:2: VARIABLE identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )?
                    	`match`(input,VARIABLE,FOLLOW_VARIABLE_in_interface_variable_or_constant_declaration8430)
                    	if (state.failed) return element
                    	pushFollow(FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8432)
                    	identifier_list541=identifier_list()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	`match`(input,COLON,FOLLOW_COLON_in_interface_variable_or_constant_declaration8434)
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1376:33: ( interface_mode )?
                    	val alt298 = {
                    	val LA298_0 = input.LA(1)

                    	if ( (LA298_0==BUFFER||LA298_0==IN||LA298_0==INOUT||LA298_0==LINKAGE||LA298_0==OUT) ) 1
                    	else -1
                    	}
                    	alt298 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1376:33: interface_mode
                    	        	pushFollow(FOLLOW_interface_mode_in_interface_variable_or_constant_declaration8436)
                    	        	interface_mode542=interface_mode()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	pushFollow(FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8439)
                    	subtype_indication543=subtype_indication()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1376:68: ( VAR_ASSIGN expression )?
                    	val alt299 = {
                    	val LA299_0 = input.LA(1)

                    	if ( (LA299_0==VAR_ASSIGN) ) 1
                    	else -1
                    	}
                    	alt299 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1376:69: VAR_ASSIGN expression
                    	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8442)
                    	        	if (state.failed) return element
                    	        	pushFollow(FOLLOW_expression_in_interface_variable_or_constant_declaration8444)
                    	        	expression544=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  element=new InterfaceList.InterfaceVariableDeclaration(identifier_list541,interface_mode542,subtype_indication543,expression544)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1378:4: CONSTANT identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )?
                    	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_interface_variable_or_constant_declaration8455)
                    	if (state.failed) return element
                    	pushFollow(FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8457)
                    	identifier_list545=identifier_list()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	`match`(input,COLON,FOLLOW_COLON_in_interface_variable_or_constant_declaration8459)
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1378:35: ( IN )?
                    	val alt300 = {
                    	val LA300_0 = input.LA(1)

                    	if ( (LA300_0==IN) ) 1
                    	else -1
                    	}
                    	alt300 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1378:35: IN
                    	        	`match`(input,IN,FOLLOW_IN_in_interface_variable_or_constant_declaration8461)
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	pushFollow(FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8464)
                    	subtype_indication546=subtype_indication()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1378:58: ( VAR_ASSIGN expression )?
                    	val alt301 = {
                    	val LA301_0 = input.LA(1)

                    	if ( (LA301_0==VAR_ASSIGN) ) 1
                    	else -1
                    	}
                    	alt301 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1378:59: VAR_ASSIGN expression
                    	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8467)
                    	        	if (state.failed) return element
                    	        	pushFollow(FOLLOW_expression_in_interface_variable_or_constant_declaration8469)
                    	        	expression547=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  element=new InterfaceList.InterfaceConstantDeclaration(identifier_list545,subtype_indication546,expression547)
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1380:4: identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )?
                    	pushFollow(FOLLOW_identifier_list_in_interface_variable_or_constant_declaration8481)
                    	identifier_list549=identifier_list()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	`match`(input,COLON,FOLLOW_COLON_in_interface_variable_or_constant_declaration8483)
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1380:26: ( interface_mode )?
                    	val alt302 = {
                    	val LA302_0 = input.LA(1)

                    	if ( (LA302_0==BUFFER||LA302_0==IN||LA302_0==INOUT||LA302_0==LINKAGE||LA302_0==OUT) ) 1
                    	else -1
                    	}
                    	alt302 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1380:26: interface_mode
                    	        	pushFollow(FOLLOW_interface_mode_in_interface_variable_or_constant_declaration8485)
                    	        	interface_mode548=interface_mode()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	pushFollow(FOLLOW_subtype_indication_in_interface_variable_or_constant_declaration8488)
                    	subtype_indication550=subtype_indication()

                    	state._fsp-=1
                    	if (state.failed) return element
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1380:61: ( VAR_ASSIGN expression )?
                    	val alt303 = {
                    	val LA303_0 = input.LA(1)

                    	if ( (LA303_0==VAR_ASSIGN) ) 1
                    	else -1
                    	}
                    	alt303 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1380:62: VAR_ASSIGN expression
                    	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_variable_or_constant_declaration8491)
                    	        	if (state.failed) return element
                    	        	pushFollow(FOLLOW_expression_in_interface_variable_or_constant_declaration8493)
                    	        	expression551=expression()

                    	        	state._fsp-=1
                    	        	if (state.failed) return element


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {

                    	  		element=if (interface_mode548==InterfaceList.Mode.OUT || interface_mode548==InterfaceList.Mode.IN) 
                    	  				new InterfaceList.InterfaceVariableDeclaration(identifier_list549,interface_mode548,subtype_indication550,expression551)
                    	  			 else new InterfaceList.InterfaceConstantDeclaration(identifier_list549,subtype_indication550,expression551)			 
                    	  		
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, interface_variable_or_constant_declaration_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_variable_or_constant_declaration"


    // $ANTLR start "interface_constant_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1387:1: interface_constant_declaration returns [InterfaceList.InterfaceConstantDeclaration constElement] : ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    final def interface_constant_declaration(): InterfaceList.InterfaceConstantDeclaration = {
        var constElement : InterfaceList.InterfaceConstantDeclaration = null
        val interface_constant_declaration_StartIndex = input.index()
        var identifier_list552: Seq[Identifier] = null
        var subtype_indication553: SubTypeIndication = null
        var expression554: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return constElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1387:97: ( ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:2: ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:2: ( CONSTANT )?
            	val alt305 = {
            	val LA305_0 = input.LA(1)

            	if ( (LA305_0==CONSTANT) ) 1
            	else -1
            	}
            	alt305 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:2: CONSTANT
            	        	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_interface_constant_declaration8517)
            	        	if (state.failed) return constElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_identifier_list_in_interface_constant_declaration8520)
            	identifier_list552=identifier_list()

            	state._fsp-=1
            	if (state.failed) return constElement
            	`match`(input,COLON,FOLLOW_COLON_in_interface_constant_declaration8522)
            	if (state.failed) return constElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:34: ( IN )?
            	val alt306 = {
            	val LA306_0 = input.LA(1)

            	if ( (LA306_0==IN) ) 1
            	else -1
            	}
            	alt306 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:34: IN
            	        	`match`(input,IN,FOLLOW_IN_in_interface_constant_declaration8524)
            	        	if (state.failed) return constElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_constant_declaration8527)
            	subtype_indication553=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return constElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:57: ( VAR_ASSIGN expression )?
            	val alt307 = {
            	val LA307_0 = input.LA(1)

            	if ( (LA307_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt307 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1388:58: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_constant_declaration8530)
            	        	if (state.failed) return constElement
            	        	pushFollow(FOLLOW_expression_in_interface_constant_declaration8532)
            	        	expression554=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return constElement


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  constElement=new InterfaceList.InterfaceConstantDeclaration(identifier_list552,subtype_indication553,expression554)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, interface_constant_declaration_StartIndex) }
        }
        return constElement
    }
    // $ANTLR end "interface_constant_declaration"


    // $ANTLR start "interface_signal_declaration_port"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1391:1: interface_signal_declaration_port returns [InterfaceList.InterfaceSignalDeclaration signalElement] : ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    final def interface_signal_declaration_port(): InterfaceList.InterfaceSignalDeclaration = {
        var signalElement : InterfaceList.InterfaceSignalDeclaration = null
        val interface_signal_declaration_port_StartIndex = input.index()
        var BUS558: Token = null
        var identifier_list555: Seq[Identifier] = null
        var interface_mode556: InterfaceList.Mode.Value = null
        var subtype_indication557: SubTypeIndication = null
        var expression559: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return signalElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1391:100: ( ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:2: ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:2: ( SIGNAL )?
            	val alt308 = {
            	val LA308_0 = input.LA(1)

            	if ( (LA308_0==SIGNAL) ) 1
            	else -1
            	}
            	alt308 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:2: SIGNAL
            	        	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_interface_signal_declaration_port8551)
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_port8554)
            	identifier_list555=identifier_list()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	`match`(input,COLON,FOLLOW_COLON_in_interface_signal_declaration_port8556)
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:32: ( interface_mode )?
            	val alt309 = {
            	val LA309_0 = input.LA(1)

            	if ( (LA309_0==BUFFER||LA309_0==IN||LA309_0==INOUT||LA309_0==LINKAGE||LA309_0==OUT) ) 1
            	else -1
            	}
            	alt309 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:32: interface_mode
            	        	pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_port8558)
            	        	interface_mode556=interface_mode()

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_port8561)
            	subtype_indication557=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:67: ( BUS )?
            	val alt310 = {
            	val LA310_0 = input.LA(1)

            	if ( (LA310_0==BUS) ) 1
            	else -1
            	}
            	alt310 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:67: BUS
            	        	BUS558=`match`(input,BUS,FOLLOW_BUS_in_interface_signal_declaration_port8563).asInstanceOf[Token]
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:72: ( VAR_ASSIGN expression )?
            	val alt311 = {
            	val LA311_0 = input.LA(1)

            	if ( (LA311_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt311 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1392:73: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_port8567)
            	        	if (state.failed) return signalElement
            	        	pushFollow(FOLLOW_expression_in_interface_signal_declaration_port8569)
            	        	expression559=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  signalElement=new InterfaceList.InterfaceSignalDeclaration(identifier_list555,interface_mode556,subtype_indication557,BUS558!=null,expression559)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, interface_signal_declaration_port_StartIndex) }
        }
        return signalElement
    }
    // $ANTLR end "interface_signal_declaration_port"


    // $ANTLR start "interface_signal_declaration_procedure"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1395:1: interface_signal_declaration_procedure returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    final def interface_signal_declaration_procedure(): InterfaceList.InterfaceSignalDeclaration = {
        var signalElement : InterfaceList.InterfaceSignalDeclaration = null
        val interface_signal_declaration_procedure_StartIndex = input.index()
        var BUS563: Token = null
        var identifier_list560: Seq[Identifier] = null
        var interface_mode561: InterfaceList.Mode.Value = null
        var subtype_indication562: SubTypeIndication = null
        var expression564: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return signalElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1395:105: ( SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:2: SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
            	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_interface_signal_declaration_procedure8588)
            	if (state.failed) return signalElement
            	pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_procedure8590)
            	identifier_list560=identifier_list()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	`match`(input,COLON,FOLLOW_COLON_in_interface_signal_declaration_procedure8592)
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:31: ( interface_mode )?
            	val alt312 = {
            	val LA312_0 = input.LA(1)

            	if ( (LA312_0==BUFFER||LA312_0==IN||LA312_0==INOUT||LA312_0==LINKAGE||LA312_0==OUT) ) 1
            	else -1
            	}
            	alt312 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:31: interface_mode
            	        	pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_procedure8594)
            	        	interface_mode561=interface_mode()

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_procedure8597)
            	subtype_indication562=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:66: ( BUS )?
            	val alt313 = {
            	val LA313_0 = input.LA(1)

            	if ( (LA313_0==BUS) ) 1
            	else -1
            	}
            	alt313 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:66: BUS
            	        	BUS563=`match`(input,BUS,FOLLOW_BUS_in_interface_signal_declaration_procedure8599).asInstanceOf[Token]
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:71: ( VAR_ASSIGN expression )?
            	val alt314 = {
            	val LA314_0 = input.LA(1)

            	if ( (LA314_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt314 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1396:72: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure8603)
            	        	if (state.failed) return signalElement
            	        	pushFollow(FOLLOW_expression_in_interface_signal_declaration_procedure8605)
            	        	expression564=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  signalElement=new InterfaceList.InterfaceSignalDeclaration(identifier_list560,interface_mode561,subtype_indication562,BUS563!=null,expression564)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, interface_signal_declaration_procedure_StartIndex) }
        }
        return signalElement
    }
    // $ANTLR end "interface_signal_declaration_procedure"


    // $ANTLR start "interface_signal_declaration_function"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1399:1: interface_signal_declaration_function returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    final def interface_signal_declaration_function(): InterfaceList.InterfaceSignalDeclaration = {
        var signalElement : InterfaceList.InterfaceSignalDeclaration = null
        val interface_signal_declaration_function_StartIndex = input.index()
        var BUS567: Token = null
        var identifier_list565: Seq[Identifier] = null
        var subtype_indication566: SubTypeIndication = null
        var expression568: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return signalElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1399:104: ( SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:2: SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
            	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_interface_signal_declaration_function8625)
            	if (state.failed) return signalElement
            	pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_function8627)
            	identifier_list565=identifier_list()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	`match`(input,COLON,FOLLOW_COLON_in_interface_signal_declaration_function8629)
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:31: ( IN )?
            	val alt315 = {
            	val LA315_0 = input.LA(1)

            	if ( (LA315_0==IN) ) 1
            	else -1
            	}
            	alt315 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:31: IN
            	        	`match`(input,IN,FOLLOW_IN_in_interface_signal_declaration_function8631)
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_function8634)
            	subtype_indication566=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return signalElement
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:54: ( BUS )?
            	val alt316 = {
            	val LA316_0 = input.LA(1)

            	if ( (LA316_0==BUS) ) 1
            	else -1
            	}
            	alt316 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:54: BUS
            	        	BUS567=`match`(input,BUS,FOLLOW_BUS_in_interface_signal_declaration_function8636).asInstanceOf[Token]
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:59: ( VAR_ASSIGN expression )?
            	val alt317 = {
            	val LA317_0 = input.LA(1)

            	if ( (LA317_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt317 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1400:60: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function8640)
            	        	if (state.failed) return signalElement
            	        	pushFollow(FOLLOW_expression_in_interface_signal_declaration_function8642)
            	        	expression568=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  signalElement=new InterfaceList.InterfaceSignalDeclaration(identifier_list565,InterfaceList.Mode.IN,subtype_indication566,BUS567!=null,expression568)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, interface_signal_declaration_function_StartIndex) }
        }
        return signalElement
    }
    // $ANTLR end "interface_signal_declaration_function"


    // $ANTLR start "interface_mode"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1403:1: interface_mode returns [InterfaceList.Mode.Value mode] : ( IN | OUT | INOUT | BUFFER | LINKAGE );
    @throws(classOf[RecognitionException])
    final def interface_mode(): InterfaceList.Mode.Value = {
        var mode : InterfaceList.Mode.Value = null
        val interface_mode_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return mode }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1403:56: ( IN | OUT | INOUT | BUFFER | LINKAGE )
            val alt318 = input.LA(1) match {
            case IN => 1
            case OUT => 2
            case INOUT => 3
            case BUFFER => 4
            case LINKAGE => 5
            case _ =>
                if (state.backtracking>0) {state.failed=true; return mode}
                val nvae = new NoViableAltException("", 318, 0, input)

                throw nvae
            }

            alt318 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1404:2: IN
                    	`match`(input,IN,FOLLOW_IN_in_interface_mode8661)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.IN
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1405:4: OUT
                    	`match`(input,OUT,FOLLOW_OUT_in_interface_mode8668)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.OUT
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1406:4: INOUT
                    	`match`(input,INOUT,FOLLOW_INOUT_in_interface_mode8675)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.INOUT
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1407:4: BUFFER
                    	`match`(input,BUFFER,FOLLOW_BUFFER_in_interface_mode8682)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.BUFFER
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1408:4: LINKAGE
                    	`match`(input,LINKAGE,FOLLOW_LINKAGE_in_interface_mode8689)
                    	if (state.failed) return mode
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.Mode.LINKAGE
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, interface_mode_StartIndex) }
        }
        return mode
    }
    // $ANTLR end "interface_mode"


    // $ANTLR start "interface_file_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1410:1: interface_file_declaration returns [InterfaceList.InterfaceFileDeclaration fileElement] : FILE identifier_list COLON subtype_indication ;
    @throws(classOf[RecognitionException])
    final def interface_file_declaration(): InterfaceList.InterfaceFileDeclaration = {
        var fileElement : InterfaceList.InterfaceFileDeclaration = null
        val interface_file_declaration_StartIndex = input.index()
        var identifier_list569: Seq[Identifier] = null
        var subtype_indication570: SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return fileElement }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1410:89: ( FILE identifier_list COLON subtype_indication )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1411:2: FILE identifier_list COLON subtype_indication
            	`match`(input,FILE,FOLLOW_FILE_in_interface_file_declaration8704)
            	if (state.failed) return fileElement
            	pushFollow(FOLLOW_identifier_list_in_interface_file_declaration8706)
            	identifier_list569=identifier_list()

            	state._fsp-=1
            	if (state.failed) return fileElement
            	`match`(input,COLON,FOLLOW_COLON_in_interface_file_declaration8708)
            	if (state.failed) return fileElement
            	pushFollow(FOLLOW_subtype_indication_in_interface_file_declaration8710)
            	subtype_indication570=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return fileElement
            	if ( state.backtracking==0 ) {
            	  fileElement=new InterfaceList.InterfaceFileDeclaration(identifier_list569,subtype_indication570)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, interface_file_declaration_StartIndex) }
        }
        return fileElement
    }
    // $ANTLR end "interface_file_declaration"


    // $ANTLR start "ams_interface_terminal_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1414:1: ams_interface_terminal_declaration returns [InterfaceList.InterfaceTerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication ;
    @throws(classOf[RecognitionException])
    final def ams_interface_terminal_declaration(): InterfaceList.InterfaceTerminalDeclaration = {
        var terminalDecl : InterfaceList.InterfaceTerminalDeclaration = null
        val ams_interface_terminal_declaration_StartIndex = input.index()
        var identifier_list571: Seq[Identifier] = null
        var ams_subnature_indication572: SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return terminalDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1414:102: ( TERMINAL identifier_list COLON ams_subnature_indication )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1415:2: TERMINAL identifier_list COLON ams_subnature_indication
            	`match`(input,TERMINAL,FOLLOW_TERMINAL_in_ams_interface_terminal_declaration8728)
            	if (state.failed) return terminalDecl
            	pushFollow(FOLLOW_identifier_list_in_ams_interface_terminal_declaration8730)
            	identifier_list571=identifier_list()

            	state._fsp-=1
            	if (state.failed) return terminalDecl
            	`match`(input,COLON,FOLLOW_COLON_in_ams_interface_terminal_declaration8732)
            	if (state.failed) return terminalDecl
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration8734)
            	ams_subnature_indication572=ams_subnature_indication()

            	state._fsp-=1
            	if (state.failed) return terminalDecl
            	if ( state.backtracking==0 ) {
            	  terminalDecl=new InterfaceList.InterfaceTerminalDeclaration(identifier_list571,ams_subnature_indication572)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, ams_interface_terminal_declaration_StartIndex) }
        }
        return terminalDecl
    }
    // $ANTLR end "ams_interface_terminal_declaration"


    // $ANTLR start "ams_interface_quantity_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1418:1: ams_interface_quantity_declaration returns [InterfaceList.InterfaceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    final def ams_interface_quantity_declaration(): InterfaceList.InterfaceQuantityDeclaration = {
        var quantityDecl : InterfaceList.InterfaceQuantityDeclaration = null
        val ams_interface_quantity_declaration_StartIndex = input.index()
        var out: Token = null
        var identifier_list573: Seq[Identifier] = null
        var subtype_indication574: SubTypeIndication = null
        var expression575: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return quantityDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1418:102: ( QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:2: QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )?
            	`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_interface_quantity_declaration8750)
            	if (state.failed) return quantityDecl
            	pushFollow(FOLLOW_identifier_list_in_ams_interface_quantity_declaration8752)
            	identifier_list573=identifier_list()

            	state._fsp-=1
            	if (state.failed) return quantityDecl
            	`match`(input,COLON,FOLLOW_COLON_in_ams_interface_quantity_declaration8754)
            	if (state.failed) return quantityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:33: ( IN | out= OUT )?
            	val alt319 = {
            	val LA319_0 = input.LA(1)

            	if ( (LA319_0==IN) ) 1
            	else if ( (LA319_0==OUT) ) 2
            	else -1
            	}
            	alt319 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:34: IN
            	        	`match`(input,IN,FOLLOW_IN_in_ams_interface_quantity_declaration8757)
            	        	if (state.failed) return quantityDecl

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:37: out= OUT
            	        	out=`match`(input,OUT,FOLLOW_OUT_in_ams_interface_quantity_declaration8761).asInstanceOf[Token]
            	        	if (state.failed) return quantityDecl


            	    case _ =>
            	}

            	pushFollow(FOLLOW_subtype_indication_in_ams_interface_quantity_declaration8765)
            	subtype_indication574=subtype_indication()

            	state._fsp-=1
            	if (state.failed) return quantityDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:66: ( VAR_ASSIGN expression )?
            	val alt320 = {
            	val LA320_0 = input.LA(1)

            	if ( (LA320_0==VAR_ASSIGN) ) 1
            	else -1
            	}
            	alt320 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1419:67: VAR_ASSIGN expression
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration8768)
            	        	if (state.failed) return quantityDecl
            	        	pushFollow(FOLLOW_expression_in_ams_interface_quantity_declaration8770)
            	        	expression575=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {

            	  		val mode = if (out!=null) InterfaceList.Mode.OUT else InterfaceList.Mode.IN
            	  		quantityDecl=new InterfaceList.InterfaceQuantityDeclaration(identifier_list573,mode,subtype_indication574,expression575)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, ams_interface_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_interface_quantity_declaration"


    // $ANTLR start "v2008_interface_type_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1425:1: v2008_interface_type_declaration returns [InterfaceList.InterfaceTypeDeclaration typeDecl] : TYPE identifier ;
    @throws(classOf[RecognitionException])
    final def v2008_interface_type_declaration(): InterfaceList.InterfaceTypeDeclaration = {
        var typeDecl : InterfaceList.InterfaceTypeDeclaration = null
        val v2008_interface_type_declaration_StartIndex = input.index()
        var identifier576: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return typeDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1425:92: ( TYPE identifier )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1426:2: TYPE identifier
            	`match`(input,TYPE,FOLLOW_TYPE_in_v2008_interface_type_declaration8790)
            	if (state.failed) return typeDecl
            	pushFollow(FOLLOW_identifier_in_v2008_interface_type_declaration8792)
            	identifier576=identifier()

            	state._fsp-=1
            	if (state.failed) return typeDecl
            	if ( state.backtracking==0 ) {
            	  typeDecl=new InterfaceList.InterfaceTypeDeclaration(identifier576)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, v2008_interface_type_declaration_StartIndex) }
        }
        return typeDecl
    }
    // $ANTLR end "v2008_interface_type_declaration"


    // $ANTLR start "v2008_interface_subprogram_default"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1428:1: v2008_interface_subprogram_default returns [Option[SelectedName] default] : IS ( selected_name | BOX ) ;
    @throws(classOf[RecognitionException])
    final def v2008_interface_subprogram_default(): Option[SelectedName] = {
        var default : Option[SelectedName] = null
        val v2008_interface_subprogram_default_StartIndex = input.index()
        var selected_name577: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return default }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1428:76: ( IS ( selected_name | BOX ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1429:2: IS ( selected_name | BOX )
            	`match`(input,IS,FOLLOW_IS_in_v2008_interface_subprogram_default8807)
            	if (state.failed) return default
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1429:5: ( selected_name | BOX )
            	val alt321 = {
            	val LA321_0 = input.LA(1)

            	if ( (LA321_0==BASIC_IDENTIFIER||LA321_0==EXTENDED_IDENTIFIER||LA321_0==STRING_LITERAL) ) 1
            	else if ( (LA321_0==BOX) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return default}
            	    val nvae = new NoViableAltException("", 321, 0, input)

            	    throw nvae
            	}
            	}
            	alt321 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1429:6: selected_name
            	        	pushFollow(FOLLOW_selected_name_in_v2008_interface_subprogram_default8810)
            	        	selected_name577=selected_name()

            	        	state._fsp-=1
            	        	if (state.failed) return default
            	        	if ( state.backtracking==0 ) {
            	        	  default=Option(selected_name577)
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1429:61: BOX
            	        	`match`(input,BOX,FOLLOW_BOX_in_v2008_interface_subprogram_default8815)
            	        	if (state.failed) return default
            	        	if ( state.backtracking==0 ) {
            	        	  default=None
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, v2008_interface_subprogram_default_StartIndex) }
        }
        return default
    }
    // $ANTLR end "v2008_interface_subprogram_default"


    // $ANTLR start "v2008_interface_subprogram_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1431:1: v2008_interface_subprogram_declaration returns [InterfaceList.AbstractInterfaceElement subprogramDecl] : ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? ( v2008_interface_subprogram_default )? | ( PURE | impure= IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark ( v2008_interface_subprogram_default )? );
    @throws(classOf[RecognitionException])
    final def v2008_interface_subprogram_declaration(): InterfaceList.AbstractInterfaceElement = {
        var subprogramDecl : InterfaceList.AbstractInterfaceElement = null
        val v2008_interface_subprogram_declaration_StartIndex = input.index()
        var impure: Token = null
        var identifier578: Identifier = null
        var parameter_interface_list_procedure579: Seq[InterfaceList.AbstractInterfaceElement] = null
        var v2008_interface_subprogram_default580: Option[SelectedName] = null
        var designator581: Identifier = null
        var parameter_interface_list_function582: Seq[InterfaceList.AbstractInterfaceElement] = null
        var type_mark583: SelectedName = null
        var v2008_interface_subprogram_default584: Option[SelectedName] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return subprogramDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1431:103: ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? ( v2008_interface_subprogram_default )? | ( PURE | impure= IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark ( v2008_interface_subprogram_default )? )
            val alt329 = {
            val LA329_0 = input.LA(1)

            if ( (LA329_0==PROCEDURE) ) 1
            else if ( (LA329_0==FUNCTION||LA329_0==IMPURE||LA329_0==PURE) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return subprogramDecl}
                val nvae = new NoViableAltException("", 329, 0, input)

                throw nvae
            }
            }
            alt329 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1432:3: PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? ( v2008_interface_subprogram_default )?
                    	`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_v2008_interface_subprogram_declaration8831)
                    	if (state.failed) return subprogramDecl
                    	pushFollow(FOLLOW_identifier_in_v2008_interface_subprogram_declaration8833)
                    	identifier578=identifier()

                    	state._fsp-=1
                    	if (state.failed) return subprogramDecl
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:4: ( ( PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )?
                    	val alt323 = {
                    	val LA323_0 = input.LA(1)

                    	if ( (LA323_0==LPAREN||LA323_0==PARAMETER) ) 1
                    	else -1
                    	}
                    	alt323 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:5: ( PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:5: ( PARAMETER )?
                    	        	val alt322 = {
                    	        	val LA322_0 = input.LA(1)

                    	        	if ( (LA322_0==PARAMETER) ) 1
                    	        	else -1
                    	        	}
                    	        	alt322 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:5: PARAMETER
                    	        	        	`match`(input,PARAMETER,FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration8839)
                    	        	        	if (state.failed) return subprogramDecl


                    	        	    case _ =>
                    	        	}

                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration8842)
                    	        	if (state.failed) return subprogramDecl
                    	        	pushFollow(FOLLOW_parameter_interface_list_procedure_in_v2008_interface_subprogram_declaration8844)
                    	        	parameter_interface_list_procedure579=parameter_interface_list_procedure()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subprogramDecl
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration8846)
                    	        	if (state.failed) return subprogramDecl


                    	    case _ =>
                    	}

                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:67: ( v2008_interface_subprogram_default )?
                    	val alt324 = {
                    	val LA324_0 = input.LA(1)

                    	if ( (LA324_0==IS) ) 1
                    	else -1
                    	}
                    	alt324 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1433:67: v2008_interface_subprogram_default
                    	        	pushFollow(FOLLOW_v2008_interface_subprogram_default_in_v2008_interface_subprogram_declaration8850)
                    	        	v2008_interface_subprogram_default580=v2008_interface_subprogram_default()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subprogramDecl


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  subprogramDecl=new InterfaceList.InterfaceProcedureDeclaration(identifier578,parameter_interface_list_procedure579,v2008_interface_subprogram_default580)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1435:4: ( PURE | impure= IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark ( v2008_interface_subprogram_default )?
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1435:4: ( PURE | impure= IMPURE )?
                    	val alt325 = {
                    	val LA325_0 = input.LA(1)

                    	if ( (LA325_0==PURE) ) 1
                    	else if ( (LA325_0==IMPURE) ) 2
                    	else -1
                    	}
                    	alt325 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1435:5: PURE
                    	        	`match`(input,PURE,FOLLOW_PURE_in_v2008_interface_subprogram_declaration8861)
                    	        	if (state.failed) return subprogramDecl

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1435:10: impure= IMPURE
                    	        	impure=`match`(input,IMPURE,FOLLOW_IMPURE_in_v2008_interface_subprogram_declaration8865).asInstanceOf[Token]
                    	        	if (state.failed) return subprogramDecl


                    	    case _ =>
                    	}

                    	`match`(input,FUNCTION,FOLLOW_FUNCTION_in_v2008_interface_subprogram_declaration8869)
                    	if (state.failed) return subprogramDecl
                    	pushFollow(FOLLOW_designator_in_v2008_interface_subprogram_declaration8871)
                    	designator581=designator()

                    	state._fsp-=1
                    	if (state.failed) return subprogramDecl
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:4: ( ( PARAMETER )? LPAREN parameter_interface_list_function RPAREN )?
                    	val alt327 = {
                    	val LA327_0 = input.LA(1)

                    	if ( (LA327_0==LPAREN||LA327_0==PARAMETER) ) 1
                    	else -1
                    	}
                    	alt327 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:5: ( PARAMETER )? LPAREN parameter_interface_list_function RPAREN
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:5: ( PARAMETER )?
                    	        	val alt326 = {
                    	        	val LA326_0 = input.LA(1)

                    	        	if ( (LA326_0==PARAMETER) ) 1
                    	        	else -1
                    	        	}
                    	        	alt326 match {
                    	        	    case 1 =>
                    	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:5: PARAMETER
                    	        	        	`match`(input,PARAMETER,FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration8877)
                    	        	        	if (state.failed) return subprogramDecl


                    	        	    case _ =>
                    	        	}

                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration8880)
                    	        	if (state.failed) return subprogramDecl
                    	        	pushFollow(FOLLOW_parameter_interface_list_function_in_v2008_interface_subprogram_declaration8882)
                    	        	parameter_interface_list_function582=parameter_interface_list_function()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subprogramDecl
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration8884)
                    	        	if (state.failed) return subprogramDecl


                    	    case _ =>
                    	}

                    	`match`(input,RETURN,FOLLOW_RETURN_in_v2008_interface_subprogram_declaration8888)
                    	if (state.failed) return subprogramDecl
                    	pushFollow(FOLLOW_type_mark_in_v2008_interface_subprogram_declaration8890)
                    	type_mark583=type_mark()

                    	state._fsp-=1
                    	if (state.failed) return subprogramDecl
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:83: ( v2008_interface_subprogram_default )?
                    	val alt328 = {
                    	val LA328_0 = input.LA(1)

                    	if ( (LA328_0==IS) ) 1
                    	else -1
                    	}
                    	alt328 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1436:83: v2008_interface_subprogram_default
                    	        	pushFollow(FOLLOW_v2008_interface_subprogram_default_in_v2008_interface_subprogram_declaration8892)
                    	        	v2008_interface_subprogram_default584=v2008_interface_subprogram_default()

                    	        	state._fsp-=1
                    	        	if (state.failed) return subprogramDecl


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  subprogramDecl=new InterfaceList.InterfaceFunctionDeclaration(impure==null,designator581,parameter_interface_list_function582,type_mark583,v2008_interface_subprogram_default584)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, v2008_interface_subprogram_declaration_StartIndex) }
        }
        return subprogramDecl
    }
    // $ANTLR end "v2008_interface_subprogram_declaration"


    // $ANTLR start "v2008_interface_package_declaration"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1439:1: v2008_interface_package_declaration returns [InterfaceList.InterfacePackageDeclaration packageDecl] : PACKAGE identifier IS NEW selected_name GENERIC MAP LPAREN ( association_list | BOX | DEFAULT ) RPAREN ;
    @throws(classOf[RecognitionException])
    final def v2008_interface_package_declaration(): InterfaceList.InterfacePackageDeclaration = {
        var packageDecl : InterfaceList.InterfacePackageDeclaration = null
        val v2008_interface_package_declaration_StartIndex = input.index()
        var DEFAULT586: Token = null
        var association_list585: AssociationList = null
        var identifier587: Identifier = null
        var selected_name588: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return packageDecl }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1439:101: ( PACKAGE identifier IS NEW selected_name GENERIC MAP LPAREN ( association_list | BOX | DEFAULT ) RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1440:2: PACKAGE identifier IS NEW selected_name GENERIC MAP LPAREN ( association_list | BOX | DEFAULT ) RPAREN
            	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_v2008_interface_package_declaration8912)
            	if (state.failed) return packageDecl
            	pushFollow(FOLLOW_identifier_in_v2008_interface_package_declaration8914)
            	identifier587=identifier()

            	state._fsp-=1
            	if (state.failed) return packageDecl
            	`match`(input,IS,FOLLOW_IS_in_v2008_interface_package_declaration8916)
            	if (state.failed) return packageDecl
            	`match`(input,NEW,FOLLOW_NEW_in_v2008_interface_package_declaration8918)
            	if (state.failed) return packageDecl
            	pushFollow(FOLLOW_selected_name_in_v2008_interface_package_declaration8920)
            	selected_name588=selected_name()

            	state._fsp-=1
            	if (state.failed) return packageDecl
            	`match`(input,GENERIC,FOLLOW_GENERIC_in_v2008_interface_package_declaration8924)
            	if (state.failed) return packageDecl
            	`match`(input,MAP,FOLLOW_MAP_in_v2008_interface_package_declaration8926)
            	if (state.failed) return packageDecl
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_v2008_interface_package_declaration8928)
            	if (state.failed) return packageDecl
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1441:22: ( association_list | BOX | DEFAULT )
            	val alt330 = dfa330.predict(input)
            	alt330 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1441:23: association_list
            	        	pushFollow(FOLLOW_association_list_in_v2008_interface_package_declaration8931)
            	        	association_list585=association_list()

            	        	state._fsp-=1
            	        	if (state.failed) return packageDecl

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1441:42: BOX
            	        	`match`(input,BOX,FOLLOW_BOX_in_v2008_interface_package_declaration8935)
            	        	if (state.failed) return packageDecl

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1441:48: DEFAULT
            	        	DEFAULT586=`match`(input,DEFAULT,FOLLOW_DEFAULT_in_v2008_interface_package_declaration8939).asInstanceOf[Token]
            	        	if (state.failed) return packageDecl


            	    case _ =>
            	}

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_v2008_interface_package_declaration8942)
            	if (state.failed) return packageDecl
            	if ( state.backtracking==0 ) {

            	  		val generic=if (association_list585!=null) Left(association_list585)
            	  			    else if (DEFAULT586!=null) Right(true)
            	  			    else Right(false)
            	  		packageDecl=new InterfaceList.InterfacePackageDeclaration(identifier587,selected_name588,generic)
            	  	
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, v2008_interface_package_declaration_StartIndex) }
        }
        return packageDecl
    }
    // $ANTLR end "v2008_interface_package_declaration"


    // $ANTLR start "association_element"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1449:1: association_element returns [AssociationList.Element element] : ( ( formal_part ARROW )=> formal_part ARROW )? actual_part ;
    @throws(classOf[RecognitionException])
    final def association_element(): AssociationList.Element = {
        var element : AssociationList.Element = null
        val association_element_StartIndex = input.index()
        var formal_part589: Either[Identifier,(SelectedName,Name.Part)] = null
        var actual_part590: Either[Expression,Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1449:63: ( ( ( formal_part ARROW )=> formal_part ARROW )? actual_part )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1450:2: ( ( formal_part ARROW )=> formal_part ARROW )? actual_part
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1450:2: ( ( formal_part ARROW )=> formal_part ARROW )?
            	val alt331 = dfa331.predict(input)
            	alt331 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1450:3: ( formal_part ARROW )=> formal_part ARROW
            	        	pushFollow(FOLLOW_formal_part_in_association_element8965)
            	        	formal_part589=formal_part()

            	        	state._fsp-=1
            	        	if (state.failed) return element
            	        	`match`(input,ARROW,FOLLOW_ARROW_in_association_element8967)
            	        	if (state.failed) return element


            	    case _ =>
            	}

            	pushFollow(FOLLOW_actual_part_in_association_element8971)
            	actual_part590=actual_part()

            	state._fsp-=1
            	if (state.failed) return element
            	if ( state.backtracking==0 ) {
            	  element=new AssociationList.Element(formal_part589,actual_part590) 
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, association_element_StartIndex) }
        }
        return element
    }
    // $ANTLR end "association_element"


    // $ANTLR start "association_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1453:1: association_list returns [AssociationList list] : e1= association_element ( COMMA e2= association_element )* ;
    @throws(classOf[RecognitionException])
    final def association_list(): AssociationList = {
        var list : AssociationList = null
        val association_list_StartIndex = input.index()
        var e1: AssociationList.Element = null
        var e2: AssociationList.Element = null



        	val elements=new Buffer[AssociationList.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1456:3: (e1= association_element ( COMMA e2= association_element )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1457:2: e1= association_element ( COMMA e2= association_element )*
            	pushFollow(FOLLOW_association_element_in_association_list8998)
            	e1=association_element()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1457:51: ( COMMA e2= association_element )*
            	var loop332_quitflag = false
            	while (!loop332_quitflag) {
            	    val alt332 = {
            	val LA332_0 = input.LA(1)

            	if ( (LA332_0==COMMA) ) 1

            	else -1
            	}
            	    alt332 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1457:52: COMMA e2= association_element
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_association_list9003)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_association_element_in_association_list9007)
            		    	e2=association_element()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop332_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=new AssociationList(elements.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, association_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "association_list"


    // $ANTLR start "formal_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1460:1: formal_part returns [Either[Identifier,(SelectedName,Name.Part)] formal_part_] : ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) );
    @throws(classOf[RecognitionException])
    final def formal_part(): Either[Identifier,(SelectedName,Name.Part)] = {
        var formal_part_ : Either[Identifier,(SelectedName,Name.Part)] = null
        val formal_part_StartIndex = input.index()
        var identifier591: Identifier = null
        var selected_name592: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return formal_part_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1460:81: ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) )
            val alt334 = {
            val LA334_0 = input.LA(1)

            if ( (LA334_0==BASIC_IDENTIFIER||LA334_0==EXTENDED_IDENTIFIER) ) {
            val LA334_1 = input.LA(2)

            if ( (LA334_1==ARROW) ) 1
            else if ( (LA334_1==LPAREN||LA334_1==DOT) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return formal_part_}
                val nvae = new NoViableAltException("", 334, 1, input)

                throw nvae
            }
            }
            else if ( (LA334_0==STRING_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return formal_part_}
                val nvae = new NoViableAltException("", 334, 0, input)

                throw nvae
            }
            }
            alt334 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1461:2: identifier
                    	pushFollow(FOLLOW_identifier_in_formal_part9029)
                    	identifier591=identifier()

                    	state._fsp-=1
                    	if (state.failed) return formal_part_
                    	if ( state.backtracking==0 ) {
                    	  formal_part_ = Left(identifier591)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:4: selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
                    	pushFollow(FOLLOW_selected_name_in_formal_part9036)
                    	selected_name592=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return formal_part_
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:18: ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
                    	val alt333 = {
                    	val LA333_0 = input.LA(1)

                    	if ( (LA333_0==LPAREN) ) {
                    	val LA333_1 = input.LA(2)

                    	if ( (synpred11_Parser()) ) 1
                    	else if ( (true) ) 2
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return formal_part_}
                    	    val nvae = new NoViableAltException("", 333, 1, input)

                    	    throw nvae
                    	}
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return formal_part_}
                    	    val nvae = new NoViableAltException("", 333, 0, input)

                    	    throw nvae
                    	}
                    	}
                    	alt333 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:19: ( name_association_list_part )=> name_association_list_part
                    	        	pushFollow(FOLLOW_name_association_list_part_in_formal_part9043)
                    	        	name_association_list_part()

                    	        	state._fsp-=1
                    	        	if (state.failed) return formal_part_

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:78: name_slice_part
                    	        	pushFollow(FOLLOW_name_slice_part_in_formal_part9047)
                    	        	name_slice_part()

                    	        	state._fsp-=1
                    	        	if (state.failed) return formal_part_


                    	    case _ =>
                    	}

                    	if ( state.backtracking==0 ) {
                    	  formal_part_ = Right((selected_name592,null))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, formal_part_StartIndex) }
        }
        return formal_part_
    }
    // $ANTLR end "formal_part"


    // $ANTLR start "actual_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1464:1: actual_part returns [Either[Expression,Identifier] actual_part_ ] : ( ({...}? => INERTIAL )? expression | OPEN );
    @throws(classOf[RecognitionException])
    final def actual_part(): Either[Expression,Identifier] = {
        var actual_part_ : Either[Expression,Identifier] = null
        val actual_part_StartIndex = input.index()
        var OPEN594: Token = null
        var expression593: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return actual_part_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1464:68: ( ({...}? => INERTIAL )? expression | OPEN )
            val alt336 = {
            val LA336_0 = input.LA(1)

            if ( (LA336_0==INERTIAL) && ((vhdl2008))) 1
            else if ( ((LA336_0>=PLUS && LA336_0<=MINUS)||LA336_0==BASIC_IDENTIFIER||LA336_0==EXTENDED_IDENTIFIER||LA336_0==STRING_LITERAL) ) 1
            else if ( (LA336_0==DLT) && ((vhdl2008))) 1
            else if ( (LA336_0==ABS||LA336_0==NEW||(LA336_0>=NOT && LA336_0<=NULL)||LA336_0==LPAREN||(LA336_0>=BASED_LITERAL && LA336_0<=REAL_LITERAL)||LA336_0==BIT_STRING_LITERAL||LA336_0==CHARACTER_LITERAL) ) 1
            else if ( (LA336_0==AND||LA336_0==NAND||LA336_0==NOR||LA336_0==OR||(LA336_0>=XNOR && LA336_0<=XOR)||LA336_0==CONDITION_OPERATOR) && ((vhdl2008))) 1
            else if ( (LA336_0==OPEN) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return actual_part_}
                val nvae = new NoViableAltException("", 336, 0, input)

                throw nvae
            }
            }
            alt336 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1466:2: ({...}? => INERTIAL )? expression
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1466:2: ({...}? => INERTIAL )?
                    	val alt335 = {
                    	val LA335_0 = input.LA(1)

                    	if ( (LA335_0==INERTIAL) && ((vhdl2008))) 1
                    	else -1
                    	}
                    	alt335 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1466:3: {...}? => INERTIAL
                    	        	if ( !((vhdl2008)) ) {
                    	        	    if (state.backtracking>0) {state.failed=true; return actual_part_}
                    	        	    throw new FailedPredicateException(input, "actual_part", "vhdl2008")
                    	        	}
                    	        	`match`(input,INERTIAL,FOLLOW_INERTIAL_in_actual_part9070)
                    	        	if (state.failed) return actual_part_


                    	    case _ =>
                    	}

                    	pushFollow(FOLLOW_expression_in_actual_part9074)
                    	expression593=expression()

                    	state._fsp-=1
                    	if (state.failed) return actual_part_
                    	if ( state.backtracking==0 ) {
                    	  actual_part_ = Left(expression593)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1468:4: OPEN
                    	OPEN594=`match`(input,OPEN,FOLLOW_OPEN_in_actual_part9084).asInstanceOf[Token]
                    	if (state.failed) return actual_part_
                    	if ( state.backtracking==0 ) {
                    	  actual_part_ = Right(toIdentifier(OPEN594))
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, actual_part_StartIndex) }
        }
        return actual_part_
    }
    // $ANTLR end "actual_part"


    // $ANTLR start "condition"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1471:1: condition returns [Expression con] : expression ;
    @throws(classOf[RecognitionException])
    final def condition(): Expression = {
        var con : Expression = null
        val condition_StartIndex = input.index()
        var expression595: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return con }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1471:36: ( expression )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1472:2: expression
            	pushFollow(FOLLOW_expression_in_condition9103)
            	expression595=expression()

            	state._fsp-=1
            	if (state.failed) return con
            	if ( state.backtracking==0 ) {
            	  con=expression595
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, condition_StartIndex) }
        }
        return con
    }
    // $ANTLR end "condition"


    // $ANTLR start "expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1474:1: expression returns [Expression expr] : ( logical_expression | {...}? => CONDITION_OPERATOR primary );
    @throws(classOf[RecognitionException])
    final def expression(): Expression = {
        var expr : Expression = null
        val expression_StartIndex = input.index()
        var CONDITION_OPERATOR597: Token = null
        var logical_expression596: Expression = null
        var primary598: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return expr }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1474:37: ( logical_expression | {...}? => CONDITION_OPERATOR primary )
            val alt337 = {
            val LA337_0 = input.LA(1)

            if ( ((LA337_0>=PLUS && LA337_0<=MINUS)||LA337_0==BASIC_IDENTIFIER||LA337_0==EXTENDED_IDENTIFIER||LA337_0==STRING_LITERAL) ) 1
            else if ( (LA337_0==DLT) && ((vhdl2008))) 1
            else if ( (LA337_0==ABS||LA337_0==NEW||(LA337_0>=NOT && LA337_0<=NULL)||LA337_0==LPAREN||(LA337_0>=BASED_LITERAL && LA337_0<=REAL_LITERAL)||LA337_0==BIT_STRING_LITERAL||LA337_0==CHARACTER_LITERAL) ) 1
            else if ( (LA337_0==AND||LA337_0==NAND||LA337_0==NOR||LA337_0==OR||(LA337_0>=XNOR && LA337_0<=XOR)) && ((vhdl2008))) 1
            else if ( (LA337_0==CONDITION_OPERATOR) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return expr}
                val nvae = new NoViableAltException("", 337, 0, input)

                throw nvae
            }
            }
            alt337 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1475:3: logical_expression
                    	pushFollow(FOLLOW_logical_expression_in_expression9120)
                    	logical_expression596=logical_expression()

                    	state._fsp-=1
                    	if (state.failed) return expr
                    	if ( state.backtracking==0 ) {
                    	  expr=logical_expression596
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1476:5: {...}? => CONDITION_OPERATOR primary
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return expr}
                    	    throw new FailedPredicateException(input, "expression", "vhdl2008")
                    	}
                    	CONDITION_OPERATOR597=`match`(input,CONDITION_OPERATOR,FOLLOW_CONDITION_OPERATOR_in_expression9131).asInstanceOf[Token]
                    	if (state.failed) return expr
                    	pushFollow(FOLLOW_primary_in_expression9133)
                    	primary598=primary()

                    	state._fsp-=1
                    	if (state.failed) return expr
                    	if ( state.backtracking==0 ) {
                    	  expr=new ConditionExpression(CONDITION_OPERATOR597,primary598)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, expression_StartIndex) }
        }
        return expr
    }
    // $ANTLR end "expression"


    // $ANTLR start "logical_expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1478:1: logical_expression returns [Expression expr] : r1= relation ( NAND r2= relation | NOR r2= relation | ( logical_operator r2= relation )* ) ;
    @throws(classOf[RecognitionException])
    final def logical_expression(): Expression = {
        var expr : Expression = null
        val logical_expression_StartIndex = input.index()
        var NAND599: Token = null
        var NOR600: Token = null
        var r1: Expression = null
        var r2: Expression = null
        var logical_operator601: Parser.logical_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return expr }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1479:44: (r1= relation ( NAND r2= relation | NOR r2= relation | ( logical_operator r2= relation )* ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1480:2: r1= relation ( NAND r2= relation | NOR r2= relation | ( logical_operator r2= relation )* )
            	pushFollow(FOLLOW_relation_in_logical_expression9154)
            	r1=relation()

            	state._fsp-=1
            	if (state.failed) return expr
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1480:14: ( NAND r2= relation | NOR r2= relation | ( logical_operator r2= relation )* )
            	val alt339 = input.LA(1) match {
            	case NAND => 1
            	case NOR => 2
            	case EOF | AFTER | AND | BUS | ELSE | FOR | GENERATE | INERTIAL | IS | LOOP | ON | OPEN | OR | REGISTER | REPORT | SELECT | SEVERITY | THEN | USE | WHEN | XNOR | XOR | VAR_ASSIGN | COMMA | SEMICOLON | RPAREN | BAR | ARROW | DGT | ACROSS | THROUGH | SPECTRUM | NOISE => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return expr}
            	    val nvae = new NoViableAltException("", 339, 0, input)

            	    throw nvae
            	}

            	alt339 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1481:5: NAND r2= relation
            	        	NAND599=`match`(input,NAND,FOLLOW_NAND_in_logical_expression9166).asInstanceOf[Token]
            	        	if (state.failed) return expr
            	        	pushFollow(FOLLOW_relation_in_logical_expression9170)
            	        	r2=relation()

            	        	state._fsp-=1
            	        	if (state.failed) return expr
            	        	if ( state.backtracking==0 ) {
            	        	  expr=new LogicalExpression(NAND599,r1,LogicalExpression.Operator.NAND,r2)
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1482:7: NOR r2= relation
            	        	NOR600=`match`(input,NOR,FOLLOW_NOR_in_logical_expression9180).asInstanceOf[Token]
            	        	if (state.failed) return expr
            	        	pushFollow(FOLLOW_relation_in_logical_expression9184)
            	        	r2=relation()

            	        	state._fsp-=1
            	        	if (state.failed) return expr
            	        	if ( state.backtracking==0 ) {
            	        	  expr=new LogicalExpression(NOR600,r1,LogicalExpression.Operator.NOR,r2)
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1483:7: ( logical_operator r2= relation )*
            	        	if ( state.backtracking==0 ) {
            	        	  expr=r1
            	        	}
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1483:23: ( logical_operator r2= relation )*
            	        	var loop338_quitflag = false
            	        	while (!loop338_quitflag) {
            	        	    val alt338 = {
            	        	val LA338_0 = input.LA(1)

            	        	if ( (LA338_0==AND||LA338_0==OR||(LA338_0>=XNOR && LA338_0<=XOR)) ) 1

            	        	else -1
            	        	}
            	        	    alt338 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1483:24: logical_operator r2= relation
            	        		    	pushFollow(FOLLOW_logical_operator_in_logical_expression9197)
            	        		    	logical_operator601=logical_operator()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return expr
            	        		    	pushFollow(FOLLOW_relation_in_logical_expression9201)
            	        		    	r2=relation()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return expr
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  expr=new LogicalExpression((if (logical_operator601!=null) logical_operator601.pos else null),expr,(if (logical_operator601!=null) logical_operator601.logOp else null),r2)
            	        		    	}


            	        		case _ => loop338_quitflag = true
            	        	    }
            	        	}



            	    case _ =>
            	}




            if ( state.backtracking==0 ) {
              if (expr==null) expr=NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, logical_expression_StartIndex) }
        }
        return expr
    }
    // $ANTLR end "logical_expression"


    // $ANTLR start "logical_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1486:1: logical_operator returns [LogicalExpression.Operator.Value logOp,Position pos] : ( AND | OR | XOR | XNOR );
    @throws(classOf[RecognitionException])
    final def logical_operator(): Parser.logical_operator_return = {
        val retval = new Parser.logical_operator_return()
        retval.start = input.LT(1)
        val logical_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1489:3: ( AND | OR | XOR | XNOR )
            val alt340 = input.LA(1) match {
            case AND => 1
            case OR => 2
            case XOR => 3
            case XNOR => 4
            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 340, 0, input)

                throw nvae
            }

            alt340 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1490:2: AND
                    	`match`(input,AND,FOLLOW_AND_in_logical_operator9225)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.AND
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1491:4: OR
                    	`match`(input,OR,FOLLOW_OR_in_logical_operator9232)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.OR
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1492:4: XOR
                    	`match`(input,XOR,FOLLOW_XOR_in_logical_operator9239)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.XOR
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1493:4: XNOR
                    	`match`(input,XNOR,FOLLOW_XNOR_in_logical_operator9246)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.XNOR
                    	}


                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, logical_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "logical_operator"


    // $ANTLR start "relation"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1497:1: relation returns [Expression rel] : s1= shift_expression ( relational_operator s2= shift_expression )? ;
    @throws(classOf[RecognitionException])
    final def relation(): Expression = {
        var rel : Expression = null
        val relation_StartIndex = input.index()
        var s1: Expression = null
        var s2: Expression = null
        var relational_operator602: Parser.relational_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return rel }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1498:43: (s1= shift_expression ( relational_operator s2= shift_expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1499:2: s1= shift_expression ( relational_operator s2= shift_expression )?
            	pushFollow(FOLLOW_shift_expression_in_relation9271)
            	s1=shift_expression()

            	state._fsp-=1
            	if (state.failed) return rel
            	if ( state.backtracking==0 ) {
            	  rel=s1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1500:2: ( relational_operator s2= shift_expression )?
            	val alt341 = {
            	val LA341_0 = input.LA(1)

            	if ( ((LA341_0>=EQ && LA341_0<=GEQ)) ) 1
            	else if ( ((LA341_0>=MEQ && LA341_0<=MGEQ)) && ((vhdl2008))) 1
            	else -1
            	}
            	alt341 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1500:3: relational_operator s2= shift_expression
            	        	pushFollow(FOLLOW_relational_operator_in_relation9277)
            	        	relational_operator602=relational_operator()

            	        	state._fsp-=1
            	        	if (state.failed) return rel
            	        	pushFollow(FOLLOW_shift_expression_in_relation9281)
            	        	s2=shift_expression()

            	        	state._fsp-=1
            	        	if (state.failed) return rel
            	        	if ( state.backtracking==0 ) {
            	        	  rel=new Relation((if (relational_operator602!=null) relational_operator602.pos else null),s1,(if (relational_operator602!=null) relational_operator602.relOp else null),s2)
            	        	}


            	    case _ =>
            	}




            if ( state.backtracking==0 ) {
              if (rel==null) rel=NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, relation_StartIndex) }
        }
        return rel
    }
    // $ANTLR end "relation"


    // $ANTLR start "relational_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1502:1: relational_operator returns [Relation.Operator.Value relOp,Position pos] : ( EQ | NEQ | LT | LEQ | GT | GEQ | {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ ) );
    @throws(classOf[RecognitionException])
    final def relational_operator(): Parser.relational_operator_return = {
        val retval = new Parser.relational_operator_return()
        retval.start = input.LT(1)
        val relational_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1505:3: ( EQ | NEQ | LT | LEQ | GT | GEQ | {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ ) )
            val alt343 = {
            val LA343_0 = input.LA(1)

            if ( (LA343_0==EQ) ) 1
            else if ( (LA343_0==NEQ) ) 2
            else if ( (LA343_0==LT) ) 3
            else if ( (LA343_0==LEQ) ) 4
            else if ( (LA343_0==GT) ) 5
            else if ( (LA343_0==GEQ) ) 6
            else if ( ((LA343_0>=MEQ && LA343_0<=MGEQ)) && ((vhdl2008))) 7
            else {
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 343, 0, input)

                throw nvae
            }
            }
            alt343 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1506:2: EQ
                    	`match`(input,EQ,FOLLOW_EQ_in_relational_operator9302)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.EQ
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1507:4: NEQ
                    	`match`(input,NEQ,FOLLOW_NEQ_in_relational_operator9309)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.NEQ
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1508:4: LT
                    	`match`(input,LT,FOLLOW_LT_in_relational_operator9316)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.LT
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1509:4: LEQ
                    	`match`(input,LEQ,FOLLOW_LEQ_in_relational_operator9323)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.LEQ
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1510:4: GT
                    	`match`(input,GT,FOLLOW_GT_in_relational_operator9330)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.GT
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1511:4: GEQ
                    	`match`(input,GEQ,FOLLOW_GEQ_in_relational_operator9337)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.GEQ
                    	}

                case 7 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1512:4: {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return retval}
                    	    throw new FailedPredicateException(input, "relational_operator", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1512:18: ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ )
                    	val alt342 = input.LA(1) match {
                    	case MEQ => 1
                    	case MNEQ => 2
                    	case MLT => 3
                    	case MLEQ => 4
                    	case MGT => 5
                    	case MGEQ => 6
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return retval}
                    	    val nvae = new NoViableAltException("", 342, 0, input)

                    	    throw nvae
                    	}

                    	alt342 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1512:19: MEQ
                    	        	`match`(input,MEQ,FOLLOW_MEQ_in_relational_operator9348)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MEQ
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1513:6: MNEQ
                    	        	`match`(input,MNEQ,FOLLOW_MNEQ_in_relational_operator9357)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MNEQ
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1514:6: MLT
                    	        	`match`(input,MLT,FOLLOW_MLT_in_relational_operator9366)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MLT
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1515:6: MLEQ
                    	        	`match`(input,MLEQ,FOLLOW_MLEQ_in_relational_operator9375)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MLEQ
                    	        	}

                    	    case 5 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1516:6: MGT
                    	        	`match`(input,MGT,FOLLOW_MGT_in_relational_operator9384)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MGT
                    	        	}

                    	    case 6 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1517:6: MGEQ
                    	        	`match`(input,MGEQ,FOLLOW_MGEQ_in_relational_operator9393)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.relOp=Relation.Operator.MGEQ
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, relational_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "relational_operator"


    // $ANTLR start "shift_expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1520:1: shift_expression returns [Expression shiftExpr] : s1= simple_expression ( shift_operator s2= simple_expression )? ;
    @throws(classOf[RecognitionException])
    final def shift_expression(): Expression = {
        var shiftExpr : Expression = null
        val shift_expression_StartIndex = input.index()
        var s1: Expression = null
        var s2: Expression = null
        var shift_operator603: Parser.shift_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return shiftExpr }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1521:55: (s1= simple_expression ( shift_operator s2= simple_expression )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1522:2: s1= simple_expression ( shift_operator s2= simple_expression )?
            	pushFollow(FOLLOW_simple_expression_in_shift_expression9420)
            	s1=simple_expression()

            	state._fsp-=1
            	if (state.failed) return shiftExpr
            	if ( state.backtracking==0 ) {
            	   shiftExpr=s1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1523:2: ( shift_operator s2= simple_expression )?
            	val alt344 = {
            	val LA344_0 = input.LA(1)

            	if ( ((LA344_0>=ROL && LA344_0<=ROR)||(LA344_0>=SLA && LA344_0<=SRL)) ) 1
            	else -1
            	}
            	alt344 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1523:3: shift_operator s2= simple_expression
            	        	pushFollow(FOLLOW_shift_operator_in_shift_expression9426)
            	        	shift_operator603=shift_operator()

            	        	state._fsp-=1
            	        	if (state.failed) return shiftExpr
            	        	pushFollow(FOLLOW_simple_expression_in_shift_expression9430)
            	        	s2=simple_expression()

            	        	state._fsp-=1
            	        	if (state.failed) return shiftExpr
            	        	if ( state.backtracking==0 ) {
            	        	  shiftExpr=new ShiftExpression((if (shift_operator603!=null) shift_operator603.pos else null),s1,(if (shift_operator603!=null) shift_operator603.shiftOp else null),s2)
            	        	}


            	    case _ =>
            	}




            if ( state.backtracking==0 ) {
              if (shiftExpr==null) shiftExpr=NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, shift_expression_StartIndex) }
        }
        return shiftExpr
    }
    // $ANTLR end "shift_expression"


    // $ANTLR start "shift_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1525:1: shift_operator returns [ShiftExpression.Operator.Value shiftOp,Position pos] : ( SLL | SRL | SLA | SRA | ROL | ROR );
    @throws(classOf[RecognitionException])
    final def shift_operator(): Parser.shift_operator_return = {
        val retval = new Parser.shift_operator_return()
        retval.start = input.LT(1)
        val shift_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1528:3: ( SLL | SRL | SLA | SRA | ROL | ROR )
            val alt345 = input.LA(1) match {
            case SLL => 1
            case SRL => 2
            case SLA => 3
            case SRA => 4
            case ROL => 5
            case ROR => 6
            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 345, 0, input)

                throw nvae
            }

            alt345 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1529:2: SLL
                    	`match`(input,SLL,FOLLOW_SLL_in_shift_operator9451)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SLL
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1530:4: SRL
                    	`match`(input,SRL,FOLLOW_SRL_in_shift_operator9458)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SRL
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1531:4: SLA
                    	`match`(input,SLA,FOLLOW_SLA_in_shift_operator9465)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SLA
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1532:4: SRA
                    	`match`(input,SRA,FOLLOW_SRA_in_shift_operator9472)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SRA
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1533:4: ROL
                    	`match`(input,ROL,FOLLOW_ROL_in_shift_operator9479)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.ROL
                    	}

                case 6 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1534:4: ROR
                    	`match`(input,ROR,FOLLOW_ROR_in_shift_operator9486)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.ROR
                    	}


                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, shift_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "shift_operator"


    // $ANTLR start "simple_expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1536:1: simple_expression returns [Expression simpleExpr] : (s= sign )? t1= term (op= adding_operator t2= term )* ;
    @throws(classOf[RecognitionException])
    final def simple_expression(): Expression = {
        var simpleExpr : Expression = null
        val simple_expression_StartIndex = input.index()
        var s: Parser.sign_return = null
        var t1: Expression = null
        var op: Parser.adding_operator_return = null
        var t2: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return simpleExpr }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1537:57: ( (s= sign )? t1= term (op= adding_operator t2= term )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1538:2: (s= sign )? t1= term (op= adding_operator t2= term )*
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1538:3: (s= sign )?
            	val alt346 = {
            	val LA346_0 = input.LA(1)

            	if ( ((LA346_0>=PLUS && LA346_0<=MINUS)) ) 1
            	else -1
            	}
            	alt346 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1538:3: s= sign
            	        	pushFollow(FOLLOW_sign_in_simple_expression9509)
            	        	s=sign()

            	        	state._fsp-=1
            	        	if (state.failed) return simpleExpr


            	    case _ =>
            	}

            	pushFollow(FOLLOW_term_in_simple_expression9514)
            	t1=term()

            	state._fsp-=1
            	if (state.failed) return simpleExpr
            	if ( state.backtracking==0 ) {
            	  simpleExpr=if (s!=null) new SimpleExpression((if (s!=null) s.pos else null),(if (s!=null) s.signOp else null),t1,None,None) else t1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1540:2: (op= adding_operator t2= term )*
            	var loop347_quitflag = false
            	while (!loop347_quitflag) {
            	    val alt347 = {
            	val LA347_0 = input.LA(1)

            	if ( (LA347_0==AMPERSAND||(LA347_0>=PLUS && LA347_0<=MINUS)) ) 1

            	else -1
            	}
            	    alt347 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1540:3: op= adding_operator t2= term
            		    	pushFollow(FOLLOW_adding_operator_in_simple_expression9523)
            		    	op=adding_operator()

            		    	state._fsp-=1
            		    	if (state.failed) return simpleExpr
            		    	pushFollow(FOLLOW_term_in_simple_expression9527)
            		    	t2=term()

            		    	state._fsp-=1
            		    	if (state.failed) return simpleExpr
            		    	if ( state.backtracking==0 ) {
            		    	  simpleExpr=new SimpleExpression((if (op!=null) op.pos else null),None,simpleExpr,(if (op!=null) op.addOp else null),t2)
            		    	}


            		case _ => loop347_quitflag = true
            	    }
            	}




            if ( state.backtracking==0 ) {
              if (simpleExpr==null) simpleExpr=NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, simple_expression_StartIndex) }
        }
        return simpleExpr
    }
    // $ANTLR end "simple_expression"


    // $ANTLR start "sign"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1542:1: sign returns [SimpleExpression.SignOperator.Value signOp,Position pos] : ( PLUS | MINUS );
    @throws(classOf[RecognitionException])
    final def sign(): Parser.sign_return = {
        val retval = new Parser.sign_return()
        retval.start = input.LT(1)
        val sign_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1545:3: ( PLUS | MINUS )
            val alt348 = {
            val LA348_0 = input.LA(1)

            if ( (LA348_0==PLUS) ) 1
            else if ( (LA348_0==MINUS) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 348, 0, input)

                throw nvae
            }
            }
            alt348 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1546:2: PLUS
                    	`match`(input,PLUS,FOLLOW_PLUS_in_sign9548)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.signOp=SimpleExpression.SignOperator.PLUS
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1547:4: MINUS
                    	`match`(input,MINUS,FOLLOW_MINUS_in_sign9555)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.signOp=SimpleExpression.SignOperator.MINUS
                    	}


                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, sign_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "sign"


    // $ANTLR start "adding_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1549:1: adding_operator returns [SimpleExpression.AddOperator.Value addOp,Position pos] : ( PLUS | MINUS | AMPERSAND );
    @throws(classOf[RecognitionException])
    final def adding_operator(): Parser.adding_operator_return = {
        val retval = new Parser.adding_operator_return()
        retval.start = input.LT(1)
        val adding_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1552:3: ( PLUS | MINUS | AMPERSAND )
            val alt349 = input.LA(1) match {
            case PLUS => 1
            case MINUS => 2
            case AMPERSAND => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 349, 0, input)

                throw nvae
            }

            alt349 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1553:2: PLUS
                    	`match`(input,PLUS,FOLLOW_PLUS_in_adding_operator9578)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.PLUS
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1554:4: MINUS
                    	`match`(input,MINUS,FOLLOW_MINUS_in_adding_operator9585)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.MINUS
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1555:4: AMPERSAND
                    	`match`(input,AMPERSAND,FOLLOW_AMPERSAND_in_adding_operator9592)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.CONCATENATION
                    	}


                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, adding_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "adding_operator"


    // $ANTLR start "multiplying_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1557:1: multiplying_operator returns [Term.Operator.Value mulOp,Position pos] : ( MUL | DIV | MOD | REM );
    @throws(classOf[RecognitionException])
    final def multiplying_operator(): Parser.multiplying_operator_return = {
        val retval = new Parser.multiplying_operator_return()
        retval.start = input.LT(1)
        val multiplying_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1560:3: ( MUL | DIV | MOD | REM )
            val alt350 = input.LA(1) match {
            case MUL => 1
            case DIV => 2
            case MOD => 3
            case REM => 4
            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 350, 0, input)

                throw nvae
            }

            alt350 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1561:2: MUL
                    	`match`(input,MUL,FOLLOW_MUL_in_multiplying_operator9611)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.MUL
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1562:4: DIV
                    	`match`(input,DIV,FOLLOW_DIV_in_multiplying_operator9618)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.DIV
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1563:4: MOD
                    	`match`(input,MOD,FOLLOW_MOD_in_multiplying_operator9625)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.MOD
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1564:4: REM
                    	`match`(input,REM,FOLLOW_REM_in_multiplying_operator9632)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.REM
                    	}


                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, multiplying_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "multiplying_operator"


    // $ANTLR start "term"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1566:1: term returns [Expression term_] : f1= factor ( multiplying_operator f2= factor )* ;
    @throws(classOf[RecognitionException])
    final def term(): Expression = {
        var term_ : Expression = null
        val term_StartIndex = input.index()
        var f1: Expression = null
        var f2: Expression = null
        var multiplying_operator604: Parser.multiplying_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return term_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1567:49: (f1= factor ( multiplying_operator f2= factor )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1568:2: f1= factor ( multiplying_operator f2= factor )*
            	pushFollow(FOLLOW_factor_in_term9652)
            	f1=factor()

            	state._fsp-=1
            	if (state.failed) return term_
            	if ( state.backtracking==0 ) {
            	  term_ = f1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1569:2: ( multiplying_operator f2= factor )*
            	var loop351_quitflag = false
            	while (!loop351_quitflag) {
            	    val alt351 = {
            	val LA351_0 = input.LA(1)

            	if ( (LA351_0==MOD||LA351_0==REM||(LA351_0>=MUL && LA351_0<=DIV)) ) 1

            	else -1
            	}
            	    alt351 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1569:3: multiplying_operator f2= factor
            		    	pushFollow(FOLLOW_multiplying_operator_in_term9659)
            		    	multiplying_operator604=multiplying_operator()

            		    	state._fsp-=1
            		    	if (state.failed) return term_
            		    	pushFollow(FOLLOW_factor_in_term9663)
            		    	f2=factor()

            		    	state._fsp-=1
            		    	if (state.failed) return term_
            		    	if ( state.backtracking==0 ) {
            		    	  term_ = new Term((if (multiplying_operator604!=null) multiplying_operator604.pos else null),term_,(if (multiplying_operator604!=null) multiplying_operator604.mulOp else null),f2)
            		    	}


            		case _ => loop351_quitflag = true
            	    }
            	}




            if ( state.backtracking==0 ) {
              if (term_ ==null) term_ = NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, term_StartIndex) }
        }
        return term_
    }
    // $ANTLR end "term"


    // $ANTLR start "factor_operator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1571:1: factor_operator returns [Factor.Operator.Value factorOp,Position pos] : ( ABS | NOT | {...}? => ( NAND | NOR | AND | OR | XOR | XNOR ) );
    @throws(classOf[RecognitionException])
    final def factor_operator(): Parser.factor_operator_return = {
        val retval = new Parser.factor_operator_return()
        retval.start = input.LT(1)
        val factor_operator_StartIndex = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1574:3: ( ABS | NOT | {...}? => ( NAND | NOR | AND | OR | XOR | XNOR ) )
            val alt353 = {
            val LA353_0 = input.LA(1)

            if ( (LA353_0==ABS) ) 1
            else if ( (LA353_0==NOT) ) 2
            else if ( (LA353_0==AND||LA353_0==NAND||LA353_0==NOR||LA353_0==OR||(LA353_0>=XNOR && LA353_0<=XOR)) && ((vhdl2008))) 3
            else {
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 353, 0, input)

                throw nvae
            }
            }
            alt353 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1575:2: ABS
                    	`match`(input,ABS,FOLLOW_ABS_in_factor_operator9685)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.factorOp=Factor.Operator.ABS
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1576:4: NOT
                    	`match`(input,NOT,FOLLOW_NOT_in_factor_operator9692)
                    	if (state.failed) return retval
                    	if ( state.backtracking==0 ) {
                    	  retval.factorOp=Factor.Operator.NOT
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1577:4: {...}? => ( NAND | NOR | AND | OR | XOR | XNOR )
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return retval}
                    	    throw new FailedPredicateException(input, "factor_operator", "vhdl2008")
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1577:17: ( NAND | NOR | AND | OR | XOR | XNOR )
                    	val alt352 = input.LA(1) match {
                    	case NAND => 1
                    	case NOR => 2
                    	case AND => 3
                    	case OR => 4
                    	case XOR => 5
                    	case XNOR => 6
                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return retval}
                    	    val nvae = new NoViableAltException("", 352, 0, input)

                    	    throw nvae
                    	}

                    	alt352 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1577:18: NAND
                    	        	`match`(input,NAND,FOLLOW_NAND_in_factor_operator9702)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.NAND
                    	        	}

                    	    case 2 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1578:6: NOR
                    	        	`match`(input,NOR,FOLLOW_NOR_in_factor_operator9711)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.NOR
                    	        	}

                    	    case 3 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1579:6: AND
                    	        	`match`(input,AND,FOLLOW_AND_in_factor_operator9720)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.AND
                    	        	}

                    	    case 4 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1580:6: OR
                    	        	`match`(input,OR,FOLLOW_OR_in_factor_operator9729)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.OR
                    	        	}

                    	    case 5 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1581:6: XOR
                    	        	`match`(input,XOR,FOLLOW_XOR_in_factor_operator9738)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.XOR
                    	        	}

                    	    case 6 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1582:6: XNOR
                    	        	`match`(input,XNOR,FOLLOW_XNOR_in_factor_operator9747)
                    	        	if (state.failed) return retval
                    	        	if ( state.backtracking==0 ) {
                    	        	  retval.factorOp=Factor.Operator.XNOR
                    	        	}


                    	    case _ =>
                    	}



                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, factor_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "factor_operator"


    // $ANTLR start "factor"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1585:1: factor returns [Expression factor_] : (p1= primary ( DOUBLESTAR p2= primary )? | factor_operator primary );
    @throws(classOf[RecognitionException])
    final def factor(): Expression = {
        var factor_ : Expression = null
        val factor_StartIndex = input.index()
        var DOUBLESTAR605: Token = null
        var p1: Expression = null
        var p2: Expression = null
        var factor_operator606: Parser.factor_operator_return = null
        var primary607: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return factor_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1586:53: (p1= primary ( DOUBLESTAR p2= primary )? | factor_operator primary )
            val alt355 = {
            val LA355_0 = input.LA(1)

            if ( (LA355_0==BASIC_IDENTIFIER||LA355_0==EXTENDED_IDENTIFIER||LA355_0==STRING_LITERAL) ) 1
            else if ( (LA355_0==DLT) && ((vhdl2008))) 1
            else if ( (LA355_0==NEW||LA355_0==NULL||LA355_0==LPAREN||(LA355_0>=BASED_LITERAL && LA355_0<=REAL_LITERAL)||LA355_0==BIT_STRING_LITERAL||LA355_0==CHARACTER_LITERAL) ) 1
            else if ( (LA355_0==ABS||LA355_0==NOT) ) 2
            else if ( (LA355_0==AND||LA355_0==NAND||LA355_0==NOR||LA355_0==OR||(LA355_0>=XNOR && LA355_0<=XOR)) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return factor_}
                val nvae = new NoViableAltException("", 355, 0, input)

                throw nvae
            }
            }
            alt355 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1587:2: p1= primary ( DOUBLESTAR p2= primary )?
                    	pushFollow(FOLLOW_primary_in_factor9773)
                    	p1=primary()

                    	state._fsp-=1
                    	if (state.failed) return factor_
                    	if ( state.backtracking==0 ) {
                    	  factor_ = p1
                    	}
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1587:32: ( DOUBLESTAR p2= primary )?
                    	val alt354 = {
                    	val LA354_0 = input.LA(1)

                    	if ( (LA354_0==DOUBLESTAR) ) 1
                    	else -1
                    	}
                    	alt354 match {
                    	    case 1 =>
                    	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1587:33: DOUBLESTAR p2= primary
                    	        	DOUBLESTAR605=`match`(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_factor9776).asInstanceOf[Token]
                    	        	if (state.failed) return factor_
                    	        	pushFollow(FOLLOW_primary_in_factor9780)
                    	        	p2=primary()

                    	        	state._fsp-=1
                    	        	if (state.failed) return factor_
                    	        	if ( state.backtracking==0 ) {
                    	        	  factor_ = new Factor(DOUBLESTAR605,p1,Factor.Operator.POW,p2)
                    	        	}


                    	    case _ =>
                    	}


                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1588:4: factor_operator primary
                    	pushFollow(FOLLOW_factor_operator_in_factor9789)
                    	factor_operator606=factor_operator()

                    	state._fsp-=1
                    	if (state.failed) return factor_
                    	pushFollow(FOLLOW_primary_in_factor9791)
                    	primary607=primary()

                    	state._fsp-=1
                    	if (state.failed) return factor_
                    	if ( state.backtracking==0 ) {
                    	  factor_ = new Factor((if (factor_operator606!=null) factor_operator606.pos else null),primary607,(if (factor_operator606!=null) factor_operator606.factorOp else null))
                    	}


                case _ =>
            }
            if ( state.backtracking==0 ) {
              if (factor_ ==null) factor_ = NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, factor_StartIndex) }
        }
        return factor_
    }
    // $ANTLR end "factor"


    // $ANTLR start "primary"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1590:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );
    @throws(classOf[RecognitionException])
    final def primary(): Expression = {
        var obj : Expression = null
        val primary_StartIndex = input.index()
        var selected_name608: SelectedName = null
        var qualified_expression609: QualifiedExpression = null
        var name610: Name = null
        var literal611: Expression = null
        var allocator612: Expression = null
        var aggregate613: Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return obj }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1591:42: ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate )
            val alt356 = dfa356.predict(input)
            alt356 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1592:2: selected_name qualified_expression[$selected_name.name_]
                    	pushFollow(FOLLOW_selected_name_in_primary9809)
                    	selected_name608=selected_name()

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	pushFollow(FOLLOW_qualified_expression_in_primary9811)
                    	qualified_expression609=qualified_expression(selected_name608)

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	if ( state.backtracking==0 ) {
                    	  obj=qualified_expression609
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1593:4: name
                    	pushFollow(FOLLOW_name_in_primary9819)
                    	name610=name()

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	if ( state.backtracking==0 ) {
                    	  obj=name610
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1594:4: literal
                    	pushFollow(FOLLOW_literal_in_primary9826)
                    	literal611=literal()

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	if ( state.backtracking==0 ) {
                    	  obj=literal611
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1595:4: allocator
                    	pushFollow(FOLLOW_allocator_in_primary9834)
                    	allocator612=allocator()

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	if ( state.backtracking==0 ) {
                    	  obj=allocator612
                    	}

                case 5 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1596:4: aggregate
                    	pushFollow(FOLLOW_aggregate_in_primary9841)
                    	aggregate613=aggregate()

                    	state._fsp-=1
                    	if (state.failed) return obj
                    	if ( state.backtracking==0 ) {
                    	  obj=aggregate613
                    	}


                case _ =>
            }
            if ( state.backtracking==0 ) {
              if (obj==null) obj=NoExpression
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, primary_StartIndex) }
        }
        return obj
    }
    // $ANTLR end "primary"


    // $ANTLR start "allocator"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1598:1: allocator returns [Expression newExpression] : NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) ;
    @throws(classOf[RecognitionException])
    final def allocator(): Expression = {
        var newExpression : Expression = null
        val allocator_StartIndex = input.index()
        var NEW615: Token = null
        var selected_name614: SelectedName = null
        var qualified_expression616: QualifiedExpression = null
        var index_constraint617: Seq[DiscreteRange] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return newExpression }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1598:46: ( NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1599:2: NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
            	NEW615=`match`(input,NEW,FOLLOW_NEW_in_allocator9857).asInstanceOf[Token]
            	if (state.failed) return newExpression
            	pushFollow(FOLLOW_selected_name_in_allocator9859)
            	selected_name614=selected_name()

            	state._fsp-=1
            	if (state.failed) return newExpression
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1599:20: ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
            	val alt358 = {
            	val LA358_0 = input.LA(1)

            	if ( (LA358_0==APOSTROPHE) ) 1
            	else if ( (LA358_0==EOF||LA358_0==AFTER||LA358_0==AND||LA358_0==BUS||(LA358_0>=DOWNTO && LA358_0<=ELSE)||LA358_0==FOR||LA358_0==GENERATE||LA358_0==INERTIAL||LA358_0==IS||LA358_0==LOOP||(LA358_0>=MOD && LA358_0<=NAND)||LA358_0==NOR||(LA358_0>=ON && LA358_0<=OR)||LA358_0==REGISTER||(LA358_0>=REM && LA358_0<=REPORT)||(LA358_0>=ROL && LA358_0<=SEVERITY)||(LA358_0>=SLA && LA358_0<=SRL)||(LA358_0>=THEN && LA358_0<=TO)||LA358_0==UNITS||LA358_0==USE||LA358_0==WHEN||(LA358_0>=XNOR && LA358_0<=VAR_ASSIGN)||(LA358_0>=COMMA && LA358_0<=RPAREN)||(LA358_0>=AMPERSAND && LA358_0<=ARROW)||LA358_0==DGT||(LA358_0>=DOUBLESTAR && LA358_0<=MGEQ)||(LA358_0>=TOLERANCE && LA358_0<=NOISE)) ) 2
            	else {
            	    if (state.backtracking>0) {state.failed=true; return newExpression}
            	    val nvae = new NoViableAltException("", 358, 0, input)

            	    throw nvae
            	}
            	}
            	alt358 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1600:3: qualified_expression[$selected_name.name_]
            	        	pushFollow(FOLLOW_qualified_expression_in_allocator9865)
            	        	qualified_expression616=qualified_expression(selected_name614)

            	        	state._fsp-=1
            	        	if (state.failed) return newExpression
            	        	if ( state.backtracking==0 ) {
            	        	  newExpression=new NewExpression(NEW615,Left(qualified_expression616))
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1601:6: ( index_constraint )?
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1601:6: ( index_constraint )?
            	        	val alt357 = {
            	        	val LA357_0 = input.LA(1)

            	        	if ( (LA357_0==LPAREN) ) 1
            	        	else -1
            	        	}
            	        	alt357 match {
            	        	    case 1 =>
            	        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1601:6: index_constraint
            	        	        	pushFollow(FOLLOW_index_constraint_in_allocator9875)
            	        	        	index_constraint617=index_constraint()

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return newExpression


            	        	    case _ =>
            	        	}

            	        	if ( state.backtracking==0 ) {
            	        	  newExpression=new NewExpression(NEW615,Right(new SubTypeIndication(None,selected_name614,if (index_constraint617==null) None else Right(index_constraint617),None)))
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, allocator_StartIndex) }
        }
        return newExpression
    }
    // $ANTLR end "allocator"


    // $ANTLR start "qualified_expression"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1604:1: qualified_expression[SelectedName typeName] returns [QualifiedExpression expr] : APOSTROPHE aggregate ;
    @throws(classOf[RecognitionException])
    final def qualified_expression(typeName: SelectedName): QualifiedExpression = {
        var expr : QualifiedExpression = null
        val qualified_expression_StartIndex = input.index()
        var aggregate618: Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return expr }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1604:80: ( APOSTROPHE aggregate )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1605:2: APOSTROPHE aggregate
            	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_qualified_expression9898)
            	if (state.failed) return expr
            	pushFollow(FOLLOW_aggregate_in_qualified_expression9900)
            	aggregate618=aggregate()

            	state._fsp-=1
            	if (state.failed) return expr
            	if ( state.backtracking==0 ) {
            	  expr=new QualifiedExpression(typeName,aggregate618)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, qualified_expression_StartIndex) }
        }
        return expr
    }
    // $ANTLR end "qualified_expression"


    // $ANTLR start "selected_name_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1608:1: selected_name_list returns [Seq[SelectedName] list] : n1= selected_name ( COMMA n2= selected_name )* ;
    @throws(classOf[RecognitionException])
    final def selected_name_list(): Seq[SelectedName] = {
        var list : Seq[SelectedName] = null
        val selected_name_list_StartIndex = input.index()
        var n1: SelectedName = null
        var n2: SelectedName = null



        	val tmpList=new Buffer[SelectedName]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1611:3: (n1= selected_name ( COMMA n2= selected_name )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1612:2: n1= selected_name ( COMMA n2= selected_name )*
            	pushFollow(FOLLOW_selected_name_in_selected_name_list9922)
            	n1=selected_name()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  tmpList += n1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1612:42: ( COMMA n2= selected_name )*
            	var loop359_quitflag = false
            	while (!loop359_quitflag) {
            	    val alt359 = {
            	val LA359_0 = input.LA(1)

            	if ( (LA359_0==COMMA) ) 1

            	else -1
            	}
            	    alt359 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1612:43: COMMA n2= selected_name
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_selected_name_list9927)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_selected_name_in_selected_name_list9931)
            		    	n2=selected_name()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += n2
            		    	}


            		case _ => loop359_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=tmpList.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, selected_name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "selected_name_list"


    // $ANTLR start "selected_name"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1615:1: selected_name returns [SelectedName name_] : name_prefix ( name_selected_part )* ;
    @throws(classOf[RecognitionException])
    final def selected_name(): SelectedName = {
        var name_ : SelectedName = null
        val selected_name_StartIndex = input.index()
        var name_selected_part619: Name.SelectedPart = null
        var name_prefix620: Identifier = null



        	val parts=new Buffer[Identifier]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return name_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1618:3: ( name_prefix ( name_selected_part )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1619:2: name_prefix ( name_selected_part )*
            	pushFollow(FOLLOW_name_prefix_in_selected_name9957)
            	name_prefix620=name_prefix()

            	state._fsp-=1
            	if (state.failed) return name_
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1619:14: ( name_selected_part )*
            	var loop360_quitflag = false
            	while (!loop360_quitflag) {
            	    val alt360 = {
            	val LA360_0 = input.LA(1)

            	if ( (LA360_0==DOT) ) 1

            	else -1
            	}
            	    alt360 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1619:16: name_selected_part
            		    	pushFollow(FOLLOW_name_selected_part_in_selected_name9961)
            		    	name_selected_part619=name_selected_part()

            		    	state._fsp-=1
            		    	if (state.failed) return name_
            		    	if ( state.backtracking==0 ) {
            		    	  parts += name_selected_part619.identifier
            		    	}


            		case _ => loop360_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  name_ =new SelectedName(name_prefix620 +: parts.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, selected_name_StartIndex) }
        }
        return name_
    }
    // $ANTLR end "selected_name"


    // $ANTLR start "name_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1622:1: name_list returns [Seq[Name] list] : n1= name ( COMMA n2= name )* ;
    @throws(classOf[RecognitionException])
    final def name_list(): Seq[Name] = {
        var list : Seq[Name] = null
        val name_list_StartIndex = input.index()
        var n1: Name = null
        var n2: Name = null



        	val tmpList=new Buffer[Name]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1625:3: (n1= name ( COMMA n2= name )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1626:2: n1= name ( COMMA n2= name )*
            	pushFollow(FOLLOW_name_in_name_list9987)
            	n1=name()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  tmpList += n1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1626:33: ( COMMA n2= name )*
            	var loop361_quitflag = false
            	while (!loop361_quitflag) {
            	    val alt361 = {
            	val LA361_0 = input.LA(1)

            	if ( (LA361_0==COMMA) ) 1

            	else -1
            	}
            	    alt361 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1626:34: COMMA n2= name
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_name_list9992)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_name_in_name_list9996)
            		    	n2=name()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += n2
            		    	}


            		case _ => loop361_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=tmpList.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "name_list"


    // $ANTLR start "name"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1629:1: name returns [Name name_] : ( name_prefix ( name_part )* | {...}? => v2008_external_name );
    @throws(classOf[RecognitionException])
    final def name(): Name = {
        var name_ : Name = null
        val name_StartIndex = input.index()
        var name_part621: Name.Part = null
        var name_prefix622: Identifier = null



        	val parts=new Buffer[Name.Part]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return name_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1632:3: ( name_prefix ( name_part )* | {...}? => v2008_external_name )
            val alt363 = {
            val LA363_0 = input.LA(1)

            if ( (LA363_0==BASIC_IDENTIFIER||LA363_0==EXTENDED_IDENTIFIER||LA363_0==STRING_LITERAL) ) 1
            else if ( (LA363_0==DLT) && ((vhdl2008))) 2
            else {
                if (state.backtracking>0) {state.failed=true; return name_}
                val nvae = new NoViableAltException("", 363, 0, input)

                throw nvae
            }
            }
            alt363 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1633:2: name_prefix ( name_part )*
                    	pushFollow(FOLLOW_name_prefix_in_name10023)
                    	name_prefix622=name_prefix()

                    	state._fsp-=1
                    	if (state.failed) return name_
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1633:14: ( name_part )*
                    	var loop362_quitflag = false
                    	while (!loop362_quitflag) {
                    	    val alt362 = dfa362.predict(input)
                    	    alt362 match {
                    		case 1 =>
                    		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1633:15: name_part
                    		    	pushFollow(FOLLOW_name_part_in_name10026)
                    		    	name_part621=name_part()

                    		    	state._fsp-=1
                    		    	if (state.failed) return name_
                    		    	if ( state.backtracking==0 ) {
                    		    	  parts += name_part621
                    		    	}


                    		case _ => loop362_quitflag = true
                    	    }
                    	}

                    	if ( state.backtracking==0 ) {
                    	  name_ =new Name(name_prefix622,parts.result)
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1634:4: {...}? => v2008_external_name
                    	if ( !((vhdl2008)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return name_}
                    	    throw new FailedPredicateException(input, "name", "vhdl2008")
                    	}
                    	pushFollow(FOLLOW_v2008_external_name_in_name10039)
                    	v2008_external_name()

                    	state._fsp-=1
                    	if (state.failed) return name_


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, name_StartIndex) }
        }
        return name_
    }
    // $ANTLR end "name"


    // $ANTLR start "name_prefix"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1636:1: name_prefix returns [Identifier id] : ( identifier | STRING_LITERAL );
    @throws(classOf[RecognitionException])
    final def name_prefix(): Identifier = {
        var id : Identifier = null
        val name_prefix_StartIndex = input.index()
        var STRING_LITERAL624: Token = null
        var identifier623: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return id }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1636:37: ( identifier | STRING_LITERAL )
            val alt364 = {
            val LA364_0 = input.LA(1)

            if ( (LA364_0==BASIC_IDENTIFIER||LA364_0==EXTENDED_IDENTIFIER) ) 1
            else if ( (LA364_0==STRING_LITERAL) ) 2
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 364, 0, input)

                throw nvae
            }
            }
            alt364 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1637:2: identifier
                    	pushFollow(FOLLOW_identifier_in_name_prefix10053)
                    	identifier623=identifier()

                    	state._fsp-=1
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=identifier623
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1638:5: STRING_LITERAL
                    	STRING_LITERAL624=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_name_prefix10061).asInstanceOf[Token]
                    	if (state.failed) return id
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(STRING_LITERAL624)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, name_prefix_StartIndex) }
        }
        return id
    }
    // $ANTLR end "name_prefix"


    // $ANTLR start "name_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1640:1: name_part returns [Name.Part part] : ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part );
    @throws(classOf[RecognitionException])
    final def name_part(): Name.Part = {
        var part : Name.Part = null
        val name_part_StartIndex = input.index()
        var name_selected_part625: Name.SelectedPart = null
        var name_attribute_part626: Name.AttributePart = null
        var name_association_list_part627: Name.AssociationListPart = null
        var name_slice_part628: Name.SlicePart = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return part }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1640:36: ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part )
            val alt365 = input.LA(1) match {
            case DOT => 1
            case LBRACKET | APOSTROPHE => 2
            case LPAREN => {
            val LA365_4 = input.LA(2)

            if ( (synpred12_Parser()) ) 3
            else if ( (true) ) 4
            else {
                if (state.backtracking>0) {state.failed=true; return part}
                val nvae = new NoViableAltException("", 365, 4, input)

                throw nvae
            }
            }
            case _ =>
                if (state.backtracking>0) {state.failed=true; return part}
                val nvae = new NoViableAltException("", 365, 0, input)

                throw nvae
            }

            alt365 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1641:2: name_selected_part
                    	pushFollow(FOLLOW_name_selected_part_in_name_part10077)
                    	name_selected_part625=name_selected_part()

                    	state._fsp-=1
                    	if (state.failed) return part
                    	if ( state.backtracking==0 ) {
                    	  part = name_selected_part625
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1642:4: name_attribute_part
                    	pushFollow(FOLLOW_name_attribute_part_in_name_part10084)
                    	name_attribute_part626=name_attribute_part()

                    	state._fsp-=1
                    	if (state.failed) return part
                    	if ( state.backtracking==0 ) {
                    	  part = name_attribute_part626
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1643:4: ( name_association_list_part )=> name_association_list_part
                    	pushFollow(FOLLOW_name_association_list_part_in_name_part10095)
                    	name_association_list_part627=name_association_list_part()

                    	state._fsp-=1
                    	if (state.failed) return part
                    	if ( state.backtracking==0 ) {
                    	  part = name_association_list_part627
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1644:4: name_slice_part
                    	pushFollow(FOLLOW_name_slice_part_in_name_part10102)
                    	name_slice_part628=name_slice_part()

                    	state._fsp-=1
                    	if (state.failed) return part
                    	if ( state.backtracking==0 ) {
                    	  part = name_slice_part628
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, name_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_part"


    // $ANTLR start "name_selected_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1646:1: name_selected_part returns [Name.SelectedPart part] : DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) ;
    @throws(classOf[RecognitionException])
    final def name_selected_part(): Name.SelectedPart = {
        var part : Name.SelectedPart = null
        val name_selected_part_StartIndex = input.index()
        var CHARACTER_LITERAL630: Token = null
        var STRING_LITERAL631: Token = null
        var ALL632: Token = null
        var identifier629: Identifier = null


        part=new Name.SelectedPart(Identifier.NoIdentifier)
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return part }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1647:60: ( DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1648:2: DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
            	`match`(input,DOT,FOLLOW_DOT_in_name_selected_part10125)
            	if (state.failed) return part
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1648:6: ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
            	val alt366 = input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 1
            	case CHARACTER_LITERAL => 2
            	case STRING_LITERAL => 3
            	case ALL => 4
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return part}
            	    val nvae = new NoViableAltException("", 366, 0, input)

            	    throw nvae
            	}

            	alt366 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1649:2: identifier
            	        	pushFollow(FOLLOW_identifier_in_name_selected_part10130)
            	        	identifier629=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(identifier629)
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1650:4: CHARACTER_LITERAL
            	        	CHARACTER_LITERAL630=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_name_selected_part10136).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(CHARACTER_LITERAL630))
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1651:4: STRING_LITERAL
            	        	STRING_LITERAL631=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_name_selected_part10143).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(STRING_LITERAL631))
            	        	}

            	    case 4 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1652:4: ALL
            	        	ALL632=`match`(input,ALL,FOLLOW_ALL_in_name_selected_part10149).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(ALL632))
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, name_selected_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_selected_part"


    // $ANTLR start "name_association_list_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1655:1: name_association_list_part returns [Name.AssociationListPart part] : LPAREN association_list RPAREN ;
    @throws(classOf[RecognitionException])
    final def name_association_list_part(): Name.AssociationListPart = {
        var part : Name.AssociationListPart = null
        val name_association_list_part_StartIndex = input.index()
        var LPAREN633: Token = null
        var association_list634: AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return part }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1655:68: ( LPAREN association_list RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1656:2: LPAREN association_list RPAREN
            	LPAREN633=`match`(input,LPAREN,FOLLOW_LPAREN_in_name_association_list_part10166).asInstanceOf[Token]
            	if (state.failed) return part
            	pushFollow(FOLLOW_association_list_in_name_association_list_part10168)
            	association_list634=association_list()

            	state._fsp-=1
            	if (state.failed) return part
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_association_list_part10170)
            	if (state.failed) return part
            	if ( state.backtracking==0 ) {
            	  part=new Name.AssociationListPart(LPAREN633,association_list634)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, name_association_list_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_association_list_part"


    // $ANTLR start "name_slice_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1658:1: name_slice_part returns [Name.SlicePart part] : LPAREN discrete_range RPAREN ;
    @throws(classOf[RecognitionException])
    final def name_slice_part(): Name.SlicePart = {
        var part : Name.SlicePart = null
        val name_slice_part_StartIndex = input.index()
        var discrete_range635: DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return part }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1658:47: ( LPAREN discrete_range RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1659:2: LPAREN discrete_range RPAREN
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_name_slice_part10189)
            	if (state.failed) return part
            	pushFollow(FOLLOW_discrete_range_in_name_slice_part10191)
            	discrete_range635=discrete_range()

            	state._fsp-=1
            	if (state.failed) return part
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_slice_part10193)
            	if (state.failed) return part
            	if ( state.backtracking==0 ) {
            	  part=new Name.SlicePart(discrete_range635)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, name_slice_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_slice_part"


    // $ANTLR start "name_attribute_part"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1661:1: name_attribute_part returns [Name.AttributePart part] : ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )? ;
    @throws(classOf[RecognitionException])
    final def name_attribute_part(): Name.AttributePart = {
        var part : Name.AttributePart = null
        val name_attribute_part_StartIndex = input.index()
        var RANGE636: Token = null
        var TOLERANCE637: Token = null
        var ACROSS638: Token = null
        var THROUGH639: Token = null
        var REFERENCE640: Token = null
        var id: Identifier = null
        var expr: Expression = null
        var signature641: Signature = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return part }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1661:55: ( ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:2: ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:2: ( signature )?
            	val alt367 = {
            	val LA367_0 = input.LA(1)

            	if ( (LA367_0==LBRACKET) ) 1
            	else -1
            	}
            	alt367 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:2: signature
            	        	pushFollow(FOLLOW_signature_in_name_attribute_part10209)
            	        	signature641=signature()

            	        	state._fsp-=1
            	        	if (state.failed) return part


            	    case _ =>
            	}

            	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_name_attribute_part10212)
            	if (state.failed) return part
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:24: (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE )
            	val alt368 = input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 1
            	case RANGE => 2
            	case TOLERANCE => 3
            	case ACROSS => 4
            	case THROUGH => 5
            	case REFERENCE => 6
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return part}
            	    val nvae = new NoViableAltException("", 368, 0, input)

            	    throw nvae
            	}

            	alt368 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:25: id= identifier
            	        	pushFollow(FOLLOW_identifier_in_name_attribute_part10217)
            	        	id=identifier()

            	        	state._fsp-=1
            	        	if (state.failed) return part

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:39: RANGE
            	        	RANGE636=`match`(input,RANGE,FOLLOW_RANGE_in_name_attribute_part10219).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(RANGE636)
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:72: TOLERANCE
            	        	TOLERANCE637=`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_name_attribute_part10224).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(TOLERANCE637)
            	        	}

            	    case 4 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:113: ACROSS
            	        	ACROSS638=`match`(input,ACROSS,FOLLOW_ACROSS_in_name_attribute_part10229).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(ACROSS638)
            	        	}

            	    case 5 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:147: THROUGH
            	        	THROUGH639=`match`(input,THROUGH,FOLLOW_THROUGH_in_name_attribute_part10233).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(THROUGH639)
            	        	}

            	    case 6 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1662:184: REFERENCE
            	        	REFERENCE640=`match`(input,REFERENCE,FOLLOW_REFERENCE_in_name_attribute_part10238).asInstanceOf[Token]
            	        	if (state.failed) return part
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(REFERENCE640)
            	        	}


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:2: ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?
            	val alt370 = dfa370.predict(input)
            	alt370 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:4: ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_name_attribute_part10251)
            	        	if (state.failed) return part
            	        	pushFollow(FOLLOW_expression_in_name_attribute_part10255)
            	        	expr=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return part
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:38: ({...}? => COMMA expression )*
            	        	var loop369_quitflag = false
            	        	while (!loop369_quitflag) {
            	        	    val alt369 = {
            	        	val LA369_0 = input.LA(1)

            	        	if ( (LA369_0==COMMA) && ((ams))) 1

            	        	else -1
            	        	}
            	        	    alt369 match {
            	        		case 1 =>
            	        		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:39: {...}? => COMMA expression
            	        		    	if ( !((ams)) ) {
            	        		    	    if (state.backtracking>0) {state.failed=true; return part}
            	        		    	    throw new FailedPredicateException(input, "name_attribute_part", "ams")
            	        		    	}
            	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_name_attribute_part10260)
            	        		    	if (state.failed) return part
            	        		    	pushFollow(FOLLOW_expression_in_name_attribute_part10262)
            	        		    	expression()

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return part


            	        		case _ => loop369_quitflag = true
            	        	    }
            	        	}

            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_attribute_part10266)
            	        	if (state.failed) return part


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  part=new Name.AttributePart(signature641,id,expr)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, name_attribute_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_attribute_part"


    // $ANTLR start "signature"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1665:1: signature returns [Signature signature_] : LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET ;
    @throws(classOf[RecognitionException])
    final def signature(): Signature = {
        var signature_ : Signature = null
        val signature_StartIndex = input.index()
        var LBRACKET642: Token = null
        var selected_name_list643: Seq[SelectedName] = null
        var type_mark644: SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return signature_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1665:42: ( LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1666:2: LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET
            	LBRACKET642=`match`(input,LBRACKET,FOLLOW_LBRACKET_in_signature10285).asInstanceOf[Token]
            	if (state.failed) return signature_
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1666:11: ( selected_name_list )?
            	val alt371 = {
            	val LA371_0 = input.LA(1)

            	if ( (LA371_0==BASIC_IDENTIFIER||LA371_0==EXTENDED_IDENTIFIER||LA371_0==STRING_LITERAL) ) 1
            	else -1
            	}
            	alt371 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1666:11: selected_name_list
            	        	pushFollow(FOLLOW_selected_name_list_in_signature10287)
            	        	selected_name_list643=selected_name_list()

            	        	state._fsp-=1
            	        	if (state.failed) return signature_


            	    case _ =>
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1666:31: ( RETURN type_mark )?
            	val alt372 = {
            	val LA372_0 = input.LA(1)

            	if ( (LA372_0==RETURN) ) 1
            	else -1
            	}
            	alt372 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1666:32: RETURN type_mark
            	        	`match`(input,RETURN,FOLLOW_RETURN_in_signature10291)
            	        	if (state.failed) return signature_
            	        	pushFollow(FOLLOW_type_mark_in_signature10293)
            	        	type_mark644=type_mark()

            	        	state._fsp-=1
            	        	if (state.failed) return signature_


            	    case _ =>
            	}

            	`match`(input,RBRACKET,FOLLOW_RBRACKET_in_signature10297)
            	if (state.failed) return signature_
            	if ( state.backtracking==0 ) {
            	  signature_ =new Signature(LBRACKET642,selected_name_list643,type_mark644)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, signature_StartIndex) }
        }
        return signature_
    }
    // $ANTLR end "signature"


    // $ANTLR start "v2008_external_name"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1669:1: v2008_external_name : DLT ( CONSTANT | SIGNAL | VARIABLE ) v2008_external_pathname COLON subtype_indication DGT ;
    @throws(classOf[RecognitionException])
    final def v2008_external_name(): Unit = {
        val v2008_external_name_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1669:21: ( DLT ( CONSTANT | SIGNAL | VARIABLE ) v2008_external_pathname COLON subtype_indication DGT )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1670:2: DLT ( CONSTANT | SIGNAL | VARIABLE ) v2008_external_pathname COLON subtype_indication DGT
            	`match`(input,DLT,FOLLOW_DLT_in_v2008_external_name10310)
            	if (state.failed) return 
            	if ( input.LA(1)==CONSTANT||input.LA(1)==SIGNAL||input.LA(1)==VARIABLE ) {
            	    input.consume()
            	    state.errorRecovery=false
            	state.failed=false
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return }
            	    val mse = new MismatchedSetException(null,input)
            	    throw mse
            	}

            	pushFollow(FOLLOW_v2008_external_pathname_in_v2008_external_name10320)
            	v2008_external_pathname()

            	state._fsp-=1
            	if (state.failed) return 
            	`match`(input,COLON,FOLLOW_COLON_in_v2008_external_name10322)
            	if (state.failed) return 
            	pushFollow(FOLLOW_subtype_indication_in_v2008_external_name10324)
            	subtype_indication()

            	state._fsp-=1
            	if (state.failed) return 
            	`match`(input,DGT,FOLLOW_DGT_in_v2008_external_name10326)
            	if (state.failed) return 



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, v2008_external_name_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_external_name"


    // $ANTLR start "v2008_external_pathname"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1672:1: v2008_external_pathname : ( v2008_absolute_pathname | v2008_relative_pathname | v2008_package_pathname );
    @throws(classOf[RecognitionException])
    final def v2008_external_pathname(): Unit = {
        val v2008_external_pathname_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1672:25: ( v2008_absolute_pathname | v2008_relative_pathname | v2008_package_pathname )
            val alt373 = input.LA(1) match {
            case DOT => 1
            case CIRCUMFLEX | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => 2
            case AT => 3
            case _ =>
                if (state.backtracking>0) {state.failed=true; return }
                val nvae = new NoViableAltException("", 373, 0, input)

                throw nvae
            }

            alt373 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1673:2: v2008_absolute_pathname
                    	pushFollow(FOLLOW_v2008_absolute_pathname_in_v2008_external_pathname10337)
                    	v2008_absolute_pathname()

                    	state._fsp-=1
                    	if (state.failed) return 

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1673:28: v2008_relative_pathname
                    	pushFollow(FOLLOW_v2008_relative_pathname_in_v2008_external_pathname10341)
                    	v2008_relative_pathname()

                    	state._fsp-=1
                    	if (state.failed) return 

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1673:54: v2008_package_pathname
                    	pushFollow(FOLLOW_v2008_package_pathname_in_v2008_external_pathname10345)
                    	v2008_package_pathname()

                    	state._fsp-=1
                    	if (state.failed) return 


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, v2008_external_pathname_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_external_pathname"


    // $ANTLR start "v2008_absolute_pathname"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1675:1: v2008_absolute_pathname : DOT ( v2008_pathname_element DOT )* object_identifier= identifier ;
    @throws(classOf[RecognitionException])
    final def v2008_absolute_pathname(): Unit = {
        val v2008_absolute_pathname_StartIndex = input.index()
        var object_identifier: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1675:25: ( DOT ( v2008_pathname_element DOT )* object_identifier= identifier )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1676:2: DOT ( v2008_pathname_element DOT )* object_identifier= identifier
            	`match`(input,DOT,FOLLOW_DOT_in_v2008_absolute_pathname10355)
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1676:6: ( v2008_pathname_element DOT )*
            	var loop374_quitflag = false
            	while (!loop374_quitflag) {
            	    val alt374 = {
            	val LA374_0 = input.LA(1)

            	if ( (LA374_0==BASIC_IDENTIFIER||LA374_0==EXTENDED_IDENTIFIER) ) {
            	val LA374_1 = input.LA(2)

            	if ( (LA374_1==LPAREN||LA374_1==DOT) ) 1

            	else -1
            	}

            	else -1
            	}
            	    alt374 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1676:7: v2008_pathname_element DOT
            		    	pushFollow(FOLLOW_v2008_pathname_element_in_v2008_absolute_pathname10358)
            		    	v2008_pathname_element()

            		    	state._fsp-=1
            		    	if (state.failed) return 
            		    	`match`(input,DOT,FOLLOW_DOT_in_v2008_absolute_pathname10360)
            		    	if (state.failed) return 


            		case _ => loop374_quitflag = true
            	    }
            	}

            	pushFollow(FOLLOW_identifier_in_v2008_absolute_pathname10366)
            	object_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return 



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, v2008_absolute_pathname_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_absolute_pathname"


    // $ANTLR start "v2008_relative_pathname"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1678:1: v2008_relative_pathname : ( CIRCUMFLEX DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier ;
    @throws(classOf[RecognitionException])
    final def v2008_relative_pathname(): Unit = {
        val v2008_relative_pathname_StartIndex = input.index()
        var object_identifier: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1678:25: ( ( CIRCUMFLEX DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1679:2: ( CIRCUMFLEX DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1679:2: ( CIRCUMFLEX DOT )*
            	var loop375_quitflag = false
            	while (!loop375_quitflag) {
            	    val alt375 = {
            	val LA375_0 = input.LA(1)

            	if ( (LA375_0==CIRCUMFLEX) ) 1

            	else -1
            	}
            	    alt375 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1679:3: CIRCUMFLEX DOT
            		    	`match`(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_v2008_relative_pathname10377)
            		    	if (state.failed) return 
            		    	`match`(input,DOT,FOLLOW_DOT_in_v2008_relative_pathname10379)
            		    	if (state.failed) return 


            		case _ => loop375_quitflag = true
            	    }
            	}

            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1679:20: ( v2008_pathname_element DOT )*
            	var loop376_quitflag = false
            	while (!loop376_quitflag) {
            	    val alt376 = {
            	val LA376_0 = input.LA(1)

            	if ( (LA376_0==BASIC_IDENTIFIER||LA376_0==EXTENDED_IDENTIFIER) ) {
            	val LA376_1 = input.LA(2)

            	if ( (LA376_1==LPAREN||LA376_1==DOT) ) 1

            	else -1
            	}

            	else -1
            	}
            	    alt376 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1679:21: v2008_pathname_element DOT
            		    	pushFollow(FOLLOW_v2008_pathname_element_in_v2008_relative_pathname10384)
            		    	v2008_pathname_element()

            		    	state._fsp-=1
            		    	if (state.failed) return 
            		    	`match`(input,DOT,FOLLOW_DOT_in_v2008_relative_pathname10386)
            		    	if (state.failed) return 


            		case _ => loop376_quitflag = true
            	    }
            	}

            	pushFollow(FOLLOW_identifier_in_v2008_relative_pathname10392)
            	object_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return 



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, v2008_relative_pathname_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_relative_pathname"


    // $ANTLR start "v2008_pathname_element"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1681:1: v2008_pathname_element : element= identifier ( LPAREN static_expression= expression RPAREN )? ;
    @throws(classOf[RecognitionException])
    final def v2008_pathname_element(): Unit = {
        val v2008_pathname_element_StartIndex = input.index()
        var element: Identifier = null
        var static_expression: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1681:24: (element= identifier ( LPAREN static_expression= expression RPAREN )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1683:2: element= identifier ( LPAREN static_expression= expression RPAREN )?
            	pushFollow(FOLLOW_identifier_in_v2008_pathname_element10407)
            	element=identifier()

            	state._fsp-=1
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1683:21: ( LPAREN static_expression= expression RPAREN )?
            	val alt377 = {
            	val LA377_0 = input.LA(1)

            	if ( (LA377_0==LPAREN) ) 1
            	else -1
            	}
            	alt377 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1683:22: LPAREN static_expression= expression RPAREN
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_v2008_pathname_element10410)
            	        	if (state.failed) return 
            	        	pushFollow(FOLLOW_expression_in_v2008_pathname_element10414)
            	        	static_expression=expression()

            	        	state._fsp-=1
            	        	if (state.failed) return 
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_v2008_pathname_element10416)
            	        	if (state.failed) return 


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, v2008_pathname_element_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_pathname_element"


    // $ANTLR start "v2008_package_pathname"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1685:1: v2008_package_pathname : AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier ;
    @throws(classOf[RecognitionException])
    final def v2008_package_pathname(): Unit = {
        val v2008_package_pathname_StartIndex = input.index()
        var library_identifier: Identifier = null
        var package_identifier: Identifier = null
        var object_identifier: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1685:24: ( AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1686:2: AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier
            	`match`(input,AT,FOLLOW_AT_in_v2008_package_pathname10429)
            	if (state.failed) return 
            	pushFollow(FOLLOW_identifier_in_v2008_package_pathname10433)
            	library_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return 
            	`match`(input,DOT,FOLLOW_DOT_in_v2008_package_pathname10435)
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1686:39: (package_identifier= identifier DOT )*
            	var loop378_quitflag = false
            	while (!loop378_quitflag) {
            	    val alt378 = {
            	val LA378_0 = input.LA(1)

            	if ( (LA378_0==BASIC_IDENTIFIER||LA378_0==EXTENDED_IDENTIFIER) ) {
            	val LA378_1 = input.LA(2)

            	if ( (LA378_1==DOT) ) 1

            	else -1
            	}

            	else -1
            	}
            	    alt378 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1686:40: package_identifier= identifier DOT
            		    	pushFollow(FOLLOW_identifier_in_v2008_package_pathname10440)
            		    	package_identifier=identifier()

            		    	state._fsp-=1
            		    	if (state.failed) return 
            		    	`match`(input,DOT,FOLLOW_DOT_in_v2008_package_pathname10442)
            		    	if (state.failed) return 


            		case _ => loop378_quitflag = true
            	    }
            	}

            	pushFollow(FOLLOW_identifier_in_v2008_package_pathname10448)
            	object_identifier=identifier()

            	state._fsp-=1
            	if (state.failed) return 



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, v2008_package_pathname_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_package_pathname"


    // $ANTLR start "literal"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1688:1: literal returns [Expression literal_] : ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? ;
    @throws(classOf[RecognitionException])
    final def literal(): Expression = {
        var literal_ : Expression = null
        val literal_StartIndex = input.index()
        var selected_name645: SelectedName = null



        	var literalType:Literal.Type.Value=null
        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return literal_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1692:3: ( ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1693:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )?
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1693:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL )
            	val alt379 = input.LA(1) match {
            	case REAL_LITERAL => 1
            	case INTEGER_LITERAL => 2
            	case BASED_LITERAL => 3
            	case CHARACTER_LITERAL => 4
            	case BIT_STRING_LITERAL => 5
            	case NULL => 6
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return literal_}
            	    val nvae = new NoViableAltException("", 379, 0, input)

            	    throw nvae
            	}

            	alt379 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1694:3: REAL_LITERAL
            	        	`match`(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal10470)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.REAL_LITERAL
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1695:5: INTEGER_LITERAL
            	        	`match`(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal10478)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.INTEGER_LITERAL
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1696:5: BASED_LITERAL
            	        	`match`(input,BASED_LITERAL,FOLLOW_BASED_LITERAL_in_literal10486)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.BASED_LITERAL
            	        	}

            	    case 4 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1697:5: CHARACTER_LITERAL
            	        	`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal10494)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.CHARACTER_LITERAL
            	        	}

            	    case 5 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1699:5: BIT_STRING_LITERAL
            	        	`match`(input,BIT_STRING_LITERAL,FOLLOW_BIT_STRING_LITERAL_in_literal10505)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.BIT_STRING_LITERAL
            	        	}

            	    case 6 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1700:5: NULL
            	        	`match`(input,NULL,FOLLOW_NULL_in_literal10513)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.NULL_LITERAL
            	        	}


            	    case _ =>
            	}

            	if ( state.backtracking==0 ) {
            	  literal_ =new Literal(position,input.LT(-1).getText(),literalType)
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1703:2: ({...}? => selected_name )?
            	val alt380 = {
            	val LA380_0 = input.LA(1)

            	if ( (LA380_0==BASIC_IDENTIFIER||LA380_0==EXTENDED_IDENTIFIER||LA380_0==STRING_LITERAL) && ((input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL || input.LA(-1)==BASED_LITERAL))) 1
            	else -1
            	}
            	alt380 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1703:3: {...}? => selected_name
            	        	if ( !((input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL || input.LA(-1)==BASED_LITERAL)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return literal_}
            	        	    throw new FailedPredicateException(input, "literal", "input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL || input.LA(-1)==BASED_LITERAL")
            	        	}
            	        	pushFollow(FOLLOW_selected_name_in_literal10528)
            	        	selected_name645=selected_name()

            	        	state._fsp-=1
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  literal_ = new PhysicalLiteral(literal_.asInstanceOf[Literal],selected_name645)
            	        	}


            	    case _ =>
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, literal_StartIndex) }
        }
        return literal_
    }
    // $ANTLR end "literal"


    // $ANTLR start "physical_literal"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1705:1: physical_literal returns [PhysicalLiteral literal_] : ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name ;
    @throws(classOf[RecognitionException])
    final def physical_literal(): PhysicalLiteral = {
        var literal_ : PhysicalLiteral = null
        val physical_literal_StartIndex = input.index()
        var selected_name646: SelectedName = null



        	var text:String=null
        	var literalType:Literal.Type.Value=null
        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return literal_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1710:3: ( ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1711:2: ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1711:2: ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL )
            	val alt381 = input.LA(1) match {
            	case INTEGER_LITERAL => 1
            	case REAL_LITERAL => 2
            	case BASED_LITERAL => 3
            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return literal_}
            	    val nvae = new NoViableAltException("", 381, 0, input)

            	    throw nvae
            	}

            	alt381 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1712:3: INTEGER_LITERAL
            	        	`match`(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_physical_literal10554)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  text=input.LT(-1).getText(); literalType=Literal.Type.INTEGER_LITERAL
            	        	}

            	    case 2 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1713:5: REAL_LITERAL
            	        	`match`(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_physical_literal10562)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  text=input.LT(-1).getText(); literalType=Literal.Type.REAL_LITERAL
            	        	}

            	    case 3 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1714:5: BASED_LITERAL
            	        	`match`(input,BASED_LITERAL,FOLLOW_BASED_LITERAL_in_physical_literal10570)
            	        	if (state.failed) return literal_
            	        	if ( state.backtracking==0 ) {
            	        	  text=input.LT(-1).getText(); literalType=Literal.Type.BASED_LITERAL
            	        	}


            	    case _ =>
            	}

            	pushFollow(FOLLOW_selected_name_in_physical_literal10577)
            	selected_name646=selected_name()

            	state._fsp-=1
            	if (state.failed) return literal_
            	if ( state.backtracking==0 ) {
            	  literal_ =new PhysicalLiteral(position,text,selected_name646,literalType)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, physical_literal_StartIndex) }
        }
        return literal_
    }
    // $ANTLR end "physical_literal"


    // $ANTLR start "element_association"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1718:1: element_association returns [Aggregate.ElementAssociation element] : ( ( choices ARROW )=> choices ARROW )? expression ;
    @throws(classOf[RecognitionException])
    final def element_association(): Aggregate.ElementAssociation = {
        var element : Aggregate.ElementAssociation = null
        val element_association_StartIndex = input.index()
        var choices647: Seq[Choices.Choice] = null
        var expression648: Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return element }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1718:68: ( ( ( choices ARROW )=> choices ARROW )? expression )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1719:2: ( ( choices ARROW )=> choices ARROW )? expression
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1719:2: ( ( choices ARROW )=> choices ARROW )?
            	val alt382 = dfa382.predict(input)
            	alt382 match {
            	    case 1 =>
            	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1719:4: ( choices ARROW )=> choices ARROW
            	        	pushFollow(FOLLOW_choices_in_element_association10603)
            	        	choices647=choices()

            	        	state._fsp-=1
            	        	if (state.failed) return element
            	        	`match`(input,ARROW,FOLLOW_ARROW_in_element_association10605)
            	        	if (state.failed) return element


            	    case _ =>
            	}

            	pushFollow(FOLLOW_expression_in_element_association10610)
            	expression648=expression()

            	state._fsp-=1
            	if (state.failed) return element
            	if ( state.backtracking==0 ) {
            	  element=new Aggregate.ElementAssociation(choices647,expression648)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, element_association_StartIndex) }
        }
        return element
    }
    // $ANTLR end "element_association"


    // $ANTLR start "aggregate"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1722:1: aggregate returns [Aggregate aggregate_] : LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN ;
    @throws(classOf[RecognitionException])
    final def aggregate(): Aggregate = {
        var aggregate_ : Aggregate = null
        val aggregate_StartIndex = input.index()
        var LPAREN649: Token = null
        var e1: Aggregate.ElementAssociation = null
        var e2: Aggregate.ElementAssociation = null



        	val elements=new Buffer[Aggregate.ElementAssociation]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return aggregate_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1725:3: ( LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1726:2: LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN
            	LPAREN649=`match`(input,LPAREN,FOLLOW_LPAREN_in_aggregate10631).asInstanceOf[Token]
            	if (state.failed) return aggregate_
            	pushFollow(FOLLOW_element_association_in_aggregate10635)
            	e1=element_association()

            	state._fsp-=1
            	if (state.failed) return aggregate_
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1726:57: ( COMMA e2= element_association )*
            	var loop383_quitflag = false
            	while (!loop383_quitflag) {
            	    val alt383 = {
            	val LA383_0 = input.LA(1)

            	if ( (LA383_0==COMMA) ) 1

            	else -1
            	}
            	    alt383 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1726:58: COMMA e2= element_association
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_aggregate10639)
            		    	if (state.failed) return aggregate_
            		    	pushFollow(FOLLOW_element_association_in_aggregate10643)
            		    	e2=element_association()

            		    	state._fsp-=1
            		    	if (state.failed) return aggregate_
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}


            		case _ => loop383_quitflag = true
            	    }
            	}

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_aggregate10649)
            	if (state.failed) return aggregate_
            	if ( state.backtracking==0 ) {
            	  aggregate_ =new Aggregate(LPAREN649,elements.result)
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, aggregate_StartIndex) }
        }
        return aggregate_
    }
    // $ANTLR end "aggregate"


    // $ANTLR start "choice"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1729:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );
    @throws(classOf[RecognitionException])
    final def choice(): Choices.Choice = {
        var choice_ : Choices.Choice = null
        val choice_StartIndex = input.index()
        var identifier650: Identifier = null
        var simple_expression651: Expression = null
        var discrete_range652: DiscreteRange = null



        	val position=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return choice_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1732:3: ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS )
            val alt384 = dfa384.predict(input)
            alt384 match {
                case 1 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1733:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier
                    	pushFollow(FOLLOW_identifier_in_choice10690)
                    	identifier650=identifier()

                    	state._fsp-=1
                    	if (state.failed) return choice_
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(position,Some(Third(identifier650)))
                    	}

                case 2 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1734:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression
                    	pushFollow(FOLLOW_simple_expression_in_choice10717)
                    	simple_expression651=simple_expression()

                    	state._fsp-=1
                    	if (state.failed) return choice_
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(position,Some(Second(simple_expression651)))
                    	}

                case 3 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1735:4: discrete_range
                    	pushFollow(FOLLOW_discrete_range_in_choice10724)
                    	discrete_range652=discrete_range()

                    	state._fsp-=1
                    	if (state.failed) return choice_
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(position,Some(First(discrete_range652)))
                    	}

                case 4 =>
                    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1736:4: OTHERS
                    	`match`(input,OTHERS,FOLLOW_OTHERS_in_choice10731)
                    	if (state.failed) return choice_
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(position,None)
                    	}


                case _ =>
            }
        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, choice_StartIndex) }
        }
        return choice_
    }
    // $ANTLR end "choice"


    // $ANTLR start "choices"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1738:1: choices returns [Seq[Choices.Choice] choices_] : c1= choice ( BAR c2= choice )* ;
    @throws(classOf[RecognitionException])
    final def choices(): Seq[Choices.Choice] = {
        var choices_ : Seq[Choices.Choice] = null
        val choices_StartIndex = input.index()
        var c1: Choices.Choice = null
        var c2: Choices.Choice = null



        	val elements=new Buffer[Choices.Choice]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return choices_ }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1741:3: (c1= choice ( BAR c2= choice )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1742:2: c1= choice ( BAR c2= choice )*
            	pushFollow(FOLLOW_choice_in_choices10752)
            	c1=choice()

            	state._fsp-=1
            	if (state.failed) return choices_
            	if ( state.backtracking==0 ) {
            	  elements += c1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1742:37: ( BAR c2= choice )*
            	var loop385_quitflag = false
            	while (!loop385_quitflag) {
            	    val alt385 = {
            	val LA385_0 = input.LA(1)

            	if ( (LA385_0==BAR) ) 1

            	else -1
            	}
            	    alt385 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1742:39: BAR c2= choice
            		    	`match`(input,BAR,FOLLOW_BAR_in_choices10757)
            		    	if (state.failed) return choices_
            		    	pushFollow(FOLLOW_choice_in_choices10761)
            		    	c2=choice()

            		    	state._fsp-=1
            		    	if (state.failed) return choices_
            		    	if ( state.backtracking==0 ) {
            		    	  elements += c2
            		    	}


            		case _ => loop385_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  choices_ = elements.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, choices_StartIndex) }
        }
        return choices_
    }
    // $ANTLR end "choices"


    // $ANTLR start "identifier_list"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1757:1: identifier_list returns [Seq[Identifier] list] : id1= identifier ( COMMA id2= identifier )* ;
    @throws(classOf[RecognitionException])
    final def identifier_list(): Seq[Identifier] = {
        var list : Seq[Identifier] = null
        val identifier_list_StartIndex = input.index()
        var id1: Identifier = null
        var id2: Identifier = null



        	val identifiers=new Buffer[Identifier]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return list }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1760:3: (id1= identifier ( COMMA id2= identifier )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1761:2: id1= identifier ( COMMA id2= identifier )*
            	pushFollow(FOLLOW_identifier_in_identifier_list10792)
            	id1=identifier()

            	state._fsp-=1
            	if (state.failed) return list
            	if ( state.backtracking==0 ) {
            	  identifiers += id1
            	}
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1761:42: ( COMMA id2= identifier )*
            	var loop386_quitflag = false
            	while (!loop386_quitflag) {
            	    val alt386 = {
            	val LA386_0 = input.LA(1)

            	if ( (LA386_0==COMMA) ) 1

            	else -1
            	}
            	    alt386 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1761:43: COMMA id2= identifier
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_identifier_list10797)
            		    	if (state.failed) return list
            		    	pushFollow(FOLLOW_identifier_in_identifier_list10801)
            		    	id2=identifier()

            		    	state._fsp-=1
            		    	if (state.failed) return list
            		    	if ( state.backtracking==0 ) {
            		    	  identifiers += id2
            		    	}


            		case _ => loop386_quitflag = true
            	    }
            	}

            	if ( state.backtracking==0 ) {
            	  list=identifiers.result
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, identifier_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "identifier_list"


    // $ANTLR start "identifier"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1764:1: identifier returns [Identifier id] : ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER ) ;
    @throws(classOf[RecognitionException])
    final def identifier(): Identifier = {
        var id : Identifier = null
        val identifier_StartIndex = input.index()
        id = Identifier.NoIdentifier
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return id }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1765:38: ( ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER ) )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1766:2: ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER )
            	if ( input.LA(1)==BASIC_IDENTIFIER||input.LA(1)==EXTENDED_IDENTIFIER ) {
            	    input.consume()
            	    state.errorRecovery=false
            	state.failed=false
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return id}
            	    val mse = new MismatchedSetException(null,input)
            	    throw mse
            	}

            	if ( state.backtracking==0 ) {
            	  id = if (input.LA(-1) == EXTENDED_IDENTIFIER) toIdentifier(input.LT(-1),false) else toIdentifier(input.LT(-1))
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, identifier_StartIndex) }
        }
        return id
    }
    // $ANTLR end "identifier"


    // $ANTLR start "v2008_tool_directive"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1770:1: v2008_tool_directive : APOSTROPHE identifier ( GRAPHIC_CHARACTER )* ;
    @throws(classOf[RecognitionException])
    final def v2008_tool_directive(): Unit = {
        val v2008_tool_directive_StartIndex = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return  }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1770:22: ( APOSTROPHE identifier ( GRAPHIC_CHARACTER )* )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1770:24: APOSTROPHE identifier ( GRAPHIC_CHARACTER )*
            	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_v2008_tool_directive10847)
            	if (state.failed) return 
            	pushFollow(FOLLOW_identifier_in_v2008_tool_directive10849)
            	identifier()

            	state._fsp-=1
            	if (state.failed) return 
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1770:46: ( GRAPHIC_CHARACTER )*
            	var loop387_quitflag = false
            	while (!loop387_quitflag) {
            	    val alt387 = {
            	val LA387_0 = input.LA(1)

            	if ( (LA387_0==GRAPHIC_CHARACTER) ) 1

            	else -1
            	}
            	    alt387 match {
            		case 1 =>
            		    	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1770:46: GRAPHIC_CHARACTER
            		    	`match`(input,GRAPHIC_CHARACTER,FOLLOW_GRAPHIC_CHARACTER_in_v2008_tool_directive10851)
            		    	if (state.failed) return 


            		case _ => loop387_quitflag = true
            	    }
            	}




        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, v2008_tool_directive_StartIndex) }
        }
        return 
    }
    // $ANTLR end "v2008_tool_directive"


    // $ANTLR start "label_colon"
    // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1772:1: label_colon returns [Identifier label] : identifier COLON ;
    @throws(classOf[RecognitionException])
    final def label_colon(): Identifier = {
        var label : Identifier = null
        val label_colon_StartIndex = input.index()
        var identifier653: Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return label }
            // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1772:40: ( identifier COLON )
            	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1773:2: identifier COLON
            	pushFollow(FOLLOW_identifier_in_label_colon10865)
            	identifier653=identifier()

            	state._fsp-=1
            	if (state.failed) return label
            	`match`(input,COLON,FOLLOW_COLON_in_label_colon10867)
            	if (state.failed) return label
            	if ( state.backtracking==0 ) {
            	  label=identifier653
            	}



        }
        catch {
            case re: RecognitionException =>
            reportError(re)
            recover(input,re)
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, label_colon_StartIndex) }
        }
        return label
    }
    // $ANTLR end "label_colon"

    // $ANTLR start synpred1_Parser
    @throws(classOf[RecognitionException])
    def synpred1_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:226:4: ( discrete_range )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:226:5: discrete_range
        	pushFollow(FOLLOW_discrete_range_in_synpred1_Parser930)
        	discrete_range()

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred1_Parser

    // $ANTLR start synpred2_Parser
    @throws(classOf[RecognitionException])
    def synpred2_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:231:2: ( identifier LPAREN )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:231:3: identifier LPAREN
        	pushFollow(FOLLOW_identifier_in_synpred2_Parser974)
        	identifier()

        	state._fsp-=1
        	if (state.failed) return 
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred2_Parser976)
        	if (state.failed) return 


    }
    // $ANTLR end synpred2_Parser

    // $ANTLR start synpred3_Parser
    @throws(classOf[RecognitionException])
    def synpred3_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:16: ( v2008_resolution_indication selected_name )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:782:17: v2008_resolution_indication selected_name
        	pushFollow(FOLLOW_v2008_resolution_indication_in_synpred3_Parser4410)
        	v2008_resolution_indication()

        	state._fsp-=1
        	if (state.failed) return 
        	pushFollow(FOLLOW_selected_name_in_synpred3_Parser4412)
        	selected_name()

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred3_Parser

    // $ANTLR start synpred4_Parser
    @throws(classOf[RecognitionException])
    def synpred4_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:809:2: ( simple_expression direction )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:809:3: simple_expression direction
        	pushFollow(FOLLOW_simple_expression_in_synpred4_Parser4601)
        	simple_expression()

        	state._fsp-=1
        	if (state.failed) return 
        	pushFollow(FOLLOW_direction_in_synpred4_Parser4603)
        	direction()

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred4_Parser

    // $ANTLR start synpred5_Parser
    @throws(classOf[RecognitionException])
    def synpred5_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:829:2: ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:829:3: subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON )
        	pushFollow(FOLLOW_subtype_indication_in_synpred5_Parser4769)
        	subtype_indication()

        	state._fsp-=1
        	if (state.failed) return 
        	if ( input.LA(1)==GENERATE||input.LA(1)==LOOP||(input.LA(1)>=COMMA && input.LA(1)<=SEMICOLON)||input.LA(1)==RPAREN||(input.LA(1)>=BAR && input.LA(1)<=ARROW) ) {
        	    input.consume()
        	    state.errorRecovery=false
        	state.failed=false
        	}
        	else {
        	    if (state.backtracking>0) {state.failed=true; return }
        	    val mse = new MismatchedSetException(null,input)
        	    throw mse
        	}



    }
    // $ANTLR end synpred5_Parser

    // $ANTLR start synpred6_Parser
    @throws(classOf[RecognitionException])
    def synpred6_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:4: ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )
        val alt389 = {
        val LA389_0 = input.LA(1)

        if ( (LA389_0==COMPONENT) ) 1
        else if ( (LA389_0==BASIC_IDENTIFIER||LA389_0==EXTENDED_IDENTIFIER||LA389_0==STRING_LITERAL) ) 2
        else if ( (LA389_0==ENTITY) ) 3
        else if ( (LA389_0==CONFIGURATION) ) 4
        else if ( (LA389_0==BLOCK) ) 5
        else if ( (LA389_0==IF) ) 6
        else if ( (LA389_0==FOR) ) 7
        else if ( (LA389_0==CASE) && ((vhdl2008))) 8
        else {
            if (state.backtracking>0) {state.failed=true; return }
            val nvae = new NoViableAltException("", 389, 0, input)

            throw nvae
        }
        }
        alt389 match {
            case 1 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:5: COMPONENT
                	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_synpred6_Parser4880)
                	if (state.failed) return 

            case 2 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:17: ( selected_name ( GENERIC | PORT ) MAP )
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:17: ( selected_name ( GENERIC | PORT ) MAP )
                		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:18: selected_name ( GENERIC | PORT ) MAP
                		pushFollow(FOLLOW_selected_name_in_synpred6_Parser4885)
                		selected_name()

                		state._fsp-=1
                		if (state.failed) return 
                		if ( input.LA(1)==GENERIC||input.LA(1)==PORT ) {
                		    input.consume()
                		    state.errorRecovery=false
                		state.failed=false
                		}
                		else {
                		    if (state.backtracking>0) {state.failed=true; return }
                		    val mse = new MismatchedSetException(null,input)
                		    throw mse
                		}

                		`match`(input,MAP,FOLLOW_MAP_in_synpred6_Parser4895)
                		if (state.failed) return 




            case 3 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:56: ENTITY
                	`match`(input,ENTITY,FOLLOW_ENTITY_in_synpred6_Parser4900)
                	if (state.failed) return 

            case 4 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:65: CONFIGURATION
                	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_synpred6_Parser4904)
                	if (state.failed) return 

            case 5 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:81: BLOCK
                	`match`(input,BLOCK,FOLLOW_BLOCK_in_synpred6_Parser4908)
                	if (state.failed) return 

            case 6 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:89: IF ({...}? => label_colon )? condition GENERATE
                	`match`(input,IF,FOLLOW_IF_in_synpred6_Parser4912)
                	if (state.failed) return 
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:92: ({...}? => label_colon )?
                	val alt388 = {
                	val LA388_0 = input.LA(1)

                	if ( (LA388_0==BASIC_IDENTIFIER||LA388_0==EXTENDED_IDENTIFIER) ) {
                	val LA388_1 = input.LA(2)

                	if ( (LA388_1==COLON) && ((vhdl2008))) 1
                	else -1
                	}
                	else -1
                	}
                	alt388 match {
                	    case 1 =>
                	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:93: {...}? => label_colon
                	        	if ( !((vhdl2008)) ) {
                	        	    if (state.backtracking>0) {state.failed=true; return }
                	        	    throw new FailedPredicateException(input, "synpred6_Parser", "vhdl2008")
                	        	}
                	        	pushFollow(FOLLOW_label_colon_in_synpred6_Parser4917)
                	        	label_colon()

                	        	state._fsp-=1
                	        	if (state.failed) return 


                	    case _ =>
                	}

                	pushFollow(FOLLOW_condition_in_synpred6_Parser4921)
                	condition()

                	state._fsp-=1
                	if (state.failed) return 
                	`match`(input,GENERATE,FOLLOW_GENERATE_in_synpred6_Parser4923)
                	if (state.failed) return 

            case 7 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:141: FOR
                	`match`(input,FOR,FOLLOW_FOR_in_synpred6_Parser4927)
                	if (state.failed) return 

            case 8 =>
                	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:845:147: {...}? => CASE expression GENERATE
                	if ( !((vhdl2008)) ) {
                	    if (state.backtracking>0) {state.failed=true; return }
                	    throw new FailedPredicateException(input, "synpred6_Parser", "vhdl2008")
                	}
                	`match`(input,CASE,FOLLOW_CASE_in_synpred6_Parser4934)
                	if (state.failed) return 
                	pushFollow(FOLLOW_expression_in_synpred6_Parser4936)
                	expression()

                	state._fsp-=1
                	if (state.failed) return 
                	`match`(input,GENERATE,FOLLOW_GENERATE_in_synpred6_Parser4938)
                	if (state.failed) return 


            case _ =>
        }}
    // $ANTLR end synpred6_Parser

    // $ANTLR start synpred7_Parser
    @throws(classOf[RecognitionException])
    def synpred7_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:4: ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:5: {...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )
        	if ( !((ams)) ) {
        	    if (state.backtracking>0) {state.failed=true; return }
        	    throw new FailedPredicateException(input, "synpred7_Parser", "ams")
        	}
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:13: ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )
        	val alt390 = dfa390.predict(input)
        	alt390 match {
        	    case 1 =>
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:14: ( simple_expression AMS_ASSIGN )
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:14: ( simple_expression AMS_ASSIGN )
        	        		// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:15: simple_expression AMS_ASSIGN
        	        		pushFollow(FOLLOW_simple_expression_in_synpred7_Parser5034)
        	        		simple_expression()

        	        		state._fsp-=1
        	        		if (state.failed) return 
        	        		`match`(input,AMS_ASSIGN,FOLLOW_AMS_ASSIGN_in_synpred7_Parser5036)
        	        		if (state.failed) return 




        	    case 2 =>
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:47: IF
        	        	`match`(input,IF,FOLLOW_IF_in_synpred7_Parser5041)
        	        	if (state.failed) return 

        	    case 3 =>
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:52: PROCEDURAL
        	        	`match`(input,PROCEDURAL,FOLLOW_PROCEDURAL_in_synpred7_Parser5045)
        	        	if (state.failed) return 

        	    case 4 =>
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:65: CASE
        	        	`match`(input,CASE,FOLLOW_CASE_in_synpred7_Parser5049)
        	        	if (state.failed) return 

        	    case 5 =>
        	        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:857:72: NULL
        	        	`match`(input,NULL,FOLLOW_NULL_in_synpred7_Parser5053)
        	        	if (state.failed) return 


        	    case _ =>
        	}



    }
    // $ANTLR end synpred7_Parser

    // $ANTLR start synpred8_Parser
    @throws(classOf[RecognitionException])
    def synpred8_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:862:5: ( concurrent_procedure_call_statement[null,true] )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:862:6: concurrent_procedure_call_statement[null,true]
        	pushFollow(FOLLOW_concurrent_procedure_call_statement_in_synpred8_Parser5097)
        	concurrent_procedure_call_statement(null, true)

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred8_Parser

    // $ANTLR start synpred9_Parser
    @throws(classOf[RecognitionException])
    def synpred9_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1153:4: ( procedure_call_statement[null] )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1153:5: procedure_call_statement[null]
        	pushFollow(FOLLOW_procedure_call_statement_in_synpred9_Parser6938)
        	procedure_call_statement(null)

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred9_Parser

    // $ANTLR start synpred10_Parser
    @throws(classOf[RecognitionException])
    def synpred10_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1450:3: ( formal_part ARROW )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1450:4: formal_part ARROW
        	pushFollow(FOLLOW_formal_part_in_synpred10_Parser8960)
        	formal_part()

        	state._fsp-=1
        	if (state.failed) return 
        	`match`(input,ARROW,FOLLOW_ARROW_in_synpred10_Parser8962)
        	if (state.failed) return 


    }
    // $ANTLR end synpred10_Parser

    // $ANTLR start synpred11_Parser
    @throws(classOf[RecognitionException])
    def synpred11_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:19: ( name_association_list_part )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1462:20: name_association_list_part
        	pushFollow(FOLLOW_name_association_list_part_in_synpred11_Parser9040)
        	name_association_list_part()

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred11_Parser

    // $ANTLR start synpred12_Parser
    @throws(classOf[RecognitionException])
    def synpred12_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1643:4: ( name_association_list_part )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1643:5: name_association_list_part
        	pushFollow(FOLLOW_name_association_list_part_in_synpred12_Parser10092)
        	name_association_list_part()

        	state._fsp-=1
        	if (state.failed) return 


    }
    // $ANTLR end synpred12_Parser

    // $ANTLR start synpred13_Parser
    @throws(classOf[RecognitionException])
    def synpred13_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:4: ( LPAREN )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1663:5: LPAREN
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred13_Parser10247)
        	if (state.failed) return 


    }
    // $ANTLR end synpred13_Parser

    // $ANTLR start synpred14_Parser
    @throws(classOf[RecognitionException])
    def synpred14_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1719:4: ( choices ARROW )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1719:5: choices ARROW
        	pushFollow(FOLLOW_choices_in_synpred14_Parser10597)
        	choices()

        	state._fsp-=1
        	if (state.failed) return 
        	`match`(input,ARROW,FOLLOW_ARROW_in_synpred14_Parser10599)
        	if (state.failed) return 


    }
    // $ANTLR end synpred14_Parser

    // $ANTLR start synpred15_Parser
    @throws(classOf[RecognitionException])
    def synpred15_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1733:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1733:3: identifier ( BAR | ARROW | COMMA | SEMICOLON )
        	pushFollow(FOLLOW_identifier_in_synpred15_Parser10671)
        	identifier()

        	state._fsp-=1
        	if (state.failed) return 
        	if ( (input.LA(1)>=COMMA && input.LA(1)<=SEMICOLON)||(input.LA(1)>=BAR && input.LA(1)<=ARROW) ) {
        	    input.consume()
        	    state.errorRecovery=false
        	state.failed=false
        	}
        	else {
        	    if (state.backtracking>0) {state.failed=true; return }
        	    val mse = new MismatchedSetException(null,input)
        	    throw mse
        	}



    }
    // $ANTLR end synpred15_Parser

    // $ANTLR start synpred16_Parser
    @throws(classOf[RecognitionException])
    def synpred16_Parser_fragment(): Unit = {   
        // .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1734:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )
        	// .\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\Parser.g:1734:5: simple_expression ( BAR | ARROW | COMMA | SEMICOLON )
        	pushFollow(FOLLOW_simple_expression_in_synpred16_Parser10698)
        	simple_expression()

        	state._fsp-=1
        	if (state.failed) return 
        	if ( (input.LA(1)>=COMMA && input.LA(1)<=SEMICOLON)||(input.LA(1)>=BAR && input.LA(1)<=ARROW) ) {
        	    input.consume()
        	    state.errorRecovery=false
        	state.failed=false
        	}
        	else {
        	    if (state.backtracking>0) {state.failed=true; return }
        	    val mse = new MismatchedSetException(null,input)
        	    throw mse
        	}



    }
    // $ANTLR end synpred16_Parser

    // Delegated rules

    final def synpred7_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred7_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred4_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred4_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred11_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred11_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred15_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred15_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred16_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred16_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred1_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred1_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred5_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred5_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred13_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred13_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred2_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred2_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred8_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred8_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred14_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred14_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred12_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred12_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred3_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred3_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred10_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred10_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred6_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred6_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    final def synpred9_Parser(): Boolean = {
        state.backtracking+=1
        val start = input.mark()
        try {
            synpred9_Parser_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => error("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }


    private val dfa4 = new DFA4(this)
    private val dfa19 = new DFA19(this)
    private val dfa27 = new DFA27(this)
    private val dfa43 = new DFA43(this)
    private val dfa48 = new DFA48(this)
    private val dfa66 = new DFA66(this)
    private val dfa71 = new DFA71(this)
    private val dfa104 = new DFA104(this)
    private val dfa124 = new DFA124(this)
    private val dfa128 = new DFA128(this)
    private val dfa139 = new DFA139(this)
    private val dfa152 = new DFA152(this)
    private val dfa160 = new DFA160(this)
    private val dfa162 = new DFA162(this)
    private val dfa167 = new DFA167(this)
    private val dfa178 = new DFA178(this)
    private val dfa185 = new DFA185(this)
    private val dfa217 = new DFA217(this)
    private val dfa223 = new DFA223(this)
    private val dfa235 = new DFA235(this)
    private val dfa237 = new DFA237(this)
    private val dfa238 = new DFA238(this)
    private val dfa330 = new DFA330(this)
    private val dfa331 = new DFA331(this)
    private val dfa356 = new DFA356(this)
    private val dfa362 = new DFA362(this)
    private val dfa370 = new DFA370(this)
    private val dfa382 = new DFA382(this)
    private val dfa384 = new DFA384(this)
    private val dfa390 = new DFA390(this)

    final private class DFA4(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\13\uffff"
        val eofS = "\13\uffff"
        val minS = "\1\12\2\uffff\1\20\3\uffff\1\52\1\7\2\uffff"
        val maxS = "\1\u008c\2\uffff\1\u00a5\3\uffff\1\52\1\u0099\2\uffff"
        val acceptS = "\1\uffff\1\1\1\2\1\uffff\1\6\1\7\1\4\2\uffff\1\5"+
        "\1\3"
        val specialS = "\1\1\7\uffff\1\0\2\uffff}>"
        val transitionS = Array("\1\2\12\uffff\1\5\6\uffff\1\1\41\uffff"+
    "\1\3\115\uffff\1\4",
    "",
    "",
    "\1\6\u0092\uffff\1\7\1\uffff\1\7",
    "",
    "",
    "",
    "\1\10",
    "\1\12\5\uffff\1\12\6\uffff\1\12\1\uffff\2\12\3\uffff\1\12\2\uffff"+
    "\1\12\1\uffff\1\12\1\uffff\2\12\2\uffff\1\12\14\uffff\1\11\12\uffff"+
    "\1\12\2\uffff\1\12\2\uffff\1\12\13\uffff\2\12\4\uffff\1\12\3\uffff\1"+
    "\12\3\uffff\2\12\61\uffff\2\12\6\uffff\1\12",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 4
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "103:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA4_8 = input.LA(1)

                         
                        val index4_8 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA4_8==NEW) && ((vhdl2008))) 9
                        else if ( (LA4_8==ALIAS||LA4_8==ATTRIBUTE||LA4_8==COMPONENT||(LA4_8>=CONSTANT && LA4_8<=DISCONNECT)||LA4_8==END||LA4_8==FILE||LA4_8==FUNCTION||(LA4_8>=GENERIC && LA4_8<=GROUP)||LA4_8==IMPURE||LA4_8==PACKAGE||LA4_8==PROCEDURE||LA4_8==PURE||(LA4_8>=SHARED && LA4_8<=SIGNAL)||LA4_8==SUBTYPE||LA4_8==TYPE||(LA4_8>=USE && LA4_8<=VARIABLE)||(LA4_8>=NATURE && LA4_8<=TERMINAL)||LA4_8==SUBNATURE) ) 10
                        else -1
                         
                        input.seek(index4_8)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA4_0 = input.LA(1)

                         
                        val index4_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA4_0==ENTITY) ) 1
                        else if ( (LA4_0==ARCHITECTURE) ) 2
                        else if ( (LA4_0==PACKAGE) ) 3
                        else if ( (LA4_0==CONTEXT) && ((vhdl2008))) 4
                        else if ( (LA4_0==CONFIGURATION) ) 5
                        else -1
                         
                        input.seek(index4_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 4, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA19(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\32\uffff"
        val eofS = "\32\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\10\uffff\1\u00a3\2\uffff"+
        "\1\u00a3\1\uffff\2\42\1\70\1\52\1\7\4\uffff"
        val maxS = "\1\u009a\1\u00a5\1\uffff\1\u00ad\10\uffff\1\u00a5\2"+
        "\uffff\1\u00a5\1\uffff\2\u008e\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\11\1\uffff\1\14\1\15\1\uffff\1\20\5\uffff\1\12\1\13\1\16\1\17"
        val specialS = "\1\2\21\uffff\1\1\2\uffff\1\0\4\uffff}>"
        val transitionS = Array("\1\13\5\uffff\1\14\10\uffff\1\7\1\15\6"+
    "\uffff\1\12\1\uffff\1\3\2\uffff\1\17\2\uffff\1\2\27\uffff\1\4\2\uffff"+
    "\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff\1\5\3\uffff"+
    "\1\16\1\11\61\uffff\3\20\5\uffff\2\20",
    "\1\21\1\uffff\1\21",
    "",
    "\1\22\1\uffff\1\22\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\23\1\uffff\1\23",
    "",
    "",
    "\1\24\1\uffff\1\24",
    "",
    "\1\2\7\uffff\1\25\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\27\67\uffff\1\26",
    "\1\30\105\uffff\1\31",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 19
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "165:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA19_21 = input.LA(1)

                         
                        val index19_21 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA19_21==NEW) && ((vhdl2008))) 4
                        else if ( (LA19_21==ALIAS||(LA19_21>=ATTRIBUTE && LA19_21<=BEGIN)||LA19_21==CONSTANT||LA19_21==FILE||LA19_21==FUNCTION||LA19_21==GROUP||LA19_21==IMPURE||LA19_21==PACKAGE||LA19_21==PROCEDURE||LA19_21==PURE||LA19_21==SHARED||LA19_21==SUBTYPE||LA19_21==TYPE||(LA19_21>=USE && LA19_21<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index19_21)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA19_18 = input.LA(1)

                         
                        val index19_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA19_18==GENERIC||LA19_18==RETURN||LA19_18==LPAREN||LA19_18==PARAMETER) ) 2
                        else if ( (LA19_18==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index19_18)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA19_0 = input.LA(1)

                         
                        val index19_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA19_0==PROCEDURE) ) 1
                        else if ( (LA19_0==IMPURE||LA19_0==PURE) ) 2
                        else if ( (LA19_0==FUNCTION) ) 3
                        else if ( (LA19_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA19_0==TYPE) ) 5
                        else if ( (LA19_0==SUBTYPE) ) 6
                        else if ( (LA19_0==CONSTANT) ) 7
                        else if ( (LA19_0==SIGNAL) ) 8
                        else if ( (LA19_0==SHARED||LA19_0==VARIABLE) ) 9
                        else if ( (LA19_0==FILE) ) 10
                        else if ( (LA19_0==ALIAS) ) 11
                        else if ( (LA19_0==ATTRIBUTE) ) 12
                        else if ( (LA19_0==DISCONNECT) ) 13
                        else if ( (LA19_0==USE) ) 14
                        else if ( (LA19_0==GROUP) ) 15
                        else if ( ((LA19_0>=NATURE && LA19_0<=QUANTITY)||(LA19_0>=SUBNATURE && LA19_0<=LIMIT)) && ((ams))) 16
                        else -1
                         
                        input.seek(index19_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 19, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA27(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\31\uffff"
        val eofS = "\31\uffff"
        val minS = "\1\4\25\0\3\uffff"
        val maxS = "\1\u00b7\25\0\3\uffff"
        val acceptS = "\26\uffff\1\3\1\1\1\2"
        val specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3\uffff}>"
        val transitionS = Array("\1\16\4\uffff\1\22\50\uffff\1\20\1\15\1"+
    "\uffff\1\21\1\17\1\14\3\uffff\1\23\50\uffff\1\25\1\24\6\uffff\1\3\12"+
    "\uffff\1\6\5\uffff\1\4\1\5\14\uffff\1\26\27\uffff\1\1\1\uffff\1\1\3"+
    "\uffff\1\11\1\10\1\7\1\uffff\1\2\1\uffff\1\13\7\uffff\1\12",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 27
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "225:1: generate_specification returns [TripleEither[DiscreteRange,Identifier,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | {...}? => identifier | expression );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA27_0 = input.LA(1)

                         
                        val index27_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA27_0==BASIC_IDENTIFIER||LA27_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA27_0==STRING_LITERAL) ) 2
                        else if ( (LA27_0==LPAREN) ) 3
                        else if ( (LA27_0==PLUS) ) 4
                        else if ( (LA27_0==MINUS) ) 5
                        else if ( (LA27_0==DLT) && ((vhdl2008))) 6
                        else if ( (LA27_0==REAL_LITERAL) ) 7
                        else if ( (LA27_0==INTEGER_LITERAL) ) 8
                        else if ( (LA27_0==BASED_LITERAL) ) 9
                        else if ( (LA27_0==CHARACTER_LITERAL) ) 10
                        else if ( (LA27_0==BIT_STRING_LITERAL) ) 11
                        else if ( (LA27_0==NULL) ) 12
                        else if ( (LA27_0==NEW) ) 13
                        else if ( (LA27_0==ABS) ) 14
                        else if ( (LA27_0==NOT) ) 15
                        else if ( (LA27_0==NAND) && ((vhdl2008))) 16
                        else if ( (LA27_0==NOR) && ((vhdl2008))) 17
                        else if ( (LA27_0==AND) && ((vhdl2008))) 18
                        else if ( (LA27_0==OR) && ((vhdl2008))) 19
                        else if ( (LA27_0==XOR) && ((vhdl2008))) 20
                        else if ( (LA27_0==XNOR) && ((vhdl2008))) 21
                        else if ( (LA27_0==CONDITION_OPERATOR) && ((vhdl2008))) 22
                        else -1
                         
                        input.seek(index27_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA27_1 = input.LA(1)

                         
                        val index27_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred1_Parser()&&(vhdl2008))||synpred1_Parser())) ) 23
                        else if ( ((vhdl2008 && (input.LA(1)==BASIC_IDENTIFIER || input.LA(1)==EXTENDED_IDENTIFIER) && input.LA(2)==RPAREN)) ) 24
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_1)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA27_2 = input.LA(1)

                         
                        val index27_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred1_Parser()&&(vhdl2008))||synpred1_Parser())) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_2)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA27_3 = input.LA(1)

                         
                        val index27_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred1_Parser()&&(vhdl2008))||synpred1_Parser())) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_3)
                        if ( nextS>=0 ) return nextS
                    case 4 => 
                        val LA27_4 = input.LA(1)

                         
                        val index27_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_4)
                        if ( nextS>=0 ) return nextS
                    case 5 => 
                        val LA27_5 = input.LA(1)

                         
                        val index27_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_5)
                        if ( nextS>=0 ) return nextS
                    case 6 => 
                        val LA27_6 = input.LA(1)

                         
                        val index27_6 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred1_Parser()&&(vhdl2008))||(synpred1_Parser()&&(vhdl2008)))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_6)
                        if ( nextS>=0 ) return nextS
                    case 7 => 
                        val LA27_7 = input.LA(1)

                         
                        val index27_7 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_7)
                        if ( nextS>=0 ) return nextS
                    case 8 => 
                        val LA27_8 = input.LA(1)

                         
                        val index27_8 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_8)
                        if ( nextS>=0 ) return nextS
                    case 9 => 
                        val LA27_9 = input.LA(1)

                         
                        val index27_9 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_9)
                        if ( nextS>=0 ) return nextS
                    case 10 => 
                        val LA27_10 = input.LA(1)

                         
                        val index27_10 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_10)
                        if ( nextS>=0 ) return nextS
                    case 11 => 
                        val LA27_11 = input.LA(1)

                         
                        val index27_11 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_11)
                        if ( nextS>=0 ) return nextS
                    case 12 => 
                        val LA27_12 = input.LA(1)

                         
                        val index27_12 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_12)
                        if ( nextS>=0 ) return nextS
                    case 13 => 
                        val LA27_13 = input.LA(1)

                         
                        val index27_13 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_13)
                        if ( nextS>=0 ) return nextS
                    case 14 => 
                        val LA27_14 = input.LA(1)

                         
                        val index27_14 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_14)
                        if ( nextS>=0 ) return nextS
                    case 15 => 
                        val LA27_15 = input.LA(1)

                         
                        val index27_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred1_Parser()) ) 23
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index27_15)
                        if ( nextS>=0 ) return nextS
                    case 16 => 
                        val LA27_16 = input.LA(1)

                         
                        val index27_16 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_16)
                        if ( nextS>=0 ) return nextS
                    case 17 => 
                        val LA27_17 = input.LA(1)

                         
                        val index27_17 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_17)
                        if ( nextS>=0 ) return nextS
                    case 18 => 
                        val LA27_18 = input.LA(1)

                         
                        val index27_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_18)
                        if ( nextS>=0 ) return nextS
                    case 19 => 
                        val LA27_19 = input.LA(1)

                         
                        val index27_19 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_19)
                        if ( nextS>=0 ) return nextS
                    case 20 => 
                        val LA27_20 = input.LA(1)

                         
                        val index27_20 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_20)
                        if ( nextS>=0 ) return nextS
                    case 21 => 
                        val LA27_21 = input.LA(1)

                         
                        val index27_21 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred1_Parser()&&(vhdl2008))) ) 23
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index27_21)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 27, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA43(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\32\uffff"
        val eofS = "\32\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\11\uffff\1\u00a3\2\uffff"+
        "\1\u00a3\1\uffff\2\42\1\70\1\52\4\uffff"
        val maxS = "\1\u0099\1\u00a5\1\uffff\1\u00ad\11\uffff\1\u00a5\2"+
        "\uffff\1\u00a5\1\uffff\2\u008e\2\160\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\11\1\12\1\uffff\1\15\1\16\1\uffff\1\21\4\uffff\1\13\1\14\1\17"+
        "\1\20"
        val specialS = "\1\2\21\uffff\1\1\1\0\6\uffff}>"
        val transitionS = Array("\1\13\5\uffff\1\15\6\uffff\1\14\1\uffff"+
    "\1\7\1\16\6\uffff\1\12\1\uffff\1\3\2\uffff\1\20\2\uffff\1\2\27\uffff"+
    "\1\4\2\uffff\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff"+
    "\1\5\3\uffff\1\17\1\11\61\uffff\2\21\6\uffff\1\21",
    "\1\22\1\uffff\1\22",
    "",
    "\1\23\1\uffff\1\23\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\24\1\uffff\1\24",
    "",
    "",
    "\1\25\1\uffff\1\25",
    "",
    "\1\2\7\uffff\1\4\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\27\67\uffff\1\26",
    "\1\30\105\uffff\1\31",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 43
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "277:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA43_19 = input.LA(1)

                         
                        val index43_19 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA43_19==GENERIC||LA43_19==RETURN||LA43_19==LPAREN||LA43_19==PARAMETER) ) 2
                        else if ( (LA43_19==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index43_19)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA43_18 = input.LA(1)

                         
                        val index43_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA43_18==GENERIC||(LA43_18>=SEMICOLON && LA43_18<=LPAREN)||LA43_18==PARAMETER) ) 2
                        else if ( (LA43_18==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index43_18)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA43_0 = input.LA(1)

                         
                        val index43_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA43_0==PROCEDURE) ) 1
                        else if ( (LA43_0==IMPURE||LA43_0==PURE) ) 2
                        else if ( (LA43_0==FUNCTION) ) 3
                        else if ( (LA43_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA43_0==TYPE) ) 5
                        else if ( (LA43_0==SUBTYPE) ) 6
                        else if ( (LA43_0==CONSTANT) ) 7
                        else if ( (LA43_0==SIGNAL) ) 8
                        else if ( (LA43_0==SHARED||LA43_0==VARIABLE) ) 9
                        else if ( (LA43_0==FILE) ) 10
                        else if ( (LA43_0==ALIAS) ) 11
                        else if ( (LA43_0==COMPONENT) ) 12
                        else if ( (LA43_0==ATTRIBUTE) ) 13
                        else if ( (LA43_0==DISCONNECT) ) 14
                        else if ( (LA43_0==USE) ) 15
                        else if ( (LA43_0==GROUP) ) 16
                        else if ( ((LA43_0>=NATURE && LA43_0<=TERMINAL)||LA43_0==SUBNATURE) && ((ams))) 17
                        else -1
                         
                        input.seek(index43_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 43, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA48(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\10\uffff\2\u00a3\2\42\1"+
        "\70\1\52\1\7\4\uffff"
        val maxS = "\1\137\1\u00a5\1\uffff\1\u00ad\10\uffff\2\u00a5\2\u008e"+
        "\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\11\7\uffff\1\12\1\13\1\14\1\15"
        val specialS = "\1\0\16\uffff\1\3\1\2\1\uffff\1\1\4\uffff}>"
        val transitionS = Array("\1\12\5\uffff\1\14\10\uffff\1\7\7\uffff"+
    "\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff\1\1"+
    "\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\13\1\10",
    "\1\16\1\uffff\1\16",
    "",
    "\1\17\1\uffff\1\17\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\20\1\uffff\1\20",
    "\1\21\1\uffff\1\21",
    "\1\2\7\uffff\1\22\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\24\67\uffff\1\23",
    "\1\25\105\uffff\1\26",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 48
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "314:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA48_0 = input.LA(1)

                         
                        val index48_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA48_0==PROCEDURE) ) 1
                        else if ( (LA48_0==IMPURE||LA48_0==PURE) ) 2
                        else if ( (LA48_0==FUNCTION) ) 3
                        else if ( (LA48_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA48_0==TYPE) ) 5
                        else if ( (LA48_0==SUBTYPE) ) 6
                        else if ( (LA48_0==CONSTANT) ) 7
                        else if ( (LA48_0==SHARED||LA48_0==VARIABLE) ) 8
                        else if ( (LA48_0==FILE) ) 9
                        else if ( (LA48_0==ALIAS) ) 10
                        else if ( (LA48_0==USE) ) 11
                        else if ( (LA48_0==ATTRIBUTE) ) 12
                        else if ( (LA48_0==GROUP) ) 13
                        else -1
                         
                        input.seek(index48_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA48_18 = input.LA(1)

                         
                        val index48_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA48_18==NEW) && ((vhdl2008))) 4
                        else if ( (LA48_18==ALIAS||(LA48_18>=ATTRIBUTE && LA48_18<=BEGIN)||LA48_18==CONSTANT||LA48_18==FILE||LA48_18==FUNCTION||LA48_18==GROUP||LA48_18==IMPURE||LA48_18==PACKAGE||LA48_18==PROCEDURE||LA48_18==PURE||LA48_18==SHARED||LA48_18==SUBTYPE||LA48_18==TYPE||(LA48_18>=USE && LA48_18<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index48_18)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA48_16 = input.LA(1)

                         
                        val index48_16 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA48_16==COLON) && ((vhdl2008))) 19
                        else if ( (LA48_16==OF) ) 20
                        else -1
                         
                        input.seek(index48_16)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA48_15 = input.LA(1)

                         
                        val index48_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA48_15==GENERIC||LA48_15==RETURN||LA48_15==LPAREN||LA48_15==PARAMETER) ) 2
                        else if ( (LA48_15==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index48_15)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 48, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA66(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\7\uffff\1\u00a3\1\uffff"+
        "\1\u00a3\2\42\1\70\1\52\1\7\4\uffff"
        val maxS = "\1\137\1\u00a5\1\uffff\1\u00ad\7\uffff\1\u00a5\1\uffff"+
        "\1\u00a5\2\u008e\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\uffff\1\13\6\uffff\1\11\1\12\1\14\1\15"
        val specialS = "\1\2\16\uffff\1\1\2\uffff\1\0\4\uffff}>"
        val transitionS = Array("\1\12\5\uffff\1\13\10\uffff\1\7\7\uffff"+
    "\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff\1\1"+
    "\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
    "\1\16\1\uffff\1\16",
    "",
    "\1\17\1\uffff\1\17\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\20\1\uffff\1\20",
    "",
    "\1\21\1\uffff\1\21",
    "\1\2\7\uffff\1\22\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\24\67\uffff\1\23",
    "\1\25\105\uffff\1\26",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 66
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "379:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA66_18 = input.LA(1)

                         
                        val index66_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA66_18==NEW) && ((vhdl2008))) 4
                        else if ( (LA66_18==ALIAS||(LA66_18>=ATTRIBUTE && LA66_18<=BEGIN)||LA66_18==CONSTANT||LA66_18==FILE||LA66_18==FUNCTION||LA66_18==GROUP||LA66_18==IMPURE||LA66_18==PACKAGE||LA66_18==PROCEDURE||LA66_18==PURE||LA66_18==SHARED||LA66_18==SUBTYPE||LA66_18==TYPE||(LA66_18>=USE && LA66_18<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index66_18)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA66_15 = input.LA(1)

                         
                        val index66_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA66_15==GENERIC||LA66_15==RETURN||LA66_15==LPAREN||LA66_15==PARAMETER) ) 2
                        else if ( (LA66_15==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index66_15)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA66_0 = input.LA(1)

                         
                        val index66_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA66_0==PROCEDURE) ) 1
                        else if ( (LA66_0==IMPURE||LA66_0==PURE) ) 2
                        else if ( (LA66_0==FUNCTION) ) 3
                        else if ( (LA66_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA66_0==TYPE) ) 5
                        else if ( (LA66_0==SUBTYPE) ) 6
                        else if ( (LA66_0==CONSTANT) ) 7
                        else if ( (LA66_0==SHARED||LA66_0==VARIABLE) ) 8
                        else if ( (LA66_0==FILE) ) 9
                        else if ( (LA66_0==ALIAS) ) 10
                        else if ( (LA66_0==ATTRIBUTE) ) 11
                        else if ( (LA66_0==USE) ) 12
                        else if ( (LA66_0==GROUP) ) 13
                        else -1
                         
                        input.seek(index66_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 66, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA71(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\12\uffff"
        val eofS = "\12\uffff"
        val minS = "\1\5\6\uffff\1\15\2\uffff"
        val maxS = "\1\154\6\uffff\1\136\2\uffff"
        val acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10"
        val specialS = "\12\uffff}>"
        val transitionS = Array("\1\5\5\uffff\1\3\22\uffff\1\6\44\uffff"+
    "\1\7\1\uffff\1\2\1\4\45\uffff\1\1",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\11\2\uffff\1\10\12\uffff\1\11\4\uffff\1\11\5\uffff\1\11\32\uffff"+
    "\1\11\2\uffff\1\11\31\uffff\1\11",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 71
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "411:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | numeric_type_definition[$id,pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );"
    }
    final private class DFA104(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\23\uffff"
        val eofS = "\23\uffff"
        val minS = "\1\12\22\uffff"
        val maxS = "\1\u0099\22\uffff"
        val acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
        val specialS = "\1\0\22\uffff}>"
        val transitionS = Array("\1\2\11\uffff\1\15\1\3\1\11\5\uffff\1\1"+
    "\1\uffff\1\14\1\uffff\1\6\2\uffff\1\21\7\uffff\1\16\2\uffff\1\17\17"+
    "\uffff\1\4\2\uffff\1\5\17\uffff\1\12\4\uffff\1\10\3\uffff\1\7\1\uffff"+
    "\1\20\2\uffff\1\13\61\uffff\3\22\5\uffff\1\22",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 104
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "528:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA104_0 = input.LA(1)

                         
                        val index104_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA104_0==ENTITY) ) 1
                        else if ( (LA104_0==ARCHITECTURE) ) 2
                        else if ( (LA104_0==CONFIGURATION) ) 3
                        else if ( (LA104_0==PACKAGE) ) 4
                        else if ( (LA104_0==PROCEDURE) ) 5
                        else if ( (LA104_0==FUNCTION) ) 6
                        else if ( (LA104_0==TYPE) ) 7
                        else if ( (LA104_0==SUBTYPE) ) 8
                        else if ( (LA104_0==CONSTANT) ) 9
                        else if ( (LA104_0==SIGNAL) ) 10
                        else if ( (LA104_0==VARIABLE) ) 11
                        else if ( (LA104_0==FILE) ) 12
                        else if ( (LA104_0==COMPONENT) ) 13
                        else if ( (LA104_0==LABEL) ) 14
                        else if ( (LA104_0==LITERAL) ) 15
                        else if ( (LA104_0==UNITS) ) 16
                        else if ( (LA104_0==GROUP) ) 17
                        else if ( ((LA104_0>=NATURE && LA104_0<=QUANTITY)||LA104_0==SUBNATURE) && ((ams))) 18
                        else -1
                         
                        input.seek(index104_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 104, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA124(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\14\uffff"
        val eofS = "\14\uffff"
        val minS = "\1\154\1\4\2\30\1\uffff\1\10\1\4\4\30\1\uffff"
        val maxS = "\1\154\1\u00b7\2\u00ad\1\uffff\2\u00b7\4\u00ad\1\uffff"
        val acceptS = "\4\uffff\1\2\6\uffff\1\1"
        val specialS = "\14\uffff}>"
        val transitionS = Array("\1\1",
    "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4"+
    "\6\uffff\1\4\12\uffff\1\4\5\uffff\2\4\44\uffff\1\2\1\uffff\1\2\3\uffff"+
    "\3\4\1\uffff\1\3\1\uffff\1\4\7\uffff\1\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "",
    "\1\12\u009a\uffff\1\7\1\uffff\1\7\7\uffff\1\11\11\uffff\1\10",
    "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4"+
    "\2\uffff\1\13\3\uffff\1\4\12\uffff\1\4\5\uffff\2\4\44\uffff\1\4\1\uffff"+
    "\1\4\3\uffff\3\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 124
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "661:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"
    }
    final private class DFA128(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\14\uffff"
        val eofS = "\14\uffff"
        val minS = "\1\154\1\4\2\30\1\uffff\1\10\1\4\4\30\1\uffff"
        val maxS = "\1\154\1\u00b7\2\u00ad\1\uffff\2\u00b7\4\u00ad\1\uffff"
        val acceptS = "\4\uffff\1\2\6\uffff\1\1"
        val specialS = "\14\uffff}>"
        val transitionS = Array("\1\1",
    "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4"+
    "\6\uffff\1\4\12\uffff\1\4\5\uffff\2\4\44\uffff\1\2\1\uffff\1\2\3\uffff"+
    "\3\4\1\uffff\1\3\1\uffff\1\4\7\uffff\1\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "",
    "\1\12\u009a\uffff\1\7\1\uffff\1\7\7\uffff\1\11\11\uffff\1\10",
    "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4"+
    "\2\uffff\1\13\3\uffff\1\4\12\uffff\1\4\5\uffff\2\4\44\uffff\1\4\1\uffff"+
    "\1\4\3\uffff\3\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\21\uffff\1"+
    "\4\1\uffff\3\4\2\uffff\1\5\1\4\7\uffff\5\4\25\uffff\1\4\16\uffff\1\4"+
    "\1\uffff\1\4\6\uffff\2\4",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 128
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "699:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"
    }
    final private class DFA139(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\7\uffff\1\u00a3\1\uffff"+
        "\1\u00a3\2\42\1\70\1\52\1\7\4\uffff"
        val maxS = "\1\137\1\u00a5\1\uffff\1\u00ad\7\uffff\1\u00a5\1\uffff"+
        "\1\u00a5\2\u008e\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\uffff\1\13\6\uffff\1\11\1\12\1\14\1\15"
        val specialS = "\1\0\16\uffff\1\2\2\uffff\1\1\4\uffff}>"
        val transitionS = Array("\1\12\5\uffff\1\13\10\uffff\1\7\7\uffff"+
    "\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff\1\1"+
    "\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
    "\1\16\1\uffff\1\16",
    "",
    "\1\17\1\uffff\1\17\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\20\1\uffff\1\20",
    "",
    "\1\21\1\uffff\1\21",
    "\1\2\7\uffff\1\22\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\24\67\uffff\1\23",
    "\1\25\105\uffff\1\26",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 139
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "758:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA139_0 = input.LA(1)

                         
                        val index139_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA139_0==PROCEDURE) ) 1
                        else if ( (LA139_0==IMPURE||LA139_0==PURE) ) 2
                        else if ( (LA139_0==FUNCTION) ) 3
                        else if ( (LA139_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA139_0==TYPE) ) 5
                        else if ( (LA139_0==SUBTYPE) ) 6
                        else if ( (LA139_0==CONSTANT) ) 7
                        else if ( (LA139_0==SHARED||LA139_0==VARIABLE) ) 8
                        else if ( (LA139_0==FILE) ) 9
                        else if ( (LA139_0==ALIAS) ) 10
                        else if ( (LA139_0==ATTRIBUTE) ) 11
                        else if ( (LA139_0==USE) ) 12
                        else if ( (LA139_0==GROUP) ) 13
                        else -1
                         
                        input.seek(index139_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA139_18 = input.LA(1)

                         
                        val index139_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA139_18==NEW) && ((vhdl2008))) 4
                        else if ( (LA139_18==ALIAS||(LA139_18>=ATTRIBUTE && LA139_18<=BEGIN)||LA139_18==CONSTANT||LA139_18==FILE||LA139_18==FUNCTION||LA139_18==GROUP||LA139_18==IMPURE||LA139_18==PACKAGE||LA139_18==PROCEDURE||LA139_18==PURE||LA139_18==SHARED||LA139_18==SUBTYPE||LA139_18==TYPE||(LA139_18>=USE && LA139_18<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index139_18)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA139_15 = input.LA(1)

                         
                        val index139_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA139_15==GENERIC||LA139_15==RETURN||LA139_15==LPAREN||LA139_15==PARAMETER) ) 2
                        else if ( (LA139_15==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index139_15)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 139, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA152(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\4\2\uffff\3\0\21\uffff"
        val maxS = "\1\u00b7\2\uffff\3\0\21\uffff"
        val acceptS = "\1\uffff\2\1\3\uffff\20\1\1\2"
        val specialS = "\1\0\2\uffff\1\1\1\2\1\3\21\uffff}>"
        val transitionS = Array("\1\16\4\uffff\1\22\50\uffff\1\20\1\14\1"+
    "\uffff\1\21\1\17\1\13\3\uffff\1\23\50\uffff\1\25\1\24\6\uffff\1\15\12"+
    "\uffff\1\5\5\uffff\1\1\1\2\44\uffff\1\3\1\uffff\1\3\3\uffff\1\10\1\7"+
    "\1\6\1\uffff\1\4\1\uffff\1\12\7\uffff\1\11",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 152
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "808:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA152_0 = input.LA(1)

                         
                        val index152_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA152_0==PLUS) && (synpred4_Parser())) 1
                        else if ( (LA152_0==MINUS) && (synpred4_Parser())) 2
                        else if ( (LA152_0==BASIC_IDENTIFIER||LA152_0==EXTENDED_IDENTIFIER) ) 3
                        else if ( (LA152_0==STRING_LITERAL) ) 4
                        else if ( (LA152_0==DLT) && ((vhdl2008))) 5
                        else if ( (LA152_0==REAL_LITERAL) && (synpred4_Parser())) 6
                        else if ( (LA152_0==INTEGER_LITERAL) && (synpred4_Parser())) 7
                        else if ( (LA152_0==BASED_LITERAL) && (synpred4_Parser())) 8
                        else if ( (LA152_0==CHARACTER_LITERAL) && (synpred4_Parser())) 9
                        else if ( (LA152_0==BIT_STRING_LITERAL) && (synpred4_Parser())) 10
                        else if ( (LA152_0==NULL) && (synpred4_Parser())) 11
                        else if ( (LA152_0==NEW) && (synpred4_Parser())) 12
                        else if ( (LA152_0==LPAREN) && (synpred4_Parser())) 13
                        else if ( (LA152_0==ABS) && (synpred4_Parser())) 14
                        else if ( (LA152_0==NOT) && (synpred4_Parser())) 15
                        else if ( (LA152_0==NAND) && ((synpred4_Parser()&&(vhdl2008)))) 16
                        else if ( (LA152_0==NOR) && ((synpred4_Parser()&&(vhdl2008)))) 17
                        else if ( (LA152_0==AND) && ((synpred4_Parser()&&(vhdl2008)))) 18
                        else if ( (LA152_0==OR) && ((synpred4_Parser()&&(vhdl2008)))) 19
                        else if ( (LA152_0==XOR) && ((synpred4_Parser()&&(vhdl2008)))) 20
                        else if ( (LA152_0==XNOR) && ((synpred4_Parser()&&(vhdl2008)))) 21
                        else -1
                         
                        input.seek(index152_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA152_3 = input.LA(1)

                         
                        val index152_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred4_Parser()) ) 21
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index152_3)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA152_4 = input.LA(1)

                         
                        val index152_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred4_Parser()) ) 21
                        else if ( (true) ) 22
                        else -1
                         
                        input.seek(index152_4)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA152_5 = input.LA(1)

                         
                        val index152_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred4_Parser()&&(vhdl2008))) ) 21
                        else if ( ((vhdl2008)) ) 22
                        else -1
                         
                        input.seek(index152_5)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 152, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA160(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\4\3\0\23\uffff"
        val maxS = "\1\u00b7\3\0\23\uffff"
        val acceptS = "\4\uffff\1\2\1\uffff\2\2\10\uffff\1\2\5\uffff\1\1"
        val specialS = "\1\0\1\1\1\2\1\3\23\uffff}>"
        val transitionS = Array("\1\7\4\uffff\1\20\50\uffff\1\20\1\7\1\uffff"+
    "\1\20\2\7\3\uffff\1\20\50\uffff\2\20\6\uffff\1\3\12\uffff\1\6\5\uffff"+
    "\2\4\44\uffff\1\1\1\uffff\1\1\3\uffff\3\7\1\uffff\1\2\1\uffff\1\7\7"+
    "\uffff\1\7",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 160
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "828:1: discrete_range returns [DiscreteRange discreteRange] : ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA160_0 = input.LA(1)

                         
                        val index160_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA160_0==BASIC_IDENTIFIER||LA160_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA160_0==STRING_LITERAL) ) 2
                        else if ( (LA160_0==LPAREN) ) 3
                        else if ( ((LA160_0>=PLUS && LA160_0<=MINUS)) ) 4
                        else if ( (LA160_0==DLT) && ((vhdl2008))) 6
                        else if ( (LA160_0==ABS||LA160_0==NEW||(LA160_0>=NOT && LA160_0<=NULL)||(LA160_0>=BASED_LITERAL && LA160_0<=REAL_LITERAL)||LA160_0==BIT_STRING_LITERAL||LA160_0==CHARACTER_LITERAL) ) 7
                        else if ( (LA160_0==AND||LA160_0==NAND||LA160_0==NOR||LA160_0==OR||(LA160_0>=XNOR && LA160_0<=XOR)) && ((vhdl2008))) 16
                        else -1
                         
                        input.seek(index160_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA160_1 = input.LA(1)

                         
                        val index160_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred5_Parser()&&(vhdl2008))||synpred5_Parser())) ) 22
                        else if ( (true) ) 16
                        else -1
                         
                        input.seek(index160_1)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA160_2 = input.LA(1)

                         
                        val index160_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred5_Parser()&&(vhdl2008))||synpred5_Parser())) ) 22
                        else if ( (true) ) 16
                        else -1
                         
                        input.seek(index160_2)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA160_3 = input.LA(1)

                         
                        val index160_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred5_Parser()&&(vhdl2008))) ) 22
                        else if ( (true) ) 16
                        else -1
                         
                        input.seek(index160_3)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 160, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA162(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\43\uffff"
        val eofS = "\43\uffff"
        val minS = "\1\4\1\uffff\2\0\4\uffff\2\0\31\uffff"
        val maxS = "\1\u00b7\1\uffff\2\0\4\uffff\2\0\31\uffff"
        val acceptS = "\1\uffff\1\1\2\uffff\4\1\2\uffff\2\2\1\uffff\2\2"+
        "\11\uffff\1\2\5\uffff\1\2\4\uffff"
        val specialS = "\1\0\1\uffff\1\1\1\2\4\uffff\1\3\1\4\31\uffff}>"
        val transitionS = Array("\1\16\4\uffff\1\30\2\uffff\1\36\2\uffff"+
    "\1\6\3\uffff\1\11\1\1\1\5\6\uffff\1\4\2\uffff\1\7\5\uffff\1\10\14\uffff"+
    "\1\30\1\16\1\uffff\1\30\2\16\3\uffff\1\30\4\uffff\1\36\1\uffff\1\36"+
    "\40\uffff\1\36\2\30\6\uffff\1\16\12\uffff\1\15\5\uffff\2\13\35\uffff"+
    "\1\12\1\36\5\uffff\1\2\1\uffff\1\2\3\uffff\3\16\1\uffff\1\3\1\uffff"+
    "\1\16\7\uffff\1\16",
    "",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 162
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "844:22: ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA162_0 = input.LA(1)

                         
                        val index162_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA162_0==COMPONENT) && (synpred6_Parser())) 1
                        else if ( (LA162_0==BASIC_IDENTIFIER||LA162_0==EXTENDED_IDENTIFIER) ) 2
                        else if ( (LA162_0==STRING_LITERAL) ) 3
                        else if ( (LA162_0==ENTITY) && (synpred6_Parser())) 4
                        else if ( (LA162_0==CONFIGURATION) && (synpred6_Parser())) 5
                        else if ( (LA162_0==BLOCK) && (synpred6_Parser())) 6
                        else if ( (LA162_0==FOR) && (synpred6_Parser())) 7
                        else if ( (LA162_0==IF) ) 8
                        else if ( (LA162_0==CASE) ) 9
                        else if ( (LA162_0==BREAK) && ((ams))) 10
                        else if ( ((LA162_0>=PLUS && LA162_0<=MINUS)) ) 11
                        else if ( (LA162_0==DLT) && ((vhdl2008))) 13
                        else if ( (LA162_0==ABS||LA162_0==NEW||(LA162_0>=NOT && LA162_0<=NULL)||LA162_0==LPAREN||(LA162_0>=BASED_LITERAL && LA162_0<=REAL_LITERAL)||LA162_0==BIT_STRING_LITERAL||LA162_0==CHARACTER_LITERAL) ) 14
                        else if ( (LA162_0==AND||LA162_0==NAND||LA162_0==NOR||LA162_0==OR||(LA162_0>=XNOR && LA162_0<=XOR)) && ((vhdl2008))) 24
                        else if ( (LA162_0==ASSERT||LA162_0==POSTPONED||LA162_0==PROCESS||LA162_0==WITH||LA162_0==PROCEDURAL) ) 30
                        else -1
                         
                        input.seek(index162_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA162_2 = input.LA(1)

                         
                        val index162_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred6_Parser()) ) 7
                        else if ( (true) ) 30
                        else -1
                         
                        input.seek(index162_2)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA162_3 = input.LA(1)

                         
                        val index162_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred6_Parser()) ) 7
                        else if ( (true) ) 30
                        else -1
                         
                        input.seek(index162_3)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA162_8 = input.LA(1)

                         
                        val index162_8 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred6_Parser()) ) 7
                        else if ( (true) ) 30
                        else -1
                         
                        input.seek(index162_8)
                        if ( nextS>=0 ) return nextS
                    case 4 => 
                        val LA162_9 = input.LA(1)

                         
                        val index162_9 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred6_Parser()&&(vhdl2008))) ) 7
                        else if ( (true) ) 30
                        else -1
                         
                        input.seek(index162_9)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 162, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA167(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\36\uffff"
        val eofS = "\36\uffff"
        val minS = "\1\4\3\uffff\3\0\7\uffff\1\0\17\uffff"
        val maxS = "\1\u00b7\3\uffff\3\0\7\uffff\1\0\17\uffff"
        val acceptS = "\1\uffff\1\1\2\2\3\uffff\7\2\1\uffff\13\2\1\3\3\uffff"
        val specialS = "\1\0\3\uffff\1\1\1\2\1\3\7\uffff\1\4\17\uffff}>"
        val transitionS = Array("\1\17\4\uffff\1\23\2\uffff\1\32\6\uffff"+
    "\1\31\21\uffff\1\27\14\uffff\1\21\1\15\1\uffff\1\22\1\20\1\14\3\uffff"+
    "\1\24\4\uffff\1\32\1\uffff\1\32\40\uffff\1\32\1\26\1\25\6\uffff\1\16"+
    "\12\uffff\1\6\5\uffff\1\2\1\3\35\uffff\1\1\1\30\5\uffff\1\4\1\uffff"+
    "\1\4\3\uffff\1\11\1\10\1\7\1\uffff\1\5\1\uffff\1\13\7\uffff\1\12",
    "",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 167
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "855:1: concurrent_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( concurrent_procedure_call_statement[null,true] )=> concurrent_procedure_call_statement[$label,postponed!=null] | concurrent_signal_assignment_statement[$label,postponed!=null] ) );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA167_0 = input.LA(1)

                         
                        val index167_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA167_0==BREAK) && ((ams))) 1
                        else if ( (LA167_0==PLUS) && (synpred7_Parser())) 2
                        else if ( (LA167_0==MINUS) && (synpred7_Parser())) 3
                        else if ( (LA167_0==BASIC_IDENTIFIER||LA167_0==EXTENDED_IDENTIFIER) ) 4
                        else if ( (LA167_0==STRING_LITERAL) ) 5
                        else if ( (LA167_0==DLT) && ((vhdl2008))) 6
                        else if ( (LA167_0==REAL_LITERAL) && (synpred7_Parser())) 7
                        else if ( (LA167_0==INTEGER_LITERAL) && (synpred7_Parser())) 8
                        else if ( (LA167_0==BASED_LITERAL) && (synpred7_Parser())) 9
                        else if ( (LA167_0==CHARACTER_LITERAL) && (synpred7_Parser())) 10
                        else if ( (LA167_0==BIT_STRING_LITERAL) && (synpred7_Parser())) 11
                        else if ( (LA167_0==NULL) && (synpred7_Parser())) 12
                        else if ( (LA167_0==NEW) && (synpred7_Parser())) 13
                        else if ( (LA167_0==LPAREN) ) 14
                        else if ( (LA167_0==ABS) && (synpred7_Parser())) 15
                        else if ( (LA167_0==NOT) && (synpred7_Parser())) 16
                        else if ( (LA167_0==NAND) && ((synpred7_Parser()&&(vhdl2008)))) 17
                        else if ( (LA167_0==NOR) && ((synpred7_Parser()&&(vhdl2008)))) 18
                        else if ( (LA167_0==AND) && ((synpred7_Parser()&&(vhdl2008)))) 19
                        else if ( (LA167_0==OR) && ((synpred7_Parser()&&(vhdl2008)))) 20
                        else if ( (LA167_0==XOR) && ((synpred7_Parser()&&(vhdl2008)))) 21
                        else if ( (LA167_0==XNOR) && ((synpred7_Parser()&&(vhdl2008)))) 22
                        else if ( (LA167_0==IF) && (synpred7_Parser())) 23
                        else if ( (LA167_0==PROCEDURAL) && (synpred7_Parser())) 24
                        else if ( (LA167_0==CASE) && (synpred7_Parser())) 25
                        else if ( (LA167_0==ASSERT||LA167_0==POSTPONED||LA167_0==PROCESS||LA167_0==WITH) ) 26
                        else -1
                         
                        input.seek(index167_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA167_4 = input.LA(1)

                         
                        val index167_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred7_Parser()) ) 25
                        else if ( (true) ) 26
                        else -1
                         
                        input.seek(index167_4)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA167_5 = input.LA(1)

                         
                        val index167_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred7_Parser()) ) 25
                        else if ( (true) ) 26
                        else -1
                         
                        input.seek(index167_5)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA167_6 = input.LA(1)

                         
                        val index167_6 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred7_Parser()&&(vhdl2008))) ) 25
                        else if ( ((vhdl2008)) ) 26
                        else -1
                         
                        input.seek(index167_6)
                        if ( nextS>=0 ) return nextS
                    case 4 => 
                        val LA167_14 = input.LA(1)

                         
                        val index167_14 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred7_Parser()) ) 25
                        else if ( (true) ) 26
                        else -1
                         
                        input.seek(index167_14)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 167, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA178(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\34\uffff"
        val eofS = "\34\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\11\uffff\1\u00a3\3\uffff"+
        "\1\u00a3\1\uffff\2\42\1\70\1\52\1\7\4\uffff"
        val maxS = "\1\u009a\1\u00a5\1\uffff\1\u00ad\11\uffff\1\u00a5\3"+
        "\uffff\1\u00a5\1\uffff\2\u008e\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\11\1\12\1\uffff\1\15\1\16\1\17\1\uffff\1\22\5\uffff\1\13\1\14"+
        "\1\20\1\21"
        val specialS = "\1\1\23\uffff\1\2\2\uffff\1\0\4\uffff}>"
        val transitionS = Array("\1\13\5\uffff\1\15\6\uffff\1\14\1\uffff"+
    "\1\7\1\17\6\uffff\1\12\1\16\1\3\2\uffff\1\21\2\uffff\1\2\27\uffff\1"+
    "\4\2\uffff\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff\1"+
    "\5\3\uffff\1\20\1\11\61\uffff\3\22\5\uffff\2\22",
    "\1\23\1\uffff\1\23",
    "",
    "\1\24\1\uffff\1\24\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\25\1\uffff\1\25",
    "",
    "",
    "",
    "\1\26\1\uffff\1\26",
    "",
    "\1\2\7\uffff\1\27\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\31\67\uffff\1\30",
    "\1\32\105\uffff\1\33",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 178
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "890:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA178_23 = input.LA(1)

                         
                        val index178_23 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA178_23==NEW) && ((vhdl2008))) 4
                        else if ( (LA178_23==ALIAS||(LA178_23>=ATTRIBUTE && LA178_23<=BEGIN)||LA178_23==CONSTANT||LA178_23==FILE||LA178_23==FUNCTION||LA178_23==GROUP||LA178_23==IMPURE||LA178_23==PACKAGE||LA178_23==PROCEDURE||LA178_23==PURE||LA178_23==SHARED||LA178_23==SUBTYPE||LA178_23==TYPE||(LA178_23>=USE && LA178_23<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index178_23)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA178_0 = input.LA(1)

                         
                        val index178_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA178_0==PROCEDURE) ) 1
                        else if ( (LA178_0==IMPURE||LA178_0==PURE) ) 2
                        else if ( (LA178_0==FUNCTION) ) 3
                        else if ( (LA178_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA178_0==TYPE) ) 5
                        else if ( (LA178_0==SUBTYPE) ) 6
                        else if ( (LA178_0==CONSTANT) ) 7
                        else if ( (LA178_0==SIGNAL) ) 8
                        else if ( (LA178_0==SHARED||LA178_0==VARIABLE) ) 9
                        else if ( (LA178_0==FILE) ) 10
                        else if ( (LA178_0==ALIAS) ) 11
                        else if ( (LA178_0==COMPONENT) ) 12
                        else if ( (LA178_0==ATTRIBUTE) ) 13
                        else if ( (LA178_0==FOR) ) 14
                        else if ( (LA178_0==DISCONNECT) ) 15
                        else if ( (LA178_0==USE) ) 16
                        else if ( (LA178_0==GROUP) ) 17
                        else if ( ((LA178_0>=NATURE && LA178_0<=QUANTITY)||(LA178_0>=SUBNATURE && LA178_0<=LIMIT)) && ((ams))) 18
                        else -1
                         
                        input.seek(index178_0)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA178_20 = input.LA(1)

                         
                        val index178_20 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA178_20==GENERIC||LA178_20==RETURN||LA178_20==LPAREN||LA178_20==PARAMETER) ) 2
                        else if ( (LA178_20==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index178_20)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 178, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA185(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\27\uffff"
        val eofS = "\27\uffff"
        val minS = "\1\7\1\u00a3\1\uffff\1\u00a3\7\uffff\1\u00a3\1\uffff"+
        "\1\u00a3\2\42\1\70\1\52\1\7\4\uffff"
        val maxS = "\1\137\1\u00a5\1\uffff\1\u00ad\7\uffff\1\u00a5\1\uffff"+
        "\1\u00a5\2\u008e\2\160\1\137\4\uffff"
        val acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
        "\1\uffff\1\13\6\uffff\1\11\1\12\1\14\1\15"
        val specialS = "\1\2\16\uffff\1\1\2\uffff\1\0\4\uffff}>"
        val transitionS = Array("\1\12\5\uffff\1\13\10\uffff\1\7\7\uffff"+
    "\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff\1\1"+
    "\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
    "\1\16\1\uffff\1\16",
    "",
    "\1\17\1\uffff\1\17\7\uffff\1\2",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\20\1\uffff\1\20",
    "",
    "\1\21\1\uffff\1\21",
    "\1\2\7\uffff\1\22\100\uffff\2\2\41\uffff\1\2",
    "\1\2\7\uffff\1\4\40\uffff\1\2\40\uffff\1\2\41\uffff\1\2",
    "\1\24\67\uffff\1\23",
    "\1\25\105\uffff\1\26",
    "\1\2\5\uffff\2\2\7\uffff\1\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2"+
    "\uffff\1\2\14\uffff\1\4\12\uffff\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff"+
    "\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff\2\2",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 185
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "934:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA185_18 = input.LA(1)

                         
                        val index185_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA185_18==NEW) && ((vhdl2008))) 4
                        else if ( (LA185_18==ALIAS||(LA185_18>=ATTRIBUTE && LA185_18<=BEGIN)||LA185_18==CONSTANT||LA185_18==FILE||LA185_18==FUNCTION||LA185_18==GROUP||LA185_18==IMPURE||LA185_18==PACKAGE||LA185_18==PROCEDURE||LA185_18==PURE||LA185_18==SHARED||LA185_18==SUBTYPE||LA185_18==TYPE||(LA185_18>=USE && LA185_18<=VARIABLE)) ) 2
                        else -1
                         
                        input.seek(index185_18)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA185_15 = input.LA(1)

                         
                        val index185_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA185_15==GENERIC||LA185_15==RETURN||LA185_15==LPAREN||LA185_15==PARAMETER) ) 2
                        else if ( (LA185_15==IS) && ((vhdl2008))) 4
                        else -1
                         
                        input.seek(index185_15)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA185_0 = input.LA(1)

                         
                        val index185_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA185_0==PROCEDURE) ) 1
                        else if ( (LA185_0==IMPURE||LA185_0==PURE) ) 2
                        else if ( (LA185_0==FUNCTION) ) 3
                        else if ( (LA185_0==PACKAGE) && ((vhdl2008))) 4
                        else if ( (LA185_0==TYPE) ) 5
                        else if ( (LA185_0==SUBTYPE) ) 6
                        else if ( (LA185_0==CONSTANT) ) 7
                        else if ( (LA185_0==SHARED||LA185_0==VARIABLE) ) 8
                        else if ( (LA185_0==FILE) ) 9
                        else if ( (LA185_0==ALIAS) ) 10
                        else if ( (LA185_0==ATTRIBUTE) ) 11
                        else if ( (LA185_0==USE) ) 12
                        else if ( (LA185_0==GROUP) ) 13
                        else -1
                         
                        input.seek(index185_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 185, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA217(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\15\uffff"
        val eofS = "\15\uffff"
        val minS = "\1\4\14\uffff"
        val maxS = "\1\u00b7\14\uffff"
        val acceptS = "\1\uffff\5\1\7\2"
        val specialS = "\1\0\14\uffff}>"
        val transitionS = Array("\1\12\2\uffff\1\3\1\uffff\1\13\2\uffff"+
    "\1\14\1\3\1\5\4\uffff\1\14\1\3\1\uffff\2\3\1\uffff\3\14\2\uffff\2\3"+
    "\1\1\2\uffff\1\3\1\uffff\1\14\1\1\13\uffff\1\13\1\12\1\uffff\1\13\2"+
    "\12\3\uffff\1\13\2\uffff\1\2\1\uffff\1\14\1\1\1\14\1\uffff\1\1\13\uffff"+
    "\2\3\4\uffff\1\3\3\uffff\1\3\3\uffff\2\3\1\uffff\1\14\1\uffff\1\14\2"+
    "\13\6\uffff\1\12\12\uffff\1\11\5\uffff\2\10\22\uffff\3\4\5\uffff\2\4"+
    "\1\uffff\1\7\1\14\5\uffff\1\6\1\uffff\1\6\3\uffff\3\12\1\uffff\1\10"+
    "\1\uffff\1\12\7\uffff\1\12",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 217
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1052:2: ( ( block_declarative_item sync[syncMessage] )* BEGIN )?"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA217_0 = input.LA(1)

                         
                        val index217_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA217_0==FUNCTION||LA217_0==IMPURE||LA217_0==PROCEDURE||LA217_0==PURE) ) 1
                        else if ( (LA217_0==PACKAGE) && ((vhdl2008))) 2
                        else if ( (LA217_0==ALIAS||LA217_0==ATTRIBUTE||LA217_0==COMPONENT||(LA217_0>=CONSTANT && LA217_0<=DISCONNECT)||(LA217_0>=FILE && LA217_0<=FOR)||LA217_0==GROUP||(LA217_0>=SHARED && LA217_0<=SIGNAL)||LA217_0==SUBTYPE||LA217_0==TYPE||(LA217_0>=USE && LA217_0<=VARIABLE)) ) 3
                        else if ( ((LA217_0>=NATURE && LA217_0<=QUANTITY)||(LA217_0>=SUBNATURE && LA217_0<=LIMIT)) && ((ams))) 4
                        else if ( (LA217_0==BEGIN) ) 5
                        else if ( (LA217_0==BASIC_IDENTIFIER||LA217_0==EXTENDED_IDENTIFIER) ) 6
                        else if ( (LA217_0==BREAK) && ((ams))) 7
                        else if ( ((LA217_0>=PLUS && LA217_0<=MINUS)||LA217_0==STRING_LITERAL) ) 8
                        else if ( (LA217_0==DLT) && ((vhdl2008))) 9
                        else if ( (LA217_0==ABS||LA217_0==NEW||(LA217_0>=NOT && LA217_0<=NULL)||LA217_0==LPAREN||(LA217_0>=BASED_LITERAL && LA217_0<=REAL_LITERAL)||LA217_0==BIT_STRING_LITERAL||LA217_0==CHARACTER_LITERAL) ) 10
                        else if ( (LA217_0==AND||LA217_0==NAND||LA217_0==NOR||LA217_0==OR||(LA217_0>=XNOR && LA217_0<=XOR)) && ((vhdl2008))) 11
                        else if ( (LA217_0==ASSERT||LA217_0==CASE||(LA217_0>=ELSE && LA217_0<=END)||LA217_0==IF||LA217_0==POSTPONED||LA217_0==PROCESS||LA217_0==WHEN||LA217_0==WITH||LA217_0==PROCEDURAL) ) 12
                        else -1
                         
                        input.seek(index217_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 217, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA223(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\13\uffff"
        val eofS = "\13\uffff"
        val minS = "\1\4\3\uffff\1\61\6\uffff"
        val maxS = "\1\u00b7\3\uffff\1\u00ad\6\uffff"
        val acceptS = "\1\uffff\3\1\1\uffff\1\1\1\2\1\3\1\4\1\5\1\1"
        val specialS = "\1\0\12\uffff}>"
        val transitionS = Array("\1\3\4\uffff\1\5\11\uffff\1\10\21\uffff"+
    "\1\6\14\uffff\1\5\1\3\1\uffff\1\5\1\3\1\4\3\uffff\1\5\50\uffff\2\5\6"+
    "\uffff\1\3\12\uffff\1\2\5\uffff\2\1\36\uffff\1\7\5\uffff\1\1\1\uffff"+
    "\1\1\3\uffff\3\3\1\uffff\1\1\1\uffff\1\3\7\uffff\1\3",
    "",
    "",
    "",
    "\1\12\27\uffff\1\12\34\uffff\1\12\4\uffff\1\11\6\uffff\1\12\7\uffff"+
    "\5\12\44\uffff\1\12\1\uffff\1\12\7\uffff\1\12",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 223
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1069:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA223_0 = input.LA(1)

                         
                        val index223_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((LA223_0>=PLUS && LA223_0<=MINUS)||LA223_0==BASIC_IDENTIFIER||LA223_0==EXTENDED_IDENTIFIER||LA223_0==STRING_LITERAL) ) 1
                        else if ( (LA223_0==DLT) && ((vhdl2008))) 2
                        else if ( (LA223_0==ABS||LA223_0==NEW||LA223_0==NOT||LA223_0==LPAREN||(LA223_0>=BASED_LITERAL && LA223_0<=REAL_LITERAL)||LA223_0==BIT_STRING_LITERAL||LA223_0==CHARACTER_LITERAL) ) 3
                        else if ( (LA223_0==NULL) ) 4
                        else if ( (LA223_0==AND||LA223_0==NAND||LA223_0==NOR||LA223_0==OR||(LA223_0>=XNOR && LA223_0<=XOR)) && ((vhdl2008))) 5
                        else if ( (LA223_0==IF) ) 6
                        else if ( (LA223_0==PROCEDURAL) ) 7
                        else if ( (LA223_0==CASE) ) 8
                        else -1
                         
                        input.seek(index223_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 223, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA235(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\20\uffff"
        val eofS = "\20\uffff"
        val minS = "\1\7\6\uffff\1\u00a3\1\uffff\1\u00a3\1\70\1\52\4\uffff"
        val maxS = "\1\137\6\uffff\1\u00a5\1\uffff\1\u00a5\2\160\4\uffff"
        val acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\3\uffff"+
        "\1\7\1\10\1\12\1\13"
        val specialS = "\20\uffff}>"
        val transitionS = Array("\1\6\5\uffff\1\7\10\uffff\1\4\11\uffff"+
    "\1\1\2\uffff\1\11\2\uffff\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff\1\5"+
    "\5\uffff\1\3\3\uffff\1\2\3\uffff\1\10\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\12\1\uffff\1\12",
    "",
    "\1\13\1\uffff\1\13",
    "\1\15\67\uffff\1\14",
    "\1\16\105\uffff\1\17",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 235
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1123:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
    }
    final private class DFA237(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\12\uffff"
        val eofS = "\12\uffff"
        val minS = "\1\14\1\147\10\uffff"
        val maxS = "\1\u00ad\1\u00ac\10\uffff"
        val acceptS = "\2\uffff\6\2\1\1\1\2"
        val specialS = "\1\0\11\uffff}>"
        val transitionS = Array("\1\2\6\uffff\1\6\11\uffff\1\6\1\uffff\1"+
    "\6\5\uffff\1\6\11\uffff\1\6\4\uffff\1\6\2\uffff\1\6\22\uffff\1\2\1\6"+
    "\24\uffff\1\2\1\uffff\1\6\1\5\10\uffff\1\4\12\uffff\1\3\44\uffff\1\7"+
    "\6\uffff\1\1\1\uffff\1\1\7\uffff\1\2",
    "\1\11\3\uffff\2\11\1\uffff\1\11\1\uffff\1\10\1\11\21\uffff\1\11\50"+
    "\uffff\1\11",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 237
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1149:7: (label= label_colon )?"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA237_0 = input.LA(1)

                         
                        val index237_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA237_0==BASIC_IDENTIFIER||LA237_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA237_0==ASSERT||LA237_0==REPORT||LA237_0==WAIT||LA237_0==STRING_LITERAL) ) 2
                        else if ( (LA237_0==DLT) && ((vhdl2008))) 3
                        else if ( (LA237_0==LPAREN) ) 4
                        else if ( (LA237_0==WITH) && ((vhdl2008))) 5
                        else if ( (LA237_0==CASE||LA237_0==EXIT||LA237_0==FOR||LA237_0==IF||LA237_0==LOOP||LA237_0==NEXT||LA237_0==NULL||LA237_0==RETURN||LA237_0==WHILE) ) 6
                        else if ( (LA237_0==BREAK) && ((ams))) 7
                        else -1
                         
                        input.seek(index237_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 237, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA238(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\24\uffff"
        val eofS = "\24\uffff"
        val minS = "\1\14\3\uffff\2\0\16\uffff"
        val maxS = "\1\u00ad\3\uffff\2\0\16\uffff"
        val acceptS = "\1\uffff\1\1\1\2\1\3\2\uffff\3\5\1\6\1\7\1\10\2\uffff"+
        "\1\11\1\12\1\13\1\14\1\15\1\4"
        val specialS = "\1\0\3\uffff\1\1\1\2\16\uffff}>"
        val transitionS = Array("\1\2\6\uffff\1\12\11\uffff\1\17\1\uffff"+
    "\1\13\5\uffff\1\11\11\uffff\1\13\4\uffff\1\16\2\uffff\1\21\22\uffff"+
    "\1\3\1\20\24\uffff\1\1\1\uffff\1\13\1\10\10\uffff\1\7\12\uffff\1\6\44"+
    "\uffff\1\22\6\uffff\1\4\1\uffff\1\4\7\uffff\1\5",
    "",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 238
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1150:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( procedure_call_statement[null] )=> procedure_call_statement[$label.label] | assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | {...}? => ams_break_statement[$label.label] )"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA238_0 = input.LA(1)

                         
                        val index238_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA238_0==WAIT) ) 1
                        else if ( (LA238_0==ASSERT) ) 2
                        else if ( (LA238_0==REPORT) ) 3
                        else if ( (LA238_0==BASIC_IDENTIFIER||LA238_0==EXTENDED_IDENTIFIER) ) 4
                        else if ( (LA238_0==STRING_LITERAL) ) 5
                        else if ( (LA238_0==DLT) && ((vhdl2008))) 6
                        else if ( (LA238_0==LPAREN) ) 7
                        else if ( (LA238_0==WITH) && ((vhdl2008))) 8
                        else if ( (LA238_0==IF) ) 9
                        else if ( (LA238_0==CASE) ) 10
                        else if ( (LA238_0==FOR||LA238_0==LOOP||LA238_0==WHILE) ) 11
                        else if ( (LA238_0==NEXT) ) 14
                        else if ( (LA238_0==EXIT) ) 15
                        else if ( (LA238_0==RETURN) ) 16
                        else if ( (LA238_0==NULL) ) 17
                        else if ( (LA238_0==BREAK) && ((ams))) 18
                        else -1
                         
                        input.seek(index238_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA238_4 = input.LA(1)

                         
                        val index238_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred9_Parser()) ) 19
                        else if ( (true) ) 8
                        else -1
                         
                        input.seek(index238_4)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA238_5 = input.LA(1)

                         
                        val index238_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred9_Parser()) ) 19
                        else if ( (true) ) 8
                        else -1
                         
                        input.seek(index238_5)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 238, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA330(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\12\uffff"
        val eofS = "\12\uffff"
        val minS = "\1\4\11\uffff"
        val maxS = "\1\u00b7\11\uffff"
        val acceptS = "\1\uffff\7\1\1\2\1\3"
        val specialS = "\1\0\11\uffff}>"
        val transitionS = Array("\1\5\4\uffff\1\6\36\uffff\1\2\11\uffff"+
    "\1\6\1\5\1\uffff\1\6\2\5\2\uffff\1\7\1\6\50\uffff\2\6\2\uffff\1\10\3"+
    "\uffff\1\5\12\uffff\1\4\5\uffff\2\3\14\uffff\1\6\4\uffff\1\11\22\uffff"+
    "\1\1\1\uffff\1\1\3\uffff\3\5\1\uffff\1\1\1\uffff\1\5\7\uffff\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 330
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1441:22: ( association_list | BOX | DEFAULT )"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA330_0 = input.LA(1)

                         
                        val index330_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA330_0==BASIC_IDENTIFIER||LA330_0==EXTENDED_IDENTIFIER||LA330_0==STRING_LITERAL) ) 1
                        else if ( (LA330_0==INERTIAL) && ((vhdl2008))) 2
                        else if ( ((LA330_0>=PLUS && LA330_0<=MINUS)) ) 3
                        else if ( (LA330_0==DLT) && ((vhdl2008))) 4
                        else if ( (LA330_0==ABS||LA330_0==NEW||(LA330_0>=NOT && LA330_0<=NULL)||LA330_0==LPAREN||(LA330_0>=BASED_LITERAL && LA330_0<=REAL_LITERAL)||LA330_0==BIT_STRING_LITERAL||LA330_0==CHARACTER_LITERAL) ) 5
                        else if ( (LA330_0==AND||LA330_0==NAND||LA330_0==NOR||LA330_0==OR||(LA330_0>=XNOR && LA330_0<=XOR)||LA330_0==CONDITION_OPERATOR) && ((vhdl2008))) 6
                        else if ( (LA330_0==OPEN) ) 7
                        else if ( (LA330_0==BOX) ) 8
                        else if ( (LA330_0==DEFAULT) ) 9
                        else -1
                         
                        input.seek(index330_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 330, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA331(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\32\uffff"
        val eofS = "\32\uffff"
        val minS = "\1\4\2\0\27\uffff"
        val maxS = "\1\u00b7\2\0\27\uffff"
        val acceptS = "\3\uffff\2\2\1\uffff\2\2\11\uffff\1\2\6\uffff\1\2"+
        "\1\1"
        val specialS = "\1\0\1\1\1\2\27\uffff}>"
        val transitionS = Array("\1\7\4\uffff\1\21\36\uffff\1\3\11\uffff"+
    "\1\21\1\7\1\uffff\1\21\2\7\2\uffff\1\30\1\21\50\uffff\2\21\6\uffff\1"+
    "\7\12\uffff\1\6\5\uffff\2\4\14\uffff\1\21\27\uffff\1\1\1\uffff\1\1\3"+
    "\uffff\3\7\1\uffff\1\2\1\uffff\1\7\7\uffff\1\7",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 331
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1450:2: ( ( formal_part ARROW )=> formal_part ARROW )?"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA331_0 = input.LA(1)

                         
                        val index331_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA331_0==BASIC_IDENTIFIER||LA331_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA331_0==STRING_LITERAL) ) 2
                        else if ( (LA331_0==INERTIAL) && ((vhdl2008))) 3
                        else if ( ((LA331_0>=PLUS && LA331_0<=MINUS)) ) 4
                        else if ( (LA331_0==DLT) && ((vhdl2008))) 6
                        else if ( (LA331_0==ABS||LA331_0==NEW||(LA331_0>=NOT && LA331_0<=NULL)||LA331_0==LPAREN||(LA331_0>=BASED_LITERAL && LA331_0<=REAL_LITERAL)||LA331_0==BIT_STRING_LITERAL||LA331_0==CHARACTER_LITERAL) ) 7
                        else if ( (LA331_0==AND||LA331_0==NAND||LA331_0==NOR||LA331_0==OR||(LA331_0>=XNOR && LA331_0<=XOR)||LA331_0==CONDITION_OPERATOR) && ((vhdl2008))) 17
                        else if ( (LA331_0==OPEN) ) 24
                        else -1
                         
                        input.seek(index331_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA331_1 = input.LA(1)

                         
                        val index331_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred10_Parser()) ) 25
                        else if ( (true) ) 24
                        else -1
                         
                        input.seek(index331_1)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA331_2 = input.LA(1)

                         
                        val index331_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred10_Parser()) ) 25
                        else if ( (true) ) 24
                        else -1
                         
                        input.seek(index331_2)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 331, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA356(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\17\uffff"
        val eofS = "\1\uffff\2\11\7\uffff\4\11\1\uffff"
        val minS = "\1\63\2\6\4\uffff\1\10\1\105\1\uffff\4\6\1\uffff"
        val maxS = "\1\u00b7\2\u00ac\4\uffff\1\u00b7\1\u00a5\1\uffff\4\u00ac"+
        "\1\uffff"
        val acceptS = "\3\uffff\1\2\1\3\1\4\1\5\2\uffff\1\2\4\uffff\1\1"
        val specialS = "\1\0\16\uffff}>"
        val transitionS = Array("\1\5\3\uffff\1\4\64\uffff\1\6\12\uffff"+
    "\1\3\53\uffff\1\1\1\uffff\1\1\3\uffff\3\4\1\uffff\1\2\1\uffff\1\4\7"+
    "\uffff\1\4",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "",
    "",
    "",
    "",
    "\1\15\u009a\uffff\1\12\1\uffff\1\12\7\uffff\1\14\11\uffff\1\13",
    "\1\11\46\uffff\1\16\47\uffff\3\11\4\uffff\1\11\7\uffff\1\11\1\uffff"+
    "\1\11",
    "",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff"+
    "\1\11\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1"+
    "\11\3\uffff\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11"+
    "\1\uffff\2\11\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\4\11\2"+
    "\uffff\5\11\2\uffff\1\7\3\11\3\uffff\1\11\1\uffff\21\11\11\uffff\5\11"+
    "\23\uffff\1\10",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 356
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1590:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA356_0 = input.LA(1)

                         
                        val index356_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA356_0==BASIC_IDENTIFIER||LA356_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA356_0==STRING_LITERAL) ) 2
                        else if ( (LA356_0==DLT) && ((vhdl2008))) 3
                        else if ( (LA356_0==NULL||(LA356_0>=BASED_LITERAL && LA356_0<=REAL_LITERAL)||LA356_0==BIT_STRING_LITERAL||LA356_0==CHARACTER_LITERAL) ) 4
                        else if ( (LA356_0==NEW) ) 5
                        else if ( (LA356_0==LPAREN) ) 6
                        else -1
                         
                        input.seek(index356_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 356, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA362(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\34\uffff"
        val eofS = "\1\1\33\uffff"
        val minS = "\1\6\1\uffff\1\113\1\uffff\2\113\1\u00a3\1\153\1\10"+
        "\1\u00a3\2\157\6\113\2\10\4\157\4\113"
        val maxS = "\1\u00ac\1\uffff\1\u00ad\1\uffff\2\161\1\u00ad\1\u00ac"+
        "\1\u00b7\1\u00ad\10\161\2\u00b7\10\161"
        val acceptS = "\1\uffff\1\2\1\uffff\1\1\30\uffff"
        val specialS = "\34\uffff}>"
        val transitionS = Array("\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff\2"+
    "\1\5\uffff\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
    "\2\1\2\uffff\1\1\3\uffff\3\1\13\uffff\1\1\1\uffff\2\1\1\uffff\4\1\2"+
    "\uffff\4\1\1\uffff\2\1\3\uffff\3\1\2\uffff\1\1\2\uffff\4\1\2\uffff\2"+
    "\1\1\3\1\1\1\2\2\uffff\1\3\3\1\3\uffff\1\1\1\uffff\21\1\11\uffff\5\1"+
    "\23\uffff\1\3",
    "",
    "\1\6\43\uffff\1\7\63\uffff\1\4\1\uffff\1\4\7\uffff\1\5",
    "",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\12\1\uffff\1\12\7\uffff\1\13",
    "\1\1\100\uffff\1\3",
    "\1\17\u009a\uffff\1\14\1\uffff\1\14\7\uffff\1\16\11\uffff\1\15",
    "\1\20\1\uffff\1\20\7\uffff\1\21",
    "\1\7\1\uffff\1\22",
    "\1\7\1\uffff\1\22",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\10",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23",
    "\1\27\u009a\uffff\1\24\1\uffff\1\24\7\uffff\1\26\11\uffff\1\25",
    "\1\33\u009a\uffff\1\30\1\uffff\1\30\7\uffff\1\32\11\uffff\1\31",
    "\1\7\1\uffff\1\22",
    "\1\7\1\uffff\1\22",
    "\1\7\1\uffff\1\22",
    "\1\7\1\uffff\1\22",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23",
    "\1\6\36\uffff\1\11\4\uffff\1\7\1\uffff\1\23")

        this.recognizer = baseRecognizer
        this.decisionNumber = 362
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "()* loopback of 1633:14: ( name_part )*"
    }
    final private class DFA370(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\111\uffff"
        val eofS = "\1\2\110\uffff"
        val minS = "\1\6\1\0\107\uffff"
        val maxS = "\1\u00ac\1\0\107\uffff"
        val acceptS = "\2\uffff\1\2\105\uffff\1\1"
        val specialS = "\1\uffff\1\0\107\uffff}>"
        val transitionS = Array("\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff\2"+
    "\2\5\uffff\1\2\1\uffff\1\2\6\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff"+
    "\2\2\2\uffff\1\2\3\uffff\3\2\13\uffff\1\2\1\uffff\2\2\1\uffff\4\2\2"+
    "\uffff\4\2\1\uffff\2\2\3\uffff\3\2\2\uffff\1\2\2\uffff\4\2\2\uffff\2"+
    "\2\1\1\2\2\2\uffff\4\2\3\uffff\1\2\1\uffff\21\2\11\uffff\5\2\23\uffff"+
    "\1\2",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 370
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1663:2: ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA370_1 = input.LA(1)

                         
                        val index370_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred13_Parser()) ) 72
                        else if ( (true) ) 2
                        else -1
                         
                        input.seek(index370_1)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 370, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA382(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\30\uffff"
        val eofS = "\30\uffff"
        val minS = "\1\4\25\0\2\uffff"
        val maxS = "\1\u00b7\25\0\2\uffff"
        val acceptS = "\26\uffff\1\1\1\2"
        val specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\uffff}>"
        val transitionS = Array("\1\16\4\uffff\1\22\50\uffff\1\20\1\14\1"+
    "\uffff\1\21\1\17\1\13\3\uffff\1\23\1\26\47\uffff\1\25\1\24\6\uffff\1"+
    "\15\12\uffff\1\5\5\uffff\1\2\1\3\14\uffff\1\27\27\uffff\1\1\1\uffff"+
    "\1\1\3\uffff\1\10\1\7\1\6\1\uffff\1\4\1\uffff\1\12\7\uffff\1\11",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 382
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1719:2: ( ( choices ARROW )=> choices ARROW )?"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA382_0 = input.LA(1)

                         
                        val index382_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA382_0==BASIC_IDENTIFIER||LA382_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA382_0==PLUS) ) 2
                        else if ( (LA382_0==MINUS) ) 3
                        else if ( (LA382_0==STRING_LITERAL) ) 4
                        else if ( (LA382_0==DLT) && ((vhdl2008))) 5
                        else if ( (LA382_0==REAL_LITERAL) ) 6
                        else if ( (LA382_0==INTEGER_LITERAL) ) 7
                        else if ( (LA382_0==BASED_LITERAL) ) 8
                        else if ( (LA382_0==CHARACTER_LITERAL) ) 9
                        else if ( (LA382_0==BIT_STRING_LITERAL) ) 10
                        else if ( (LA382_0==NULL) ) 11
                        else if ( (LA382_0==NEW) ) 12
                        else if ( (LA382_0==LPAREN) ) 13
                        else if ( (LA382_0==ABS) ) 14
                        else if ( (LA382_0==NOT) ) 15
                        else if ( (LA382_0==NAND) && ((vhdl2008))) 16
                        else if ( (LA382_0==NOR) && ((vhdl2008))) 17
                        else if ( (LA382_0==AND) && ((vhdl2008))) 18
                        else if ( (LA382_0==OR) && ((vhdl2008))) 19
                        else if ( (LA382_0==XOR) && ((vhdl2008))) 20
                        else if ( (LA382_0==XNOR) && ((vhdl2008))) 21
                        else if ( (LA382_0==OTHERS) && (synpred14_Parser())) 22
                        else if ( (LA382_0==CONDITION_OPERATOR) && ((vhdl2008))) 23
                        else -1
                         
                        input.seek(index382_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA382_1 = input.LA(1)

                         
                        val index382_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||synpred14_Parser())) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_1)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA382_2 = input.LA(1)

                         
                        val index382_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_2)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA382_3 = input.LA(1)

                         
                        val index382_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_3)
                        if ( nextS>=0 ) return nextS
                    case 4 => 
                        val LA382_4 = input.LA(1)

                         
                        val index382_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||synpred14_Parser())) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_4)
                        if ( nextS>=0 ) return nextS
                    case 5 => 
                        val LA382_5 = input.LA(1)

                         
                        val index382_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_5)
                        if ( nextS>=0 ) return nextS
                    case 6 => 
                        val LA382_6 = input.LA(1)

                         
                        val index382_6 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_6)
                        if ( nextS>=0 ) return nextS
                    case 7 => 
                        val LA382_7 = input.LA(1)

                         
                        val index382_7 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_7)
                        if ( nextS>=0 ) return nextS
                    case 8 => 
                        val LA382_8 = input.LA(1)

                         
                        val index382_8 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_8)
                        if ( nextS>=0 ) return nextS
                    case 9 => 
                        val LA382_9 = input.LA(1)

                         
                        val index382_9 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_9)
                        if ( nextS>=0 ) return nextS
                    case 10 => 
                        val LA382_10 = input.LA(1)

                         
                        val index382_10 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_10)
                        if ( nextS>=0 ) return nextS
                    case 11 => 
                        val LA382_11 = input.LA(1)

                         
                        val index382_11 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_11)
                        if ( nextS>=0 ) return nextS
                    case 12 => 
                        val LA382_12 = input.LA(1)

                         
                        val index382_12 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_12)
                        if ( nextS>=0 ) return nextS
                    case 13 => 
                        val LA382_13 = input.LA(1)

                         
                        val index382_13 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||synpred14_Parser())) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_13)
                        if ( nextS>=0 ) return nextS
                    case 14 => 
                        val LA382_14 = input.LA(1)

                         
                        val index382_14 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_14)
                        if ( nextS>=0 ) return nextS
                    case 15 => 
                        val LA382_15 = input.LA(1)

                         
                        val index382_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred14_Parser()) ) 22
                        else if ( (true) ) 23
                        else -1
                         
                        input.seek(index382_15)
                        if ( nextS>=0 ) return nextS
                    case 16 => 
                        val LA382_16 = input.LA(1)

                         
                        val index382_16 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_16)
                        if ( nextS>=0 ) return nextS
                    case 17 => 
                        val LA382_17 = input.LA(1)

                         
                        val index382_17 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_17)
                        if ( nextS>=0 ) return nextS
                    case 18 => 
                        val LA382_18 = input.LA(1)

                         
                        val index382_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_18)
                        if ( nextS>=0 ) return nextS
                    case 19 => 
                        val LA382_19 = input.LA(1)

                         
                        val index382_19 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_19)
                        if ( nextS>=0 ) return nextS
                    case 20 => 
                        val LA382_20 = input.LA(1)

                         
                        val index382_20 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_20)
                        if ( nextS>=0 ) return nextS
                    case 21 => 
                        val LA382_21 = input.LA(1)

                         
                        val index382_21 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (((synpred14_Parser()&&(vhdl2008))||(synpred14_Parser()&&(vhdl2008)))) ) 22
                        else if ( ((vhdl2008)) ) 23
                        else -1
                         
                        input.seek(index382_21)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 382, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA384(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\32\uffff"
        val eofS = "\32\uffff"
        val minS = "\1\4\25\0\4\uffff"
        val maxS = "\1\u00b7\25\0\4\uffff"
        val acceptS = "\26\uffff\1\4\1\1\1\2\1\3"
        val specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\4\uffff}>"
        val transitionS = Array("\1\16\4\uffff\1\22\50\uffff\1\20\1\14\1"+
    "\uffff\1\21\1\17\1\13\3\uffff\1\23\1\26\47\uffff\1\25\1\24\6\uffff\1"+
    "\15\12\uffff\1\5\5\uffff\1\2\1\3\44\uffff\1\1\1\uffff\1\1\3\uffff\1"+
    "\10\1\7\1\6\1\uffff\1\4\1\uffff\1\12\7\uffff\1\11",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 384
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "1729:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA384_0 = input.LA(1)

                         
                        val index384_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (LA384_0==BASIC_IDENTIFIER||LA384_0==EXTENDED_IDENTIFIER) ) 1
                        else if ( (LA384_0==PLUS) ) 2
                        else if ( (LA384_0==MINUS) ) 3
                        else if ( (LA384_0==STRING_LITERAL) ) 4
                        else if ( (LA384_0==DLT) && ((vhdl2008))) 5
                        else if ( (LA384_0==REAL_LITERAL) ) 6
                        else if ( (LA384_0==INTEGER_LITERAL) ) 7
                        else if ( (LA384_0==BASED_LITERAL) ) 8
                        else if ( (LA384_0==CHARACTER_LITERAL) ) 9
                        else if ( (LA384_0==BIT_STRING_LITERAL) ) 10
                        else if ( (LA384_0==NULL) ) 11
                        else if ( (LA384_0==NEW) ) 12
                        else if ( (LA384_0==LPAREN) ) 13
                        else if ( (LA384_0==ABS) ) 14
                        else if ( (LA384_0==NOT) ) 15
                        else if ( (LA384_0==NAND) && ((vhdl2008))) 16
                        else if ( (LA384_0==NOR) && ((vhdl2008))) 17
                        else if ( (LA384_0==AND) && ((vhdl2008))) 18
                        else if ( (LA384_0==OR) && ((vhdl2008))) 19
                        else if ( (LA384_0==XOR) && ((vhdl2008))) 20
                        else if ( (LA384_0==XNOR) && ((vhdl2008))) 21
                        else if ( (LA384_0==OTHERS) ) 22
                        else -1
                         
                        input.seek(index384_0)
                        if ( nextS>=0 ) return nextS
                    case 1 => 
                        val LA384_1 = input.LA(1)

                         
                        val index384_1 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred15_Parser()) ) 23
                        else if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_1)
                        if ( nextS>=0 ) return nextS
                    case 2 => 
                        val LA384_2 = input.LA(1)

                         
                        val index384_2 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_2)
                        if ( nextS>=0 ) return nextS
                    case 3 => 
                        val LA384_3 = input.LA(1)

                         
                        val index384_3 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_3)
                        if ( nextS>=0 ) return nextS
                    case 4 => 
                        val LA384_4 = input.LA(1)

                         
                        val index384_4 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_4)
                        if ( nextS>=0 ) return nextS
                    case 5 => 
                        val LA384_5 = input.LA(1)

                         
                        val index384_5 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_5)
                        if ( nextS>=0 ) return nextS
                    case 6 => 
                        val LA384_6 = input.LA(1)

                         
                        val index384_6 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_6)
                        if ( nextS>=0 ) return nextS
                    case 7 => 
                        val LA384_7 = input.LA(1)

                         
                        val index384_7 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_7)
                        if ( nextS>=0 ) return nextS
                    case 8 => 
                        val LA384_8 = input.LA(1)

                         
                        val index384_8 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_8)
                        if ( nextS>=0 ) return nextS
                    case 9 => 
                        val LA384_9 = input.LA(1)

                         
                        val index384_9 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_9)
                        if ( nextS>=0 ) return nextS
                    case 10 => 
                        val LA384_10 = input.LA(1)

                         
                        val index384_10 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_10)
                        if ( nextS>=0 ) return nextS
                    case 11 => 
                        val LA384_11 = input.LA(1)

                         
                        val index384_11 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_11)
                        if ( nextS>=0 ) return nextS
                    case 12 => 
                        val LA384_12 = input.LA(1)

                         
                        val index384_12 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_12)
                        if ( nextS>=0 ) return nextS
                    case 13 => 
                        val LA384_13 = input.LA(1)

                         
                        val index384_13 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_13)
                        if ( nextS>=0 ) return nextS
                    case 14 => 
                        val LA384_14 = input.LA(1)

                         
                        val index384_14 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_14)
                        if ( nextS>=0 ) return nextS
                    case 15 => 
                        val LA384_15 = input.LA(1)

                         
                        val index384_15 = input.index()
                        input.rewind()
                        val nextS =
                        if ( (synpred16_Parser()) ) 24
                        else if ( (true) ) 25
                        else -1
                         
                        input.seek(index384_15)
                        if ( nextS>=0 ) return nextS
                    case 16 => 
                        val LA384_16 = input.LA(1)

                         
                        val index384_16 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_16)
                        if ( nextS>=0 ) return nextS
                    case 17 => 
                        val LA384_17 = input.LA(1)

                         
                        val index384_17 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_17)
                        if ( nextS>=0 ) return nextS
                    case 18 => 
                        val LA384_18 = input.LA(1)

                         
                        val index384_18 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_18)
                        if ( nextS>=0 ) return nextS
                    case 19 => 
                        val LA384_19 = input.LA(1)

                         
                        val index384_19 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_19)
                        if ( nextS>=0 ) return nextS
                    case 20 => 
                        val LA384_20 = input.LA(1)

                         
                        val index384_20 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_20)
                        if ( nextS>=0 ) return nextS
                    case 21 => 
                        val LA384_21 = input.LA(1)

                         
                        val index384_21 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((synpred16_Parser()&&(vhdl2008))) ) 24
                        else if ( ((vhdl2008)) ) 25
                        else -1
                         
                        input.seek(index384_21)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 384, s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA390(baseRecognizer: BaseRecognizer) extends DFA {
        val eotS = "\13\uffff"
        val eofS = "\4\uffff\1\12\6\uffff"
        val minS = "\1\4\3\uffff\1\61\6\uffff"
        val maxS = "\1\u00b7\3\uffff\1\u00ad\6\uffff"
        val acceptS = "\1\uffff\3\1\1\uffff\1\1\1\2\1\3\1\4\1\1\1\5"
        val specialS = "\1\0\12\uffff}>"
        val transitionS = Array("\1\3\4\uffff\1\5\11\uffff\1\10\21\uffff"+
    "\1\6\14\uffff\1\5\1\3\1\uffff\1\5\1\3\1\4\3\uffff\1\5\50\uffff\2\5\6"+
    "\uffff\1\3\12\uffff\1\2\5\uffff\2\1\36\uffff\1\7\5\uffff\1\1\1\uffff"+
    "\1\1\3\uffff\3\3\1\uffff\1\1\1\uffff\1\3\7\uffff\1\3",
    "",
    "",
    "",
    "\1\11\27\uffff\1\11\34\uffff\1\11\13\uffff\1\11\7\uffff\5\11\44\uffff"+
    "\1\11\1\uffff\1\11\7\uffff\1\11",
    "",
    "",
    "",
    "",
    "",
    "")

        this.recognizer = baseRecognizer
        this.decisionNumber = 390
        this.eot = DFA.unpackEncodedString(eotS)
        this.eof = DFA.unpackEncodedString(eofS)
        this.min = DFA.unpackEncodedStringToUnsignedChars(minS)
        this.max = DFA.unpackEncodedStringToUnsignedChars(maxS)
        this.accept = DFA.unpackEncodedString(acceptS)
        this.special = DFA.unpackEncodedString(specialS)
        this.transition = new Array[Array[Short]](transitionS.length)
        for (i <- this.transition.indices) {
            this.transition(i) = DFA.unpackEncodedString(transitionS(i))
        }

        override val getDescription = "857:13: ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )"
    	@throws(classOf[NoViableAltException])
        override def specialStateTransition(s: Int, _input: IntStream):Int = {
            val input = _input.asInstanceOf[TokenStream]
            s match {
                    case 0 => 
                        val LA390_0 = input.LA(1)

                         
                        val index390_0 = input.index()
                        input.rewind()
                        val nextS =
                        if ( ((LA390_0>=PLUS && LA390_0<=MINUS)||LA390_0==BASIC_IDENTIFIER||LA390_0==EXTENDED_IDENTIFIER||LA390_0==STRING_LITERAL) ) 1
                        else if ( (LA390_0==DLT) && ((vhdl2008))) 2
                        else if ( (LA390_0==ABS||LA390_0==NEW||LA390_0==NOT||LA390_0==LPAREN||(LA390_0>=BASED_LITERAL && LA390_0<=REAL_LITERAL)||LA390_0==BIT_STRING_LITERAL||LA390_0==CHARACTER_LITERAL) ) 3
                        else if ( (LA390_0==NULL) ) 4
                        else if ( (LA390_0==AND||LA390_0==NAND||LA390_0==NOR||LA390_0==OR||(LA390_0>=XNOR && LA390_0<=XOR)) && ((vhdl2008))) 5
                        else if ( (LA390_0==IF) ) 6
                        else if ( (LA390_0==PROCEDURAL) ) 7
                        else if ( (LA390_0==CASE) ) 8
                        else -1
                         
                        input.seek(index390_0)
                        if ( nextS>=0 ) return nextS
            case _ =>
            }
            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(getDescription, 390, s, input)
            error(nvae)
            throw nvae
        }
    }
 
}