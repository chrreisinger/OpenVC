// $ANTLR 3.3 Nov 30, 2010 12:45:30 C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g 2011-01-04 14:16:59

/*
 *     OpenVC, an open source VHDL compiler/simulator
 *     Copyright (C) 2010  Christian Reisinger
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package at.jku.ssw.openvc.parser

import at.jku.ssw.openvc._
import at.jku.ssw.openvc.ast._
import at.jku.ssw.openvc.ast.concurrentStatements._
import at.jku.ssw.openvc.ast.declarations._
import at.jku.ssw.openvc.ast.expressions._
import at.jku.ssw.openvc.ast.sequentialStatements._
import at.jku.ssw.openvc.ast.ams._
import at.jku.ssw.openvc.util._


import org.antlr.runtime._

import scala.collection.mutable.Stack

object VHDLParser {
  val tokenNames = Array("<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESS", "AFTER", "ALIAS", "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BUFFER", "BUS", "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", "DISCONNECT", "DOWNTO", "ELSE", "ELSIF", "END", "ENTITY", "EXIT", "FILE", "FOR", "FUNCTION", "GENERATE", "GENERIC", "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", "INOUT", "IS", "LABEL", "LIBRARY", "LINKAGE", "LITERAL", "LOOP", "MAP", "MOD", "NAND", "NEW", "NEXT", "NOR", "NOT", "NULL", "OF", "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", "POSTPONED", "PROCEDURE", "PROCESS", "PROTECTED", "PURE", "RANGE", "RECORD", "REGISTER", "REJECT", "REM", "REPORT", "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", "SIGNAL", "SLA", "SLL", "SRA", "SRL", "SUBTYPE", "THEN", "TO", "TRANSPORT", "TYPE", "UNAFFECTED", "UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WHEN", "WHILE", "WITH", "XNOR", "XOR", "DOUBLESTAR", "AMS_ASSIGN", "LEQ", "GEQ", "ARROW", "NEQ", "VAR_ASSIGN", "BOX", "DBLQUOTE", "SEMICOLON", "COMMA", "AMPERSAND", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "MUL", "DIV", "PLUS", "MINUS", "LT", "GT", "EQ", "BAR", "DOT", "MEQ", "MNEQ", "MLT", "MLEQ", "MGT", "MGEQ", "AT", "QMARK", "CONDITION_OPERATOR", "CONTEXT", "STRING_LITERAL", "PARAMETER", "NATURE", "TERMINAL", "QUANTITY", "TOLERANCE", "ACROSS", "THROUGH", "SPECTRUM", "NOISE", "CHARACTER_LITERAL", "SUBNATURE", "LIMIT", "REFERENCE", "BREAK", "PROCEDURAL", "RELEASE", "FORCE", "DEFAULT", "APOSTROPHE", "REAL_LITERAL", "INTEGER_LITERAL", "BASED_LITERAL", "BIT_STRING_LITERAL", "BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "GRAPHIC_CHARACTER", "WS", "NESTED_ML_COMMENT", "LINECOMMENT", "LETTER", "LETTER_OR_DIGIT", "INTEGER", "BASED_INTEGER", "EXPONENT", "BASE_SPECIFIER", "EXTENDED_DIGIT", "DIGIT", "UPPER_CASE_LETTER", "LOWER_CASE_LETTER", "SPECIAL_CHARACTER", "SPACE_CHARACTER", "OTHER_SPECIAL_CHARACTER", "'<<'", "'>>'", "'^'", "'\\''")
  val EOF = -1
  val T__181 = 181
  val T__182 = 182
  val T__183 = 183
  val T__184 = 184
  val ABS = 4
  val ACCESS = 5
  val AFTER = 6
  val ALIAS = 7
  val ALL = 8
  val AND = 9
  val ARCHITECTURE = 10
  val ARRAY = 11
  val ASSERT = 12
  val ATTRIBUTE = 13
  val BEGIN = 14
  val BLOCK = 15
  val BODY = 16
  val BUFFER = 17
  val BUS = 18
  val CASE = 19
  val COMPONENT = 20
  val CONFIGURATION = 21
  val CONSTANT = 22
  val DISCONNECT = 23
  val DOWNTO = 24
  val ELSE = 25
  val ELSIF = 26
  val END = 27
  val ENTITY = 28
  val EXIT = 29
  val FILE = 30
  val FOR = 31
  val FUNCTION = 32
  val GENERATE = 33
  val GENERIC = 34
  val GROUP = 35
  val GUARDED = 36
  val IF = 37
  val IMPURE = 38
  val IN = 39
  val INERTIAL = 40
  val INOUT = 41
  val IS = 42
  val LABEL = 43
  val LIBRARY = 44
  val LINKAGE = 45
  val LITERAL = 46
  val LOOP = 47
  val MAP = 48
  val MOD = 49
  val NAND = 50
  val NEW = 51
  val NEXT = 52
  val NOR = 53
  val NOT = 54
  val NULL = 55
  val OF = 56
  val ON = 57
  val OPEN = 58
  val OR = 59
  val OTHERS = 60
  val OUT = 61
  val PACKAGE = 62
  val PORT = 63
  val POSTPONED = 64
  val PROCEDURE = 65
  val PROCESS = 66
  val PROTECTED = 67
  val PURE = 68
  val RANGE = 69
  val RECORD = 70
  val REGISTER = 71
  val REJECT = 72
  val REM = 73
  val REPORT = 74
  val RETURN = 75
  val ROL = 76
  val ROR = 77
  val SELECT = 78
  val SEVERITY = 79
  val SHARED = 80
  val SIGNAL = 81
  val SLA = 82
  val SLL = 83
  val SRA = 84
  val SRL = 85
  val SUBTYPE = 86
  val THEN = 87
  val TO = 88
  val TRANSPORT = 89
  val TYPE = 90
  val UNAFFECTED = 91
  val UNITS = 92
  val UNTIL = 93
  val USE = 94
  val VARIABLE = 95
  val WAIT = 96
  val WHEN = 97
  val WHILE = 98
  val WITH = 99
  val XNOR = 100
  val XOR = 101
  val DOUBLESTAR = 102
  val AMS_ASSIGN = 103
  val LEQ = 104
  val GEQ = 105
  val ARROW = 106
  val NEQ = 107
  val VAR_ASSIGN = 108
  val BOX = 109
  val DBLQUOTE = 110
  val SEMICOLON = 111
  val COMMA = 112
  val AMPERSAND = 113
  val LPAREN = 114
  val RPAREN = 115
  val LBRACKET = 116
  val RBRACKET = 117
  val COLON = 118
  val MUL = 119
  val DIV = 120
  val PLUS = 121
  val MINUS = 122
  val LT = 123
  val GT = 124
  val EQ = 125
  val BAR = 126
  val DOT = 127
  val MEQ = 128
  val MNEQ = 129
  val MLT = 130
  val MLEQ = 131
  val MGT = 132
  val MGEQ = 133
  val AT = 134
  val QMARK = 135
  val CONDITION_OPERATOR = 136
  val CONTEXT = 137
  val STRING_LITERAL = 138
  val PARAMETER = 139
  val NATURE = 140
  val TERMINAL = 141
  val QUANTITY = 142
  val TOLERANCE = 143
  val ACROSS = 144
  val THROUGH = 145
  val SPECTRUM = 146
  val NOISE = 147
  val CHARACTER_LITERAL = 148
  val SUBNATURE = 149
  val LIMIT = 150
  val REFERENCE = 151
  val BREAK = 152
  val PROCEDURAL = 153
  val RELEASE = 154
  val FORCE = 155
  val DEFAULT = 156
  val APOSTROPHE = 157
  val REAL_LITERAL = 158
  val INTEGER_LITERAL = 159
  val BASED_LITERAL = 160
  val BIT_STRING_LITERAL = 161
  val BASIC_IDENTIFIER = 162
  val EXTENDED_IDENTIFIER = 163
  val GRAPHIC_CHARACTER = 164
  val WS = 165
  val NESTED_ML_COMMENT = 166
  val LINECOMMENT = 167
  val LETTER = 168
  val LETTER_OR_DIGIT = 169
  val INTEGER = 170
  val BASED_INTEGER = 171
  val EXPONENT = 172
  val BASE_SPECIFIER = 173
  val EXTENDED_DIGIT = 174
  val DIGIT = 175
  val UPPER_CASE_LETTER = 176
  val LOWER_CASE_LETTER = 177
  val SPECIAL_CHARACTER = 178
  val SPACE_CHARACTER = 179
  val OTHER_SPECIAL_CHARACTER = 180

  private def createBitSet(v1: Long): BitSet = new BitSet(Array(v1))

  private def createBitSet(v1: Long, v2: Long): BitSet = new BitSet(Array(v1, v2))

  private def createBitSet(v1: Long, v2: Long, v3: Long): BitSet = new BitSet(Array(v1, v2, v3))

  private def createBitSet(v1: Long, v2: Long, v3: Long, v4: Long): BitSet = new BitSet(Array(v1, v2, v3, v4))

  private def createBitSet(v1: Long, v2: Long, v3: Long, v4: Long, v5: Long): BitSet = new BitSet(Array(v1, v2, v3, v4, v5))

  private val FOLLOW_design_unit_in_design_file1282 = createBitSet(0x4000100010200400L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_EOF_in_design_file1287 = createBitSet(0x0000000000000002L)
  private val FOLLOW_library_clause_in_design_unit1313 = createBitSet(0x4000100010200400L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_use_clause_in_design_unit1321 = createBitSet(0x4000100010200400L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_v2008_context_reference_in_design_unit1331 = createBitSet(0x4000100010200400L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_library_unit_in_design_unit1339 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_declaration_in_library_unit1357 = createBitSet(0x0000000000000002L)
  private val FOLLOW_architecture_body_in_library_unit1364 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_library_unit1371 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_library_unit1378 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_library_unit1387 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_context_declaration_in_library_unit1395 = createBitSet(0x0000000000000002L)
  private val FOLLOW_configuration_declaration_in_library_unit1401 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LIBRARY_in_library_clause1422 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_library_clause1424 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_library_clause1426 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONTEXT_in_v2008_context_reference1442 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_list_in_v2008_context_reference1444 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_context_reference1446 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GENERIC_in_generic_clause1462 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_generic_clause1464 = createBitSet(0x0000000000400000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_generic_interface_list_in_generic_clause1466 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_generic_clause1468 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_generic_interface_list1490 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_generic_interface_list1496 = createBitSet(0x0000000000400000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_interface_constant_declaration_in_generic_interface_list1500 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_PORT_in_port_clause1524 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_port_clause1526 = createBitSet(0x0000000000000000L, 0x0000000000020000L, 0x0000000C00006000L)
  private val FOLLOW_port_interface_list_in_port_clause1528 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_port_clause1530 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_port_clause1532 = createBitSet(0x0000000000000002L)
  private val FOLLOW_inteface_element_port_in_port_interface_list1554 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_port_interface_list1560 = createBitSet(0x0000000000000000L, 0x0000000000020000L, 0x0000000C00006000L)
  private val FOLLOW_inteface_element_port_in_port_interface_list1564 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_ENTITY_in_entity_declaration1594 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_entity_declaration1598 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_entity_declaration1600 = createBitSet(0xC000004D48C06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_generic_clause_in_entity_declaration1605 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_entity_declaration1607 = createBitSet(0xC000004948C06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_port_clause_in_entity_declaration1613 = createBitSet(0x4000004948C06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_entity_declarative_item_in_entity_declaration1619 = createBitSet(0x4000004948C06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_BEGIN_in_entity_declaration1627 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_label_colon_in_entity_declaration1634 = createBitSet(0x0000000000001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_POSTPONED_in_entity_declaration1639 = createBitSet(0x0000000000001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_concurrent_assertion_statement_in_entity_declaration1647 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1657 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_process_statement_in_entity_declaration1666 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000C00000400L)
  private val FOLLOW_END_in_entity_declaration1691 = createBitSet(0x0000000010000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_ENTITY_in_entity_declaration1693 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_entity_declaration1698 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_entity_declaration1701 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1719 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_entity_declarative_item1729 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_entity_declarative_item1738 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_entity_declarative_item1747 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_entity_declarative_item1756 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_entity_declarative_item1768 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_entity_declarative_item1775 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_entity_declarative_item1782 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_entity_declarative_item1789 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_entity_declarative_item1796 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_entity_declarative_item1803 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_entity_declarative_item1810 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_entity_declarative_item1817 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_entity_declarative_item1824 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_entity_declarative_item1831 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_entity_declarative_item1838 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_entity_declarative_item1845 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_entity_declarative_item1852 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_step_limit_specification_in_entity_declarative_item1872 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_entity_declarative_item1880 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_entity_declarative_item1888 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_quantity_declaration_in_entity_declarative_item1896 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_entity_declarative_item1904 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARCHITECTURE_in_architecture_body1929 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_architecture_body1933 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_architecture_body1935 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_architecture_body1937 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_architecture_body1939 = createBitSet(0x40000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_block_declarative_item_in_architecture_body1944 = createBitSet(0x40000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_BEGIN_in_architecture_body1950 = createBitSet(0x08EC002008081210L, 0x0604003800000005L, 0x0020000FC3100400L)
  private val FOLLOW_concurrent_statement_list_in_architecture_body1954 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_architecture_body1957 = createBitSet(0x0000000000000400L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_ARCHITECTURE_in_architecture_body1959 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_architecture_body1964 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_architecture_body1967 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_configuration_declarative_item1985 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_configuration_declarative_item1992 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_configuration_declarative_item1999 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_configuration_declaration2020 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_configuration_declaration2024 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_configuration_declaration2026 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_configuration_declaration2028 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_configuration_declaration2030 = createBitSet(0x0000000880002000L, 0x0000000040000000L)
  private val FOLLOW_configuration_declarative_item_in_configuration_declaration2035 = createBitSet(0x0000000880002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_configuration_declaration2045 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_configuration_declaration2048 = createBitSet(0x0000000000200000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_CONFIGURATION_in_configuration_declaration2050 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_configuration_declaration2055 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_configuration_declaration2058 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_block_configuration_index2080 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_block_configuration_index2093 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_block_configuration_index2100 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_block_specification2124 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_block_specification2127 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_block_configuration_index_in_block_specification2129 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_block_specification2131 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_block_specification2140 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_block_configuration2164 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_block_specification_in_block_configuration2166 = createBitSet(0x0000000888002000L, 0x0000000040000000L)
  private val FOLLOW_use_clause_in_block_configuration2171 = createBitSet(0x0000000888002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_block_configuration2186 = createBitSet(0x0000000888002000L, 0x0000000040000000L)
  private val FOLLOW_component_configuration_in_block_configuration2195 = createBitSet(0x0000000888002000L, 0x0000000040000000L)
  private val FOLLOW_END_in_block_configuration2205 = createBitSet(0x0000000080000000L)
  private val FOLLOW_FOR_in_block_configuration2207 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_block_configuration2209 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_component_configuration2228 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_component_specification_in_component_configuration2230 = createBitSet(0x8000000C88002000L, 0x0000800040000000L)
  private val FOLLOW_binding_indication_in_component_configuration2235 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_component_configuration2237 = createBitSet(0x0000000888002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_component_configuration2246 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_component_configuration2250 = createBitSet(0x0000000080000000L)
  private val FOLLOW_FOR_in_component_configuration2252 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_component_configuration2254 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONTEXT_in_v2008_context_declaration2270 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_context_declaration2272 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_v2008_context_declaration2274 = createBitSet(0x0000100008000000L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_library_clause_in_v2008_context_declaration2280 = createBitSet(0x0000100008000000L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_use_clause_in_v2008_context_declaration2284 = createBitSet(0x0000100008000000L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_v2008_context_reference_in_v2008_context_declaration2288 = createBitSet(0x0000100008000000L, 0x0000000040000000L, 0x0000000000000200L)
  private val FOLLOW_END_in_v2008_context_declaration2293 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000200L)
  private val FOLLOW_CONTEXT_in_v2008_context_declaration2295 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_context_declaration2298 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_context_declaration2301 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_package_declaration2321 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_package_declaration2325 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_package_declaration2327 = createBitSet(0x4000004D48D02080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_generic_clause_in_package_declaration2335 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_package_declaration2337 = createBitSet(0x4000004D48D02080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_generic_map_aspect_in_package_declaration2342 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_package_declaration2344 = createBitSet(0x4000004948D02080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_package_declarative_item_in_package_declaration2353 = createBitSet(0x4000004948D02080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_END_in_package_declaration2359 = createBitSet(0x4000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_PACKAGE_in_package_declaration2361 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_package_declaration2366 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_package_declaration2369 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declaration_in_package_declarative_item2387 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_package_declarative_item2397 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_package_declarative_item2406 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_package_declarative_item2415 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_package_declarative_item2427 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_package_declarative_item2434 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_package_declarative_item2441 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_package_declarative_item2448 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_package_declarative_item2455 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_package_declarative_item2462 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_package_declarative_item2469 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_declaration_in_package_declarative_item2476 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_package_declarative_item2483 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_package_declarative_item2490 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_package_declarative_item2497 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_package_declarative_item2504 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_package_declarative_item2511 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_package_declarative_item2518 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_package_declarative_item2534 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_package_declarative_item2542 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_package_declarative_item2550 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_package_body2572 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_package_body2574 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_package_body2578 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_package_body2580 = createBitSet(0x4000004948402080L, 0x00000000C4410012L)
  private val FOLLOW_package_body_declarative_item_in_package_body2585 = createBitSet(0x4000004948402080L, 0x00000000C4410012L)
  private val FOLLOW_END_in_package_body2591 = createBitSet(0x4000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_PACKAGE_in_package_body2594 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_package_body2596 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_package_body2602 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_package_body2605 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2625 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_package_body_declarative_item2635 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_package_body_declarative_item2644 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_package_body_declarative_item2653 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_package_body_declarative_item2662 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_package_body_declarative_item2674 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_package_body_declarative_item2681 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_package_body_declarative_item2688 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_package_body_declarative_item2695 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_package_body_declarative_item2702 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_package_body_declarative_item2709 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_package_body_declarative_item2716 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_package_body_declarative_item2725 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_package_body_declarative_item2734 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_package_body_declarative_item2742 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_package_body_declarative_item2749 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_v2008_package_instantiation_declaration2764 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_package_instantiation_declaration2766 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_v2008_package_instantiation_declaration2768 = createBitSet(0x0008000000000000L)
  private val FOLLOW_NEW_in_v2008_package_instantiation_declaration2770 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_v2008_package_instantiation_declaration2774 = createBitSet(0x0000000400000000L, 0x0000800000000000L)
  private val FOLLOW_generic_map_aspect_in_v2008_package_instantiation_declaration2778 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_package_instantiation_declaration2781 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_designator2794 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_designator2801 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURE_in_subprogram_specification2820 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_subprogram_specification2822 = createBitSet(0x0000000400000002L, 0x0004000000000000L, 0x0000000000000800L)
  private val FOLLOW_generic_clause_in_subprogram_specification2828 = createBitSet(0x0000000400000002L, 0x0004000000000000L, 0x0000000000000800L)
  private val FOLLOW_generic_map_aspect_in_subprogram_specification2830 = createBitSet(0x0000000000000002L, 0x0004000000000000L, 0x0000000000000800L)
  private val FOLLOW_PARAMETER_in_subprogram_specification2840 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_subprogram_specification2844 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2846 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_subprogram_specification2848 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PURE_in_subprogram_specification2860 = createBitSet(0x0000000100000000L)
  private val FOLLOW_IMPURE_in_subprogram_specification2866 = createBitSet(0x0000000100000000L)
  private val FOLLOW_FUNCTION_in_subprogram_specification2870 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_designator_in_subprogram_specification2872 = createBitSet(0x0000000400000000L, 0x0004000000000800L, 0x0000000000000800L)
  private val FOLLOW_generic_clause_in_subprogram_specification2878 = createBitSet(0x0000000400000000L, 0x0004000000000800L, 0x0000000000000800L)
  private val FOLLOW_generic_map_aspect_in_subprogram_specification2880 = createBitSet(0x0000000000000000L, 0x0004000000000800L, 0x0000000000000800L)
  private val FOLLOW_PARAMETER_in_subprogram_specification2890 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_subprogram_specification2894 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_parameter_interface_list_function_in_subprogram_specification2896 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_subprogram_specification2898 = createBitSet(0x0000000000000000L, 0x0000000000000800L)
  private val FOLLOW_RETURN_in_subprogram_specification2902 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_subprogram_specification2904 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2921 = createBitSet(0x0000040000000000L, 0x0000800000000000L)
  private val FOLLOW_subprogram_body_in_subprogram_declartion_or_body2924 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2929 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_specification_in_subprogram_declaration2948 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_subprogram_declaration2950 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IS_in_subprogram_body2972 = createBitSet(0x4000004940406080L, 0x00000000C4410012L)
  private val FOLLOW_subprogram_declarative_item_in_subprogram_body2977 = createBitSet(0x4000004940406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_subprogram_body2984 = createBitSet(0x00988020A8081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_subprogram_body2988 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_subprogram_body2991 = createBitSet(0x0000000100000002L, 0x0000000000000002L, 0x0000000C00000400L)
  private val FOLLOW_PROCEDURE_in_subprogram_body2996 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_FUNCTION_in_subprogram_body3002 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_designator_in_subprogram_body3008 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item3030 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_subprogram_declarative_item3040 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_subprogram_declarative_item3049 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_subprogram_declarative_item3058 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_subprogram_declarative_item3067 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_subprogram_declarative_item3079 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_subprogram_declarative_item3086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_subprogram_declarative_item3093 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_subprogram_declarative_item3100 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_subprogram_declarative_item3107 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_subprogram_declarative_item3114 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_subprogram_declarative_item3121 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_subprogram_declarative_item3128 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_subprogram_declarative_item3135 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_subprogram_declarative_item3142 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_subprogram_declarative_item3149 = createBitSet(0x0000000000000002L)
  private val FOLLOW_set_in_v2008_subprogram_instantiation_declaration3164 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_v2008_subprogram_instantiation_declaration3172 = createBitSet(0x0008000000000000L)
  private val FOLLOW_NEW_in_v2008_subprogram_instantiation_declaration3176 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_v2008_subprogram_instantiation_declaration3180 = createBitSet(0x0000000400000000L, 0x0010800000000000L)
  private val FOLLOW_signature_in_v2008_subprogram_instantiation_declaration3182 = createBitSet(0x0000000400000000L, 0x0000800000000000L)
  private val FOLLOW_generic_map_aspect_in_v2008_subprogram_instantiation_declaration3188 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_subprogram_instantiation_declaration3191 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TYPE_in_type_declaration3204 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_type_declaration3206 = createBitSet(0x0000040000000000L, 0x0000800000000000L)
  private val FOLLOW_IS_in_type_declaration3209 = createBitSet(0x0000000040000820L, 0x0004000000000068L)
  private val FOLLOW_type_definition_in_type_declaration3211 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_type_declaration3216 = createBitSet(0x0000000000000002L)
  private val FOLLOW_enumeration_type_definition_in_type_definition3234 = createBitSet(0x0000000000000002L)
  private val FOLLOW_physical_type_definition_in_type_definition3252 = createBitSet(0x0000000000000002L)
  private val FOLLOW_integer_or_floating_point_type_definition_in_type_definition3260 = createBitSet(0x0000000000000002L)
  private val FOLLOW_array_type_definition_in_type_definition3268 = createBitSet(0x0000000000000002L)
  private val FOLLOW_record_type_definition_in_type_definition3276 = createBitSet(0x0000000000000002L)
  private val FOLLOW_access_type_definition_in_type_definition3284 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_type_definition_in_type_definition3292 = createBitSet(0x0000000000000002L)
  private val FOLLOW_protected_type_body_in_type_definition3306 = createBitSet(0x0000000000000002L)
  private val FOLLOW_protected_type_declaration_in_type_definition3314 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NATURE_in_ams_nature_declaration3332 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_nature_declaration3334 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_ams_nature_declaration3336 = createBitSet(0x0000000000000800L, 0x0000000000000040L, 0x0000000C00000400L)
  private val FOLLOW_ams_nature_definition_in_ams_nature_declaration3338 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_nature_declaration3341 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_ams_terminal_declaration3357 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_ams_terminal_declaration3359 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_terminal_declaration3361 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3363 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_terminal_declaration3365 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3383 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_array_nature_definition_in_ams_nature_definition3391 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_record_nature_definition_in_ams_nature_definition3399 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_source_or_free_quantity_declaration_in_ams_quantity_declaration3424 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3431 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_source_or_free_quantity_declaration3448 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_ams_source_or_free_quantity_declaration3450 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_source_or_free_quantity_declaration3452 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_ams_source_or_free_quantity_declaration3454 = createBitSet(0x0000000000000000L, 0x0000900000000000L, 0x00000000000C0000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_source_or_free_quantity_declaration3466 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_source_or_free_quantity_declaration3468 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_ams_source_aspect_in_ams_source_or_free_quantity_declaration3483 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_source_or_free_quantity_declaration3495 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3511 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3520 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3524 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3527 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3529 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_ams_across_aspect3545 = createBitSet(0x0000000000000000L, 0x0000100000000000L, 0x0000000000018000L)
  private val FOLLOW_TOLERANCE_in_ams_across_aspect3548 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_across_aspect3552 = createBitSet(0x0000000000000000L, 0x0000100000000000L, 0x0000000000010000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_across_aspect3557 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_across_aspect3561 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000010000L)
  private val FOLLOW_ACROSS_in_ams_across_aspect3565 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_ams_through_aspect3582 = createBitSet(0x0000000000000000L, 0x0000100000000000L, 0x0000000000028000L)
  private val FOLLOW_TOLERANCE_in_ams_through_aspect3585 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_through_aspect3589 = createBitSet(0x0000000000000000L, 0x0000100000000000L, 0x0000000000020000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_through_aspect3594 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_through_aspect3598 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000020000L)
  private val FOLLOW_THROUGH_in_ams_through_aspect3602 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_ams_terminal_aspect3621 = createBitSet(0x0000000000000002L, 0x0000000001000000L)
  private val FOLLOW_TO_in_ams_terminal_aspect3624 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_in_ams_terminal_aspect3628 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SPECTRUM_in_ams_source_aspect3647 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3651 = createBitSet(0x0000000000000000L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_ams_source_aspect3653 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3657 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NOISE_in_ams_source_aspect3664 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3668 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONSTANT_in_constant_declaration3684 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_constant_declaration3686 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_constant_declaration3688 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_constant_declaration3690 = createBitSet(0x0000000000000000L, 0x0000900000000000L)
  private val FOLLOW_VAR_ASSIGN_in_constant_declaration3693 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_constant_declaration3695 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_constant_declaration3699 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_signal_declaration3718 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_signal_declaration3720 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_signal_declaration3722 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_signal_declaration3724 = createBitSet(0x0000000000040000L, 0x0000900000000080L)
  private val FOLLOW_REGISTER_in_signal_declaration3729 = createBitSet(0x0000000000000000L, 0x0000900000000000L)
  private val FOLLOW_BUS_in_signal_declaration3733 = createBitSet(0x0000000000000000L, 0x0000900000000000L)
  private val FOLLOW_VAR_ASSIGN_in_signal_declaration3738 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_signal_declaration3740 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_signal_declaration3744 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SHARED_in_variable_declaration3761 = createBitSet(0x0000000000000000L, 0x0000000080000000L)
  private val FOLLOW_VARIABLE_in_variable_declaration3764 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_variable_declaration3766 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_variable_declaration3768 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_variable_declaration3770 = createBitSet(0x0000000000000000L, 0x0000900000000000L)
  private val FOLLOW_VAR_ASSIGN_in_variable_declaration3773 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_variable_declaration3775 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_variable_declaration3779 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_file_declaration3796 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_file_declaration3798 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_file_declaration3800 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_file_declaration3802 = createBitSet(0x0400040000000000L, 0x0000800000000000L)
  private val FOLLOW_OPEN_in_file_declaration3806 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_file_declaration3810 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_file_declaration3814 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_file_declaration3818 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_file_declaration3822 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALIAS_in_alias_declaration3839 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00100400L)
  private val FOLLOW_alias_designator_in_alias_declaration3841 = createBitSet(0x0000040000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_alias_declaration3844 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_alias_declaration3846 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_alias_declaration3850 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_in_alias_declaration3852 = createBitSet(0x0000000000000000L, 0x0010800000000000L)
  private val FOLLOW_signature_in_alias_declaration3854 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_alias_declaration3857 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_alias_designator3874 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_alias_designator3881 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_alias_designator3887 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_component_declaration3905 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_component_declaration3909 = createBitSet(0x8000040408000000L)
  private val FOLLOW_IS_in_component_declaration3911 = createBitSet(0x8000000408000000L)
  private val FOLLOW_generic_clause_in_component_declaration3917 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_component_declaration3919 = createBitSet(0x8000000008000000L)
  private val FOLLOW_port_clause_in_component_declaration3925 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_component_declaration3929 = createBitSet(0x0000000000100000L)
  private val FOLLOW_COMPONENT_in_component_declaration3931 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_component_declaration3935 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_component_declaration3938 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ATTRIBUTE_in_attribute_declaration3954 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_attribute_declaration3956 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_attribute_declaration3958 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_attribute_declaration3960 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_attribute_declaration3962 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ATTRIBUTE_in_attribute_specification3980 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_attribute_specification3982 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_attribute_specification3984 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000C00100400L)
  private val FOLLOW_entity_name_list_in_attribute_specification3986 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_attribute_specification3988 = createBitSet(0x4000480950700400L, 0x0000000094420002L, 0x0000000000207000L)
  private val FOLLOW_entity_class_in_attribute_specification3990 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_attribute_specification3992 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_attribute_specification3994 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_attribute_specification3996 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_entity_designator4023 = createBitSet(0x0000000000000002L, 0x0010000000000000L)
  private val FOLLOW_CHARACTER_LITERAL_in_entity_designator4030 = createBitSet(0x0000000000000002L, 0x0010000000000000L)
  private val FOLLOW_STRING_LITERAL_in_entity_designator4036 = createBitSet(0x0000000000000002L, 0x0010000000000000L)
  private val FOLLOW_signature_in_entity_designator4042 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_designator_in_entity_name_list4066 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_entity_name_list4070 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00100400L)
  private val FOLLOW_entity_designator_in_entity_name_list4074 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_OTHERS_in_entity_name_list4085 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_entity_name_list4092 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_entity_class4107 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARCHITECTURE_in_entity_class4114 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_entity_class4121 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_entity_class4128 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURE_in_entity_class4135 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FUNCTION_in_entity_class4142 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TYPE_in_entity_class4149 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBTYPE_in_entity_class4156 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONSTANT_in_entity_class4163 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_entity_class4170 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_entity_class4177 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_entity_class4184 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_entity_class4191 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LABEL_in_entity_class4198 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LITERAL_in_entity_class4205 = createBitSet(0x0000000000000002L)
  private val FOLLOW_UNITS_in_entity_class4212 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_entity_class4219 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NATURE_in_entity_class4239 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBNATURE_in_entity_class4247 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_entity_class4255 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_entity_class4263 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_configuration_specification4284 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_component_specification_in_configuration_specification4286 = createBitSet(0x8000000400000000L, 0x0000800040000000L)
  private val FOLLOW_binding_indication_in_configuration_specification4290 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_configuration_specification4292 = createBitSet(0x0000000008000002L)
  private val FOLLOW_END_in_configuration_specification4301 = createBitSet(0x0000000080000000L)
  private val FOLLOW_FOR_in_configuration_specification4303 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_configuration_specification4305 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_instantiation_list4325 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OTHERS_in_instantiation_list4332 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_instantiation_list4339 = createBitSet(0x0000000000000002L)
  private val FOLLOW_instantiation_list_in_component_specification4356 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_component_specification4358 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_component_specification4360 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_entity_aspect4376 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_entity_aspect4380 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_entity_aspect4383 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_entity_aspect4387 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_entity_aspect4389 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_entity_aspect4398 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_entity_aspect4403 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OPEN_in_entity_aspect4410 = createBitSet(0x0000000000000002L)
  private val FOLLOW_USE_in_binding_indication4428 = createBitSet(0x0400000010200000L)
  private val FOLLOW_entity_aspect_in_binding_indication4430 = createBitSet(0x8000000400000002L)
  private val FOLLOW_generic_map_aspect_in_binding_indication4435 = createBitSet(0x8000000000000002L)
  private val FOLLOW_port_map_aspect_in_binding_indication4439 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DISCONNECT_in_disconnection_specification4456 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_list_in_disconnection_specification4459 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_OTHERS_in_disconnection_specification4465 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_ALL_in_disconnection_specification4471 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_disconnection_specification4474 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_disconnection_specification4476 = createBitSet(0x0000000000000040L)
  private val FOLLOW_AFTER_in_disconnection_specification4478 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_disconnection_specification4480 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_disconnection_specification4482 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LIMIT_in_ams_step_limit_specification4498 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_list_in_ams_step_limit_specification4501 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_OTHERS_in_ams_step_limit_specification4507 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_ALL_in_ams_step_limit_specification4513 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_step_limit_specification4517 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_ams_step_limit_specification4519 = createBitSet(0x0000000000000000L, 0x0000000800000000L)
  private val FOLLOW_WITH_in_ams_step_limit_specification4521 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_step_limit_specification4523 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_step_limit_specification4525 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_class_in_entity_class_entry4542 = createBitSet(0x0000000000000002L, 0x0000200000000000L)
  private val FOLLOW_BOX_in_entity_class_entry4544 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_group_template_declaration4566 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_group_template_declaration4568 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_group_template_declaration4570 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_group_template_declaration4572 = createBitSet(0x4000480950700400L, 0x0000000094420002L, 0x0000000000207000L)
  private val FOLLOW_entity_class_entry_in_group_template_declaration4576 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_group_template_declaration4580 = createBitSet(0x4000480950700400L, 0x0000000094420002L, 0x0000000000207000L)
  private val FOLLOW_entity_class_entry_in_group_template_declaration4584 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_group_template_declaration4591 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_group_template_declaration4593 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_group_declaration4613 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_group_declaration4615 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_group_declaration4617 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_group_declaration4619 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_group_declaration4621 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00100400L)
  private val FOLLOW_group_constituent_list_in_group_declaration4623 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_group_declaration4625 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_group_declaration4627 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_group_constituent4644 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_group_constituent4651 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_constituent_in_group_constituent_list4672 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_group_constituent_list4677 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00100400L)
  private val FOLLOW_group_constituent_in_group_constituent_list4681 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_USE_in_use_clause4705 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_list_in_use_clause4707 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_use_clause4709 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_enumeration_literal4728 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4735 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_enumeration_type_definition4756 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00100000L)
  private val FOLLOW_enumeration_literal_in_enumeration_type_definition4760 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_enumeration_type_definition4764 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00100000L)
  private val FOLLOW_enumeration_literal_in_enumeration_type_definition4768 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_enumeration_type_definition4774 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_integer_or_floating_point_type_definition4792 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_range_in_integer_or_floating_point_type_definition4794 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_physical_type_definition4819 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_range_in_physical_type_definition4821 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_physical_type_definition4824 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_physical_type_definition4830 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_physical_type_definition4832 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_physical_type_definition4843 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_EQ_in_physical_type_definition4845 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x00000001C0000000L)
  private val FOLLOW_physical_literal_in_physical_type_definition4847 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_physical_type_definition4849 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_END_in_physical_type_definition4863 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_physical_type_definition4865 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_physical_type_definition4869 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_mark_in_index_subtype_definition4888 = createBitSet(0x0000000000000000L, 0x0000000000000020L)
  private val FOLLOW_RANGE_in_index_subtype_definition4890 = createBitSet(0x0000000000000000L, 0x0000200000000000L)
  private val FOLLOW_BOX_in_index_subtype_definition4892 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARRAY_in_array_type_definition4916 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_array_type_definition4922 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_index_subtype_definition_in_array_type_definition4926 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_array_type_definition4931 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_index_subtype_definition_in_array_type_definition4935 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_array_type_definition4941 = createBitSet(0x0100000000000000L)
  private val FOLLOW_index_constraint_in_array_type_definition4947 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_array_type_definition4953 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_array_type_definition4955 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RECORD_in_record_type_definition4978 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_record_type_definition4986 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_record_type_definition4988 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_record_type_definition4990 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_record_type_definition4992 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_END_in_record_type_definition5003 = createBitSet(0x0000000000000000L, 0x0000000000000040L)
  private val FOLLOW_RECORD_in_record_type_definition5005 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_record_type_definition5007 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ACCESS_in_access_type_definition5025 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_access_type_definition5027 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_file_type_definition5046 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_file_type_definition5048 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_file_type_definition5050 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_mark_in_ams_scalar_nature_definition5070 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000010000L)
  private val FOLLOW_ACROSS_in_ams_scalar_nature_definition5072 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_ams_scalar_nature_definition5076 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000020000L)
  private val FOLLOW_THROUGH_in_ams_scalar_nature_definition5078 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_scalar_nature_definition5080 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000800000L)
  private val FOLLOW_REFERENCE_in_ams_scalar_nature_definition5082 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARRAY_in_ams_array_nature_definition5103 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_ams_array_nature_definition5109 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition5113 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_ams_array_nature_definition5118 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition5122 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_ams_array_nature_definition5128 = createBitSet(0x0100000000000000L)
  private val FOLLOW_index_constraint_in_ams_array_nature_definition5134 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_ams_array_nature_definition5139 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5141 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RECORD_in_ams_record_nature_definition5162 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_ams_record_nature_definition5169 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_record_nature_definition5171 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_ams_subnature_indication_in_ams_record_nature_definition5173 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_record_nature_definition5175 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_END_in_ams_record_nature_definition5186 = createBitSet(0x0000000000000000L, 0x0000000000000040L)
  private val FOLLOW_RECORD_in_ams_record_nature_definition5188 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_record_nature_definition5190 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBNATURE_in_ams_subnature_declaration5207 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_subnature_declaration5209 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_ams_subnature_declaration5211 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_ams_subnature_indication_in_ams_subnature_declaration5213 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_subnature_declaration5215 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_mark_in_ams_subnature_indication5232 = createBitSet(0x0000000000000002L, 0x0004000000000000L, 0x0000000000008000L)
  private val FOLLOW_index_constraint_in_ams_subnature_indication5234 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000008000L)
  private val FOLLOW_TOLERANCE_in_ams_subnature_indication5238 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_subnature_indication5242 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000010000L)
  private val FOLLOW_ACROSS_in_ams_subnature_indication5244 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_subnature_indication5248 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000020000L)
  private val FOLLOW_THROUGH_in_ams_subnature_indication5250 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_ams_nature_mark5270 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_protected_type_declaration5292 = createBitSet(0x0000004108002000L, 0x0000000040000012L)
  private val FOLLOW_protected_type_declarative_item_in_protected_type_declaration5297 = createBitSet(0x0000004108002000L, 0x0000000040000012L)
  private val FOLLOW_END_in_protected_type_declaration5303 = createBitSet(0x0000000000000000L, 0x0000000000000008L)
  private val FOLLOW_PROTECTED_in_protected_type_declaration5305 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_protected_type_declaration5307 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declaration_in_protected_type_declarative_item5326 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_declarative_item5335 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_protected_type_declarative_item5342 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_protected_type_declarative_item5349 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_protected_type_body5369 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_protected_type_body5371 = createBitSet(0x4000004948402080L, 0x00000000C4410012L)
  private val FOLLOW_protected_type_body_declarative_item_in_protected_type_body5376 = createBitSet(0x4000004948402080L, 0x00000000C4410012L)
  private val FOLLOW_END_in_protected_type_body5382 = createBitSet(0x0000000000000000L, 0x0000000000000008L)
  private val FOLLOW_PROTECTED_in_protected_type_body5384 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_protected_type_body5386 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_protected_type_body5388 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5407 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_body_declarative_item5417 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_protected_type_body_declarative_item5426 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_protected_type_body_declarative_item5435 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_protected_type_body_declarative_item5444 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_protected_type_body_declarative_item5456 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5463 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_protected_type_body_declarative_item5470 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_protected_type_body_declarative_item5477 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_protected_type_body_declarative_item5483 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_protected_type_body_declarative_item5490 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5497 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_protected_type_body_declarative_item5504 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_protected_type_body_declarative_item5511 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5518 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_protected_type_body_declarative_item5525 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBTYPE_in_subtype_declaration5542 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_subtype_declaration5544 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_subtype_declaration5546 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_subtype_declaration5548 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_subtype_declaration5550 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_resolution_indication_in_subtype_indication5576 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_subtype_indication5580 = createBitSet(0x0000000000000002L, 0x0004000000000020L, 0x0000000C00008000L)
  private val FOLLOW_v2008_constraint_in_subtype_indication5582 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000008000L)
  private val FOLLOW_TOLERANCE_in_subtype_indication5589 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_subtype_indication5591 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_subtype_indication5604 = createBitSet(0x0000000000000002L, 0x0004000000000020L, 0x0000000C00008400L)
  private val FOLLOW_selected_name_in_subtype_indication5608 = createBitSet(0x0000000000000002L, 0x0004000000000020L, 0x0000000C00008000L)
  private val FOLLOW_constraint_in_subtype_indication5611 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000008000L)
  private val FOLLOW_TOLERANCE_in_subtype_indication5618 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_subtype_indication5620 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_v2008_resolution_indication5636 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_v2008_resolution_indication5642 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5645 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_identifier_in_v2008_resolution_indication5649 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5651 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_v2008_resolution_indication5654 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_resolution_indication5656 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5658 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_v2008_resolution_indication5663 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TO_in_direction5676 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DOWNTO_in_direction5683 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_range_constraint5698 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_range_in_range_constraint5700 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_index_constraint5719 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_discrete_range_in_index_constraint5723 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_index_constraint5727 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_discrete_range_in_index_constraint5732 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_index_constraint5738 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_range5765 = createBitSet(0x0000000001000000L, 0x0000000001000000L)
  private val FOLLOW_direction_in_range5767 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_range5771 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_range5778 = createBitSet(0x0000000000000002L)
  private val FOLLOW_array_constraint_in_v2008_constraint5794 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_record_constraint_in_v2008_constraint5799 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_constraint_in_v2008_constraint5804 = createBitSet(0x0000000000000002L)
  private val FOLLOW_index_constraint_in_constraint5819 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_constraint_in_constraint5826 = createBitSet(0x0000000000000002L)
  private val FOLLOW_index_constraint_in_array_constraint5838 = createBitSet(0x0000000000000002L, 0x0004000000000000L, 0x0000000C00000000L)
  private val FOLLOW_array_constraint_in_array_constraint5842 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_record_constraint_in_array_constraint5846 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_array_constraint5854 = createBitSet(0x0400000000000000L)
  private val FOLLOW_OPEN_in_array_constraint5856 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_array_constraint5858 = createBitSet(0x0000000000000002L, 0x0004000000000000L, 0x0000000C00000000L)
  private val FOLLOW_array_constraint_in_array_constraint5862 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_record_constraint_in_array_constraint5866 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_v2008_record_constraint5879 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000000L)
  private val FOLLOW_array_constraint_in_v2008_record_constraint5882 = createBitSet(0x0000000000000000L, 0x0001000000000000L)
  private val FOLLOW_v2008_record_constraint_in_v2008_record_constraint5886 = createBitSet(0x0000000000000000L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_v2008_record_constraint5893 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_record_constraint5896 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000000L)
  private val FOLLOW_array_constraint_in_v2008_record_constraint5899 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_record_constraint_in_v2008_record_constraint5903 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_indication_in_discrete_range5954 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_in_discrete_range5961 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_type_mark5978 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_in_concurrent_statement_list6003 = createBitSet(0x08EC002000081212L, 0x0604003800000005L, 0x0020000FC3100400L)
  private val FOLLOW_label_colon_in_concurrent_statement6028 = createBitSet(0x08EC002090389210L, 0x0604003800000005L, 0x0020000FC3100400L)
  private val FOLLOW_concurrent_statement_with_label_in_concurrent_statement6097 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement6107 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement6121 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label6138 = createBitSet(0x0000000000000002L)
  private val FOLLOW_block_statement_in_concurrent_statement_with_label6146 = createBitSet(0x0000000000000002L)
  private val FOLLOW_generate_statement_in_concurrent_statement_with_label6154 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label6177 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_statement_in_concurrent_statement_optional_label6213 = createBitSet(0x0000000000000002L)
  private val FOLLOW_POSTPONED_in_concurrent_statement_optional_label6224 = createBitSet(0x0088000000001000L, 0x0004000800000005L, 0x0020000FC0100400L)
  private val FOLLOW_process_statement_in_concurrent_statement_optional_label6234 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label6243 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label6262 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label6271 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GENERIC_in_generic_map_aspect6293 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_generic_map_aspect6295 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_generic_map_aspect6297 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_list_in_generic_map_aspect6299 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_generic_map_aspect6301 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PORT_in_port_map_aspect6318 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_port_map_aspect6320 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_port_map_aspect6322 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_list_in_port_map_aspect6324 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_port_map_aspect6326 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BLOCK_in_block_statement6353 = createBitSet(0xC000044DC0D06080L, 0x00040000C4430012L, 0x0000000000607000L)
  private val FOLLOW_LPAREN_in_block_statement6356 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_block_statement6360 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_block_statement6362 = createBitSet(0xC000044DC0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_IS_in_block_statement6366 = createBitSet(0xC000004DC0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_generic_clause_in_block_statement6372 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement6374 = createBitSet(0xC000004DC0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_generic_map_aspect_in_block_statement6377 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement6379 = createBitSet(0xC0000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_port_clause_in_block_statement6388 = createBitSet(0xC0000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_port_map_aspect_in_block_statement6391 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement6393 = createBitSet(0x40000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_block_declarative_item_in_block_statement6402 = createBitSet(0x40000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_BEGIN_in_block_statement6408 = createBitSet(0x08EC002008081210L, 0x0604003800000005L, 0x0020000FC3100400L)
  private val FOLLOW_concurrent_statement_list_in_block_statement6412 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_block_statement6415 = createBitSet(0x0000000000008000L)
  private val FOLLOW_BLOCK_in_block_statement6417 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_block_statement6421 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement6424 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_block_declarative_item6445 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_block_declarative_item6455 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_block_declarative_item6464 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_block_declarative_item6473 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_block_declarative_item6482 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_block_declarative_item6494 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_block_declarative_item6501 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_block_declarative_item6508 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_block_declarative_item6515 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_block_declarative_item6522 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_block_declarative_item6529 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_block_declarative_item6536 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_declaration_in_block_declarative_item6543 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_block_declarative_item6550 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_block_declarative_item6557 = createBitSet(0x0000000000000002L)
  private val FOLLOW_configuration_specification_in_block_declarative_item6564 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_block_declarative_item6571 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_block_declarative_item6578 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_block_declarative_item6585 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_block_declarative_item6592 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_step_limit_specification_in_block_declarative_item6609 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_block_declarative_item6617 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_block_declarative_item6625 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_quantity_declaration_in_block_declarative_item6633 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_block_declarative_item6641 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCESS_in_process_statement6668 = createBitSet(0x4000044940406080L, 0x00040000C4410012L)
  private val FOLLOW_LPAREN_in_process_statement6671 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_list_in_process_statement6673 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_process_statement6675 = createBitSet(0x4000044940406080L, 0x00000000C4410012L)
  private val FOLLOW_IS_in_process_statement6679 = createBitSet(0x4000004940406080L, 0x00000000C4410012L)
  private val FOLLOW_process_declarative_item_in_process_statement6685 = createBitSet(0x4000004940406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_process_statement6692 = createBitSet(0x00988020A8081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_process_statement6696 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_process_statement6699 = createBitSet(0x0000000000000000L, 0x0000000000000005L)
  private val FOLLOW_POSTPONED_in_process_statement6701 = createBitSet(0x0000000000000000L, 0x0000000000000004L)
  private val FOLLOW_PROCESS_in_process_statement6704 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_process_statement6708 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_process_statement6711 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6732 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_subprogram_instantiation_declaration_in_process_declarative_item6742 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_process_declarative_item6751 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_process_declarative_item6760 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_instantiation_declaration_in_process_declarative_item6769 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_process_declarative_item6781 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_process_declarative_item6788 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_process_declarative_item6795 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_process_declarative_item6802 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_process_declarative_item6809 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_process_declarative_item6816 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_process_declarative_item6823 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_process_declarative_item6830 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_process_declarative_item6837 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_process_declarative_item6844 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_process_declarative_item6851 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_concurrent_procedure_call_statement6871 = createBitSet(0x0000000000000000L, 0x0004800000000000L)
  private val FOLLOW_LPAREN_in_concurrent_procedure_call_statement6874 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_list_in_concurrent_procedure_call_statement6876 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_concurrent_procedure_call_statement6878 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6882 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ASSERT_in_concurrent_assertion_statement6901 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_concurrent_assertion_statement6903 = createBitSet(0x0000000000000000L, 0x0000800000008400L)
  private val FOLLOW_REPORT_in_concurrent_assertion_statement6907 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_concurrent_assertion_statement6911 = createBitSet(0x0000000000000000L, 0x0000800000008000L)
  private val FOLLOW_SEVERITY_in_concurrent_assertion_statement6916 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_concurrent_assertion_statement6920 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_assertion_statement6924 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_conditional_signal_assignment_in_concurrent_signal_assignment_statement6948 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_selected_signal_assignment_in_concurrent_signal_assignment_statement6955 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_concurrent_conditional_signal_assignment6975 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_concurrent_conditional_signal_assignment6977 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_GUARDED_in_concurrent_conditional_signal_assignment6979 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_delay_mechanism_in_concurrent_conditional_signal_assignment6982 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_conditional_waveforms_in_concurrent_conditional_signal_assignment6989 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_conditional_signal_assignment6992 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_in_conditional_waveforms7005 = createBitSet(0x0000000000000002L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_conditional_waveforms7009 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_conditional_waveforms7011 = createBitSet(0x0000000002000002L)
  private val FOLLOW_ELSE_in_conditional_waveforms7015 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_conditional_waveforms_in_conditional_waveforms7017 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_concurrent_selected_signal_assignment7043 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_concurrent_selected_signal_assignment7045 = createBitSet(0x0000000000000000L, 0x0000000000004000L)
  private val FOLLOW_SELECT_in_concurrent_selected_signal_assignment7047 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100480L)
  private val FOLLOW_QMARK_in_concurrent_selected_signal_assignment7052 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_target_in_concurrent_selected_signal_assignment7058 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_concurrent_selected_signal_assignment7060 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_GUARDED_in_concurrent_selected_signal_assignment7062 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_delay_mechanism_in_concurrent_selected_signal_assignment7065 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_selected_waveforms_in_concurrent_selected_signal_assignment7068 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_selected_signal_assignment7070 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_in_selected_waveform7088 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_selected_waveform7090 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_selected_waveform7092 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_waveform_in_selected_waveforms7114 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_selected_waveforms7118 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_selected_waveform_in_selected_waveforms7122 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_name_in_target7145 = createBitSet(0x0000000000000002L)
  private val FOLLOW_aggregate_in_target7152 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_component_instantiation_statement7181 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_component_instantiation_statement7186 = createBitSet(0x8000000400000000L, 0x0000800000000000L)
  private val FOLLOW_ENTITY_in_component_instantiation_statement7194 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_component_instantiation_statement7198 = createBitSet(0x8000000400000000L, 0x0004800000000000L)
  private val FOLLOW_LPAREN_in_component_instantiation_statement7201 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_component_instantiation_statement7205 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_component_instantiation_statement7207 = createBitSet(0x8000000400000000L, 0x0000800000000000L)
  private val FOLLOW_CONFIGURATION_in_component_instantiation_statement7217 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_component_instantiation_statement7221 = createBitSet(0x8000000400000000L, 0x0000800000000000L)
  private val FOLLOW_generic_map_aspect_in_component_instantiation_statement7229 = createBitSet(0x8000000000000000L, 0x0000800000000000L)
  private val FOLLOW_port_map_aspect_in_component_instantiation_statement7233 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_component_instantiation_statement7236 = createBitSet(0x0000000000000002L)
  private val FOLLOW_for_generate_statement_in_generate_statement7255 = createBitSet(0x0000000000000002L)
  private val FOLLOW_if_generate_statement_in_generate_statement7263 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_case_generate_statement_in_generate_statement7273 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_for_generate_statement7291 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_for_generate_statement7295 = createBitSet(0x0000008000000000L)
  private val FOLLOW_IN_in_for_generate_statement7297 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_discrete_range_in_for_generate_statement7299 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_for_generate_statement7301 = createBitSet(0x48EC0069C8D87290L, 0x06040038C4430017L, 0x0020000FC3707400L)
  private val FOLLOW_generate_statement_body_in_for_generate_statement7307 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_for_generate_statement7310 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_for_generate_statement7312 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_for_generate_statement7316 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_for_generate_statement7319 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_if_generate_statement7338 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_label_colon_in_if_generate_statement7345 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_if_generate_statement7351 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement7353 = createBitSet(0x48EC0069C8D87290L, 0x06040038C4430017L, 0x0020000FC3707400L)
  private val FOLLOW_generate_statement_body_in_if_generate_statement7359 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSIF_in_if_generate_statement7366 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_label_colon_in_if_generate_statement7370 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_if_generate_statement7373 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement7375 = createBitSet(0x48EC0069C8D87290L, 0x06040038C4430017L, 0x0020000FC3707400L)
  private val FOLLOW_generate_statement_body_in_if_generate_statement7379 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSE_in_if_generate_statement7385 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_label_colon_in_if_generate_statement7390 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_if_generate_statement7393 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement7395 = createBitSet(0x48EC0069C8D87290L, 0x06040038C4430017L, 0x0020000FC3707400L)
  private val FOLLOW_generate_statement_body_in_if_generate_statement7399 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_if_generate_statement7406 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement7408 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_if_generate_statement7412 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_if_generate_statement7415 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_v2008_case_generate_statement7433 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_v2008_case_generate_statement7435 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_v2008_case_generate_statement7437 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_v2008_case_generate_statement7442 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_label_colon_in_v2008_case_generate_statement7446 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_v2008_case_generate_statement7449 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_v2008_case_generate_statement7451 = createBitSet(0x48EC0069C8D87290L, 0x06040038C4430017L, 0x0020000FC3707400L)
  private val FOLLOW_generate_statement_body_in_v2008_case_generate_statement7453 = createBitSet(0x0000000008000000L, 0x0000000200000000L)
  private val FOLLOW_END_in_v2008_case_generate_statement7458 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_v2008_case_generate_statement7460 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_case_generate_statement7464 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_case_generate_statement7467 = createBitSet(0x0000000000000002L)
  private val FOLLOW_block_declarative_item_in_generate_statement_body7491 = createBitSet(0x40000049C0D06080L, 0x00000000C4430012L, 0x0000000000607000L)
  private val FOLLOW_BEGIN_in_generate_statement_body7498 = createBitSet(0x08EC002008081210L, 0x0604003800000005L, 0x0020000FC3100400L)
  private val FOLLOW_concurrent_statement_list_in_generate_statement_body7505 = createBitSet(0x0000000008000002L)
  private val FOLLOW_END_in_generate_statement_body7514 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_generate_statement_body7518 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_generate_statement_body7521 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BREAK_in_ams_concurrent_break_statement7537 = createBitSet(0x0200000080000000L, 0x0000800200000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement7539 = createBitSet(0x0200000000000000L, 0x0000800200000000L)
  private val FOLLOW_ON_in_ams_concurrent_break_statement7543 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_list_in_ams_concurrent_break_statement7545 = createBitSet(0x0000000000000000L, 0x0000800200000000L)
  private val FOLLOW_WHEN_in_ams_concurrent_break_statement7550 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_concurrent_break_statement7552 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_concurrent_break_statement7556 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement7574 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement7582 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement7590 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement7598 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement7606 = createBitSet(0x0000000000000002L)
  private val FOLLOW_label_colon_in_ams_simultaneous_statement_list7627 = createBitSet(0x08EC002000080210L, 0x0604003000000000L, 0x0020000FC2100400L)
  private val FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list7630 = createBitSet(0x08EC002000080212L, 0x0604003000000000L, 0x0020000FC2100400L)
  private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7656 = createBitSet(0x0000000000000000L, 0x0000008000000000L)
  private val FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement7658 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7662 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000000008000L)
  private val FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement7665 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_simple_simultaneous_statement7669 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement7673 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_ams_simultaneous_if_statement7701 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_ams_simultaneous_if_statement7705 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement7707 = createBitSet(0x08EC00200E080210L, 0x0604003000000000L, 0x0020000FC2100400L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7713 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSIF_in_ams_simultaneous_if_statement7719 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_ams_simultaneous_if_statement7723 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement7725 = createBitSet(0x08EC00200E080210L, 0x0604003000000000L, 0x0020000FC2100400L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7731 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSE_in_ams_simultaneous_if_statement7743 = createBitSet(0x08EC002008080210L, 0x0604003000000000L, 0x0020000FC2100400L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7749 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_ams_simultaneous_if_statement7754 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement7756 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_simultaneous_if_statement7760 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement7763 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_ams_simultaneous_case_statement7792 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_simultaneous_case_statement7794 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_case_statement7796 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_ams_simultaneous_case_statement7801 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_ams_simultaneous_case_statement7803 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_ams_simultaneous_case_statement7805 = createBitSet(0x08EC002008080210L, 0x0604003200000000L, 0x0020000FC2100400L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement7807 = createBitSet(0x0000000008000000L, 0x0000000200000000L)
  private val FOLLOW_END_in_ams_simultaneous_case_statement7814 = createBitSet(0x0000000000080000L)
  private val FOLLOW_CASE_in_ams_simultaneous_case_statement7816 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_simultaneous_case_statement7820 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement7823 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7848 = createBitSet(0x0000044900406080L, 0x00000000C4410012L)
  private val FOLLOW_IS_in_ams_simultaneous_procedural_statement7850 = createBitSet(0x0000004900406080L, 0x00000000C4410012L)
  private val FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7856 = createBitSet(0x0000004900406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7862 = createBitSet(0x00988020A8081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7866 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_ams_simultaneous_procedural_statement7869 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000002000000L)
  private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7871 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_ams_simultaneous_procedural_statement7875 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7878 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7896 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7903 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7910 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7917 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7924 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7931 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7938 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7945 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7952 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7959 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7966 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NULL_in_ams_simultaneous_null_statement7983 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7985 = createBitSet(0x0000000000000002L)
  private val FOLLOW_sequential_statement_in_sequence_of_statements8007 = createBitSet(0x00988020A0081002L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_label_colon_in_sequential_statement8028 = createBitSet(0x00988020A0081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_wait_statement_in_sequential_statement8034 = createBitSet(0x0000000000000002L)
  private val FOLLOW_assertion_statement_in_sequential_statement8042 = createBitSet(0x0000000000000002L)
  private val FOLLOW_report_statement_in_sequential_statement8050 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_assignment_statement_in_sequential_statement8068 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_assignment_statement_in_sequential_statement8086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_if_statement_in_sequential_statement8094 = createBitSet(0x0000000000000002L)
  private val FOLLOW_case_statement_in_sequential_statement8102 = createBitSet(0x0000000000000002L)
  private val FOLLOW_loop_statement_in_sequential_statement8110 = createBitSet(0x0000000000000002L)
  private val FOLLOW_next_statement_in_sequential_statement8118 = createBitSet(0x0000000000000002L)
  private val FOLLOW_exit_statement_in_sequential_statement8126 = createBitSet(0x0000000000000002L)
  private val FOLLOW_return_statement_in_sequential_statement8134 = createBitSet(0x0000000000000002L)
  private val FOLLOW_null_statement_in_sequential_statement8142 = createBitSet(0x0000000000000002L)
  private val FOLLOW_procedure_call_statement_in_sequential_statement8150 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_break_statement_in_sequential_statement8160 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WAIT_in_wait_statement8181 = createBitSet(0x0200000080000000L, 0x0000800020000000L)
  private val FOLLOW_ON_in_wait_statement8184 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_list_in_wait_statement8186 = createBitSet(0x0000000080000000L, 0x0000800020000000L)
  private val FOLLOW_UNTIL_in_wait_statement8191 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_wait_statement8193 = createBitSet(0x0000000080000000L, 0x0000800000000000L)
  private val FOLLOW_FOR_in_wait_statement8198 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_wait_statement8200 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_wait_statement8204 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ASSERT_in_assertion_statement8225 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_assertion_statement8227 = createBitSet(0x0000000000000000L, 0x0000800000008400L)
  private val FOLLOW_REPORT_in_assertion_statement8230 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_assertion_statement8234 = createBitSet(0x0000000000000000L, 0x0000800000008000L)
  private val FOLLOW_SEVERITY_in_assertion_statement8239 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_assertion_statement8243 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_assertion_statement8247 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REPORT_in_report_statement8272 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_report_statement8276 = createBitSet(0x0000000000000000L, 0x0000800000008000L)
  private val FOLLOW_SEVERITY_in_report_statement8279 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_report_statement8283 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_report_statement8287 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_conditional_signal_assignment_in_signal_assignment_statement8305 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_selected_signal_assignment_in_signal_assignment_statement8315 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_v2008_conditional_signal_assignment8338 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_v2008_conditional_signal_assignment8340 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FCC100500L)
  private val FOLLOW_RELEASE_in_v2008_conditional_signal_assignment8360 = createBitSet(0x2000008000000000L, 0x0000800000000000L)
  private val FOLLOW_set_in_v2008_conditional_signal_assignment8362 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_FORCE_in_v2008_conditional_signal_assignment8374 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_set_in_v2008_conditional_signal_assignment8376 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_signal_assignment8383 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_delay_mechanism_in_v2008_conditional_signal_assignment8391 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_conditional_waveforms_in_v2008_conditional_signal_assignment8394 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_delay_mechanism_in_v2008_conditional_signal_assignment8409 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_waveform_in_v2008_conditional_signal_assignment8412 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_conditional_signal_assignment8419 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_v2008_selected_signal_assignment8435 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_v2008_selected_signal_assignment8437 = createBitSet(0x0000000000000000L, 0x0000000000004000L)
  private val FOLLOW_SELECT_in_v2008_selected_signal_assignment8439 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100480L)
  private val FOLLOW_QMARK_in_v2008_selected_signal_assignment8441 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_target_in_v2008_selected_signal_assignment8446 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_v2008_selected_signal_assignment8448 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC8100500L)
  private val FOLLOW_delay_mechanism_in_v2008_selected_signal_assignment8456 = createBitSet(0x08EC011000000210L, 0x060400300A000100L, 0x0020000FC0100500L)
  private val FOLLOW_selected_waveforms_in_v2008_selected_signal_assignment8459 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_FORCE_in_v2008_selected_signal_assignment8466 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_set_in_v2008_selected_signal_assignment8468 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_v2008_selected_expressions_in_v2008_selected_signal_assignment8475 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_selected_signal_assignment8481 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TRANSPORT_in_delay_mechanism8504 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REJECT_in_delay_mechanism8511 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_delay_mechanism8515 = createBitSet(0x0000010000000000L)
  private val FOLLOW_INERTIAL_in_delay_mechanism8519 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_waveform_element8534 = createBitSet(0x0000000000000042L)
  private val FOLLOW_AFTER_in_waveform_element8537 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_waveform_element8541 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_element_in_waveform8573 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_waveform8577 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_waveform_element_in_waveform8581 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_UNAFFECTED_in_waveform8590 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_conditional_variable_assignment_in_variable_assignment_statement8625 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_selected_variable_assignment_in_variable_assignment_statement8639 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_variable_assignment_in_variable_assignment_statement8656 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_simple_variable_assignment8675 = createBitSet(0x0000000000000000L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_simple_variable_assignment8677 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_simple_variable_assignment8679 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_simple_variable_assignment8681 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_v2008_conditional_variable_assignment8699 = createBitSet(0x0000000000000000L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_v2008_conditional_variable_assignment8701 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_variable_assignment8706 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_conditional_variable_assignment8708 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_v2008_conditional_expressions8717 = createBitSet(0x0000000000000002L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_v2008_conditional_expressions8721 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_v2008_conditional_expressions8723 = createBitSet(0x0000000002000002L)
  private val FOLLOW_ELSE_in_v2008_conditional_expressions8727 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_v2008_conditional_expressions_in_v2008_conditional_expressions8729 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_v2008_selected_expressions8745 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_v2008_selected_expressions8747 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_v2008_selected_expressions8749 = createBitSet(0x0000000000000000L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_v2008_selected_expressions8752 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_v2008_selected_expressions8754 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_v2008_selected_expressions8756 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_v2008_selected_expressions8758 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_v2008_selected_variable_assignment8773 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_v2008_selected_variable_assignment8775 = createBitSet(0x0000000000000000L, 0x0000000000004000L)
  private val FOLLOW_SELECT_in_v2008_selected_variable_assignment8777 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100480L)
  private val FOLLOW_QMARK_in_v2008_selected_variable_assignment8779 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_target_in_v2008_selected_variable_assignment8784 = createBitSet(0x0000000000000000L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_v2008_selected_variable_assignment8786 = createBitSet(0x28EC008000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_v2008_selected_expressions_in_v2008_selected_variable_assignment8790 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_v2008_selected_variable_assignment8792 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_procedure_call_statement8812 = createBitSet(0x0000000000000000L, 0x0004800000000000L)
  private val FOLLOW_LPAREN_in_procedure_call_statement8815 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_list_in_procedure_call_statement8817 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_procedure_call_statement8819 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_procedure_call_statement8823 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_if_statement8847 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_if_statement8851 = createBitSet(0x0000000000000000L, 0x0000000000800000L)
  private val FOLLOW_THEN_in_if_statement8853 = createBitSet(0x00988020AE081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_if_statement8859 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSIF_in_if_statement8865 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_if_statement8869 = createBitSet(0x0000000000000000L, 0x0000000000800000L)
  private val FOLLOW_THEN_in_if_statement8871 = createBitSet(0x00988020AE081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_if_statement8878 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSE_in_if_statement8891 = createBitSet(0x00988020A8081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_if_statement8898 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_if_statement8903 = createBitSet(0x0000002000000000L)
  private val FOLLOW_IF_in_if_statement8905 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_if_statement8909 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_if_statement8912 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_case_statement8936 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100580L)
  private val FOLLOW_QMARK_in_case_statement8941 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_case_statement8945 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_case_statement8947 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_case_statement8952 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choices_in_case_statement8954 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_case_statement8956 = createBitSet(0x00988020A8081000L, 0x0004000F00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_case_statement8958 = createBitSet(0x0000000008000000L, 0x0000000200000000L)
  private val FOLLOW_END_in_case_statement8965 = createBitSet(0x0000000000080000L)
  private val FOLLOW_CASE_in_case_statement8967 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000080L)
  private val FOLLOW_QMARK_in_case_statement8972 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_case_statement8978 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_case_statement8981 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WHILE_in_iteration_scheme8997 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_iteration_scheme8999 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_iteration_scheme9006 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_iteration_scheme9008 = createBitSet(0x0000008000000000L)
  private val FOLLOW_IN_in_iteration_scheme9010 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_discrete_range_in_iteration_scheme9012 = createBitSet(0x0000000000000002L)
  private val FOLLOW_iteration_scheme_in_loop_statement9038 = createBitSet(0x0000800000000000L)
  private val FOLLOW_LOOP_in_loop_statement9041 = createBitSet(0x00988020A8081000L, 0x0004000D00000C00L, 0x0020000FC1100400L)
  private val FOLLOW_sequence_of_statements_in_loop_statement9045 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_loop_statement9048 = createBitSet(0x0000800000000000L)
  private val FOLLOW_LOOP_in_loop_statement9050 = createBitSet(0x0000000000000000L, 0x0000800000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_loop_statement9054 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_loop_statement9057 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEXT_in_next_statement9074 = createBitSet(0x0000000000000000L, 0x0000800200000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_next_statement9076 = createBitSet(0x0000000000000000L, 0x0000800200000000L)
  private val FOLLOW_WHEN_in_next_statement9080 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_next_statement9082 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_next_statement9086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_EXIT_in_exit_statement9104 = createBitSet(0x0000000000000000L, 0x0000800200000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_exit_statement9106 = createBitSet(0x0000000000000000L, 0x0000800200000000L)
  private val FOLLOW_WHEN_in_exit_statement9110 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_exit_statement9112 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_exit_statement9116 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RETURN_in_return_statement9134 = createBitSet(0x08EC000000000210L, 0x0604803000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_return_statement9136 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_return_statement9139 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NULL_in_null_statement9158 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_null_statement9160 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BREAK_in_ams_break_statement9177 = createBitSet(0x0000000080000000L, 0x0000800200000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_break_element_list_in_ams_break_statement9179 = createBitSet(0x0000000000000000L, 0x0000800200000000L)
  private val FOLLOW_WHEN_in_ams_break_statement9183 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_break_statement9185 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_ams_break_statement9189 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_break_element_in_ams_break_element_list9211 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_ams_break_element_list9215 = createBitSet(0x0000000080000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_ams_break_element_in_ams_break_element_list9219 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_FOR_in_ams_break_element9243 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_in_ams_break_element9247 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_break_element9249 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_in_ams_break_element9255 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_ams_break_element9257 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_break_element9261 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_port_in_inteface_element_port9278 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_terminal_declaration_in_inteface_element_port9291 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_quantity_declaration_in_inteface_element_port9299 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_variable_declaration_in_interface_element_procedure9335 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_interface_element_procedure9343 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure9352 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_file_declaration_in_interface_element_procedure9359 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure9373 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure9381 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_type_declaration_in_interface_element_procedure9400 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_procedure9408 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_package_declaration_in_interface_element_procedure9416 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_interface_element_function9437 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_function_in_interface_element_function9445 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_file_declaration_in_interface_element_function9452 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_function9466 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_function9474 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_type_declaration_in_interface_element_function9493 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_function9501 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_interface_package_declaration_in_interface_element_function9509 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9536 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_parameter_interface_list_procedure9540 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9544 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_interface_element_function_in_parameter_interface_list_function9573 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_SEMICOLON_in_parameter_interface_list_function9578 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_interface_element_function_in_parameter_interface_list_function9582 = createBitSet(0x0000000000000002L, 0x0000800000000000L)
  private val FOLLOW_CONSTANT_in_interface_constant_declaration9605 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_constant_declaration9608 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_constant_declaration9610 = createBitSet(0x0000008000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_IN_in_interface_constant_declaration9612 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_constant_declaration9615 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_constant_declaration9618 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_interface_constant_declaration9620 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_interface_signal_declaration_port9639 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_signal_declaration_port9642 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_signal_declaration_port9644 = createBitSet(0x2000228000020000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_interface_mode_in_interface_signal_declaration_port9646 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_signal_declaration_port9649 = createBitSet(0x0000000000040002L, 0x0000100000000000L)
  private val FOLLOW_BUS_in_interface_signal_declaration_port9651 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_port9655 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_interface_signal_declaration_port9657 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_interface_signal_declaration_procedure9676 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_signal_declaration_procedure9678 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_signal_declaration_procedure9680 = createBitSet(0x2000228000020000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_interface_mode_in_interface_signal_declaration_procedure9682 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_signal_declaration_procedure9685 = createBitSet(0x0000000000040002L, 0x0000100000000000L)
  private val FOLLOW_BUS_in_interface_signal_declaration_procedure9687 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure9691 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_interface_signal_declaration_procedure9693 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_interface_signal_declaration_function9713 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_signal_declaration_function9715 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_signal_declaration_function9717 = createBitSet(0x0000008000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_IN_in_interface_signal_declaration_function9719 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_signal_declaration_function9722 = createBitSet(0x0000000000040002L, 0x0000100000000000L)
  private val FOLLOW_BUS_in_interface_signal_declaration_function9724 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function9728 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_interface_signal_declaration_function9730 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_interface_variable_declaration9749 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_variable_declaration9752 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_variable_declaration9754 = createBitSet(0x2000228000020000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_interface_mode_in_interface_variable_declaration9756 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_variable_declaration9759 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_variable_declaration9762 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_interface_variable_declaration9764 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IN_in_interface_mode9783 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OUT_in_interface_mode9790 = createBitSet(0x0000000000000002L)
  private val FOLLOW_INOUT_in_interface_mode9797 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BUFFER_in_interface_mode9804 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LINKAGE_in_interface_mode9811 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_interface_file_declaration9826 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_interface_file_declaration9828 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_interface_file_declaration9830 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_interface_file_declaration9832 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_ams_interface_terminal_declaration9850 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_ams_interface_terminal_declaration9852 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_interface_terminal_declaration9854 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration9856 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_interface_quantity_declaration9872 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_ams_interface_quantity_declaration9874 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_ams_interface_quantity_declaration9876 = createBitSet(0x2000008000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_IN_in_ams_interface_quantity_declaration9879 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_OUT_in_ams_interface_quantity_declaration9883 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_ams_interface_quantity_declaration9887 = createBitSet(0x0000000000000002L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration9890 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_ams_interface_quantity_declaration9892 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TYPE_in_v2008_interface_type_declaration9910 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_interface_type_declaration9912 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURE_in_v2008_interface_subprogram_declaration9928 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_interface_subprogram_declaration9930 = createBitSet(0x0000040000000002L, 0x0004000000000000L, 0x0000000000000800L)
  private val FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration9936 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration9939 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_parameter_interface_list_procedure_in_v2008_interface_subprogram_declaration9943 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration9945 = createBitSet(0x0000040000000002L)
  private val FOLLOW_set_in_v2008_interface_subprogram_declaration9952 = createBitSet(0x0000000100000000L)
  private val FOLLOW_FUNCTION_in_v2008_interface_subprogram_declaration9959 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_designator_in_v2008_interface_subprogram_declaration9961 = createBitSet(0x0000000000000000L, 0x0004000000000800L, 0x0000000000000800L)
  private val FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration9967 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration9970 = createBitSet(0x4000004140400000L, 0x0000800084020012L, 0x0000000C00006000L)
  private val FOLLOW_parameter_interface_list_function_in_v2008_interface_subprogram_declaration9974 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration9976 = createBitSet(0x0000000000000000L, 0x0000000000000800L)
  private val FOLLOW_RETURN_in_v2008_interface_subprogram_declaration9980 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_v2008_interface_subprogram_declaration9982 = createBitSet(0x0000040000000002L)
  private val FOLLOW_IS_in_v2008_interface_subprogram_declaration9988 = createBitSet(0x0000000000000000L, 0x0000200000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_v2008_interface_subprogram_declaration9993 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BOX_in_v2008_interface_subprogram_declaration9997 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_v2008_interface_package_declaration10015 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_interface_package_declaration10017 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_v2008_interface_package_declaration10019 = createBitSet(0x0008000000000000L)
  private val FOLLOW_NEW_in_v2008_interface_package_declaration10021 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_v2008_interface_package_declaration10025 = createBitSet(0x0000000400000000L)
  private val FOLLOW_GENERIC_in_v2008_interface_package_declaration10029 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_v2008_interface_package_declaration10031 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_v2008_interface_package_declaration10033 = createBitSet(0x0CEC010000000210L, 0x0604203000000000L, 0x0020000FD0100500L)
  private val FOLLOW_association_list_in_v2008_interface_package_declaration10038 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_BOX_in_v2008_interface_package_declaration10042 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_DEFAULT_in_v2008_interface_package_declaration10046 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_v2008_interface_package_declaration10049 = createBitSet(0x0000000000000002L)
  private val FOLLOW_formal_part_in_association_element10069 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_association_element10071 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_actual_part_in_association_element10075 = createBitSet(0x0000000000000002L)
  private val FOLLOW_association_element_in_association_list10102 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_association_list10107 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_element_in_association_list10111 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_identifier_in_formal_part10133 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_formal_part10140 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_name_association_list_part_in_formal_part10147 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_slice_part_in_formal_part10151 = createBitSet(0x0000000000000002L)
  private val FOLLOW_INERTIAL_in_actual_part10174 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_actual_part10178 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OPEN_in_actual_part10187 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_condition10206 = createBitSet(0x0000000000000002L)
  private val FOLLOW_logical_expression_in_expression10223 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONDITION_OPERATOR_in_expression10234 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_primary_in_expression10236 = createBitSet(0x0000000000000002L)
  private val FOLLOW_relation_in_logical_expression10255 = createBitSet(0x08EC000000000212L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_NAND_in_logical_expression10266 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_NOR_in_logical_expression10270 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_relation_in_logical_expression10275 = createBitSet(0x0000000000000002L)
  private val FOLLOW_logical_operator_in_logical_expression10288 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_relation_in_logical_expression10292 = createBitSet(0x08EC000000000212L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_AND_in_logical_operator10316 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OR_in_logical_operator10323 = createBitSet(0x0000000000000002L)
  private val FOLLOW_XOR_in_logical_operator10330 = createBitSet(0x0000000000000002L)
  private val FOLLOW_XNOR_in_logical_operator10337 = createBitSet(0x0000000000000002L)
  private val FOLLOW_shift_expression_in_relation10362 = createBitSet(0x0000000000000002L, 0x38000B0000000000L, 0x000000000000003FL)
  private val FOLLOW_relational_operator_in_relation10370 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_shift_expression_in_relation10374 = createBitSet(0x0000000000000002L)
  private val FOLLOW_EQ_in_relational_operator10395 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEQ_in_relational_operator10402 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LT_in_relational_operator10409 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LEQ_in_relational_operator10416 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GT_in_relational_operator10423 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GEQ_in_relational_operator10430 = createBitSet(0x0000000000000002L)
  private val FOLLOW_set_in_relational_operator10440 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_shift_expression10497 = createBitSet(0x0000000000000002L, 0x00000000003C3000L)
  private val FOLLOW_shift_operator_in_shift_expression10505 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_simple_expression_in_shift_expression10509 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SLL_in_shift_operator10530 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SRL_in_shift_operator10537 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SLA_in_shift_operator10544 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SRA_in_shift_operator10551 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ROL_in_shift_operator10558 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ROR_in_shift_operator10565 = createBitSet(0x0000000000000002L)
  private val FOLLOW_sign_in_simple_expression10588 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_term_in_simple_expression10593 = createBitSet(0x0000000000000002L, 0x0602000000000000L)
  private val FOLLOW_adding_operator_in_simple_expression10604 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_term_in_simple_expression10608 = createBitSet(0x0000000000000002L, 0x0602000000000000L)
  private val FOLLOW_PLUS_in_sign10629 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MINUS_in_sign10636 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PLUS_in_adding_operator10659 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MINUS_in_adding_operator10666 = createBitSet(0x0000000000000002L)
  private val FOLLOW_AMPERSAND_in_adding_operator10673 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MUL_in_multiplying_operator10692 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DIV_in_multiplying_operator10699 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MOD_in_multiplying_operator10706 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REM_in_multiplying_operator10713 = createBitSet(0x0000000000000002L)
  private val FOLLOW_factor_in_term10733 = createBitSet(0x0002000000000002L, 0x0180000000000200L)
  private val FOLLOW_multiplying_operator_in_term10741 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_factor_in_term10745 = createBitSet(0x0002000000000002L, 0x0180000000000200L)
  private val FOLLOW_primary_in_factor10768 = createBitSet(0x0000000000000002L, 0x0000004000000000L)
  private val FOLLOW_DOUBLESTAR_in_factor10771 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_primary_in_factor10775 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ABS_in_factor10784 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_primary_in_factor10786 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NOT_in_factor10793 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_primary_in_factor10795 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NAND_in_factor10805 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_NOR_in_factor10813 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_logical_operator_in_factor10821 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_primary_in_factor10824 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_primary10840 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L)
  private val FOLLOW_qualified_expression_in_primary10842 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_primary10850 = createBitSet(0x0000000000000002L)
  private val FOLLOW_literal_in_primary10857 = createBitSet(0x0000000000000002L)
  private val FOLLOW_allocator_in_primary10865 = createBitSet(0x0000000000000002L)
  private val FOLLOW_aggregate_in_primary10872 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEW_in_allocator10888 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_allocator10890 = createBitSet(0x0000000000000002L, 0x0004000000000000L, 0x0000000020000000L)
  private val FOLLOW_qualified_expression_in_allocator10897 = createBitSet(0x0000000000000002L)
  private val FOLLOW_index_constraint_in_allocator10907 = createBitSet(0x0000000000000002L)
  private val FOLLOW_APOSTROPHE_in_qualified_expression10930 = createBitSet(0x0088000000000000L, 0x0004000000000000L, 0x0020000FC0100400L)
  private val FOLLOW_aggregate_in_qualified_expression10932 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_selected_name_list10954 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_selected_name_list10959 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_selected_name_list10963 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_name_prefix_in_selected_name10990 = createBitSet(0x0000000000000002L, 0x8000000000000000L)
  private val FOLLOW_name_selected_part_in_selected_name10994 = createBitSet(0x0000000000000002L, 0x8000000000000000L)
  private val FOLLOW_name_in_name_list11020 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_name_list11025 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0020000C00000400L)
  private val FOLLOW_name_in_name_list11029 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_name_prefix_in_name11057 = createBitSet(0x0000000000000002L, 0x8014000000000000L, 0x0000000020000000L)
  private val FOLLOW_name_part_in_name11060 = createBitSet(0x0000000000000002L, 0x8014000000000000L, 0x0000000020000000L)
  private val FOLLOW_v2008_external_name_in_name11073 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_name_prefix11086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_name_prefix11094 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_selected_part_in_name_part11110 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_attribute_part_in_name_part11117 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_name_part11128 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_slice_part_in_name_part11135 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DOT_in_name_selected_part11159 = createBitSet(0x0000000000000100L, 0x0000000000000000L, 0x0000000C00100400L)
  private val FOLLOW_identifier_in_name_selected_part11164 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_name_selected_part11170 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_name_selected_part11177 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_name_selected_part11183 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_name_association_list_part11200 = createBitSet(0x0CEC010000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_association_list_in_name_association_list_part11202 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_name_association_list_part11204 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_name_slice_part11223 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_discrete_range_in_name_slice_part11225 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_name_slice_part11227 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signature_in_name_attribute_part11243 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L)
  private val FOLLOW_APOSTROPHE_in_name_attribute_part11246 = createBitSet(0x0000000000000000L, 0x0000000000000020L, 0x0000000C00838000L)
  private val FOLLOW_identifier_in_name_attribute_part11251 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_RANGE_in_name_attribute_part11253 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_TOLERANCE_in_name_attribute_part11258 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_ACROSS_in_name_attribute_part11263 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_THROUGH_in_name_attribute_part11267 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_REFERENCE_in_name_attribute_part11272 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_name_attribute_part11285 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_name_attribute_part11289 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_name_attribute_part11294 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_name_attribute_part11296 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_name_attribute_part11300 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LBRACKET_in_signature11319 = createBitSet(0x0000000000000000L, 0x0020000000000800L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_list_in_signature11321 = createBitSet(0x0000000000000000L, 0x0020000000000800L)
  private val FOLLOW_RETURN_in_signature11325 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_type_mark_in_signature11327 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_RBRACKET_in_signature11331 = createBitSet(0x0000000000000002L)
  private val FOLLOW_181_in_v2008_external_name11345 = createBitSet(0x0000000000400000L)
  private val FOLLOW_CONSTANT_in_v2008_external_name11347 = createBitSet(0x0000000000000000L, 0x8000000000000000L, 0x0080000C00000040L)
  private val FOLLOW_v2008_external_pathname_in_v2008_external_name11349 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_v2008_external_name11351 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_v2008_external_name11353 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_182_in_v2008_external_name11355 = createBitSet(0x0000000000000002L)
  private val FOLLOW_181_in_v2008_external_name11360 = createBitSet(0x0000000000000000L, 0x0000000000020000L)
  private val FOLLOW_SIGNAL_in_v2008_external_name11362 = createBitSet(0x0000000000000000L, 0x8000000000000000L, 0x0080000C00000040L)
  private val FOLLOW_v2008_external_pathname_in_v2008_external_name11364 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_v2008_external_name11366 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_v2008_external_name11368 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_182_in_v2008_external_name11370 = createBitSet(0x0000000000000002L)
  private val FOLLOW_181_in_v2008_external_name11375 = createBitSet(0x0000000000000000L, 0x0000000080000000L)
  private val FOLLOW_VARIABLE_in_v2008_external_name11377 = createBitSet(0x0000000000000000L, 0x8000000000000000L, 0x0080000C00000040L)
  private val FOLLOW_v2008_external_pathname_in_v2008_external_name11379 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_v2008_external_name11381 = createBitSet(0x0000000000000000L, 0x0004000000000000L, 0x0000000C00000400L)
  private val FOLLOW_subtype_indication_in_v2008_external_name11383 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_182_in_v2008_external_name11385 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_absolute_pathname_in_v2008_external_pathname11396 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_relative_pathname_in_v2008_external_pathname11400 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_package_pathname_in_v2008_external_pathname11404 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DOT_in_v2008_absolute_pathname11414 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_v2008_pathname_element_in_v2008_absolute_pathname11417 = createBitSet(0x0000000000000000L, 0x8000000000000000L)
  private val FOLLOW_DOT_in_v2008_absolute_pathname11419 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_absolute_pathname11425 = createBitSet(0x0000000000000002L)
  private val FOLLOW_183_in_v2008_relative_pathname11436 = createBitSet(0x0000000000000000L, 0x8000000000000000L)
  private val FOLLOW_DOT_in_v2008_relative_pathname11438 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0080000C00000000L)
  private val FOLLOW_v2008_pathname_element_in_v2008_relative_pathname11443 = createBitSet(0x0000000000000000L, 0x8000000000000000L)
  private val FOLLOW_DOT_in_v2008_relative_pathname11445 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_relative_pathname11451 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_v2008_pathname_element11466 = createBitSet(0x0000000000000002L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_v2008_pathname_element11469 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_v2008_pathname_element11473 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_RPAREN_in_v2008_pathname_element11475 = createBitSet(0x0000000000000002L)
  private val FOLLOW_AT_in_v2008_package_pathname11488 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_package_pathname11492 = createBitSet(0x0000000000000000L, 0x8000000000000000L)
  private val FOLLOW_DOT_in_v2008_package_pathname11494 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_package_pathname11499 = createBitSet(0x0000000000000000L, 0x8000000000000000L)
  private val FOLLOW_DOT_in_v2008_package_pathname11501 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_package_pathname11507 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REAL_LITERAL_in_literal11529 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_INTEGER_LITERAL_in_literal11537 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_BASED_LITERAL_in_literal11545 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_CHARACTER_LITERAL_in_literal11553 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_BIT_STRING_LITERAL_in_literal11564 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_NULL_in_literal11572 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_literal11587 = createBitSet(0x0000000000000002L)
  private val FOLLOW_INTEGER_LITERAL_in_physical_literal11613 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_REAL_LITERAL_in_physical_literal11621 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_BASED_LITERAL_in_physical_literal11629 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_physical_literal11636 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choices_in_element_association11662 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_element_association11664 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_element_association11669 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_aggregate11690 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_element_association_in_aggregate11694 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_COMMA_in_aggregate11698 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_element_association_in_aggregate11702 = createBitSet(0x0000000000000000L, 0x0009000000000000L)
  private val FOLLOW_RPAREN_in_aggregate11708 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_choice11749 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_choice11776 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_choice11783 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OTHERS_in_choice11790 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choice_in_choices11811 = createBitSet(0x0000000000000002L, 0x4000000000000000L)
  private val FOLLOW_BAR_in_choices11816 = createBitSet(0x18EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_choice_in_choices11820 = createBitSet(0x0000000000000002L, 0x4000000000000000L)
  private val FOLLOW_identifier_in_identifier_list11851 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_COMMA_in_identifier_list11856 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_identifier_list11860 = createBitSet(0x0000000000000002L, 0x0001000000000000L)
  private val FOLLOW_set_in_identifier11887 = createBitSet(0x0000000000000002L)
  private val FOLLOW_184_in_v2008_tool_directive11906 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_in_v2008_tool_directive11908 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000001000000000L)
  private val FOLLOW_GRAPHIC_CHARACTER_in_v2008_tool_directive11910 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000001000000000L)
  private val FOLLOW_identifier_in_label_colon11924 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_label_colon11926 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_synpred1_VHDL2077 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_synpred2_VHDL2119 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_LPAREN_in_synpred2_VHDL2121 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_synpred3_VHDL3243 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100400L)
  private val FOLLOW_range_in_synpred3_VHDL3245 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_synpred3_VHDL3247 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_synpred4_VHDL3301 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_synpred4_VHDL3303 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_synpred5_VHDL3416 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000000L)
  private val FOLLOW_identifier_list_in_synpred5_VHDL3418 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_synpred5_VHDL3420 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_across_aspect_in_synpred6_VHDL3516 = createBitSet(0x0000000000000002L)
  private val FOLLOW_v2008_resolution_indication_in_synpred7_VHDL5571 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000C00000400L)
  private val FOLLOW_selected_name_in_synpred7_VHDL5573 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_synpred8_VHDL5757 = createBitSet(0x0000000001000000L, 0x0000000001000000L)
  private val FOLLOW_direction_in_synpred8_VHDL5759 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_indication_in_synpred9_VHDL5923 = createBitSet(0x0000800200000000L, 0x4009840000000000L)
  private val FOLLOW_set_in_synpred9_VHDL5925 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_synpred10_VHDL6036 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_synpred10_VHDL6041 = createBitSet(0x8000000400000000L)
  private val FOLLOW_set_in_synpred10_VHDL6043 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_synpred10_VHDL6051 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_synpred10_VHDL6056 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_synpred10_VHDL6060 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BLOCK_in_synpred10_VHDL6064 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_synpred10_VHDL6068 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_label_colon_in_synpred10_VHDL6073 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_condition_in_synpred10_VHDL6077 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_synpred10_VHDL6079 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_synpred10_VHDL6083 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_synpred10_VHDL6090 = createBitSet(0x08EC000000000210L, 0x0604003000000000L, 0x0020000FC0100500L)
  private val FOLLOW_expression_in_synpred10_VHDL6092 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_synpred10_VHDL6094 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_synpred11_VHDL6190 = createBitSet(0x0000000000000000L, 0x0000008000000000L)
  private val FOLLOW_AMS_ASSIGN_in_synpred11_VHDL6192 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_synpred11_VHDL6197 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURAL_in_synpred11_VHDL6201 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_synpred11_VHDL6205 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NULL_in_synpred11_VHDL6209 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred12_VHDL6253 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_synpred12_VHDL6255 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_synpred12_VHDL6259 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred13_VHDL8059 = createBitSet(0x0000000000000000L, 0x0000010000000000L)
  private val FOLLOW_LEQ_in_synpred13_VHDL8061 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_synpred13_VHDL8065 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred14_VHDL8077 = createBitSet(0x0000000000000000L, 0x0000100000000000L)
  private val FOLLOW_VAR_ASSIGN_in_synpred14_VHDL8079 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_synpred14_VHDL8083 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_synpred15_VHDL9320 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_synpred15_VHDL9324 = createBitSet(0x0000000000000000L, 0x0040000000000000L)
  private val FOLLOW_COLON_in_synpred15_VHDL9326 = createBitSet(0x2000020000000000L)
  private val FOLLOW_set_in_synpred15_VHDL9328 = createBitSet(0x0000000000000002L)
  private val FOLLOW_formal_part_in_synpred16_VHDL10064 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_synpred16_VHDL10066 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_synpred17_VHDL10144 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_synpred18_VHDL11125 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_synpred19_VHDL11281 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choices_in_synpred20_VHDL11656 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_ARROW_in_synpred20_VHDL11658 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_synpred21_VHDL11730 = createBitSet(0x0000000000000000L, 0x4001840000000000L)
  private val FOLLOW_set_in_synpred21_VHDL11732 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_synpred22_VHDL11757 = createBitSet(0x0000000000000000L, 0x4001840000000000L)
  private val FOLLOW_set_in_synpred22_VHDL11759 = createBitSet(0x0000000000000002L)

  final class generate_statement_body_return extends ParserRuleReturnScope {
    var blockItems: Seq[DeclarativeItem] = null
    var statementList: Seq[ConcurrentStatement] = null
  }

  final class logical_operator_return extends ParserRuleReturnScope {
    var logOp: LogicalExpression.Operator.Value = null
    var pos: Position = null
  }

  final class relational_operator_return extends ParserRuleReturnScope {
    var relOp: Relation.Operator.Value = null
    var pos: Position = null
  }

  final class shift_operator_return extends ParserRuleReturnScope {
    var shiftOp: ShiftExpression.Operator.Value = null
    var pos: Position = null
  }

  final class sign_return extends ParserRuleReturnScope {
    var signOp: SimpleExpression.SignOperator.Value = null
    var pos: Position = null
  }

  final class adding_operator_return extends ParserRuleReturnScope {
    var addOp: SimpleExpression.AddOperator.Value = null
    var pos: Position = null
  }

  final class multiplying_operator_return extends ParserRuleReturnScope {
    var mulOp: Term.Operator.Value = null
    var pos: Position = null
  }

}

final class VHDLParser(input: TokenStream, state: RecognizerSharedState, ams: Boolean, vhdl2008: Boolean) extends Parser(input, state) {

  import VHDLParser._
  import org.antlr.runtime.BaseRecognizer._

  // delegates
  // delegators

  def this(input: TokenStream, ams: Boolean, vhdl2008: Boolean) = this (input, new RecognizerSharedState(), ams, vhdl2008)


  this.state.ruleMemo = new Array[java.util.Map[_, _]](250 + 1)


  override val getTokenNames = VHDLParser.tokenNames
  override val getGrammarFileName = "C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g"


  type Buffer[A] = scala.collection.immutable.VectorBuilder[A]
  //scala.collection.mutable.ListBuffer[A]

  private val syntaxErrorList = new Buffer[CompilerMessage]()

  def syntaxErrors: Seq[CompilerMessage] = this.syntaxErrorList.result

  private def toPosition(token: Token): Position = new Position(line = token.getLine(), charPosition = token.getCharPositionInLine())

  private def toIdentifier(token: Token, toLowerCase: Boolean = true): Identifier =
    if (token.getType() != STRING_LITERAL && token.getType() != CHARACTER_LITERAL)
      new Identifier(toPosition(token), if (toLowerCase) token.getText().toLowerCase() else token.getText().replace("""\\""", "\\"))
    else new Identifier(toPosition(token), token.getText())

  override def displayRecognitionError(tokenNames: Array[String], e: RecognitionException) =
    syntaxErrorList += new CompilerMessage(position = toPosition(e.token), message = super.getErrorMessage(e, tokenNames))

  private implicit def anyToOption[A](value: A): Option[A] = Option(value)


  // $ANTLR start "design_file"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:262:1: design_file returns [DesignFile designFile] : ( design_unit )+ EOF ;
  @throws(classOf[RecognitionException])
  def design_file(): DesignFile = {
    var designFile: DesignFile = null;
    val design_file_StartIndex = input.index()
    var design_unit1: DesignUnit = null



    val units = new Buffer[DesignUnit]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
        return designFile
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:265:3: ( ( design_unit )+ EOF )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:266:2: ( design_unit )+ EOF
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:266:2: ( design_unit )+
      var cnt1 = 0
      var loop1 = true
      do {
        var alt1 = 2
        val LA1_0 = input.LA(1)

        if ((LA1_0 == LIBRARY || LA1_0 == USE)) {
          alt1 = 1
        }
        else if ((LA1_0 == CONTEXT) && ((vhdl2008))) {
          alt1 = 1
        }
        else if ((LA1_0 == ARCHITECTURE || LA1_0 == CONFIGURATION || LA1_0 == ENTITY || LA1_0 == PACKAGE)) {
          alt1 = 1
        }


        alt1 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:266:3: design_unit
            pushFollow(FOLLOW_design_unit_in_design_file1282)
            design_unit1 = design_unit();

            state._fsp -= 1
            if (state.failed) return designFile
            if (state.backtracking == 0) {
              units += design_unit1
            }


          case _ =>
            if (cnt1 >= 1) loop1 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return designFile
              }
              val eee = new EarlyExitException(1, input)
              throw eee
            }
        }
        cnt1 += 1
      } while (loop1);

      `match`(input, EOF, FOLLOW_EOF_in_design_file1287);
      if (state.failed) return designFile
      if (state.backtracking == 0) {
        designFile = new DesignFile(units.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 1, design_file_StartIndex)
      }
    }
    return designFile
  }

  // $ANTLR end "design_file"

  // $ANTLR start "design_unit"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:270:1: design_unit returns [DesignUnit designUnit] : ( library_clause | use_clause | {...}? => v2008_context_reference )* library_unit ;
  @throws(classOf[RecognitionException])
  def design_unit(): DesignUnit = {
    var designUnit: DesignUnit = null;
    val design_unit_StartIndex = input.index()
    var library_clause2: Seq[Identifier] = null

    var use_clause3: UseClause = null

    var v2008_context_reference4: Seq[SelectedName] = null

    var library_unit5: LibraryUnit = null



    val libraries = new Buffer[Identifier]()
    val useClauses = new Buffer[UseClause]()
    val contextReferences = new Buffer[SelectedName]()
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
        return designUnit
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:276:3: ( ( library_clause | use_clause | {...}? => v2008_context_reference )* library_unit )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:277:2: ( library_clause | use_clause | {...}? => v2008_context_reference )* library_unit
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:277:2: ( library_clause | use_clause | {...}? => v2008_context_reference )*
      var loop2 = true
      do {
        var alt2 = 4
        val LA2_0 = input.LA(1)

        if ((LA2_0 == CONTEXT) && ((vhdl2008))) {
          val LA2_2 = input.LA(2)

          if (((LA2_2 >= BASIC_IDENTIFIER && LA2_2 <= EXTENDED_IDENTIFIER)) && ((vhdl2008))) {
            val LA2_5 = input.LA(3)

            if (((LA2_5 >= SEMICOLON && LA2_5 <= COMMA) || LA2_5 == DOT) && ((vhdl2008))) {
              alt2 = 3
            }


          }
          else if ((LA2_2 == STRING_LITERAL) && ((vhdl2008))) {
            alt2 = 3
          }


        }
        else if ((LA2_0 == LIBRARY)) {
          alt2 = 1
        }
        else if ((LA2_0 == USE)) {
          alt2 = 2
        }


        alt2 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:278:3: library_clause
            pushFollow(FOLLOW_library_clause_in_design_unit1313)
            library_clause2 = library_clause();

            state._fsp -= 1
            if (state.failed) return designUnit
            if (state.backtracking == 0) {
              libraries ++= library_clause2
            }

          case 2 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:279:5: use_clause
            pushFollow(FOLLOW_use_clause_in_design_unit1321)
            use_clause3 = use_clause();

            state._fsp -= 1
            if (state.failed) return designUnit
            if (state.backtracking == 0) {
              useClauses += use_clause3
            }

          case 3 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:280:5: {...}? => v2008_context_reference
            if (!((vhdl2008))) {
              if (state.backtracking > 0) {
                state.failed = true; return designUnit
              }
              throw new FailedPredicateException(input, "design_unit", "vhdl2008")
            }
            pushFollow(FOLLOW_v2008_context_reference_in_design_unit1331)
            v2008_context_reference4 = v2008_context_reference();

            state._fsp -= 1
            if (state.failed) return designUnit
            if (state.backtracking == 0) {
              contextReferences ++= v2008_context_reference4
            }


          case _ => loop2 = false
        }
      } while (loop2);

      pushFollow(FOLLOW_library_unit_in_design_unit1339)
      library_unit5 = library_unit();

      state._fsp -= 1
      if (state.failed) return designUnit
      if (state.backtracking == 0) {
        designUnit = new DesignUnit(position, libraries.result, useClauses.result, library_unit5)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 2, design_unit_StartIndex)
      }
    }
    return designUnit
  }

  // $ANTLR end "design_unit"

  // $ANTLR start "library_unit"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:284:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration );
  @throws(classOf[RecognitionException])
  def library_unit(): LibraryUnit = {
    var libraryUnit: LibraryUnit = null;
    val library_unit_StartIndex = input.index()
    var entity_declaration6: EntityDeclaration = null

    var architecture_body7: ArchitectureDeclaration = null

    var package_declaration8: PackageDeclaration = null

    var package_body9: PackageBodyDeclaration = null

    var configuration_declaration10: ConfigurationDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return libraryUnit
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:284:48: ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration )
      var alt3 = 7
      alt3 = dfa3.predict(input)
      alt3 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:285:2: entity_declaration
          pushFollow(FOLLOW_entity_declaration_in_library_unit1357)
          entity_declaration6 = entity_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = entity_declaration6
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:286:4: architecture_body
          pushFollow(FOLLOW_architecture_body_in_library_unit1364)
          architecture_body7 = architecture_body();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = architecture_body7
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:287:4: package_declaration
          pushFollow(FOLLOW_package_declaration_in_library_unit1371)
          package_declaration8 = package_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = package_declaration8
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:288:4: package_body
          pushFollow(FOLLOW_package_body_in_library_unit1378)
          package_body9 = package_body();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = package_body9
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:289:4: {...}? => v2008_package_instantiation_declaration
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return libraryUnit
            }
            throw new FailedPredicateException(input, "library_unit", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_library_unit1387)
          v2008_package_instantiation_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:290:4: {...}? => v2008_context_declaration
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return libraryUnit
            }
            throw new FailedPredicateException(input, "library_unit", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_context_declaration_in_library_unit1395)
          v2008_context_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:291:4: configuration_declaration
          pushFollow(FOLLOW_configuration_declaration_in_library_unit1401)
          configuration_declaration10 = configuration_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = configuration_declaration10
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 3, library_unit_StartIndex)
      }
    }
    return libraryUnit
  }

  // $ANTLR end "library_unit"

  // $ANTLR start "library_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:295:1: library_clause returns [Seq[Identifier] identifierList] : LIBRARY identifier_list SEMICOLON ;
  @throws(classOf[RecognitionException])
  def library_clause(): Seq[Identifier] = {
    var identifierList: Seq[Identifier] = null;
    val library_clause_StartIndex = input.index()
    var identifier_list11: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 4)) {
        return identifierList
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:295:58: ( LIBRARY identifier_list SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:296:2: LIBRARY identifier_list SEMICOLON
      `match`(input, LIBRARY, FOLLOW_LIBRARY_in_library_clause1422);
      if (state.failed) return identifierList
      pushFollow(FOLLOW_identifier_list_in_library_clause1424)
      identifier_list11 = identifier_list();

      state._fsp -= 1
      if (state.failed) return identifierList
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_library_clause1426);
      if (state.failed) return identifierList
      if (state.backtracking == 0) {
        identifierList = identifier_list11
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 4, library_clause_StartIndex)
      }
    }
    return identifierList
  }

  // $ANTLR end "library_clause"

  // $ANTLR start "v2008_context_reference"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:298:1: v2008_context_reference returns [Seq[SelectedName] contextReference] : CONTEXT selected_name_list SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_context_reference(): Seq[SelectedName] = {
    var contextReference: Seq[SelectedName] = null;
    val v2008_context_reference_StartIndex = input.index()
    var selected_name_list12: Seq[SelectedName] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 5)) {
        return contextReference
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:298:71: ( CONTEXT selected_name_list SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:299:2: CONTEXT selected_name_list SEMICOLON
      `match`(input, CONTEXT, FOLLOW_CONTEXT_in_v2008_context_reference1442);
      if (state.failed) return contextReference
      pushFollow(FOLLOW_selected_name_list_in_v2008_context_reference1444)
      selected_name_list12 = selected_name_list();

      state._fsp -= 1
      if (state.failed) return contextReference
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_context_reference1446);
      if (state.failed) return contextReference
      if (state.backtracking == 0) {
        contextReference = selected_name_list12
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 5, v2008_context_reference_StartIndex)
      }
    }
    return contextReference
  }

  // $ANTLR end "v2008_context_reference"

  // $ANTLR start "generic_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:302:1: generic_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : GENERIC LPAREN generic_interface_list RPAREN ;
  @throws(classOf[RecognitionException])
  def generic_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val generic_clause_StartIndex = input.index()
    var generic_interface_list13: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 6)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:302:76: ( GENERIC LPAREN generic_interface_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:303:2: GENERIC LPAREN generic_interface_list RPAREN
      `match`(input, GENERIC, FOLLOW_GENERIC_in_generic_clause1462);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_generic_clause1464);
      if (state.failed) return list
      pushFollow(FOLLOW_generic_interface_list_in_generic_clause1466)
      generic_interface_list13 = generic_interface_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_generic_clause1468);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = generic_interface_list13
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 6, generic_clause_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_clause"

  // $ANTLR start "generic_interface_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:306:1: generic_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* ;
  @throws(classOf[RecognitionException])
  def generic_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val generic_interface_list_StartIndex = input.index()
    var decl1: InterfaceList.InterfaceConstantDeclaration = null

    var decl2: InterfaceList.InterfaceConstantDeclaration = null



    val elements = new Buffer[InterfaceList.InterfaceConstantDeclaration]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:309:3: (decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:310:2: decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )*
      pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1490)
      decl1 = interface_constant_declaration();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += decl1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:310:73: ( SEMICOLON decl2= interface_constant_declaration )*
      var loop4 = true
      do {
        var alt4 = 2
        val LA4_0 = input.LA(1)

        if ((LA4_0 == SEMICOLON)) {
          alt4 = 1
        }


        alt4 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:310:75: SEMICOLON decl2= interface_constant_declaration
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_generic_interface_list1496);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1500)
            decl2 = interface_constant_declaration();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += decl2
            }


          case _ => loop4 = false
        }
      } while (loop4);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 7, generic_interface_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_interface_list"

  // $ANTLR start "port_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:313:1: port_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : PORT LPAREN port_interface_list RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def port_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val port_clause_StartIndex = input.index()
    var port_interface_list14: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:313:73: ( PORT LPAREN port_interface_list RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:314:2: PORT LPAREN port_interface_list RPAREN SEMICOLON
      `match`(input, PORT, FOLLOW_PORT_in_port_clause1524);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_port_clause1526);
      if (state.failed) return list
      pushFollow(FOLLOW_port_interface_list_in_port_clause1528)
      port_interface_list14 = port_interface_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_port_clause1530);
      if (state.failed) return list
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_port_clause1532);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = port_interface_list14
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 8, port_clause_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_clause"

  // $ANTLR start "port_interface_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:317:1: port_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= inteface_element_port ( SEMICOLON decl2= inteface_element_port )* ;
  @throws(classOf[RecognitionException])
  def port_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val port_interface_list_StartIndex = input.index()
    var decl1: InterfaceList.AbstractInterfaceElement = null

    var decl2: InterfaceList.AbstractInterfaceElement = null



    val elements = new Buffer[InterfaceList.AbstractInterfaceElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:320:3: (decl1= inteface_element_port ( SEMICOLON decl2= inteface_element_port )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:321:2: decl1= inteface_element_port ( SEMICOLON decl2= inteface_element_port )*
      pushFollow(FOLLOW_inteface_element_port_in_port_interface_list1554)
      decl1 = inteface_element_port();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += decl1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:321:59: ( SEMICOLON decl2= inteface_element_port )*
      var loop5 = true
      do {
        var alt5 = 2
        val LA5_0 = input.LA(1)

        if ((LA5_0 == SEMICOLON)) {
          alt5 = 1
        }


        alt5 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:321:61: SEMICOLON decl2= inteface_element_port
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_port_interface_list1560);
            if (state.failed) return list
            pushFollow(FOLLOW_inteface_element_port_in_port_interface_list1564)
            decl2 = inteface_element_port();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += decl2
            }


          case _ => loop5 = false
        }
      } while (loop5);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 9, port_interface_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_interface_list"

  // $ANTLR start "entity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:324:1: entity_declaration returns [EntityDeclaration entityDecl] : ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def entity_declaration(): EntityDeclaration = {
    var entityDecl: EntityDeclaration = null;
    val entity_declaration_StartIndex = input.index()
    var postponed: Token = null
    var start_identifier: Identifier = null

    var label: Identifier = null

    var end_identifier: Identifier = null

    var entity_declarative_item15: DeclarativeItem = null

    var concurrent_assertion_statement16: ConcurrentAssertionStatement = null

    var concurrent_procedure_call_statement17: ConcurrentProcedureCallStatement = null

    var process_statement18: ProcessStatement = null

    var generic_clause19: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_clause20: Seq[InterfaceList.AbstractInterfaceElement] = null



    val declarativeItems = new Buffer[DeclarativeItem]()
    val concurrentStmt = new Buffer[ConcurrentStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
        return entityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:328:3: ( ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:329:2: ENTITY start_identifier= identifier IS ( generic_clause SEMICOLON )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON
      `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_declaration1594);
      if (state.failed) return entityDecl
      pushFollow(FOLLOW_identifier_in_entity_declaration1598)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return entityDecl
      `match`(input, IS, FOLLOW_IS_in_entity_declaration1600);
      if (state.failed) return entityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:330:3: ( generic_clause SEMICOLON )?
      var alt6 = 2
      val LA6_0 = input.LA(1)

      if ((LA6_0 == GENERIC)) {
        alt6 = 1
      }
      alt6 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:330:4: generic_clause SEMICOLON
          pushFollow(FOLLOW_generic_clause_in_entity_declaration1605)
          generic_clause19 = generic_clause();

          state._fsp -= 1
          if (state.failed) return entityDecl
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_entity_declaration1607);
          if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:331:3: ( port_clause )?
      var alt7 = 2
      val LA7_0 = input.LA(1)

      if ((LA7_0 == PORT)) {
        alt7 = 1
      }
      alt7 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:331:3: port_clause
          pushFollow(FOLLOW_port_clause_in_entity_declaration1613)
          port_clause20 = port_clause();

          state._fsp -= 1
          if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:332:3: ( entity_declarative_item )*
      var loop8 = true
      do {
        var alt8 = 2
        val LA8_0 = input.LA(1)

        if ((LA8_0 == FUNCTION || LA8_0 == IMPURE || LA8_0 == PROCEDURE || LA8_0 == PURE)) {
          alt8 = 1
        }
        else if ((LA8_0 == PACKAGE) && ((vhdl2008))) {
          alt8 = 1
        }
        else if ((LA8_0 == ALIAS || LA8_0 == ATTRIBUTE || (LA8_0 >= CONSTANT && LA8_0 <= DISCONNECT) || LA8_0 == FILE || LA8_0 == GROUP || (LA8_0 >= SHARED && LA8_0 <= SIGNAL) || LA8_0 == SUBTYPE || LA8_0 == TYPE || (LA8_0 >= USE && LA8_0 <= VARIABLE))) {
          alt8 = 1
        }
        else if (((LA8_0 >= NATURE && LA8_0 <= QUANTITY) || (LA8_0 >= SUBNATURE && LA8_0 <= LIMIT)) && ((ams))) {
          alt8 = 1
        }


        alt8 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:332:4: entity_declarative_item
            pushFollow(FOLLOW_entity_declarative_item_in_entity_declaration1619)
            entity_declarative_item15 = entity_declarative_item();

            state._fsp -= 1
            if (state.failed) return entityDecl
            if (state.backtracking == 0) {
              declarativeItems += entity_declarative_item15
            }


          case _ => loop8 = false
        }
      } while (loop8);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:333:2: ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )?
      var alt13 = 2
      val LA13_0 = input.LA(1)

      if ((LA13_0 == BEGIN)) {
        alt13 = 1
      }
      alt13 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:333:3: BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
          `match`(input, BEGIN, FOLLOW_BEGIN_in_entity_declaration1627);
          if (state.failed) return entityDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:3: ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
          var loop12 = true
          do {
            var alt12 = 2
            val LA12_0 = input.LA(1)

            if ((LA12_0 == ASSERT || LA12_0 == POSTPONED || LA12_0 == PROCESS || LA12_0 == STRING_LITERAL || (LA12_0 >= BASIC_IDENTIFIER && LA12_0 <= EXTENDED_IDENTIFIER))) {
              alt12 = 1
            }


            alt12 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:4: (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:9: (label= label_colon )?
                var alt9 = 2
                val LA9_0 = input.LA(1)

                if (((LA9_0 >= BASIC_IDENTIFIER && LA9_0 <= EXTENDED_IDENTIFIER))) {
                  val LA9_1 = input.LA(2)

                  if ((LA9_1 == COLON)) {
                    alt9 = 1
                  }
                }
                alt9 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:9: label= label_colon
                    pushFollow(FOLLOW_label_colon_in_entity_declaration1634)
                    label = label_colon();

                    state._fsp -= 1
                    if (state.failed) return entityDecl


                  case _ =>
                }

                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:32: (postponed= POSTPONED )?
                var alt10 = 2
                val LA10_0 = input.LA(1)

                if ((LA10_0 == POSTPONED)) {
                  alt10 = 1
                }
                alt10 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:32: postponed= POSTPONED
                    postponed = `match`(input, POSTPONED, FOLLOW_POSTPONED_in_entity_declaration1639).asInstanceOf[Token]; if (state.failed) return entityDecl


                  case _ =>
                }

                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:44: ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
                var alt11 = 3
                input.LA(1) match {
                  case ASSERT =>
                    alt11 = 1
                  case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
                    alt11 = 2
                  case PROCESS =>
                    alt11 = 3
                  case _ =>
                    if (state.backtracking > 0) {
                      state.failed = true; return entityDecl
                    }
                    val nvae = new NoViableAltException("", 11, 0, input)

                    throw nvae
                }

                alt11 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:335:4: concurrent_assertion_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_concurrent_assertion_statement_in_entity_declaration1647)
                    concurrent_assertion_statement16 = concurrent_assertion_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += concurrent_assertion_statement16
                    }

                  case 2 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:336:6: concurrent_procedure_call_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1657)
                    concurrent_procedure_call_statement17 = concurrent_procedure_call_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += concurrent_procedure_call_statement17
                    }

                  case 3 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:337:6: process_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_process_statement_in_entity_declaration1666)
                    process_statement18 = process_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += process_statement18
                    }


                  case _ =>
                }


              case _ => loop12 = false
            }
          } while (loop12);


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_entity_declaration1691);
      if (state.failed) return entityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:342:6: ( ENTITY )?
      var alt14 = 2
      val LA14_0 = input.LA(1)

      if ((LA14_0 == ENTITY)) {
        alt14 = 1
      }
      alt14 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:342:6: ENTITY
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_declaration1693); if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:342:28: (end_identifier= identifier )?
      var alt15 = 2
      val LA15_0 = input.LA(1)

      if (((LA15_0 >= BASIC_IDENTIFIER && LA15_0 <= EXTENDED_IDENTIFIER))) {
        alt15 = 1
      }
      alt15 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:342:28: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_entity_declaration1698)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return entityDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_entity_declaration1701);
      if (state.failed) return entityDecl
      if (state.backtracking == 0) {
        entityDecl = new EntityDeclaration(start_identifier, generic_clause19, port_clause20, declarativeItems.result, concurrentStmt.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 10, entity_declaration_StartIndex)
      }
    }
    return entityDecl
  }

  // $ANTLR end "entity_declaration"

  // $ANTLR start "entity_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:345:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def entity_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val entity_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body21: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration22: DeclarativeItem = null

    var package_declaration23: PackageDeclaration = null

    var package_body24: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration25: DeclarativeItem = null

    var type_declaration26: AbstractTypeDeclaration = null

    var subtype_declaration27: SubTypeDeclaration = null

    var constant_declaration28: ConstantDeclaration = null

    var signal_declaration29: SignalDeclaration = null

    var variable_declaration30: VariableDeclaration = null

    var file_declaration31: FileDeclaration = null

    var alias_declaration32: AliasDeclaration = null

    var attribute_declaration33: AttributeDeclaration = null

    var attribute_specification34: AttributeSpecification = null

    var disconnection_specification35: DisconnectionSpecification = null

    var use_clause36: UseClause = null

    var group_template_declaration37: GroupTemplateDeclaration = null

    var group_declaration38: GroupDeclaration = null

    var ams_step_limit_specification39: StepLimitSpecification = null

    var ams_nature_declaration40: AbstractTypeDeclaration = null

    var ams_subnature_declaration41: SubNatureDeclaration = null

    var ams_quantity_declaration42: AbstractQuantityDeclaration = null

    var ams_terminal_declaration43: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:345:56: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
      var alt18 = 16
      alt18 = dfa18.predict(input)
      alt18 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:346:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1719)
          subprogram_declartion_or_body21 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body21
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:347:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "entity_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:347:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt16 = 4
          val LA16_0 = input.LA(1)

          if ((LA16_0 == FUNCTION || LA16_0 == PROCEDURE)) {
            alt16 = 1
          }
          else if ((LA16_0 == PACKAGE)) {
            val LA16_2 = input.LA(2)

            if ((LA16_2 == BODY)) {
              alt16 = 3
            }
            else if (((LA16_2 >= BASIC_IDENTIFIER && LA16_2 <= EXTENDED_IDENTIFIER))) {
              val LA16_4 = input.LA(3)

              if ((LA16_4 == IS)) {
                val LA16_5 = input.LA(4)

                if ((LA16_5 == NEW)) {
                  alt16 = 4
                }
                else if ((LA16_5 == ALIAS || LA16_5 == ATTRIBUTE || LA16_5 == COMPONENT || (LA16_5 >= CONSTANT && LA16_5 <= DISCONNECT) || LA16_5 == END || LA16_5 == FILE || LA16_5 == FUNCTION || (LA16_5 >= GENERIC && LA16_5 <= GROUP) || LA16_5 == IMPURE || LA16_5 == PACKAGE || LA16_5 == PROCEDURE || LA16_5 == PURE || (LA16_5 >= SHARED && LA16_5 <= SIGNAL) || LA16_5 == SUBTYPE || LA16_5 == TYPE || (LA16_5 >= USE && LA16_5 <= VARIABLE) || (LA16_5 >= NATURE && LA16_5 <= TERMINAL) || LA16_5 == SUBNATURE)) {
                  alt16 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 16, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 16, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 16, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 16, 0, input)

            throw nvae
          }
          alt16 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:347:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_entity_declarative_item1729)
              v2008_subprogram_instantiation_declaration22 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration22
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:348:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_entity_declarative_item1738)
              package_declaration23 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration23
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:349:6: package_body
              pushFollow(FOLLOW_package_body_in_entity_declarative_item1747)
              package_body24 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body24
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:350:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_entity_declarative_item1756)
              v2008_package_instantiation_declaration25 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration25
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:352:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_entity_declarative_item1768)
          type_declaration26 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration26
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:353:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_entity_declarative_item1775)
          subtype_declaration27 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration27
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:354:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_entity_declarative_item1782)
          constant_declaration28 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration28
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:355:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_entity_declarative_item1789)
          signal_declaration29 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration29
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:356:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_entity_declarative_item1796)
          variable_declaration30 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration30
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:357:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_entity_declarative_item1803)
          file_declaration31 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration31
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:358:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_entity_declarative_item1810)
          alias_declaration32 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration32
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:359:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_entity_declarative_item1817)
          attribute_declaration33 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration33
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:360:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_entity_declarative_item1824)
          attribute_specification34 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification34
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:361:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_entity_declarative_item1831)
          disconnection_specification35 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification35
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:362:4: use_clause
          pushFollow(FOLLOW_use_clause_in_entity_declarative_item1838)
          use_clause36 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause36
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:363:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_entity_declarative_item1845)
          group_template_declaration37 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration37
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:364:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_entity_declarative_item1852)
          group_declaration38 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration38
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:367:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "entity_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:368:3: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          var alt17 = 5
          input.LA(1) match {
            case LIMIT =>
              alt17 = 1
            case NATURE =>
              alt17 = 2
            case SUBNATURE =>
              alt17 = 3
            case QUANTITY =>
              alt17 = 4
            case TERMINAL =>
              alt17 = 5
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 17, 0, input)

              throw nvae
          }

          alt17 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:369:3: ams_step_limit_specification
              pushFollow(FOLLOW_ams_step_limit_specification_in_entity_declarative_item1872)
              ams_step_limit_specification39 = ams_step_limit_specification();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_step_limit_specification39
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:370:5: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_entity_declarative_item1880)
              ams_nature_declaration40 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration40
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:371:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_entity_declarative_item1888)
              ams_subnature_declaration41 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration41
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:372:5: ams_quantity_declaration
              pushFollow(FOLLOW_ams_quantity_declaration_in_entity_declarative_item1896)
              ams_quantity_declaration42 = ams_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_quantity_declaration42
              }

            case 5 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:373:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_entity_declarative_item1904)
              ams_terminal_declaration43 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration43
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 11, entity_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "entity_declarative_item"

  // $ANTLR start "architecture_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:376:1: architecture_body returns [ArchitectureDeclaration archDecl] : ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def architecture_body(): ArchitectureDeclaration = {
    var archDecl: ArchitectureDeclaration = null;
    val architecture_body_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var block_declarative_item44: DeclarativeItem = null

    var selected_name45: SelectedName = null

    var concurrent_statement_list46: Seq[ConcurrentStatement] = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
        return archDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:379:3: ( ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:380:2: ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON
      `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_architecture_body1929);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_identifier_in_architecture_body1933)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, OF, FOLLOW_OF_in_architecture_body1935);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_selected_name_in_architecture_body1937)
      selected_name45 = selected_name();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, IS, FOLLOW_IS_in_architecture_body1939);
      if (state.failed) return archDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:381:3: ( block_declarative_item )*
      var loop19 = true
      do {
        var alt19 = 2
        val LA19_0 = input.LA(1)

        if ((LA19_0 == FUNCTION || LA19_0 == IMPURE || LA19_0 == PROCEDURE || LA19_0 == PURE)) {
          alt19 = 1
        }
        else if ((LA19_0 == PACKAGE) && ((vhdl2008))) {
          alt19 = 1
        }
        else if ((LA19_0 == ALIAS || LA19_0 == ATTRIBUTE || LA19_0 == COMPONENT || (LA19_0 >= CONSTANT && LA19_0 <= DISCONNECT) || (LA19_0 >= FILE && LA19_0 <= FOR) || LA19_0 == GROUP || (LA19_0 >= SHARED && LA19_0 <= SIGNAL) || LA19_0 == SUBTYPE || LA19_0 == TYPE || (LA19_0 >= USE && LA19_0 <= VARIABLE))) {
          alt19 = 1
        }
        else if (((LA19_0 >= NATURE && LA19_0 <= QUANTITY) || (LA19_0 >= SUBNATURE && LA19_0 <= LIMIT)) && ((ams))) {
          alt19 = 1
        }


        alt19 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:381:4: block_declarative_item
            pushFollow(FOLLOW_block_declarative_item_in_architecture_body1944)
            block_declarative_item44 = block_declarative_item();

            state._fsp -= 1
            if (state.failed) return archDecl
            if (state.backtracking == 0) {
              declarativeItems += block_declarative_item44
            }


          case _ => loop19 = false
        }
      } while (loop19);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_architecture_body1950);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_concurrent_statement_list_in_architecture_body1954)
      concurrent_statement_list46 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, END, FOLLOW_END_in_architecture_body1957);
      if (state.failed) return archDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:384:6: ( ARCHITECTURE )?
      var alt20 = 2
      val LA20_0 = input.LA(1)

      if ((LA20_0 == ARCHITECTURE)) {
        alt20 = 1
      }
      alt20 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:384:6: ARCHITECTURE
          `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_architecture_body1959); if (state.failed) return archDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:384:34: (end_identifier= identifier )?
      var alt21 = 2
      val LA21_0 = input.LA(1)

      if (((LA21_0 >= BASIC_IDENTIFIER && LA21_0 <= EXTENDED_IDENTIFIER))) {
        alt21 = 1
      }
      alt21 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:384:34: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_architecture_body1964)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return archDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_architecture_body1967);
      if (state.failed) return archDecl
      if (state.backtracking == 0) {
        archDecl = new ArchitectureDeclaration(start_identifier, declarativeItems.result, selected_name45, concurrent_statement_list46, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 12, architecture_body_StartIndex)
      }
    }
    return archDecl
  }

  // $ANTLR end "architecture_body"

  // $ANTLR start "configuration_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:387:1: configuration_declarative_item returns [DeclarativeItem item] : ( use_clause | attribute_specification | group_declaration );
  @throws(classOf[RecognitionException])
  def configuration_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val configuration_declarative_item_StartIndex = input.index()
    var use_clause47: UseClause = null

    var attribute_specification48: AttributeSpecification = null

    var group_declaration49: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:387:63: ( use_clause | attribute_specification | group_declaration )
      var alt22 = 3
      input.LA(1) match {
        case USE =>
          alt22 = 1
        case ATTRIBUTE =>
          alt22 = 2
        case GROUP =>
          alt22 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return item
          }
          val nvae = new NoViableAltException("", 22, 0, input)

          throw nvae
      }

      alt22 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:388:2: use_clause
          pushFollow(FOLLOW_use_clause_in_configuration_declarative_item1985)
          use_clause47 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause47
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:389:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_configuration_declarative_item1992)
          attribute_specification48 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification48
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:390:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_configuration_declarative_item1999)
          group_declaration49 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration49
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 13, configuration_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "configuration_declarative_item"

  // $ANTLR start "configuration_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:392:1: configuration_declaration returns [ConfigurationDeclaration configDecl] : CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def configuration_declaration(): ConfigurationDeclaration = {
    var configDecl: ConfigurationDeclaration = null;
    val configuration_declaration_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var configuration_declarative_item50: DeclarativeItem = null

    var selected_name51: SelectedName = null

    var block_configuration52: BlockConfiguration = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
        return configDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:395:3: ( CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:396:2: CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON
      `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_configuration_declaration2020);
      if (state.failed) return configDecl
      pushFollow(FOLLOW_identifier_in_configuration_declaration2024)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, OF, FOLLOW_OF_in_configuration_declaration2026);
      if (state.failed) return configDecl
      pushFollow(FOLLOW_selected_name_in_configuration_declaration2028)
      selected_name51 = selected_name();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, IS, FOLLOW_IS_in_configuration_declaration2030);
      if (state.failed) return configDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:397:3: ( configuration_declarative_item )*
      var loop23 = true
      do {
        var alt23 = 2
        val LA23_0 = input.LA(1)

        if ((LA23_0 == ATTRIBUTE || LA23_0 == GROUP || LA23_0 == USE)) {
          alt23 = 1
        }


        alt23 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:397:4: configuration_declarative_item
            pushFollow(FOLLOW_configuration_declarative_item_in_configuration_declaration2035)
            configuration_declarative_item50 = configuration_declarative_item();

            state._fsp -= 1
            if (state.failed) return configDecl
            if (state.backtracking == 0) {
              declarativeItems += configuration_declarative_item50
            }


          case _ => loop23 = false
        }
      } while (loop23);

      pushFollow(FOLLOW_block_configuration_in_configuration_declaration2045)
      block_configuration52 = block_configuration();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, END, FOLLOW_END_in_configuration_declaration2048);
      if (state.failed) return configDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:400:6: ( CONFIGURATION )?
      var alt24 = 2
      val LA24_0 = input.LA(1)

      if ((LA24_0 == CONFIGURATION)) {
        alt24 = 1
      }
      alt24 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:400:6: CONFIGURATION
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_configuration_declaration2050); if (state.failed) return configDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:400:35: (end_identifier= identifier )?
      var alt25 = 2
      val LA25_0 = input.LA(1)

      if (((LA25_0 >= BASIC_IDENTIFIER && LA25_0 <= EXTENDED_IDENTIFIER))) {
        alt25 = 1
      }
      alt25 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:400:35: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_configuration_declaration2055)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return configDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_configuration_declaration2058);
      if (state.failed) return configDecl
      if (state.backtracking == 0) {
        configDecl = new ConfigurationDeclaration(start_identifier, declarativeItems.result, selected_name51, block_configuration52, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 14, configuration_declaration_StartIndex)
      }
    }
    return configDecl
  }

  // $ANTLR end "configuration_declaration"

  // $ANTLR start "block_configuration_index"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:403:1: block_configuration_index returns [Either[DiscreteRange,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | {...}? => identifier | expression );
  @throws(classOf[RecognitionException])
  def block_configuration_index(): Either[DiscreteRange, Expression] = {
    var blockIndex: Either[DiscreteRange, Expression] = null;
    val block_configuration_index_StartIndex = input.index()
    var discrete_range53: DiscreteRange = null

    var expression54: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 15)) {
        return blockIndex
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:403:82: ( ( discrete_range )=> discrete_range | {...}? => identifier | expression )
      var alt26 = 3
      alt26 = dfa26.predict(input)
      alt26 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:4: ( discrete_range )=> discrete_range
          pushFollow(FOLLOW_discrete_range_in_block_configuration_index2080)
          discrete_range53 = discrete_range();

          state._fsp -= 1
          if (state.failed) return blockIndex
          if (state.backtracking == 0) {
            blockIndex = Left(discrete_range53)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:405:8: {...}? => identifier
          if (!((vhdl2008 && (input.LA(1) == BASIC_IDENTIFIER || input.LA(1) == EXTENDED_IDENTIFIER) && input.LA(2) == RPAREN))) {
            if (state.backtracking > 0) {
              state.failed = true; return blockIndex
            }
            throw new FailedPredicateException(input, "block_configuration_index", "vhdl2008 && (input.LA(1)==BASIC_IDENTIFIER || input.LA(1)==EXTENDED_IDENTIFIER) && input.LA(2)==RPAREN")
          }
          pushFollow(FOLLOW_identifier_in_block_configuration_index2093)
          identifier();

          state._fsp -= 1
          if (state.failed) return blockIndex

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:406:6: expression
          pushFollow(FOLLOW_expression_in_block_configuration_index2100)
          expression54 = expression();

          state._fsp -= 1
          if (state.failed) return blockIndex
          if (state.backtracking == 0) {
            blockIndex = Right(expression54)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 15, block_configuration_index_StartIndex)
      }
    }
    return blockIndex
  }

  // $ANTLR end "block_configuration_index"

  // $ANTLR start "block_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:408:1: block_specification returns [BlockConfigurationSpecification blockConfig] : ( ( identifier LPAREN )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name );
  @throws(classOf[RecognitionException])
  def block_specification(): BlockConfigurationSpecification = {
    var blockConfig: BlockConfigurationSpecification = null;
    val block_specification_StartIndex = input.index()
    var identifier55: Identifier = null

    var block_configuration_index56: Either[DiscreteRange, Expression] = null

    var selected_name57: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return blockConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:408:75: ( ( identifier LPAREN )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name )
      var alt28 = 2
      val LA28_0 = input.LA(1)

      if (((LA28_0 >= BASIC_IDENTIFIER && LA28_0 <= EXTENDED_IDENTIFIER))) {
        val LA28_1 = input.LA(2)

        if ((synpred2_VHDL())) {
          alt28 = 1
        }
        else if ((true)) {
          alt28 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return blockConfig
          }
          val nvae = new NoViableAltException("", 28, 1, input)

          throw nvae
        }
      }
      else if ((LA28_0 == STRING_LITERAL)) {
        alt28 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return blockConfig
        }
        val nvae = new NoViableAltException("", 28, 0, input)

        throw nvae
      }
      alt28 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:2: ( identifier LPAREN )=> identifier ( LPAREN block_configuration_index RPAREN )?
          pushFollow(FOLLOW_identifier_in_block_specification2124)
          identifier55 = identifier();

          state._fsp -= 1
          if (state.failed) return blockConfig
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:34: ( LPAREN block_configuration_index RPAREN )?
          var alt27 = 2
          val LA27_0 = input.LA(1)

          if ((LA27_0 == LPAREN)) {
            alt27 = 1
          }
          alt27 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:35: LPAREN block_configuration_index RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_block_specification2127);
              if (state.failed) return blockConfig
              pushFollow(FOLLOW_block_configuration_index_in_block_specification2129)
              block_configuration_index56 = block_configuration_index();

              state._fsp -= 1
              if (state.failed) return blockConfig
              `match`(input, RPAREN, FOLLOW_RPAREN_in_block_specification2131);
              if (state.failed) return blockConfig


            case _ =>
          }

          if (state.backtracking == 0) {
            new BlockConfigurationSpecification(Right((identifier55, block_configuration_index56)))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:410:4: selected_name
          pushFollow(FOLLOW_selected_name_in_block_specification2140)
          selected_name57 = selected_name();

          state._fsp -= 1
          if (state.failed) return blockConfig
          if (state.backtracking == 0) {
            blockConfig = new BlockConfigurationSpecification(Left(selected_name57))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 16, block_specification_StartIndex)
      }
    }
    return blockConfig
  }

  // $ANTLR end "block_specification"

  // $ANTLR start "block_configuration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:412:1: block_configuration returns [BlockConfiguration blockConfig] : FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON ;
  @throws(classOf[RecognitionException])
  def block_configuration(): BlockConfiguration = {
    var blockConfig: BlockConfiguration = null;
    val block_configuration_StartIndex = input.index()
    var config: BlockConfiguration = null

    var use_clause58: UseClause = null

    var component_configuration59: ComponentConfiguration = null

    var block_specification60: BlockConfigurationSpecification = null



    val useClauses = new Buffer[UseClause]()
    val configurations = new Buffer[Either[BlockConfiguration, ComponentConfiguration]]

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 17)) {
        return blockConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:416:3: ( FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:417:2: FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON
      `match`(input, FOR, FOLLOW_FOR_in_block_configuration2164);
      if (state.failed) return blockConfig
      pushFollow(FOLLOW_block_specification_in_block_configuration2166)
      block_specification60 = block_specification();

      state._fsp -= 1
      if (state.failed) return blockConfig
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:418:3: ( use_clause )*
      var loop29 = true
      do {
        var alt29 = 2
        val LA29_0 = input.LA(1)

        if ((LA29_0 == USE)) {
          alt29 = 1
        }


        alt29 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:418:4: use_clause
            pushFollow(FOLLOW_use_clause_in_block_configuration2171)
            use_clause58 = use_clause();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              useClauses += use_clause58
            }


          case _ => loop29 = false
        }
      } while (loop29);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:419:3: (config= block_configuration | component_configuration )*
      var loop30 = true
      do {
        var alt30 = 3
        val LA30_0 = input.LA(1)

        if ((LA30_0 == FOR)) {
          input.LA(2) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
              val LA30_3 = input.LA(3)

              if ((LA30_3 == END || LA30_3 == FOR || LA30_3 == USE || LA30_3 == LPAREN || LA30_3 == DOT)) {
                alt30 = 1
              }
              else if ((LA30_3 == COMMA || LA30_3 == COLON)) {
                alt30 = 2
              }


            case STRING_LITERAL =>
              alt30 = 1
            case ALL | OTHERS =>
              alt30 = 2

            case _ =>
          }

        }


        alt30 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:420:4: config= block_configuration
            pushFollow(FOLLOW_block_configuration_in_block_configuration2186)
            config = block_configuration();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              configurations += Left(config)
            }

          case 2 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:421:6: component_configuration
            pushFollow(FOLLOW_component_configuration_in_block_configuration2195)
            component_configuration59 = component_configuration();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              configurations += Right(component_configuration59)
            }


          case _ => loop30 = false
        }
      } while (loop30);

      `match`(input, END, FOLLOW_END_in_block_configuration2205);
      if (state.failed) return blockConfig
      `match`(input, FOR, FOLLOW_FOR_in_block_configuration2207);
      if (state.failed) return blockConfig
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_configuration2209);
      if (state.failed) return blockConfig
      if (state.backtracking == 0) {
        blockConfig = new BlockConfiguration(block_specification60, useClauses.result, configurations.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 17, block_configuration_StartIndex)
      }
    }
    return blockConfig
  }

  // $ANTLR end "block_configuration"

  // $ANTLR start "component_configuration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:428:1: component_configuration returns [ComponentConfiguration componentConfig] : FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_configuration(): ComponentConfiguration = {
    var componentConfig: ComponentConfiguration = null;
    val component_configuration_StartIndex = input.index()
    var component_specification61: ComponentSpecification = null

    var binding_indication62: BindingIndication = null

    var block_configuration63: BlockConfiguration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
        return componentConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:428:74: ( FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:429:2: FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON
      `match`(input, FOR, FOLLOW_FOR_in_component_configuration2228);
      if (state.failed) return componentConfig
      pushFollow(FOLLOW_component_specification_in_component_configuration2230)
      component_specification61 = component_specification();

      state._fsp -= 1
      if (state.failed) return componentConfig
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:430:3: ( binding_indication SEMICOLON )?
      var alt31 = 2
      val LA31_0 = input.LA(1)

      if ((LA31_0 == GENERIC || LA31_0 == PORT || LA31_0 == USE || LA31_0 == SEMICOLON)) {
        alt31 = 1
      }
      alt31 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:430:4: binding_indication SEMICOLON
          pushFollow(FOLLOW_binding_indication_in_component_configuration2235)
          binding_indication62 = binding_indication();

          state._fsp -= 1
          if (state.failed) return componentConfig
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_configuration2237);
          if (state.failed) return componentConfig


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:432:3: ( block_configuration )?
      var alt32 = 2
      val LA32_0 = input.LA(1)

      if ((LA32_0 == FOR)) {
        alt32 = 1
      }
      alt32 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:432:3: block_configuration
          pushFollow(FOLLOW_block_configuration_in_component_configuration2246)
          block_configuration63 = block_configuration();

          state._fsp -= 1
          if (state.failed) return componentConfig


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_component_configuration2250);
      if (state.failed) return componentConfig
      `match`(input, FOR, FOLLOW_FOR_in_component_configuration2252);
      if (state.failed) return componentConfig
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_configuration2254);
      if (state.failed) return componentConfig
      if (state.backtracking == 0) {
        componentConfig = new ComponentConfiguration(component_specification61, binding_indication62, block_configuration63)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 18, component_configuration_StartIndex)
      }
    }
    return componentConfig
  }

  // $ANTLR end "component_configuration"

  // $ANTLR start "v2008_context_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:436:1: v2008_context_declaration returns [DeclarativeItem contextDecl] : CONTEXT identifier IS ( library_clause | use_clause | v2008_context_reference )* END ( CONTEXT )? ( identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_context_declaration(): DeclarativeItem = {
    var contextDecl: DeclarativeItem = null;
    val v2008_context_declaration_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
        return contextDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:436:64: ( CONTEXT identifier IS ( library_clause | use_clause | v2008_context_reference )* END ( CONTEXT )? ( identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:437:2: CONTEXT identifier IS ( library_clause | use_clause | v2008_context_reference )* END ( CONTEXT )? ( identifier )? SEMICOLON
      `match`(input, CONTEXT, FOLLOW_CONTEXT_in_v2008_context_declaration2270);
      if (state.failed) return contextDecl
      pushFollow(FOLLOW_identifier_in_v2008_context_declaration2272)
      identifier();

      state._fsp -= 1
      if (state.failed) return contextDecl
      `match`(input, IS, FOLLOW_IS_in_v2008_context_declaration2274);
      if (state.failed) return contextDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:438:3: ( library_clause | use_clause | v2008_context_reference )*
      var loop33 = true
      do {
        var alt33 = 4
        input.LA(1) match {
          case LIBRARY =>
            alt33 = 1
          case USE =>
            alt33 = 2
          case CONTEXT =>
            alt33 = 3

          case _ =>
        }

        alt33 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:438:4: library_clause
            pushFollow(FOLLOW_library_clause_in_v2008_context_declaration2280)
            library_clause();

            state._fsp -= 1
            if (state.failed) return contextDecl

          case 2 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:438:21: use_clause
            pushFollow(FOLLOW_use_clause_in_v2008_context_declaration2284)
            use_clause();

            state._fsp -= 1
            if (state.failed) return contextDecl

          case 3 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:438:34: v2008_context_reference
            pushFollow(FOLLOW_v2008_context_reference_in_v2008_context_declaration2288)
            v2008_context_reference();

            state._fsp -= 1
            if (state.failed) return contextDecl


          case _ => loop33 = false
        }
      } while (loop33);

      `match`(input, END, FOLLOW_END_in_v2008_context_declaration2293);
      if (state.failed) return contextDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:439:6: ( CONTEXT )?
      var alt34 = 2
      val LA34_0 = input.LA(1)

      if ((LA34_0 == CONTEXT)) {
        alt34 = 1
      }
      alt34 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:439:6: CONTEXT
          `match`(input, CONTEXT, FOLLOW_CONTEXT_in_v2008_context_declaration2295); if (state.failed) return contextDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:439:15: ( identifier )?
      var alt35 = 2
      val LA35_0 = input.LA(1)

      if (((LA35_0 >= BASIC_IDENTIFIER && LA35_0 <= EXTENDED_IDENTIFIER))) {
        alt35 = 1
      }
      alt35 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:439:15: identifier
          pushFollow(FOLLOW_identifier_in_v2008_context_declaration2298)
          identifier();

          state._fsp -= 1
          if (state.failed) return contextDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_context_declaration2301);
      if (state.failed) return contextDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 19, v2008_context_declaration_StartIndex)
      }
    }
    return contextDecl
  }

  // $ANTLR end "v2008_context_declaration"

  // $ANTLR start "package_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:442:1: package_declaration returns [PackageDeclaration packageDecl] : PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def package_declaration(): PackageDeclaration = {
    var packageDecl: PackageDeclaration = null;
    val package_declaration_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var package_declarative_item64: DeclarativeItem = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 20)) {
        return packageDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:445:3: ( PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:446:2: PACKAGE start_identifier= identifier IS ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_declaration2321);
      if (state.failed) return packageDecl
      pushFollow(FOLLOW_identifier_in_package_declaration2325)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return packageDecl
      `match`(input, IS, FOLLOW_IS_in_package_declaration2327);
      if (state.failed) return packageDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:447:3: ({...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )?
      var alt37 = 2
      val LA37_0 = input.LA(1)

      if ((LA37_0 == GENERIC) && ((vhdl2008))) {
        alt37 = 1
      }
      alt37 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:447:4: {...}? => generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )?
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return packageDecl
            }
            throw new FailedPredicateException(input, "package_declaration", "vhdl2008")
          }
          pushFollow(FOLLOW_generic_clause_in_package_declaration2335)
          generic_clause();

          state._fsp -= 1
          if (state.failed) return packageDecl
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_declaration2337);
          if (state.failed) return packageDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:448:3: ( generic_map_aspect SEMICOLON )?
          var alt36 = 2
          val LA36_0 = input.LA(1)

          if ((LA36_0 == GENERIC)) {
            alt36 = 1
          }
          alt36 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:448:4: generic_map_aspect SEMICOLON
              pushFollow(FOLLOW_generic_map_aspect_in_package_declaration2342)
              generic_map_aspect();

              state._fsp -= 1
              if (state.failed) return packageDecl
              `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_declaration2344);
              if (state.failed) return packageDecl


            case _ =>
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:449:3: ( package_declarative_item )*
      var loop38 = true
      do {
        var alt38 = 2
        val LA38_0 = input.LA(1)

        if ((LA38_0 == FUNCTION || LA38_0 == IMPURE || LA38_0 == PROCEDURE || LA38_0 == PURE)) {
          alt38 = 1
        }
        else if ((LA38_0 == PACKAGE) && ((vhdl2008))) {
          alt38 = 1
        }
        else if ((LA38_0 == ALIAS || LA38_0 == ATTRIBUTE || LA38_0 == COMPONENT || (LA38_0 >= CONSTANT && LA38_0 <= DISCONNECT) || LA38_0 == FILE || LA38_0 == GROUP || (LA38_0 >= SHARED && LA38_0 <= SIGNAL) || LA38_0 == SUBTYPE || LA38_0 == TYPE || (LA38_0 >= USE && LA38_0 <= VARIABLE))) {
          alt38 = 1
        }
        else if (((LA38_0 >= NATURE && LA38_0 <= TERMINAL) || LA38_0 == SUBNATURE) && ((ams))) {
          alt38 = 1
        }


        alt38 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:449:4: package_declarative_item
            pushFollow(FOLLOW_package_declarative_item_in_package_declaration2353)
            package_declarative_item64 = package_declarative_item();

            state._fsp -= 1
            if (state.failed) return packageDecl
            if (state.backtracking == 0) {
              declarativeItems += package_declarative_item64
            }


          case _ => loop38 = false
        }
      } while (loop38);

      `match`(input, END, FOLLOW_END_in_package_declaration2359);
      if (state.failed) return packageDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:450:6: ( PACKAGE )?
      var alt39 = 2
      val LA39_0 = input.LA(1)

      if ((LA39_0 == PACKAGE)) {
        alt39 = 1
      }
      alt39 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:450:6: PACKAGE
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_declaration2361); if (state.failed) return packageDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:450:29: (end_identifier= identifier )?
      var alt40 = 2
      val LA40_0 = input.LA(1)

      if (((LA40_0 >= BASIC_IDENTIFIER && LA40_0 <= EXTENDED_IDENTIFIER))) {
        alt40 = 1
      }
      alt40 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:450:29: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_package_declaration2366)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return packageDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_declaration2369);
      if (state.failed) return packageDecl
      if (state.backtracking == 0) {
        packageDecl = new PackageDeclaration(start_identifier, declarativeItems.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 20, package_declaration_StartIndex)
      }
    }
    return packageDecl
  }

  // $ANTLR end "package_declaration"

  // $ANTLR start "package_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:453:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def package_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val package_declarative_item_StartIndex = input.index()
    var subprogram_declaration65: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration66: DeclarativeItem = null

    var package_declaration67: PackageDeclaration = null

    var v2008_package_instantiation_declaration68: DeclarativeItem = null

    var type_declaration69: AbstractTypeDeclaration = null

    var subtype_declaration70: SubTypeDeclaration = null

    var constant_declaration71: ConstantDeclaration = null

    var signal_declaration72: SignalDeclaration = null

    var variable_declaration73: VariableDeclaration = null

    var file_declaration74: FileDeclaration = null

    var alias_declaration75: AliasDeclaration = null

    var component_declaration76: ComponentDeclaration = null

    var attribute_declaration77: AttributeDeclaration = null

    var attribute_specification78: AttributeSpecification = null

    var disconnection_specification79: DisconnectionSpecification = null

    var use_clause80: UseClause = null

    var group_template_declaration81: GroupTemplateDeclaration = null

    var group_declaration82: GroupDeclaration = null

    var ams_nature_declaration83: AbstractTypeDeclaration = null

    var ams_subnature_declaration84: SubNatureDeclaration = null

    var ams_terminal_declaration85: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:453:57: ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) )
      var alt43 = 17
      alt43 = dfa43.predict(input)
      alt43 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:454:2: subprogram_declaration
          pushFollow(FOLLOW_subprogram_declaration_in_package_declarative_item2387)
          subprogram_declaration65 = subprogram_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declaration65
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:455:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "package_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:455:17: ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration )
          var alt41 = 3
          val LA41_0 = input.LA(1)

          if ((LA41_0 == FUNCTION || LA41_0 == PROCEDURE)) {
            alt41 = 1
          }
          else if ((LA41_0 == PACKAGE)) {
            val LA41_2 = input.LA(2)

            if (((LA41_2 >= BASIC_IDENTIFIER && LA41_2 <= EXTENDED_IDENTIFIER))) {
              val LA41_3 = input.LA(3)

              if ((LA41_3 == IS)) {
                val LA41_4 = input.LA(4)

                if ((LA41_4 == NEW)) {
                  alt41 = 3
                }
                else if ((LA41_4 == ALIAS || LA41_4 == ATTRIBUTE || LA41_4 == COMPONENT || (LA41_4 >= CONSTANT && LA41_4 <= DISCONNECT) || LA41_4 == END || LA41_4 == FILE || LA41_4 == FUNCTION || (LA41_4 >= GENERIC && LA41_4 <= GROUP) || LA41_4 == IMPURE || LA41_4 == PACKAGE || LA41_4 == PROCEDURE || LA41_4 == PURE || (LA41_4 >= SHARED && LA41_4 <= SIGNAL) || LA41_4 == SUBTYPE || LA41_4 == TYPE || (LA41_4 >= USE && LA41_4 <= VARIABLE) || (LA41_4 >= NATURE && LA41_4 <= TERMINAL) || LA41_4 == SUBNATURE)) {
                  alt41 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 41, 4, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 41, 3, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 41, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 41, 0, input)

            throw nvae
          }
          alt41 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:455:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_package_declarative_item2397)
              v2008_subprogram_instantiation_declaration66 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration66
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:456:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_package_declarative_item2406)
              package_declaration67 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration67
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:457:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_package_declarative_item2415)
              v2008_package_instantiation_declaration68 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration68
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:459:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_package_declarative_item2427)
          type_declaration69 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration69
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:460:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_package_declarative_item2434)
          subtype_declaration70 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration70
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:461:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_package_declarative_item2441)
          constant_declaration71 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration71
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:462:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_package_declarative_item2448)
          signal_declaration72 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration72
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:463:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_package_declarative_item2455)
          variable_declaration73 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration73
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:464:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_package_declarative_item2462)
          file_declaration74 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration74
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:465:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_package_declarative_item2469)
          alias_declaration75 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration75
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:466:4: component_declaration
          pushFollow(FOLLOW_component_declaration_in_package_declarative_item2476)
          component_declaration76 = component_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = component_declaration76
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:467:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_package_declarative_item2483)
          attribute_declaration77 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration77
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:468:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_package_declarative_item2490)
          attribute_specification78 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification78
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:469:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_package_declarative_item2497)
          disconnection_specification79 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification79
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:470:4: use_clause
          pushFollow(FOLLOW_use_clause_in_package_declarative_item2504)
          use_clause80 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause80
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:471:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_package_declarative_item2511)
          group_template_declaration81 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration81
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:472:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_package_declarative_item2518)
          group_declaration82 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration82
          }

        case 17 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:474:4: {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "package_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:474:13: ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
          var alt42 = 3
          input.LA(1) match {
            case NATURE =>
              alt42 = 1
            case SUBNATURE =>
              alt42 = 2
            case TERMINAL =>
              alt42 = 3
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 42, 0, input)

              throw nvae
          }

          alt42 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:475:3: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_package_declarative_item2534)
              ams_nature_declaration83 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration83
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:476:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_package_declarative_item2542)
              ams_subnature_declaration84 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration84
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:477:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_package_declarative_item2550)
              ams_terminal_declaration85 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration85
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 21, package_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "package_declarative_item"

  // $ANTLR start "package_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:480:1: package_body returns [PackageBodyDeclaration packageBody] : PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def package_body(): PackageBodyDeclaration = {
    var packageBody: PackageBodyDeclaration = null;
    val package_body_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var package_body_declarative_item86: DeclarativeItem = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
        return packageBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:483:3: ( PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:484:2: PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_body2572);
      if (state.failed) return packageBody
      `match`(input, BODY, FOLLOW_BODY_in_package_body2574);
      if (state.failed) return packageBody
      pushFollow(FOLLOW_identifier_in_package_body2578)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return packageBody
      `match`(input, IS, FOLLOW_IS_in_package_body2580);
      if (state.failed) return packageBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:485:3: ( package_body_declarative_item )*
      var loop44 = true
      do {
        var alt44 = 2
        val LA44_0 = input.LA(1)

        if ((LA44_0 == FUNCTION || LA44_0 == IMPURE || LA44_0 == PROCEDURE || LA44_0 == PURE)) {
          alt44 = 1
        }
        else if ((LA44_0 == PACKAGE) && ((vhdl2008))) {
          alt44 = 1
        }
        else if ((LA44_0 == ALIAS || LA44_0 == ATTRIBUTE || LA44_0 == CONSTANT || LA44_0 == FILE || LA44_0 == GROUP || LA44_0 == SHARED || LA44_0 == SUBTYPE || LA44_0 == TYPE || (LA44_0 >= USE && LA44_0 <= VARIABLE))) {
          alt44 = 1
        }


        alt44 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:485:4: package_body_declarative_item
            pushFollow(FOLLOW_package_body_declarative_item_in_package_body2585)
            package_body_declarative_item86 = package_body_declarative_item();

            state._fsp -= 1
            if (state.failed) return packageBody
            if (state.backtracking == 0) {
              declarativeItems += package_body_declarative_item86
            }


          case _ => loop44 = false
        }
      } while (loop44);

      `match`(input, END, FOLLOW_END_in_package_body2591);
      if (state.failed) return packageBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:486:6: ( PACKAGE BODY )?
      var alt45 = 2
      val LA45_0 = input.LA(1)

      if ((LA45_0 == PACKAGE)) {
        alt45 = 1
      }
      alt45 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:486:7: PACKAGE BODY
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_body2594);
          if (state.failed) return packageBody
          `match`(input, BODY, FOLLOW_BODY_in_package_body2596);
          if (state.failed) return packageBody


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:486:36: (end_identifier= identifier )?
      var alt46 = 2
      val LA46_0 = input.LA(1)

      if (((LA46_0 >= BASIC_IDENTIFIER && LA46_0 <= EXTENDED_IDENTIFIER))) {
        alt46 = 1
      }
      alt46 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:486:36: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_package_body2602)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return packageBody


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_body2605);
      if (state.failed) return packageBody
      if (state.backtracking == 0) {
        packageBody = new PackageBodyDeclaration(start_identifier, declarativeItems.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 22, package_body_StartIndex)
      }
    }
    return packageBody
  }

  // $ANTLR end "package_body"

  // $ANTLR start "package_body_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:489:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def package_body_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val package_body_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body87: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration88: DeclarativeItem = null

    var package_declaration89: PackageDeclaration = null

    var package_body90: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration91: DeclarativeItem = null

    var type_declaration92: AbstractTypeDeclaration = null

    var subtype_declaration93: SubTypeDeclaration = null

    var constant_declaration94: ConstantDeclaration = null

    var variable_declaration95: VariableDeclaration = null

    var file_declaration96: FileDeclaration = null

    var alias_declaration97: AliasDeclaration = null

    var use_clause98: UseClause = null

    var attribute_declaration99: AttributeDeclaration = null

    var attribute_specification100: AttributeSpecification = null

    var group_template_declaration101: GroupTemplateDeclaration = null

    var group_declaration102: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:489:62: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration )
      var alt48 = 13
      alt48 = dfa48.predict(input)
      alt48 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:490:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2625)
          subprogram_declartion_or_body87 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body87
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:491:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "package_body_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:491:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt47 = 4
          val LA47_0 = input.LA(1)

          if ((LA47_0 == FUNCTION || LA47_0 == PROCEDURE)) {
            alt47 = 1
          }
          else if ((LA47_0 == PACKAGE)) {
            val LA47_2 = input.LA(2)

            if ((LA47_2 == BODY)) {
              alt47 = 3
            }
            else if (((LA47_2 >= BASIC_IDENTIFIER && LA47_2 <= EXTENDED_IDENTIFIER))) {
              val LA47_4 = input.LA(3)

              if ((LA47_4 == IS)) {
                val LA47_5 = input.LA(4)

                if ((LA47_5 == NEW)) {
                  alt47 = 4
                }
                else if ((LA47_5 == ALIAS || LA47_5 == ATTRIBUTE || LA47_5 == COMPONENT || (LA47_5 >= CONSTANT && LA47_5 <= DISCONNECT) || LA47_5 == END || LA47_5 == FILE || LA47_5 == FUNCTION || (LA47_5 >= GENERIC && LA47_5 <= GROUP) || LA47_5 == IMPURE || LA47_5 == PACKAGE || LA47_5 == PROCEDURE || LA47_5 == PURE || (LA47_5 >= SHARED && LA47_5 <= SIGNAL) || LA47_5 == SUBTYPE || LA47_5 == TYPE || (LA47_5 >= USE && LA47_5 <= VARIABLE) || (LA47_5 >= NATURE && LA47_5 <= TERMINAL) || LA47_5 == SUBNATURE)) {
                  alt47 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 47, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 47, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 47, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 47, 0, input)

            throw nvae
          }
          alt47 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:491:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_package_body_declarative_item2635)
              v2008_subprogram_instantiation_declaration88 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration88
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:492:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_package_body_declarative_item2644)
              package_declaration89 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration89
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:493:6: package_body
              pushFollow(FOLLOW_package_body_in_package_body_declarative_item2653)
              package_body90 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body90
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:494:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_package_body_declarative_item2662)
              v2008_package_instantiation_declaration91 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration91
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:496:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_package_body_declarative_item2674)
          type_declaration92 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration92
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:497:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_package_body_declarative_item2681)
          subtype_declaration93 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration93
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:498:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_package_body_declarative_item2688)
          constant_declaration94 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration94
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:499:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_package_body_declarative_item2695)
          variable_declaration95 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration95
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:500:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_package_body_declarative_item2702)
          file_declaration96 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration96
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:501:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_package_body_declarative_item2709)
          alias_declaration97 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration97
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:502:4: use_clause
          pushFollow(FOLLOW_use_clause_in_package_body_declarative_item2716)
          use_clause98 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause98
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:503:4: {...}? => attribute_declaration
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "package_body_declarative_item", "vhdl2008")
          }
          pushFollow(FOLLOW_attribute_declaration_in_package_body_declarative_item2725)
          attribute_declaration99 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration99
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:505:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_package_body_declarative_item2734)
          attribute_specification100 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification100
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:506:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_package_body_declarative_item2742)
          group_template_declaration101 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration101
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:507:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_package_body_declarative_item2749)
          group_declaration102 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration102
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 23, package_body_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "package_body_declarative_item"

  // $ANTLR start "v2008_package_instantiation_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:509:1: v2008_package_instantiation_declaration returns [DeclarativeItem packageInstantiationDecl] : PACKAGE identifier IS NEW uninstantiated_package_name= selected_name ( generic_map_aspect )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_package_instantiation_declaration(): DeclarativeItem = {
    var packageInstantiationDecl: DeclarativeItem = null;
    val v2008_package_instantiation_declaration_StartIndex = input.index()
    var uninstantiated_package_name: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
        return packageInstantiationDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:509:92: ( PACKAGE identifier IS NEW uninstantiated_package_name= selected_name ( generic_map_aspect )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:510:2: PACKAGE identifier IS NEW uninstantiated_package_name= selected_name ( generic_map_aspect )? SEMICOLON
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_v2008_package_instantiation_declaration2764);
      if (state.failed) return packageInstantiationDecl
      pushFollow(FOLLOW_identifier_in_v2008_package_instantiation_declaration2766)
      identifier();

      state._fsp -= 1
      if (state.failed) return packageInstantiationDecl
      `match`(input, IS, FOLLOW_IS_in_v2008_package_instantiation_declaration2768);
      if (state.failed) return packageInstantiationDecl
      `match`(input, NEW, FOLLOW_NEW_in_v2008_package_instantiation_declaration2770);
      if (state.failed) return packageInstantiationDecl
      pushFollow(FOLLOW_selected_name_in_v2008_package_instantiation_declaration2774)
      uninstantiated_package_name = selected_name();

      state._fsp -= 1
      if (state.failed) return packageInstantiationDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:511:3: ( generic_map_aspect )?
      var alt49 = 2
      val LA49_0 = input.LA(1)

      if ((LA49_0 == GENERIC)) {
        alt49 = 1
      }
      alt49 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:511:3: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_v2008_package_instantiation_declaration2778)
          generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return packageInstantiationDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_package_instantiation_declaration2781);
      if (state.failed) return packageInstantiationDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 24, v2008_package_instantiation_declaration_StartIndex)
      }
    }
    return packageInstantiationDecl
  }

  // $ANTLR end "v2008_package_instantiation_declaration"

  // $ANTLR start "designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:513:1: designator returns [Identifier id] : ( identifier | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def designator(): Identifier = {
    var id: Identifier = null;
    val designator_StartIndex = input.index()
    var STRING_LITERAL104: Token = null
    var identifier103: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:513:36: ( identifier | STRING_LITERAL )
      var alt50 = 2
      val LA50_0 = input.LA(1)

      if (((LA50_0 >= BASIC_IDENTIFIER && LA50_0 <= EXTENDED_IDENTIFIER))) {
        alt50 = 1
      }
      else if ((LA50_0 == STRING_LITERAL)) {
        alt50 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 50, 0, input)

        throw nvae
      }
      alt50 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:514:2: identifier
          pushFollow(FOLLOW_identifier_in_designator2794)
          identifier103 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier103
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:515:4: STRING_LITERAL
          STRING_LITERAL104 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_designator2801).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL104)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 25, designator_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "designator"

  // $ANTLR start "subprogram_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:517:1: subprogram_specification returns [SubProgramDeclaration decl] : ( PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark );
  @throws(classOf[RecognitionException])
  def subprogram_specification(): SubProgramDeclaration = {
    var decl: SubProgramDeclaration = null;
    val subprogram_specification_StartIndex = input.index()
    var i: Token = null
    var PROCEDURE105: Token = null
    var FUNCTION108: Token = null
    var identifier106: Identifier = null

    var parameter_interface_list_procedure107: Seq[InterfaceList.AbstractInterfaceElement] = null

    var designator109: Identifier = null

    var parameter_interface_list_function110: Seq[InterfaceList.AbstractInterfaceElement] = null

    var type_mark111: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
        return decl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:517:63: ( PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark )
      var alt60 = 2
      val LA60_0 = input.LA(1)

      if ((LA60_0 == PROCEDURE)) {
        alt60 = 1
      }
      else if ((LA60_0 == FUNCTION || LA60_0 == IMPURE || LA60_0 == PURE)) {
        alt60 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return decl
        }
        val nvae = new NoViableAltException("", 60, 0, input)

        throw nvae
      }
      alt60 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:518:2: PROCEDURE identifier ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )?
          PROCEDURE105 = `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_subprogram_specification2820).asInstanceOf[Token];
          if (state.failed) return decl
          pushFollow(FOLLOW_identifier_in_subprogram_specification2822)
          identifier106 = identifier();

          state._fsp -= 1
          if (state.failed) return decl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:519:2: ({...}? => generic_clause ( generic_map_aspect )? )?
          var alt52 = 2
          val LA52_0 = input.LA(1)

          if ((LA52_0 == GENERIC) && ((vhdl2008))) {
            alt52 = 1
          }
          alt52 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:519:3: {...}? => generic_clause ( generic_map_aspect )?
              if (!((vhdl2008))) {
                if (state.backtracking > 0) {
                  state.failed = true; return decl
                }
                throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
              }
              pushFollow(FOLLOW_generic_clause_in_subprogram_specification2828)
              generic_clause();

              state._fsp -= 1
              if (state.failed) return decl
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:519:31: ( generic_map_aspect )?
              var alt51 = 2
              val LA51_0 = input.LA(1)

              if ((LA51_0 == GENERIC)) {
                alt51 = 1
              }
              alt51 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:519:31: generic_map_aspect
                  pushFollow(FOLLOW_generic_map_aspect_in_subprogram_specification2830)
                  generic_map_aspect();

                  state._fsp -= 1
                  if (state.failed) return decl


                case _ =>
              }


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:520:2: ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN )?
          var alt54 = 2
          val LA54_0 = input.LA(1)

          if ((LA54_0 == PARAMETER) && ((vhdl2008))) {
            alt54 = 1
          }
          else if ((LA54_0 == LPAREN)) {
            alt54 = 1
          }
          alt54 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:520:3: ({...}? => PARAMETER )? LPAREN parameter_interface_list_procedure RPAREN
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:520:3: ({...}? => PARAMETER )?
              var alt53 = 2
              val LA53_0 = input.LA(1)

              if ((LA53_0 == PARAMETER) && ((vhdl2008))) {
                alt53 = 1
              }
              alt53 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:520:4: {...}? => PARAMETER
                  if (!((vhdl2008))) {
                    if (state.backtracking > 0) {
                      state.failed = true; return decl
                    }
                    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                  }
                  `match`(input, PARAMETER, FOLLOW_PARAMETER_in_subprogram_specification2840);
                  if (state.failed) return decl


                case _ =>
              }

              `match`(input, LPAREN, FOLLOW_LPAREN_in_subprogram_specification2844);
              if (state.failed) return decl
              pushFollow(FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2846)
              parameter_interface_list_procedure107 = parameter_interface_list_procedure();

              state._fsp -= 1
              if (state.failed) return decl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_subprogram_specification2848);
              if (state.failed) return decl


            case _ =>
          }

          if (state.backtracking == 0) {
            decl = new ProcedureDeclaration(toPosition(PROCEDURE105), identifier106, parameter_interface_list_procedure107)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:522:4: ( PURE | i= IMPURE )? FUNCTION designator ({...}? => generic_clause ( generic_map_aspect )? )? ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:522:4: ( PURE | i= IMPURE )?
          var alt55 = 3
          val LA55_0 = input.LA(1)

          if ((LA55_0 == PURE)) {
            alt55 = 1
          }
          else if ((LA55_0 == IMPURE)) {
            alt55 = 2
          }
          alt55 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:522:5: PURE
              `match`(input, PURE, FOLLOW_PURE_in_subprogram_specification2860); if (state.failed) return decl

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:522:12: i= IMPURE
              i = `match`(input, IMPURE, FOLLOW_IMPURE_in_subprogram_specification2866).asInstanceOf[Token]; if (state.failed) return decl


            case _ =>
          }

          FUNCTION108 = `match`(input, FUNCTION, FOLLOW_FUNCTION_in_subprogram_specification2870).asInstanceOf[Token];
          if (state.failed) return decl
          pushFollow(FOLLOW_designator_in_subprogram_specification2872)
          designator109 = designator();

          state._fsp -= 1
          if (state.failed) return decl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:2: ({...}? => generic_clause ( generic_map_aspect )? )?
          var alt57 = 2
          val LA57_0 = input.LA(1)

          if ((LA57_0 == GENERIC) && ((vhdl2008))) {
            alt57 = 1
          }
          alt57 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:3: {...}? => generic_clause ( generic_map_aspect )?
              if (!((vhdl2008))) {
                if (state.backtracking > 0) {
                  state.failed = true; return decl
                }
                throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
              }
              pushFollow(FOLLOW_generic_clause_in_subprogram_specification2878)
              generic_clause();

              state._fsp -= 1
              if (state.failed) return decl
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:31: ( generic_map_aspect )?
              var alt56 = 2
              val LA56_0 = input.LA(1)

              if ((LA56_0 == GENERIC)) {
                alt56 = 1
              }
              alt56 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:31: generic_map_aspect
                  pushFollow(FOLLOW_generic_map_aspect_in_subprogram_specification2880)
                  generic_map_aspect();

                  state._fsp -= 1
                  if (state.failed) return decl


                case _ =>
              }


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:524:2: ( ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN )?
          var alt59 = 2
          val LA59_0 = input.LA(1)

          if ((LA59_0 == PARAMETER) && ((vhdl2008))) {
            alt59 = 1
          }
          else if ((LA59_0 == LPAREN)) {
            alt59 = 1
          }
          alt59 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:524:3: ({...}? => PARAMETER )? LPAREN parameter_interface_list_function RPAREN
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:524:3: ({...}? => PARAMETER )?
              var alt58 = 2
              val LA58_0 = input.LA(1)

              if ((LA58_0 == PARAMETER) && ((vhdl2008))) {
                alt58 = 1
              }
              alt58 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:524:4: {...}? => PARAMETER
                  if (!((vhdl2008))) {
                    if (state.backtracking > 0) {
                      state.failed = true; return decl
                    }
                    throw new FailedPredicateException(input, "subprogram_specification", "vhdl2008")
                  }
                  `match`(input, PARAMETER, FOLLOW_PARAMETER_in_subprogram_specification2890);
                  if (state.failed) return decl


                case _ =>
              }

              `match`(input, LPAREN, FOLLOW_LPAREN_in_subprogram_specification2894);
              if (state.failed) return decl
              pushFollow(FOLLOW_parameter_interface_list_function_in_subprogram_specification2896)
              parameter_interface_list_function110 = parameter_interface_list_function();

              state._fsp -= 1
              if (state.failed) return decl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_subprogram_specification2898);
              if (state.failed) return decl


            case _ =>
          }

          `match`(input, RETURN, FOLLOW_RETURN_in_subprogram_specification2902);
          if (state.failed) return decl
          pushFollow(FOLLOW_type_mark_in_subprogram_specification2904)
          type_mark111 = type_mark();

          state._fsp -= 1
          if (state.failed) return decl
          if (state.backtracking == 0) {
            decl = new FunctionDeclaration(toPosition(FUNCTION108), i == null, designator109, parameter_interface_list_function110, type_mark111)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 26, subprogram_specification_StartIndex)
      }
    }
    return decl
  }

  // $ANTLR end "subprogram_specification"

  // $ANTLR start "subprogram_declartion_or_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:527:1: subprogram_declartion_or_body returns [DeclarativeItem declOrBody] : subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subprogram_declartion_or_body(): DeclarativeItem = {
    var declOrBody: DeclarativeItem = null;
    val subprogram_declartion_or_body_StartIndex = input.index()
    var subprogram_specification112: SubProgramDeclaration = null

    var subprogram_body113: SubProgramDefinition = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
        return declOrBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:527:68: ( subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:528:2: subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON
      pushFollow(FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2921)
      subprogram_specification112 = subprogram_specification();

      state._fsp -= 1
      if (state.failed) return declOrBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:528:27: ( subprogram_body[$subprogram_specification.decl] )?
      var alt61 = 2
      val LA61_0 = input.LA(1)

      if ((LA61_0 == IS)) {
        alt61 = 1
      }
      alt61 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:528:28: subprogram_body[$subprogram_specification.decl]
          pushFollow(FOLLOW_subprogram_body_in_subprogram_declartion_or_body2924)
          subprogram_body113 = subprogram_body(subprogram_specification112);

          state._fsp -= 1
          if (state.failed) return declOrBody


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2929);
      if (state.failed) return declOrBody
      if (state.backtracking == 0) {
        declOrBody = if (subprogram_body113 != null) subprogram_body113 else subprogram_specification112
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 27, subprogram_declartion_or_body_StartIndex)
      }
    }
    return declOrBody
  }

  // $ANTLR end "subprogram_declartion_or_body"

  // $ANTLR start "subprogram_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:531:1: subprogram_declaration returns [DeclarativeItem subprogramDecl] : subprogram_specification SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subprogram_declaration(): DeclarativeItem = {
    var subprogramDecl: DeclarativeItem = null;
    val subprogram_declaration_StartIndex = input.index()
    var subprogram_specification114: SubProgramDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 28)) {
        return subprogramDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:531:65: ( subprogram_specification SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:532:2: subprogram_specification SEMICOLON
      pushFollow(FOLLOW_subprogram_specification_in_subprogram_declaration2948)
      subprogram_specification114 = subprogram_specification();

      state._fsp -= 1
      if (state.failed) return subprogramDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subprogram_declaration2950);
      if (state.failed) return subprogramDecl
      if (state.backtracking == 0) {
        subprogramDecl = subprogram_specification114
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 28, subprogram_declaration_StartIndex)
      }
    }
    return subprogramDecl
  }

  // $ANTLR end "subprogram_declaration"

  // $ANTLR start "subprogram_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:535:1: subprogram_body[SubProgramDeclaration subprogramDecl] returns [SubProgramDefinition subProgramDef] : IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? ;
  @throws(classOf[RecognitionException])
  def subprogram_body(subprogramDecl: SubProgramDeclaration): SubProgramDefinition = {
    var subProgramDef: SubProgramDefinition = null;
    val subprogram_body_StartIndex = input.index()
    var endIdent: Identifier = null

    var subprogram_declarative_item115: DeclarativeItem = null

    var sequence_of_statements116: Seq[SequentialStatement] = null



    val declItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return subProgramDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:538:3: ( IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:539:2: IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )?
      `match`(input, IS, FOLLOW_IS_in_subprogram_body2972);
      if (state.failed) return subProgramDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:540:3: ( subprogram_declarative_item )*
      var loop62 = true
      do {
        var alt62 = 2
        val LA62_0 = input.LA(1)

        if ((LA62_0 == FUNCTION || LA62_0 == IMPURE || LA62_0 == PROCEDURE || LA62_0 == PURE)) {
          alt62 = 1
        }
        else if ((LA62_0 == PACKAGE) && ((vhdl2008))) {
          alt62 = 1
        }
        else if ((LA62_0 == ALIAS || LA62_0 == ATTRIBUTE || LA62_0 == CONSTANT || LA62_0 == FILE || LA62_0 == GROUP || LA62_0 == SHARED || LA62_0 == SUBTYPE || LA62_0 == TYPE || (LA62_0 >= USE && LA62_0 <= VARIABLE))) {
          alt62 = 1
        }


        alt62 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:540:4: subprogram_declarative_item
            pushFollow(FOLLOW_subprogram_declarative_item_in_subprogram_body2977)
            subprogram_declarative_item115 = subprogram_declarative_item();

            state._fsp -= 1
            if (state.failed) return subProgramDef
            if (state.backtracking == 0) {
              declItems += subprogram_declarative_item115
            }


          case _ => loop62 = false
        }
      } while (loop62);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_subprogram_body2984);
      if (state.failed) return subProgramDef
      pushFollow(FOLLOW_sequence_of_statements_in_subprogram_body2988)
      sequence_of_statements116 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return subProgramDef
      `match`(input, END, FOLLOW_END_in_subprogram_body2991);
      if (state.failed) return subProgramDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:543:6: ({...}? => PROCEDURE | {...}? => FUNCTION )?
      var alt63 = 3
      val LA63_0 = input.LA(1)

      if ((LA63_0 == PROCEDURE) && ((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) {
        alt63 = 1
      }
      else if ((LA63_0 == FUNCTION) && ((subprogramDecl.isInstanceOf[FunctionDeclaration]))) {
        alt63 = 2
      }
      alt63 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:543:7: {...}? => PROCEDURE
          if (!((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) {
            if (state.backtracking > 0) {
              state.failed = true; return subProgramDef
            }
            throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[ProcedureDeclaration]")
          }
          `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_subprogram_body2996);
          if (state.failed) return subProgramDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:543:74: {...}? => FUNCTION
          if (!((subprogramDecl.isInstanceOf[FunctionDeclaration]))) {
            if (state.backtracking > 0) {
              state.failed = true; return subProgramDef
            }
            throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[FunctionDeclaration]")
          }
          `match`(input, FUNCTION, FOLLOW_FUNCTION_in_subprogram_body3002);
          if (state.failed) return subProgramDef


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:543:147: (endIdent= designator )?
      var alt64 = 2
      val LA64_0 = input.LA(1)

      if ((LA64_0 == STRING_LITERAL || (LA64_0 >= BASIC_IDENTIFIER && LA64_0 <= EXTENDED_IDENTIFIER))) {
        alt64 = 1
      }
      alt64 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:543:147: endIdent= designator
          pushFollow(FOLLOW_designator_in_subprogram_body3008)
          endIdent = designator();

          state._fsp -= 1
          if (state.failed) return subProgramDef


        case _ =>
      }

      if (state.backtracking == 0) {

        subProgramDef = subprogramDecl match {
          case procDecl: ProcedureDeclaration =>
            new ProcedureDefinition(subprogramDecl.position, procDecl.identifier, procDecl.parameterInterfaceList, declItems.result, sequence_of_statements116, endIdent)
          case funcDecl: FunctionDeclaration =>
            new FunctionDefinition(subprogramDecl.position, funcDecl.isPure, funcDecl.identifier, funcDecl.parameterInterfaceList, funcDecl.returnType, declItems.result, sequence_of_statements116, endIdent)
        }

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 29, subprogram_body_StartIndex)
      }
    }
    return subProgramDef
  }

  // $ANTLR end "subprogram_body"

  // $ANTLR start "subprogram_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:553:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def subprogram_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val subprogram_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body117: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration118: DeclarativeItem = null

    var package_declaration119: PackageDeclaration = null

    var package_body120: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration121: DeclarativeItem = null

    var type_declaration122: AbstractTypeDeclaration = null

    var subtype_declaration123: SubTypeDeclaration = null

    var constant_declaration124: ConstantDeclaration = null

    var variable_declaration125: VariableDeclaration = null

    var file_declaration126: FileDeclaration = null

    var alias_declaration127: AliasDeclaration = null

    var attribute_declaration128: AttributeDeclaration = null

    var attribute_specification129: AttributeSpecification = null

    var use_clause130: UseClause = null

    var group_template_declaration131: GroupTemplateDeclaration = null

    var group_declaration132: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:553:60: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt66 = 13
      alt66 = dfa66.predict(input)
      alt66 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:554:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item3030)
          subprogram_declartion_or_body117 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body117
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:555:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "subprogram_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:555:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt65 = 4
          val LA65_0 = input.LA(1)

          if ((LA65_0 == FUNCTION || LA65_0 == PROCEDURE)) {
            alt65 = 1
          }
          else if ((LA65_0 == PACKAGE)) {
            val LA65_2 = input.LA(2)

            if ((LA65_2 == BODY)) {
              alt65 = 3
            }
            else if (((LA65_2 >= BASIC_IDENTIFIER && LA65_2 <= EXTENDED_IDENTIFIER))) {
              val LA65_4 = input.LA(3)

              if ((LA65_4 == IS)) {
                val LA65_5 = input.LA(4)

                if ((LA65_5 == NEW)) {
                  alt65 = 4
                }
                else if ((LA65_5 == ALIAS || LA65_5 == ATTRIBUTE || LA65_5 == COMPONENT || (LA65_5 >= CONSTANT && LA65_5 <= DISCONNECT) || LA65_5 == END || LA65_5 == FILE || LA65_5 == FUNCTION || (LA65_5 >= GENERIC && LA65_5 <= GROUP) || LA65_5 == IMPURE || LA65_5 == PACKAGE || LA65_5 == PROCEDURE || LA65_5 == PURE || (LA65_5 >= SHARED && LA65_5 <= SIGNAL) || LA65_5 == SUBTYPE || LA65_5 == TYPE || (LA65_5 >= USE && LA65_5 <= VARIABLE) || (LA65_5 >= NATURE && LA65_5 <= TERMINAL) || LA65_5 == SUBNATURE)) {
                  alt65 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 65, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 65, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 65, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 65, 0, input)

            throw nvae
          }
          alt65 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:555:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_subprogram_declarative_item3040)
              v2008_subprogram_instantiation_declaration118 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration118
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:556:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_subprogram_declarative_item3049)
              package_declaration119 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration119
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:557:6: package_body
              pushFollow(FOLLOW_package_body_in_subprogram_declarative_item3058)
              package_body120 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body120
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:558:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_subprogram_declarative_item3067)
              v2008_package_instantiation_declaration121 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration121
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:560:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_subprogram_declarative_item3079)
          type_declaration122 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration122
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:561:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_subprogram_declarative_item3086)
          subtype_declaration123 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration123
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:562:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_subprogram_declarative_item3093)
          constant_declaration124 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration124
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:563:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_subprogram_declarative_item3100)
          variable_declaration125 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration125
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:564:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_subprogram_declarative_item3107)
          file_declaration126 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration126
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:565:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_subprogram_declarative_item3114)
          alias_declaration127 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration127
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:566:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_subprogram_declarative_item3121)
          attribute_declaration128 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration128
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:567:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_subprogram_declarative_item3128)
          attribute_specification129 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification129
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:568:4: use_clause
          pushFollow(FOLLOW_use_clause_in_subprogram_declarative_item3135)
          use_clause130 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause130
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:569:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_subprogram_declarative_item3142)
          group_template_declaration131 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration131
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:570:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_subprogram_declarative_item3149)
          group_declaration132 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration132
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 30, subprogram_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "subprogram_declarative_item"

  // $ANTLR start "v2008_subprogram_instantiation_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:572:1: v2008_subprogram_instantiation_declaration returns [DeclarativeItem subprogramInstantiationDecl] : ( PROCEDURE | FUNCTION ) IS NEW uninstantiated_subprogram_name= selected_name ( signature )? ( generic_map_aspect )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_subprogram_instantiation_declaration(): DeclarativeItem = {
    var subprogramInstantiationDecl: DeclarativeItem = null;
    val v2008_subprogram_instantiation_declaration_StartIndex = input.index()
    var uninstantiated_subprogram_name: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 31)) {
        return subprogramInstantiationDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:572:98: ( ( PROCEDURE | FUNCTION ) IS NEW uninstantiated_subprogram_name= selected_name ( signature )? ( generic_map_aspect )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:573:2: ( PROCEDURE | FUNCTION ) IS NEW uninstantiated_subprogram_name= selected_name ( signature )? ( generic_map_aspect )? SEMICOLON
      if (input.LA(1) == FUNCTION || input.LA(1) == PROCEDURE) {
        input.consume()
        state.errorRecovery = false;
        state.failed = false
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return subprogramInstantiationDecl
        }
        val mse = new MismatchedSetException(null, input)
        throw mse

      }

      `match`(input, IS, FOLLOW_IS_in_v2008_subprogram_instantiation_declaration3172);
      if (state.failed) return subprogramInstantiationDecl
      `match`(input, NEW, FOLLOW_NEW_in_v2008_subprogram_instantiation_declaration3176);
      if (state.failed) return subprogramInstantiationDecl
      pushFollow(FOLLOW_selected_name_in_v2008_subprogram_instantiation_declaration3180)
      uninstantiated_subprogram_name = selected_name();

      state._fsp -= 1
      if (state.failed) return subprogramInstantiationDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:574:52: ( signature )?
      var alt67 = 2
      val LA67_0 = input.LA(1)

      if ((LA67_0 == LBRACKET)) {
        alt67 = 1
      }
      alt67 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:574:52: signature
          pushFollow(FOLLOW_signature_in_v2008_subprogram_instantiation_declaration3182)
          signature();

          state._fsp -= 1
          if (state.failed) return subprogramInstantiationDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:575:4: ( generic_map_aspect )?
      var alt68 = 2
      val LA68_0 = input.LA(1)

      if ((LA68_0 == GENERIC)) {
        alt68 = 1
      }
      alt68 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:575:4: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_v2008_subprogram_instantiation_declaration3188)
          generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return subprogramInstantiationDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_subprogram_instantiation_declaration3191);
      if (state.failed) return subprogramInstantiationDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 31, v2008_subprogram_instantiation_declaration_StartIndex)
      }
    }
    return subprogramInstantiationDecl
  }

  // $ANTLR end "v2008_subprogram_instantiation_declaration"

  // $ANTLR start "type_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:577:1: type_declaration returns [AbstractTypeDeclaration typeDecl] : TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def type_declaration(): AbstractTypeDeclaration = {
    var typeDecl: AbstractTypeDeclaration = null;
    val type_declaration_StartIndex = input.index()
    var TYPE134: Token = null
    var identifier133: Identifier = null

    var type_definition135: AbstractTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
        return typeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:577:61: ( TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:578:2: TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON
      TYPE134 = `match`(input, TYPE, FOLLOW_TYPE_in_type_declaration3204).asInstanceOf[Token];
      if (state.failed) return typeDecl
      pushFollow(FOLLOW_identifier_in_type_declaration3206)
      identifier133 = identifier();

      state._fsp -= 1
      if (state.failed) return typeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:578:18: ( IS type_definition[$identifier.id,toPosition($TYPE)] )?
      var alt69 = 2
      val LA69_0 = input.LA(1)

      if ((LA69_0 == IS)) {
        alt69 = 1
      }
      alt69 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:578:19: IS type_definition[$identifier.id,toPosition($TYPE)]
          `match`(input, IS, FOLLOW_IS_in_type_declaration3209);
          if (state.failed) return typeDecl
          pushFollow(FOLLOW_type_definition_in_type_declaration3211)
          type_definition135 = type_definition(identifier133, toPosition(TYPE134));

          state._fsp -= 1
          if (state.failed) return typeDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_type_declaration3216);
      if (state.failed) return typeDecl
      if (state.backtracking == 0) {

        typeDecl = if (type_definition135 != null) type_definition135
        else new IncompleteTypeDeclaration(toPosition(TYPE134), identifier133)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 32, type_declaration_StartIndex)
      }
    }
    return typeDecl
  }

  // $ANTLR end "type_declaration"

  // $ANTLR start "type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:584:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );
  @throws(classOf[RecognitionException])
  def type_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
    var typeDef: AbstractTypeDeclaration = null;
    val type_definition_StartIndex = input.index()
    var enumeration_type_definition136: EnumerationTypeDefinition = null

    var physical_type_definition137: PhysicalTypeDefinition = null

    var integer_or_floating_point_type_definition138: IntegerOrFloatingPointTypeDefinition = null

    var array_type_definition139: ArrayTypeDefinition = null

    var record_type_definition140: RecordTypeDefinition = null

    var access_type_definition141: AccessTypeDefinition = null

    var file_type_definition142: FileTypeDefinition = null

    var protected_type_body143: ProtectedTypeBodyDeclaration = null

    var protected_type_declaration144: ProtectedTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
        return typeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:584:87: ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] )
      var alt70 = 9
      alt70 = dfa70.predict(input)
      alt70 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:585:2: enumeration_type_definition[$id,$pos]
          pushFollow(FOLLOW_enumeration_type_definition_in_type_definition3234)
          enumeration_type_definition136 = enumeration_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = enumeration_type_definition136
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:586:4: ( RANGE range UNITS )=> physical_type_definition[$id,$pos]
          pushFollow(FOLLOW_physical_type_definition_in_type_definition3252)
          physical_type_definition137 = physical_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = physical_type_definition137
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:587:4: integer_or_floating_point_type_definition[$id,$pos]
          pushFollow(FOLLOW_integer_or_floating_point_type_definition_in_type_definition3260)
          integer_or_floating_point_type_definition138 = integer_or_floating_point_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = integer_or_floating_point_type_definition138
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:588:4: array_type_definition[$id,$pos]
          pushFollow(FOLLOW_array_type_definition_in_type_definition3268)
          array_type_definition139 = array_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = array_type_definition139
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:589:4: record_type_definition[$id,$pos]
          pushFollow(FOLLOW_record_type_definition_in_type_definition3276)
          record_type_definition140 = record_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = record_type_definition140
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:590:4: access_type_definition[$id,$pos]
          pushFollow(FOLLOW_access_type_definition_in_type_definition3284)
          access_type_definition141 = access_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = access_type_definition141
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:591:4: file_type_definition[$id,$pos]
          pushFollow(FOLLOW_file_type_definition_in_type_definition3292)
          file_type_definition142 = file_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = file_type_definition142
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:592:4: ( PROTECTED BODY )=> protected_type_body[$id,$pos]
          pushFollow(FOLLOW_protected_type_body_in_type_definition3306)
          protected_type_body143 = protected_type_body(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = protected_type_body143
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:593:4: protected_type_declaration[$id,$pos]
          pushFollow(FOLLOW_protected_type_declaration_in_type_definition3314)
          protected_type_declaration144 = protected_type_declaration(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = protected_type_declaration144
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 33, type_definition_StartIndex)
      }
    }
    return typeDef
  }

  // $ANTLR end "type_definition"

  // $ANTLR start "ams_nature_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:595:1: ams_nature_declaration returns [AbstractTypeDeclaration natureDecl] : NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_nature_declaration(): AbstractTypeDeclaration = {
    var natureDecl: AbstractTypeDeclaration = null;
    val ams_nature_declaration_StartIndex = input.index()
    var NATURE146: Token = null
    var identifier145: Identifier = null

    var ams_nature_definition147: AbstractTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
        return natureDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:595:69: ( NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:596:2: NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON
      NATURE146 = `match`(input, NATURE, FOLLOW_NATURE_in_ams_nature_declaration3332).asInstanceOf[Token];
      if (state.failed) return natureDecl
      pushFollow(FOLLOW_identifier_in_ams_nature_declaration3334)
      identifier145 = identifier();

      state._fsp -= 1
      if (state.failed) return natureDecl
      `match`(input, IS, FOLLOW_IS_in_ams_nature_declaration3336);
      if (state.failed) return natureDecl
      pushFollow(FOLLOW_ams_nature_definition_in_ams_nature_declaration3338)
      ams_nature_definition147 = ams_nature_definition(identifier145, toPosition(NATURE146));

      state._fsp -= 1
      if (state.failed) return natureDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_nature_declaration3341);
      if (state.failed) return natureDecl
      if (state.backtracking == 0) {
        natureDecl = ams_nature_definition147
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 34, ams_nature_declaration_StartIndex)
      }
    }
    return natureDecl
  }

  // $ANTLR end "ams_nature_declaration"

  // $ANTLR start "ams_terminal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:599:1: ams_terminal_declaration returns [TerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_terminal_declaration(): TerminalDeclaration = {
    var terminalDecl: TerminalDeclaration = null;
    val ams_terminal_declaration_StartIndex = input.index()
    var TERMINAL148: Token = null
    var identifier_list149: Seq[Identifier] = null

    var ams_subnature_indication150: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
        return terminalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:599:69: ( TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:600:2: TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON
      TERMINAL148 = `match`(input, TERMINAL, FOLLOW_TERMINAL_in_ams_terminal_declaration3357).asInstanceOf[Token];
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_identifier_list_in_ams_terminal_declaration3359)
      identifier_list149 = identifier_list();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_terminal_declaration3361);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3363)
      ams_subnature_indication150 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_terminal_declaration3365);
      if (state.failed) return terminalDecl
      if (state.backtracking == 0) {
        terminalDecl = new TerminalDeclaration(toPosition(TERMINAL148), identifier_list149, ams_subnature_indication150)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 35, ams_terminal_declaration_StartIndex)
      }
    }
    return terminalDecl
  }

  // $ANTLR end "ams_terminal_declaration"

  // $ANTLR start "ams_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:603:1: ams_nature_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration natureDef] : ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] );
  @throws(classOf[RecognitionException])
  def ams_nature_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
    var natureDef: AbstractTypeDeclaration = null;
    val ams_nature_definition_StartIndex = input.index()
    var ams_scalar_nature_definition151: ScalarNatureDefinition = null

    var ams_array_nature_definition152: ArrayNatureTypeDefinition = null

    var ams_record_nature_definition153: RecordNatureDefinition = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 36)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:603:95: ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] )
      var alt71 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt71 = 1
        case ARRAY =>
          alt71 = 2
        case RECORD =>
          alt71 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return natureDef
          }
          val nvae = new NoViableAltException("", 71, 0, input)

          throw nvae
      }

      alt71 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:604:2: ams_scalar_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3383)
          ams_scalar_nature_definition151 = ams_scalar_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_scalar_nature_definition151
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:605:4: ams_array_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_array_nature_definition_in_ams_nature_definition3391)
          ams_array_nature_definition152 = ams_array_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_array_nature_definition152
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:606:4: ams_record_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_record_nature_definition_in_ams_nature_definition3399)
          ams_record_nature_definition153 = ams_record_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_record_nature_definition153
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 36, ams_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_nature_definition"

  // $ANTLR start "ams_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:608:1: ams_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : ( ( QUANTITY identifier_list COLON )=> ams_source_or_free_quantity_declaration | ams_branch_quantity_declaration );
  @throws(classOf[RecognitionException])
  def ams_quantity_declaration(): AbstractQuantityDeclaration = {
    var quantityDecl: AbstractQuantityDeclaration = null;
    val ams_quantity_declaration_StartIndex = input.index()
    var ams_source_or_free_quantity_declaration154: AbstractQuantityDeclaration = null

    var ams_branch_quantity_declaration155: BranchQuantityDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:608:77: ( ( QUANTITY identifier_list COLON )=> ams_source_or_free_quantity_declaration | ams_branch_quantity_declaration )
      var alt72 = 2
      alt72 = dfa72.predict(input)
      alt72 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:609:2: ( QUANTITY identifier_list COLON )=> ams_source_or_free_quantity_declaration
          pushFollow(FOLLOW_ams_source_or_free_quantity_declaration_in_ams_quantity_declaration3424)
          ams_source_or_free_quantity_declaration154 = ams_source_or_free_quantity_declaration();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = ams_source_or_free_quantity_declaration154
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:610:4: ams_branch_quantity_declaration
          pushFollow(FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3431)
          ams_branch_quantity_declaration155 = ams_branch_quantity_declaration();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = ams_branch_quantity_declaration155
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 37, ams_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_quantity_declaration"

  // $ANTLR start "ams_source_or_free_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:612:1: ams_source_or_free_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON subtype_indication ( ( VAR_ASSIGN expression )? | source_aspect= ams_source_aspect ) SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_source_or_free_quantity_declaration(): AbstractQuantityDeclaration = {
    var quantityDecl: AbstractQuantityDeclaration = null;
    val ams_source_or_free_quantity_declaration_StartIndex = input.index()
    var QUANTITY156: Token = null
    var source_aspect: Either[(Expression, Expression), Expression] = null

    var identifier_list157: Seq[Identifier] = null

    var subtype_indication158: SubTypeIndication = null

    var expression159: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 38)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:612:92: ( QUANTITY identifier_list COLON subtype_indication ( ( VAR_ASSIGN expression )? | source_aspect= ams_source_aspect ) SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:613:3: QUANTITY identifier_list COLON subtype_indication ( ( VAR_ASSIGN expression )? | source_aspect= ams_source_aspect ) SEMICOLON
      QUANTITY156 = `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_source_or_free_quantity_declaration3448).asInstanceOf[Token];
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_identifier_list_in_ams_source_or_free_quantity_declaration3450)
      identifier_list157 = identifier_list();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_source_or_free_quantity_declaration3452);
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_subtype_indication_in_ams_source_or_free_quantity_declaration3454)
      subtype_indication158 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:614:4: ( ( VAR_ASSIGN expression )? | source_aspect= ams_source_aspect )
      var alt74 = 2
      val LA74_0 = input.LA(1)

      if ((LA74_0 == VAR_ASSIGN || LA74_0 == SEMICOLON)) {
        alt74 = 1
      }
      else if (((LA74_0 >= SPECTRUM && LA74_0 <= NOISE))) {
        alt74 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return quantityDecl
        }
        val nvae = new NoViableAltException("", 74, 0, input)

        throw nvae
      }
      alt74 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:615:4: ( VAR_ASSIGN expression )?
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:615:4: ( VAR_ASSIGN expression )?
          var alt73 = 2
          val LA73_0 = input.LA(1)

          if ((LA73_0 == VAR_ASSIGN)) {
            alt73 = 1
          }
          alt73 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:615:5: VAR_ASSIGN expression
              `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_source_or_free_quantity_declaration3466);
              if (state.failed) return quantityDecl
              pushFollow(FOLLOW_expression_in_ams_source_or_free_quantity_declaration3468)
              expression159 = expression();

              state._fsp -= 1
              if (state.failed) return quantityDecl


            case _ =>
          }

          if (state.backtracking == 0) {
            quantityDecl = new FreeQuantityDeclaration(toPosition(QUANTITY156), identifier_list157, subtype_indication158, expression159)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:617:4: source_aspect= ams_source_aspect
          pushFollow(FOLLOW_ams_source_aspect_in_ams_source_or_free_quantity_declaration3483)
          source_aspect = ams_source_aspect();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = new SourceQuantityDeclaration(toPosition(QUANTITY156), identifier_list157, subtype_indication158, source_aspect)
          }


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_source_or_free_quantity_declaration3495);
      if (state.failed) return quantityDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 38, ams_source_or_free_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_source_or_free_quantity_declaration"

  // $ANTLR start "ams_branch_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:621:1: ams_branch_quantity_declaration returns [BranchQuantityDeclaration quantityDecl] : QUANTITY ( ( ams_across_aspect )=> ams_across_aspect )? ( ams_through_aspect )? ams_terminal_aspect SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_branch_quantity_declaration(): BranchQuantityDeclaration = {
    var quantityDecl: BranchQuantityDeclaration = null;
    val ams_branch_quantity_declaration_StartIndex = input.index()
    var QUANTITY160: Token = null
    var ams_across_aspect161: (Seq[Identifier], Option[Expression], Option[Expression]) = null

    var ams_through_aspect162: (Seq[Identifier], Option[Expression], Option[Expression]) = null

    var ams_terminal_aspect163: (Name, Option[Name]) = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:621:82: ( QUANTITY ( ( ams_across_aspect )=> ams_across_aspect )? ( ams_through_aspect )? ams_terminal_aspect SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:2: QUANTITY ( ( ams_across_aspect )=> ams_across_aspect )? ( ams_through_aspect )? ams_terminal_aspect SEMICOLON
      QUANTITY160 = `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3511).asInstanceOf[Token];
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:11: ( ( ams_across_aspect )=> ams_across_aspect )?
      var alt75 = 2
      val LA75_0 = input.LA(1)

      if (((LA75_0 >= BASIC_IDENTIFIER && LA75_0 <= EXTENDED_IDENTIFIER))) {
        val LA75_1 = input.LA(2)

        if ((synpred6_VHDL())) {
          alt75 = 1
        }
      }
      alt75 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:13: ( ams_across_aspect )=> ams_across_aspect
          pushFollow(FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3520)
          ams_across_aspect161 = ams_across_aspect();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:55: ( ams_through_aspect )?
      var alt76 = 2
      val LA76_0 = input.LA(1)

      if (((LA76_0 >= BASIC_IDENTIFIER && LA76_0 <= EXTENDED_IDENTIFIER))) {
        val LA76_1 = input.LA(2)

        if ((LA76_1 == VAR_ASSIGN || LA76_1 == COMMA || LA76_1 == TOLERANCE || LA76_1 == THROUGH)) {
          alt76 = 1
        }
      }
      alt76 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:55: ams_through_aspect
          pushFollow(FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3524)
          ams_through_aspect162 = ams_through_aspect();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      pushFollow(FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3527)
      ams_terminal_aspect163 = ams_terminal_aspect();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3529);
      if (state.failed) return quantityDecl
      if (state.backtracking == 0) {
        quantityDecl = new BranchQuantityDeclaration(toPosition(QUANTITY160), ams_across_aspect161, ams_through_aspect162, ams_terminal_aspect163)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 39, ams_branch_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_branch_quantity_declaration"

  // $ANTLR start "ams_across_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:625:1: ams_across_aspect returns [(Seq[Identifier],Option[Expression],Option[Expression]) across_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS ;
  @throws(classOf[RecognitionException])
  def ams_across_aspect(): (Seq[Identifier], Option[Expression], Option[Expression]) = {
    var across_aspect: (Seq[Identifier], Option[Expression], Option[Expression]) = null;
    val ams_across_aspect_StartIndex = input.index()
    var toleranceExpression: Expression = null

    var defaultExpression: Expression = null

    var identifier_list164: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 40)) {
        return across_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:625:102: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:2: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS
      pushFollow(FOLLOW_identifier_list_in_ams_across_aspect3545)
      identifier_list164 = identifier_list();

      state._fsp -= 1
      if (state.failed) return across_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:18: ( TOLERANCE toleranceExpression= expression )?
      var alt77 = 2
      val LA77_0 = input.LA(1)

      if ((LA77_0 == TOLERANCE)) {
        alt77 = 1
      }
      alt77 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:19: TOLERANCE toleranceExpression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_across_aspect3548);
          if (state.failed) return across_aspect
          pushFollow(FOLLOW_expression_in_ams_across_aspect3552)
          toleranceExpression = expression();

          state._fsp -= 1
          if (state.failed) return across_aspect


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:62: ( VAR_ASSIGN defaultExpression= expression )?
      var alt78 = 2
      val LA78_0 = input.LA(1)

      if ((LA78_0 == VAR_ASSIGN)) {
        alt78 = 1
      }
      alt78 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:63: VAR_ASSIGN defaultExpression= expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_across_aspect3557);
          if (state.failed) return across_aspect
          pushFollow(FOLLOW_expression_in_ams_across_aspect3561)
          defaultExpression = expression();

          state._fsp -= 1
          if (state.failed) return across_aspect


        case _ =>
      }

      `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_across_aspect3565);
      if (state.failed) return across_aspect
      if (state.backtracking == 0) {
        across_aspect = (identifier_list164, toleranceExpression, defaultExpression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 40, ams_across_aspect_StartIndex)
      }
    }
    return across_aspect
  }

  // $ANTLR end "ams_across_aspect"

  // $ANTLR start "ams_through_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:629:1: ams_through_aspect returns [(Seq[Identifier],Option[Expression],Option[Expression]) through_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH ;
  @throws(classOf[RecognitionException])
  def ams_through_aspect(): (Seq[Identifier], Option[Expression], Option[Expression]) = {
    var through_aspect: (Seq[Identifier], Option[Expression], Option[Expression]) = null;
    val ams_through_aspect_StartIndex = input.index()
    var toleranceExpression: Expression = null

    var defaultExpression: Expression = null

    var identifier_list165: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 41)) {
        return through_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:629:104: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:630:2: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH
      pushFollow(FOLLOW_identifier_list_in_ams_through_aspect3582)
      identifier_list165 = identifier_list();

      state._fsp -= 1
      if (state.failed) return through_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:630:18: ( TOLERANCE toleranceExpression= expression )?
      var alt79 = 2
      val LA79_0 = input.LA(1)

      if ((LA79_0 == TOLERANCE)) {
        alt79 = 1
      }
      alt79 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:630:19: TOLERANCE toleranceExpression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_through_aspect3585);
          if (state.failed) return through_aspect
          pushFollow(FOLLOW_expression_in_ams_through_aspect3589)
          toleranceExpression = expression();

          state._fsp -= 1
          if (state.failed) return through_aspect


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:630:62: ( VAR_ASSIGN defaultExpression= expression )?
      var alt80 = 2
      val LA80_0 = input.LA(1)

      if ((LA80_0 == VAR_ASSIGN)) {
        alt80 = 1
      }
      alt80 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:630:63: VAR_ASSIGN defaultExpression= expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_through_aspect3594);
          if (state.failed) return through_aspect
          pushFollow(FOLLOW_expression_in_ams_through_aspect3598)
          defaultExpression = expression();

          state._fsp -= 1
          if (state.failed) return through_aspect


        case _ =>
      }

      `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_through_aspect3602);
      if (state.failed) return through_aspect
      if (state.backtracking == 0) {
        through_aspect = (identifier_list165, toleranceExpression, defaultExpression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 41, ams_through_aspect_StartIndex)
      }
    }
    return through_aspect
  }

  // $ANTLR end "ams_through_aspect"

  // $ANTLR start "ams_terminal_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:633:1: ams_terminal_aspect returns [(Name,Option[Name]) terminal_aspect] : plus_terminal_name= name ( TO minus_terminal_name= name )? ;
  @throws(classOf[RecognitionException])
  def ams_terminal_aspect(): (Name, Option[Name]) = {
    var terminal_aspect: (Name, Option[Name]) = null;
    val ams_terminal_aspect_StartIndex = input.index()
    var plus_terminal_name: Name = null

    var minus_terminal_name: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
        return terminal_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:633:68: (plus_terminal_name= name ( TO minus_terminal_name= name )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:634:2: plus_terminal_name= name ( TO minus_terminal_name= name )?
      pushFollow(FOLLOW_name_in_ams_terminal_aspect3621)
      plus_terminal_name = name();

      state._fsp -= 1
      if (state.failed) return terminal_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:634:26: ( TO minus_terminal_name= name )?
      var alt81 = 2
      val LA81_0 = input.LA(1)

      if ((LA81_0 == TO)) {
        alt81 = 1
      }
      alt81 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:634:27: TO minus_terminal_name= name
          `match`(input, TO, FOLLOW_TO_in_ams_terminal_aspect3624);
          if (state.failed) return terminal_aspect
          pushFollow(FOLLOW_name_in_ams_terminal_aspect3628)
          minus_terminal_name = name();

          state._fsp -= 1
          if (state.failed) return terminal_aspect


        case _ =>
      }

      if (state.backtracking == 0) {
        terminal_aspect = (plus_terminal_name, minus_terminal_name)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 42, ams_terminal_aspect_StartIndex)
      }
    }
    return terminal_aspect
  }

  // $ANTLR end "ams_terminal_aspect"

  // $ANTLR start "ams_source_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:637:1: ams_source_aspect returns [Either[(Expression,Expression),Expression] source_aspect] : ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression );
  @throws(classOf[RecognitionException])
  def ams_source_aspect(): Either[(Expression, Expression), Expression] = {
    var source_aspect: Either[(Expression, Expression), Expression] = null;
    val ams_source_aspect_StartIndex = input.index()
    var magnitude_simple_expression: Expression = null

    var phase_simple_expression: Expression = null

    var power_simple_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
        return source_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:637:87: ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression )
      var alt82 = 2
      val LA82_0 = input.LA(1)

      if ((LA82_0 == SPECTRUM)) {
        alt82 = 1
      }
      else if ((LA82_0 == NOISE)) {
        alt82 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return source_aspect
        }
        val nvae = new NoViableAltException("", 82, 0, input)

        throw nvae
      }
      alt82 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:638:2: SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression
          `match`(input, SPECTRUM, FOLLOW_SPECTRUM_in_ams_source_aspect3647);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3651)
          magnitude_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect
          `match`(input, COMMA, FOLLOW_COMMA_in_ams_source_aspect3653);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3657)
          phase_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect
          if (state.backtracking == 0) {
            source_aspect = Left((magnitude_simple_expression, phase_simple_expression))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:4: NOISE power_simple_expression= simple_expression
          `match`(input, NOISE, FOLLOW_NOISE_in_ams_source_aspect3664);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3668)
          power_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect
          if (state.backtracking == 0) {
            source_aspect = Right(power_simple_expression)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 43, ams_source_aspect_StartIndex)
      }
    }
    return source_aspect
  }

  // $ANTLR end "ams_source_aspect"

  // $ANTLR start "constant_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:641:1: constant_declaration returns [ConstantDeclaration constantDecl] : CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def constant_declaration(): ConstantDeclaration = {
    var constantDecl: ConstantDeclaration = null;
    val constant_declaration_StartIndex = input.index()
    var CONSTANT166: Token = null
    var identifier_list167: Seq[Identifier] = null

    var subtype_indication168: SubTypeIndication = null

    var expression169: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
        return constantDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:641:65: ( CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:642:2: CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
      CONSTANT166 = `match`(input, CONSTANT, FOLLOW_CONSTANT_in_constant_declaration3684).asInstanceOf[Token];
      if (state.failed) return constantDecl
      pushFollow(FOLLOW_identifier_list_in_constant_declaration3686)
      identifier_list167 = identifier_list();

      state._fsp -= 1
      if (state.failed) return constantDecl
      `match`(input, COLON, FOLLOW_COLON_in_constant_declaration3688);
      if (state.failed) return constantDecl
      pushFollow(FOLLOW_subtype_indication_in_constant_declaration3690)
      subtype_indication168 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return constantDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:642:52: ( VAR_ASSIGN expression )?
      var alt83 = 2
      val LA83_0 = input.LA(1)

      if ((LA83_0 == VAR_ASSIGN)) {
        alt83 = 1
      }
      alt83 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:642:53: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_constant_declaration3693);
          if (state.failed) return constantDecl
          pushFollow(FOLLOW_expression_in_constant_declaration3695)
          expression169 = expression();

          state._fsp -= 1
          if (state.failed) return constantDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_constant_declaration3699);
      if (state.failed) return constantDecl
      if (state.backtracking == 0) {
        constantDecl = new ConstantDeclaration(toPosition(CONSTANT166), identifier_list167, subtype_indication168, expression169)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 44, constant_declaration_StartIndex)
      }
    }
    return constantDecl
  }

  // $ANTLR end "constant_declaration"

  // $ANTLR start "signal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:645:1: signal_declaration returns [SignalDeclaration signalDecl] : SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def signal_declaration(): SignalDeclaration = {
    var signalDecl: SignalDeclaration = null;
    val signal_declaration_StartIndex = input.index()
    var reg: Token = null
    var bus: Token = null
    var SIGNAL170: Token = null
    var identifier_list171: Seq[Identifier] = null

    var subtype_indication172: SubTypeIndication = null

    var expression173: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
        return signalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:645:59: ( SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:2: SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON
      SIGNAL170 = `match`(input, SIGNAL, FOLLOW_SIGNAL_in_signal_declaration3718).asInstanceOf[Token];
      if (state.failed) return signalDecl
      pushFollow(FOLLOW_identifier_list_in_signal_declaration3720)
      identifier_list171 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalDecl
      `match`(input, COLON, FOLLOW_COLON_in_signal_declaration3722);
      if (state.failed) return signalDecl
      pushFollow(FOLLOW_subtype_indication_in_signal_declaration3724)
      subtype_indication172 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:50: (reg= REGISTER | bus= BUS )?
      var alt84 = 3
      val LA84_0 = input.LA(1)

      if ((LA84_0 == REGISTER)) {
        alt84 = 1
      }
      else if ((LA84_0 == BUS)) {
        alt84 = 2
      }
      alt84 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:51: reg= REGISTER
          reg = `match`(input, REGISTER, FOLLOW_REGISTER_in_signal_declaration3729).asInstanceOf[Token]; if (state.failed) return signalDecl

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:64: bus= BUS
          bus = `match`(input, BUS, FOLLOW_BUS_in_signal_declaration3733).asInstanceOf[Token]; if (state.failed) return signalDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:74: ( VAR_ASSIGN expression )?
      var alt85 = 2
      val LA85_0 = input.LA(1)

      if ((LA85_0 == VAR_ASSIGN)) {
        alt85 = 1
      }
      alt85 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:75: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_signal_declaration3738);
          if (state.failed) return signalDecl
          pushFollow(FOLLOW_expression_in_signal_declaration3740)
          expression173 = expression();

          state._fsp -= 1
          if (state.failed) return signalDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_signal_declaration3744);
      if (state.failed) return signalDecl
      if (state.backtracking == 0) {

        val signalType =
          if (reg != null) Some(SignalDeclaration.Type.REGISTER)
          else if (bus != null) Some(SignalDeclaration.Type.BUS)
          else None
        signalDecl = new SignalDeclaration(toPosition(SIGNAL170), identifier_list171, subtype_indication172, signalType, expression173)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 45, signal_declaration_StartIndex)
      }
    }
    return signalDecl
  }

  // $ANTLR end "signal_declaration"

  // $ANTLR start "variable_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:655:1: variable_declaration returns [VariableDeclaration varDecl] : ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def variable_declaration(): VariableDeclaration = {
    var varDecl: VariableDeclaration = null;
    val variable_declaration_StartIndex = input.index()
    var VARIABLE174: Token = null
    var SHARED175: Token = null
    var identifier_list176: Seq[Identifier] = null

    var subtype_indication177: SubTypeIndication = null

    var expression178: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
        return varDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:655:60: ( ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:2: ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:2: ( SHARED )?
      var alt86 = 2
      val LA86_0 = input.LA(1)

      if ((LA86_0 == SHARED)) {
        alt86 = 1
      }
      alt86 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:2: SHARED
          SHARED175 = `match`(input, SHARED, FOLLOW_SHARED_in_variable_declaration3761).asInstanceOf[Token]; if (state.failed) return varDecl


        case _ =>
      }

      VARIABLE174 = `match`(input, VARIABLE, FOLLOW_VARIABLE_in_variable_declaration3764).asInstanceOf[Token];
      if (state.failed) return varDecl
      pushFollow(FOLLOW_identifier_list_in_variable_declaration3766)
      identifier_list176 = identifier_list();

      state._fsp -= 1
      if (state.failed) return varDecl
      `match`(input, COLON, FOLLOW_COLON_in_variable_declaration3768);
      if (state.failed) return varDecl
      pushFollow(FOLLOW_subtype_indication_in_variable_declaration3770)
      subtype_indication177 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return varDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:60: ( VAR_ASSIGN expression )?
      var alt87 = 2
      val LA87_0 = input.LA(1)

      if ((LA87_0 == VAR_ASSIGN)) {
        alt87 = 1
      }
      alt87 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:61: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_variable_declaration3773);
          if (state.failed) return varDecl
          pushFollow(FOLLOW_expression_in_variable_declaration3775)
          expression178 = expression();

          state._fsp -= 1
          if (state.failed) return varDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_variable_declaration3779);
      if (state.failed) return varDecl
      if (state.backtracking == 0) {
        varDecl = new VariableDeclaration(toPosition(VARIABLE174), SHARED175 != null, identifier_list176, subtype_indication177, expression178)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 46, variable_declaration_StartIndex)
      }
    }
    return varDecl
  }

  // $ANTLR end "variable_declaration"

  // $ANTLR start "file_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:659:1: file_declaration returns [FileDeclaration fileDecl] : FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def file_declaration(): FileDeclaration = {
    var fileDecl: FileDeclaration = null;
    val file_declaration_StartIndex = input.index()
    var FILE179: Token = null
    var file_open_kind_expression: Expression = null

    var file_logical_name: Expression = null

    var identifier_list180: Seq[Identifier] = null

    var subtype_indication181: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
        return fileDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:659:53: ( FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:2: FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON
      FILE179 = `match`(input, FILE, FOLLOW_FILE_in_file_declaration3796).asInstanceOf[Token];
      if (state.failed) return fileDecl
      pushFollow(FOLLOW_identifier_list_in_file_declaration3798)
      identifier_list180 = identifier_list();

      state._fsp -= 1
      if (state.failed) return fileDecl
      `match`(input, COLON, FOLLOW_COLON_in_file_declaration3800);
      if (state.failed) return fileDecl
      pushFollow(FOLLOW_subtype_indication_in_file_declaration3802)
      subtype_indication181 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return fileDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:48: ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )?
      var alt89 = 2
      val LA89_0 = input.LA(1)

      if ((LA89_0 == IS || LA89_0 == OPEN)) {
        alt89 = 1
      }
      alt89 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:49: ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:49: ( OPEN file_open_kind_expression= expression )?
          var alt88 = 2
          val LA88_0 = input.LA(1)

          if ((LA88_0 == OPEN)) {
            alt88 = 1
          }
          alt88 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:50: OPEN file_open_kind_expression= expression
              `match`(input, OPEN, FOLLOW_OPEN_in_file_declaration3806);
              if (state.failed) return fileDecl
              pushFollow(FOLLOW_expression_in_file_declaration3810)
              file_open_kind_expression = expression();

              state._fsp -= 1
              if (state.failed) return fileDecl


            case _ =>
          }

          `match`(input, IS, FOLLOW_IS_in_file_declaration3814);
          if (state.failed) return fileDecl
          pushFollow(FOLLOW_expression_in_file_declaration3818)
          file_logical_name = expression();

          state._fsp -= 1
          if (state.failed) return fileDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_file_declaration3822);
      if (state.failed) return fileDecl
      if (state.backtracking == 0) {
        fileDecl = new FileDeclaration(toPosition(FILE179), identifier_list180, subtype_indication181, file_open_kind_expression, file_logical_name)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 47, file_declaration_StartIndex)
      }
    }
    return fileDecl
  }

  // $ANTLR end "file_declaration"

  // $ANTLR start "alias_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:663:1: alias_declaration returns [AliasDeclaration aliasDecl] : ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def alias_declaration(): AliasDeclaration = {
    var aliasDecl: AliasDeclaration = null;
    val alias_declaration_StartIndex = input.index()
    var ALIAS182: Token = null
    var alias_designator183: Identifier = null

    var subtype_indication184: SubTypeIndication = null

    var name185: Name = null

    var signature186: Signature = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
        return aliasDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:663:56: ( ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:664:2: ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON
      ALIAS182 = `match`(input, ALIAS, FOLLOW_ALIAS_in_alias_declaration3839).asInstanceOf[Token];
      if (state.failed) return aliasDecl
      pushFollow(FOLLOW_alias_designator_in_alias_declaration3841)
      alias_designator183 = alias_designator();

      state._fsp -= 1
      if (state.failed) return aliasDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:664:25: ( COLON subtype_indication )?
      var alt90 = 2
      val LA90_0 = input.LA(1)

      if ((LA90_0 == COLON)) {
        alt90 = 1
      }
      alt90 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:664:26: COLON subtype_indication
          `match`(input, COLON, FOLLOW_COLON_in_alias_declaration3844);
          if (state.failed) return aliasDecl
          pushFollow(FOLLOW_subtype_indication_in_alias_declaration3846)
          subtype_indication184 = subtype_indication();

          state._fsp -= 1
          if (state.failed) return aliasDecl


        case _ =>
      }

      `match`(input, IS, FOLLOW_IS_in_alias_declaration3850);
      if (state.failed) return aliasDecl
      pushFollow(FOLLOW_name_in_alias_declaration3852)
      name185 = name();

      state._fsp -= 1
      if (state.failed) return aliasDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:664:61: ( signature )?
      var alt91 = 2
      val LA91_0 = input.LA(1)

      if ((LA91_0 == LBRACKET)) {
        alt91 = 1
      }
      alt91 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:664:61: signature
          pushFollow(FOLLOW_signature_in_alias_declaration3854)
          signature186 = signature();

          state._fsp -= 1
          if (state.failed) return aliasDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_alias_declaration3857);
      if (state.failed) return aliasDecl
      if (state.backtracking == 0) {
        aliasDecl = new AliasDeclaration(toPosition(ALIAS182), alias_designator183, subtype_indication184, name185, signature186)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 48, alias_declaration_StartIndex)
      }
    }
    return aliasDecl
  }

  // $ANTLR end "alias_declaration"

  // $ANTLR start "alias_designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:667:1: alias_designator returns [Identifier id] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def alias_designator(): Identifier = {
    var id: Identifier = null;
    val alias_designator_StartIndex = input.index()
    var CHARACTER_LITERAL188: Token = null
    var STRING_LITERAL189: Token = null
    var identifier187: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 49)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:667:42: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
      var alt92 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt92 = 1
        case CHARACTER_LITERAL =>
          alt92 = 2
        case STRING_LITERAL =>
          alt92 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return id
          }
          val nvae = new NoViableAltException("", 92, 0, input)

          throw nvae
      }

      alt92 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:668:2: identifier
          pushFollow(FOLLOW_identifier_in_alias_designator3874)
          identifier187 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier187
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:669:4: CHARACTER_LITERAL
          CHARACTER_LITERAL188 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_alias_designator3881).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL188)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:670:4: STRING_LITERAL
          STRING_LITERAL189 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_alias_designator3887).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL189)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 49, alias_designator_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "alias_designator"

  // $ANTLR start "component_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:672:1: component_declaration returns [ComponentDeclaration componentDecl] : component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_declaration(): ComponentDeclaration = {
    var componentDecl: ComponentDeclaration = null;
    val component_declaration_StartIndex = input.index()
    var component: Token = null
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var generic_clause190: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_clause191: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
        return componentDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:672:68: (component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:673:2: component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause SEMICOLON )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON
      component = `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_declaration3905).asInstanceOf[Token];
      if (state.failed) return componentDecl
      pushFollow(FOLLOW_identifier_in_component_declaration3909)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return componentDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:673:50: ( IS )?
      var alt93 = 2
      val LA93_0 = input.LA(1)

      if ((LA93_0 == IS)) {
        alt93 = 1
      }
      alt93 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:673:50: IS
          `match`(input, IS, FOLLOW_IS_in_component_declaration3911); if (state.failed) return componentDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:674:3: ( generic_clause SEMICOLON )?
      var alt94 = 2
      val LA94_0 = input.LA(1)

      if ((LA94_0 == GENERIC)) {
        alt94 = 1
      }
      alt94 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:674:4: generic_clause SEMICOLON
          pushFollow(FOLLOW_generic_clause_in_component_declaration3917)
          generic_clause190 = generic_clause();

          state._fsp -= 1
          if (state.failed) return componentDecl
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_declaration3919);
          if (state.failed) return componentDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:3: ( port_clause )?
      var alt95 = 2
      val LA95_0 = input.LA(1)

      if ((LA95_0 == PORT)) {
        alt95 = 1
      }
      alt95 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:3: port_clause
          pushFollow(FOLLOW_port_clause_in_component_declaration3925)
          port_clause191 = port_clause();

          state._fsp -= 1
          if (state.failed) return componentDecl


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_component_declaration3929);
      if (state.failed) return componentDecl
      `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_declaration3931);
      if (state.failed) return componentDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:676:30: (end_identifier= identifier )?
      var alt96 = 2
      val LA96_0 = input.LA(1)

      if (((LA96_0 >= BASIC_IDENTIFIER && LA96_0 <= EXTENDED_IDENTIFIER))) {
        alt96 = 1
      }
      alt96 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:676:30: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_component_declaration3935)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return componentDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_declaration3938);
      if (state.failed) return componentDecl
      if (state.backtracking == 0) {
        componentDecl = new ComponentDeclaration(toPosition(component), start_identifier, generic_clause190, port_clause191, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 50, component_declaration_StartIndex)
      }
    }
    return componentDecl
  }

  // $ANTLR end "component_declaration"

  // $ANTLR start "attribute_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:1: attribute_declaration returns [AttributeDeclaration attributeDecl] : ATTRIBUTE identifier COLON type_mark SEMICOLON ;
  @throws(classOf[RecognitionException])
  def attribute_declaration(): AttributeDeclaration = {
    var attributeDecl: AttributeDeclaration = null;
    val attribute_declaration_StartIndex = input.index()
    var ATTRIBUTE192: Token = null
    var identifier193: Identifier = null

    var type_mark194: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
        return attributeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:68: ( ATTRIBUTE identifier COLON type_mark SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:680:2: ATTRIBUTE identifier COLON type_mark SEMICOLON
      ATTRIBUTE192 = `match`(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_attribute_declaration3954).asInstanceOf[Token];
      if (state.failed) return attributeDecl
      pushFollow(FOLLOW_identifier_in_attribute_declaration3956)
      identifier193 = identifier();

      state._fsp -= 1
      if (state.failed) return attributeDecl
      `match`(input, COLON, FOLLOW_COLON_in_attribute_declaration3958);
      if (state.failed) return attributeDecl
      pushFollow(FOLLOW_type_mark_in_attribute_declaration3960)
      type_mark194 = type_mark();

      state._fsp -= 1
      if (state.failed) return attributeDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_attribute_declaration3962);
      if (state.failed) return attributeDecl
      if (state.backtracking == 0) {
        attributeDecl = new AttributeDeclaration(toPosition(ATTRIBUTE192), identifier193, type_mark194)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 51, attribute_declaration_StartIndex)
      }
    }
    return attributeDecl
  }

  // $ANTLR end "attribute_declaration"

  // $ANTLR start "attribute_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:683:1: attribute_specification returns [AttributeSpecification attributeSpec] : ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def attribute_specification(): AttributeSpecification = {
    var attributeSpec: AttributeSpecification = null;
    val attribute_specification_StartIndex = input.index()
    var ATTRIBUTE195: Token = null
    var identifier196: Identifier = null

    var entity_name_list197: Either[Seq[(Identifier, Option[Signature])], Identifier] = null

    var entity_class198: EntityClass.Value = null

    var expression199: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 52)) {
        return attributeSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:683:72: ( ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:684:2: ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON
      ATTRIBUTE195 = `match`(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_attribute_specification3980).asInstanceOf[Token];
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_identifier_in_attribute_specification3982)
      identifier196 = identifier();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, OF, FOLLOW_OF_in_attribute_specification3984);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_entity_name_list_in_attribute_specification3986)
      entity_name_list197 = entity_name_list();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, COLON, FOLLOW_COLON_in_attribute_specification3988);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_entity_class_in_attribute_specification3990)
      entity_class198 = entity_class();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, IS, FOLLOW_IS_in_attribute_specification3992);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_expression_in_attribute_specification3994)
      expression199 = expression();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_attribute_specification3996);
      if (state.failed) return attributeSpec
      if (state.backtracking == 0) {
        attributeSpec = new AttributeSpecification(toPosition(ATTRIBUTE195), identifier196, entity_name_list197, entity_class198, expression199)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 52, attribute_specification_StartIndex)
      }
    }
    return attributeSpec
  }

  // $ANTLR end "attribute_specification"

  // $ANTLR start "entity_designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:687:1: entity_designator returns [(Identifier,Option[Signature]) designator] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? ;
  @throws(classOf[RecognitionException])
  def entity_designator(): (Identifier, Option[Signature]) = {
    var designator: (Identifier, Option[Signature]) = null;
    val entity_designator_StartIndex = input.index()
    var CHARACTER_LITERAL201: Token = null
    var STRING_LITERAL202: Token = null
    var identifier200: Identifier = null

    var signature203: Signature = null



    var id: Identifier = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
        return designator
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:690:3: ( ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:691:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:691:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
      var alt97 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt97 = 1
        case CHARACTER_LITERAL =>
          alt97 = 2
        case STRING_LITERAL =>
          alt97 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return designator
          }
          val nvae = new NoViableAltException("", 97, 0, input)

          throw nvae
      }

      alt97 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:692:2: identifier
          pushFollow(FOLLOW_identifier_in_entity_designator4023)
          identifier200 = identifier();

          state._fsp -= 1
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = identifier200
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:693:4: CHARACTER_LITERAL
          CHARACTER_LITERAL201 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_entity_designator4030).asInstanceOf[Token];
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL201)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:694:4: STRING_LITERAL
          STRING_LITERAL202 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_entity_designator4036).asInstanceOf[Token];
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL202)
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:695:4: ( signature )?
      var alt98 = 2
      val LA98_0 = input.LA(1)

      if ((LA98_0 == LBRACKET)) {
        alt98 = 1
      }
      alt98 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:695:4: signature
          pushFollow(FOLLOW_signature_in_entity_designator4042)
          signature203 = signature();

          state._fsp -= 1
          if (state.failed) return designator


        case _ =>
      }

      if (state.backtracking == 0) {
        designator = (id, Option(signature203))
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 53, entity_designator_StartIndex)
      }
    }
    return designator
  }

  // $ANTLR end "entity_designator"

  // $ANTLR start "entity_name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:698:1: entity_name_list returns [Either[Seq[(Identifier,Option[Signature])],Identifier] list] : (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL );
  @throws(classOf[RecognitionException])
  def entity_name_list(): Either[Seq[(Identifier, Option[Signature])], Identifier] = {
    var list: Either[Seq[(Identifier, Option[Signature])], Identifier] = null;
    val entity_name_list_StartIndex = input.index()
    var OTHERS204: Token = null
    var ALL205: Token = null
    var e1: (Identifier, Option[Signature]) = null

    var e2: (Identifier, Option[Signature]) = null



    val elements = new Buffer[(Identifier, Option[Signature])]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 54)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:701:3: (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL )
      var alt100 = 3
      input.LA(1) match {
        case STRING_LITERAL | CHARACTER_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt100 = 1
        case OTHERS =>
          alt100 = 2
        case ALL =>
          alt100 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return list
          }
          val nvae = new NoViableAltException("", 100, 0, input)

          throw nvae
      }

      alt100 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:702:2: e1= entity_designator ( COMMA e2= entity_designator )*
          pushFollow(FOLLOW_entity_designator_in_entity_name_list4066)
          e1 = entity_designator();

          state._fsp -= 1
          if (state.failed) return list
          if (state.backtracking == 0) {
            elements += e1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:702:51: ( COMMA e2= entity_designator )*
          var loop99 = true
          do {
            var alt99 = 2
            val LA99_0 = input.LA(1)

            if ((LA99_0 == COMMA)) {
              alt99 = 1
            }


            alt99 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:702:52: COMMA e2= entity_designator
                `match`(input, COMMA, FOLLOW_COMMA_in_entity_name_list4070);
                if (state.failed) return list
                pushFollow(FOLLOW_entity_designator_in_entity_name_list4074)
                e2 = entity_designator();

                state._fsp -= 1
                if (state.failed) return list
                if (state.backtracking == 0) {
                  elements += e2
                }


              case _ => loop99 = false
            }
          } while (loop99);

          if (state.backtracking == 0) {
            list = Left(elements.result)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:703:4: OTHERS
          OTHERS204 = `match`(input, OTHERS, FOLLOW_OTHERS_in_entity_name_list4085).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(OTHERS204))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:704:4: ALL
          ALL205 = `match`(input, ALL, FOLLOW_ALL_in_entity_name_list4092).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(ALL205))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 54, entity_name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "entity_name_list"

  // $ANTLR start "entity_class"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:706:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );
  @throws(classOf[RecognitionException])
  def entity_class(): EntityClass.Value = {
    var entityClass: EntityClass.Value = null;
    val entity_class_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 55)) {
        return entityClass
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:706:54: ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) )
      var alt102 = 18
      alt102 = dfa102.predict(input)
      alt102 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:707:2: ENTITY
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_class4107);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.ENTITY
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:708:4: ARCHITECTURE
          `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_entity_class4114);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.ARCHITECTURE
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:709:4: CONFIGURATION
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_entity_class4121);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.CONFIGURATION
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:710:4: PACKAGE
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_entity_class4128);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.PACKAGE
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:711:4: PROCEDURE
          `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_entity_class4135);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.PROCEDURE
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:712:4: FUNCTION
          `match`(input, FUNCTION, FOLLOW_FUNCTION_in_entity_class4142);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.FUNCTION
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:713:4: TYPE
          `match`(input, TYPE, FOLLOW_TYPE_in_entity_class4149);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.TYPE
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:714:4: SUBTYPE
          `match`(input, SUBTYPE, FOLLOW_SUBTYPE_in_entity_class4156);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.SUBTYPE
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:715:4: CONSTANT
          `match`(input, CONSTANT, FOLLOW_CONSTANT_in_entity_class4163);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.CONSTANT
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:716:4: SIGNAL
          `match`(input, SIGNAL, FOLLOW_SIGNAL_in_entity_class4170);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.SIGNAL
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:717:4: VARIABLE
          `match`(input, VARIABLE, FOLLOW_VARIABLE_in_entity_class4177);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.VARIABLE
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:718:4: FILE
          `match`(input, FILE, FOLLOW_FILE_in_entity_class4184);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.FILE
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:719:4: COMPONENT
          `match`(input, COMPONENT, FOLLOW_COMPONENT_in_entity_class4191);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.COMPONENT
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:720:4: LABEL
          `match`(input, LABEL, FOLLOW_LABEL_in_entity_class4198);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.LABEL
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:721:4: LITERAL
          `match`(input, LITERAL, FOLLOW_LITERAL_in_entity_class4205);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.LITERAL
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:722:4: UNITS
          `match`(input, UNITS, FOLLOW_UNITS_in_entity_class4212);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.UNITS
          }

        case 17 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:723:4: GROUP
          `match`(input, GROUP, FOLLOW_GROUP_in_entity_class4219);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.GROUP
          }

        case 18 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:726:4: {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return entityClass
            }
            throw new FailedPredicateException(input, "entity_class", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:726:12: ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
          var alt101 = 4
          input.LA(1) match {
            case NATURE =>
              alt101 = 1
            case SUBNATURE =>
              alt101 = 2
            case QUANTITY =>
              alt101 = 3
            case TERMINAL =>
              alt101 = 4
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return entityClass
              }
              val nvae = new NoViableAltException("", 101, 0, input)

              throw nvae
          }

          alt101 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:727:5: NATURE
              `match`(input, NATURE, FOLLOW_NATURE_in_entity_class4239);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.NATURE
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:728:5: SUBNATURE
              `match`(input, SUBNATURE, FOLLOW_SUBNATURE_in_entity_class4247);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.SUBNATURE
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:729:5: QUANTITY
              `match`(input, QUANTITY, FOLLOW_QUANTITY_in_entity_class4255);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.QUANTITY
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:730:5: TERMINAL
              `match`(input, TERMINAL, FOLLOW_TERMINAL_in_entity_class4263);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.TERMINAL
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 55, entity_class_StartIndex)
      }
    }
    return entityClass
  }

  // $ANTLR end "entity_class"

  // $ANTLR start "configuration_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:733:1: configuration_specification returns [ConfigurationSpecification configSpec] : forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )? ;
  @throws(classOf[RecognitionException])
  def configuration_specification(): ConfigurationSpecification = {
    var configSpec: ConfigurationSpecification = null;
    val configuration_specification_StartIndex = input.index()
    var forToken: Token = null
    var component_specification206: ComponentSpecification = null

    var binding_indication207: BindingIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return configSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:733:77: (forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:734:2: forToken= FOR component_specification binding_indication SEMICOLON ({...}? => END FOR SEMICOLON )?
      forToken = `match`(input, FOR, FOLLOW_FOR_in_configuration_specification4284).asInstanceOf[Token];
      if (state.failed) return configSpec
      pushFollow(FOLLOW_component_specification_in_configuration_specification4286)
      component_specification206 = component_specification();

      state._fsp -= 1
      if (state.failed) return configSpec
      pushFollow(FOLLOW_binding_indication_in_configuration_specification4290)
      binding_indication207 = binding_indication();

      state._fsp -= 1
      if (state.failed) return configSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_configuration_specification4292);
      if (state.failed) return configSpec
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:737:2: ({...}? => END FOR SEMICOLON )?
      var alt103 = 2
      val LA103_0 = input.LA(1)

      if ((LA103_0 == END) && ((vhdl2008))) {
        alt103 = 1
      }
      alt103 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:737:3: {...}? => END FOR SEMICOLON
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return configSpec
            }
            throw new FailedPredicateException(input, "configuration_specification", "vhdl2008")
          }
          `match`(input, END, FOLLOW_END_in_configuration_specification4301);
          if (state.failed) return configSpec
          `match`(input, FOR, FOLLOW_FOR_in_configuration_specification4303);
          if (state.failed) return configSpec
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_configuration_specification4305);
          if (state.failed) return configSpec


        case _ =>
      }

      if (state.backtracking == 0) {
        configSpec = new ConfigurationSpecification(toPosition(forToken), component_specification206, binding_indication207)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 56, configuration_specification_StartIndex)
      }
    }
    return configSpec
  }

  // $ANTLR end "configuration_specification"

  // $ANTLR start "instantiation_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:740:1: instantiation_list returns [Either[Seq[Identifier],Identifier] list] : ( identifier_list | OTHERS | ALL );
  @throws(classOf[RecognitionException])
  def instantiation_list(): Either[Seq[Identifier], Identifier] = {
    var list: Either[Seq[Identifier], Identifier] = null;
    val instantiation_list_StartIndex = input.index()
    var OTHERS209: Token = null
    var ALL210: Token = null
    var identifier_list208: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 57)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:740:72: ( identifier_list | OTHERS | ALL )
      var alt104 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt104 = 1
        case OTHERS =>
          alt104 = 2
        case ALL =>
          alt104 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return list
          }
          val nvae = new NoViableAltException("", 104, 0, input)

          throw nvae
      }

      alt104 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:741:2: identifier_list
          pushFollow(FOLLOW_identifier_list_in_instantiation_list4325)
          identifier_list208 = identifier_list();

          state._fsp -= 1
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Left(identifier_list208)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:742:4: OTHERS
          OTHERS209 = `match`(input, OTHERS, FOLLOW_OTHERS_in_instantiation_list4332).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(OTHERS209))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:743:4: ALL
          ALL210 = `match`(input, ALL, FOLLOW_ALL_in_instantiation_list4339).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(ALL210))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 57, instantiation_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "instantiation_list"

  // $ANTLR start "component_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:745:1: component_specification returns [ComponentSpecification spec] : instantiation_list COLON selected_name ;
  @throws(classOf[RecognitionException])
  def component_specification(): ComponentSpecification = {
    var spec: ComponentSpecification = null;
    val component_specification_StartIndex = input.index()
    var instantiation_list211: Either[Seq[Identifier], Identifier] = null

    var selected_name212: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
        return spec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:745:63: ( instantiation_list COLON selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:746:2: instantiation_list COLON selected_name
      pushFollow(FOLLOW_instantiation_list_in_component_specification4356)
      instantiation_list211 = instantiation_list();

      state._fsp -= 1
      if (state.failed) return spec
      `match`(input, COLON, FOLLOW_COLON_in_component_specification4358);
      if (state.failed) return spec
      pushFollow(FOLLOW_selected_name_in_component_specification4360)
      selected_name212 = selected_name();

      state._fsp -= 1
      if (state.failed) return spec
      if (state.backtracking == 0) {
        spec = new ComponentSpecification(instantiation_list211, selected_name212)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 58, component_specification_StartIndex)
      }
    }
    return spec
  }

  // $ANTLR end "component_specification"

  // $ANTLR start "entity_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:749:1: entity_aspect returns [Option[Either[(SelectedName,Option[Identifier]),SelectedName]] entityAspect] : ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN );
  @throws(classOf[RecognitionException])
  def entity_aspect(): Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = {
    var entityAspect: Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = null;
    val entity_aspect_StartIndex = input.index()
    var entity_name: SelectedName = null

    var architecture_identifier: Identifier = null

    var configuration_name: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
        return entityAspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:749:104: ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN )
      var alt106 = 3
      input.LA(1) match {
        case ENTITY =>
          alt106 = 1
        case CONFIGURATION =>
          alt106 = 2
        case OPEN =>
          alt106 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return entityAspect
          }
          val nvae = new NoViableAltException("", 106, 0, input)

          throw nvae
      }

      alt106 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:750:2: ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_aspect4376);
          if (state.failed) return entityAspect
          pushFollow(FOLLOW_selected_name_in_entity_aspect4380)
          entity_name = selected_name();

          state._fsp -= 1
          if (state.failed) return entityAspect
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:750:35: ( LPAREN architecture_identifier= identifier RPAREN )?
          var alt105 = 2
          val LA105_0 = input.LA(1)

          if ((LA105_0 == LPAREN)) {
            alt105 = 1
          }
          alt105 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:750:36: LPAREN architecture_identifier= identifier RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_entity_aspect4383);
              if (state.failed) return entityAspect
              pushFollow(FOLLOW_identifier_in_entity_aspect4387)
              architecture_identifier = identifier();

              state._fsp -= 1
              if (state.failed) return entityAspect
              `match`(input, RPAREN, FOLLOW_RPAREN_in_entity_aspect4389);
              if (state.failed) return entityAspect


            case _ =>
          }

          if (state.backtracking == 0) {
            entityAspect = Option(Left((entity_name, Option(architecture_identifier))))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:751:4: CONFIGURATION configuration_name= selected_name
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_entity_aspect4398);
          if (state.failed) return entityAspect
          pushFollow(FOLLOW_selected_name_in_entity_aspect4403)
          configuration_name = selected_name();

          state._fsp -= 1
          if (state.failed) return entityAspect
          if (state.backtracking == 0) {
            entityAspect = Option(Right(configuration_name))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:752:4: OPEN
          `match`(input, OPEN, FOLLOW_OPEN_in_entity_aspect4410);
          if (state.failed) return entityAspect
          if (state.backtracking == 0) {
            entityAspect = None
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 59, entity_aspect_StartIndex)
      }
    }
    return entityAspect
  }

  // $ANTLR end "entity_aspect"

  // $ANTLR start "binding_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:754:1: binding_indication returns [BindingIndication indication] : ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? ;
  @throws(classOf[RecognitionException])
  def binding_indication(): BindingIndication = {
    var indication: BindingIndication = null;
    val binding_indication_StartIndex = input.index()
    var entity_aspect213: Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = null

    var generic_map_aspect214: AssociationList = null

    var port_map_aspect215: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
        return indication
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:754:59: ( ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:755:2: ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:755:2: ( USE entity_aspect )?
      var alt107 = 2
      val LA107_0 = input.LA(1)

      if ((LA107_0 == USE)) {
        alt107 = 1
      }
      alt107 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:755:3: USE entity_aspect
          `match`(input, USE, FOLLOW_USE_in_binding_indication4428);
          if (state.failed) return indication
          pushFollow(FOLLOW_entity_aspect_in_binding_indication4430)
          entity_aspect213 = entity_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:756:2: ( generic_map_aspect )?
      var alt108 = 2
      val LA108_0 = input.LA(1)

      if ((LA108_0 == GENERIC)) {
        alt108 = 1
      }
      alt108 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:756:2: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_binding_indication4435)
          generic_map_aspect214 = generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:757:2: ( port_map_aspect )?
      var alt109 = 2
      val LA109_0 = input.LA(1)

      if ((LA109_0 == PORT)) {
        alt109 = 1
      }
      alt109 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:757:2: port_map_aspect
          pushFollow(FOLLOW_port_map_aspect_in_binding_indication4439)
          port_map_aspect215 = port_map_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      if (state.backtracking == 0) {
        indication = new BindingIndication(entity_aspect213, generic_map_aspect214, port_map_aspect215)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 60, binding_indication_StartIndex)
      }
    }
    return indication
  }

  // $ANTLR end "binding_indication"

  // $ANTLR start "disconnection_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:760:1: disconnection_specification returns [DisconnectionSpecification disconnectSpec] : DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def disconnection_specification(): DisconnectionSpecification = {
    var disconnectSpec: DisconnectionSpecification = null;
    val disconnection_specification_StartIndex = input.index()
    var id: Token = null
    var DISCONNECT217: Token = null
    var selected_name_list216: Seq[SelectedName] = null

    var type_mark218: SelectedName = null

    var expression219: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 61)) {
        return disconnectSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:760:81: ( DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:2: DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON
      DISCONNECT217 = `match`(input, DISCONNECT, FOLLOW_DISCONNECT_in_disconnection_specification4456).asInstanceOf[Token];
      if (state.failed) return disconnectSpec
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:13: ( selected_name_list | id= OTHERS | id= ALL )
      var alt110 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt110 = 1
        case OTHERS =>
          alt110 = 2
        case ALL =>
          alt110 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return disconnectSpec
          }
          val nvae = new NoViableAltException("", 110, 0, input)

          throw nvae
      }

      alt110 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:14: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_disconnection_specification4459)
          selected_name_list216 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return disconnectSpec

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:35: id= OTHERS
          id = `match`(input, OTHERS, FOLLOW_OTHERS_in_disconnection_specification4465).asInstanceOf[Token]; if (state.failed) return disconnectSpec

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:47: id= ALL
          id = `match`(input, ALL, FOLLOW_ALL_in_disconnection_specification4471).asInstanceOf[Token]; if (state.failed) return disconnectSpec


        case _ =>
      }

      `match`(input, COLON, FOLLOW_COLON_in_disconnection_specification4474);
      if (state.failed) return disconnectSpec
      pushFollow(FOLLOW_type_mark_in_disconnection_specification4476)
      type_mark218 = type_mark();

      state._fsp -= 1
      if (state.failed) return disconnectSpec
      `match`(input, AFTER, FOLLOW_AFTER_in_disconnection_specification4478);
      if (state.failed) return disconnectSpec
      pushFollow(FOLLOW_expression_in_disconnection_specification4480)
      expression219 = expression();

      state._fsp -= 1
      if (state.failed) return disconnectSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_disconnection_specification4482);
      if (state.failed) return disconnectSpec
      if (state.backtracking == 0) {

        val signal_list = if (id == null) Left(selected_name_list216) else Right(toIdentifier(id))
        disconnectSpec = new DisconnectionSpecification(toPosition(DISCONNECT217), signal_list, type_mark218, expression219)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 61, disconnection_specification_StartIndex)
      }
    }
    return disconnectSpec
  }

  // $ANTLR end "disconnection_specification"

  // $ANTLR start "ams_step_limit_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:767:1: ams_step_limit_specification returns [StepLimitSpecification stepLimitSpec] : LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_step_limit_specification(): StepLimitSpecification = {
    var stepLimitSpec: StepLimitSpecification = null;
    val ams_step_limit_specification_StartIndex = input.index()
    var id: Token = null
    var LIMIT221: Token = null
    var selected_name_list220: Seq[SelectedName] = null

    var type_mark222: SelectedName = null

    var expression223: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
        return stepLimitSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:767:77: ( LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:768:2: LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON
      LIMIT221 = `match`(input, LIMIT, FOLLOW_LIMIT_in_ams_step_limit_specification4498).asInstanceOf[Token];
      if (state.failed) return stepLimitSpec
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:768:8: ( selected_name_list | id= OTHERS | id= ALL )
      var alt111 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt111 = 1
        case OTHERS =>
          alt111 = 2
        case ALL =>
          alt111 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stepLimitSpec
          }
          val nvae = new NoViableAltException("", 111, 0, input)

          throw nvae
      }

      alt111 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:768:9: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_ams_step_limit_specification4501)
          selected_name_list220 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return stepLimitSpec

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:768:30: id= OTHERS
          id = `match`(input, OTHERS, FOLLOW_OTHERS_in_ams_step_limit_specification4507).asInstanceOf[Token]; if (state.failed) return stepLimitSpec

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:768:42: id= ALL
          id = `match`(input, ALL, FOLLOW_ALL_in_ams_step_limit_specification4513).asInstanceOf[Token]; if (state.failed) return stepLimitSpec


        case _ =>
      }

      `match`(input, COLON, FOLLOW_COLON_in_ams_step_limit_specification4517);
      if (state.failed) return stepLimitSpec
      pushFollow(FOLLOW_type_mark_in_ams_step_limit_specification4519)
      type_mark222 = type_mark();

      state._fsp -= 1
      if (state.failed) return stepLimitSpec
      `match`(input, WITH, FOLLOW_WITH_in_ams_step_limit_specification4521);
      if (state.failed) return stepLimitSpec
      pushFollow(FOLLOW_expression_in_ams_step_limit_specification4523)
      expression223 = expression();

      state._fsp -= 1
      if (state.failed) return stepLimitSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_step_limit_specification4525);
      if (state.failed) return stepLimitSpec
      if (state.backtracking == 0) {

        val signal_list = if (id == null) Left(selected_name_list220) else Right(toIdentifier(id))
        stepLimitSpec = new StepLimitSpecification(toPosition(LIMIT221), signal_list, type_mark222, expression223)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 62, ams_step_limit_specification_StartIndex)
      }
    }
    return stepLimitSpec
  }

  // $ANTLR end "ams_step_limit_specification"

  // $ANTLR start "entity_class_entry"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:774:1: entity_class_entry returns [GroupTemplateDeclaration.EntityClassEntry entry] : entity_class ( BOX )? ;
  @throws(classOf[RecognitionException])
  def entity_class_entry(): GroupTemplateDeclaration.EntityClassEntry = {
    var entry: GroupTemplateDeclaration.EntityClassEntry = null;
    val entity_class_entry_StartIndex = input.index()
    var BOX225: Token = null
    var entity_class224: EntityClass.Value = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return entry
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:774:78: ( entity_class ( BOX )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:775:2: entity_class ( BOX )?
      pushFollow(FOLLOW_entity_class_in_entity_class_entry4542)
      entity_class224 = entity_class();

      state._fsp -= 1
      if (state.failed) return entry
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:775:15: ( BOX )?
      var alt112 = 2
      val LA112_0 = input.LA(1)

      if ((LA112_0 == BOX)) {
        alt112 = 1
      }
      alt112 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:775:15: BOX
          BOX225 = `match`(input, BOX, FOLLOW_BOX_in_entity_class_entry4544).asInstanceOf[Token]; if (state.failed) return entry


        case _ =>
      }

      if (state.backtracking == 0) {
        entry = new GroupTemplateDeclaration.EntityClassEntry(entity_class224, BOX225 != null)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 63, entity_class_entry_StartIndex)
      }
    }
    return entry
  }

  // $ANTLR end "entity_class_entry"

  // $ANTLR start "group_template_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:778:1: group_template_declaration returns [GroupTemplateDeclaration groupTemplateDecl] : GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def group_template_declaration(): GroupTemplateDeclaration = {
    var groupTemplateDecl: GroupTemplateDeclaration = null;
    val group_template_declaration_StartIndex = input.index()
    var GROUP226: Token = null
    var e1: GroupTemplateDeclaration.EntityClassEntry = null

    var e2: GroupTemplateDeclaration.EntityClassEntry = null

    var identifier227: Identifier = null



    val elements = new Buffer[GroupTemplateDeclaration.EntityClassEntry]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 64)) {
        return groupTemplateDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:781:2: ( GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:782:2: GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON
      GROUP226 = `match`(input, GROUP, FOLLOW_GROUP_in_group_template_declaration4566).asInstanceOf[Token];
      if (state.failed) return groupTemplateDecl
      pushFollow(FOLLOW_identifier_in_group_template_declaration4568)
      identifier227 = identifier();

      state._fsp -= 1
      if (state.failed) return groupTemplateDecl
      `match`(input, IS, FOLLOW_IS_in_group_template_declaration4570);
      if (state.failed) return groupTemplateDecl
      `match`(input, LPAREN, FOLLOW_LPAREN_in_group_template_declaration4572);
      if (state.failed) return groupTemplateDecl
      pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4576)
      e1 = entity_class_entry();

      state._fsp -= 1
      if (state.failed) return groupTemplateDecl
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:782:74: ( COMMA e2= entity_class_entry )*
      var loop113 = true
      do {
        var alt113 = 2
        val LA113_0 = input.LA(1)

        if ((LA113_0 == COMMA)) {
          alt113 = 1
        }


        alt113 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:782:75: COMMA e2= entity_class_entry
            `match`(input, COMMA, FOLLOW_COMMA_in_group_template_declaration4580);
            if (state.failed) return groupTemplateDecl
            pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4584)
            e2 = entity_class_entry();

            state._fsp -= 1
            if (state.failed) return groupTemplateDecl
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop113 = false
        }
      } while (loop113);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_group_template_declaration4591);
      if (state.failed) return groupTemplateDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_group_template_declaration4593);
      if (state.failed) return groupTemplateDecl
      if (state.backtracking == 0) {
        groupTemplateDecl = new GroupTemplateDeclaration(toPosition(GROUP226), identifier227, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 64, group_template_declaration_StartIndex)
      }
    }
    return groupTemplateDecl
  }

  // $ANTLR end "group_template_declaration"

  // $ANTLR start "group_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:785:1: group_declaration returns [GroupDeclaration groupDecl] : GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def group_declaration(): GroupDeclaration = {
    var groupDecl: GroupDeclaration = null;
    val group_declaration_StartIndex = input.index()
    var GROUP228: Token = null
    var identifier229: Identifier = null

    var selected_name230: SelectedName = null

    var group_constituent_list231: Seq[Either[Name, Identifier]] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
        return groupDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:785:56: ( GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:786:2: GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON
      GROUP228 = `match`(input, GROUP, FOLLOW_GROUP_in_group_declaration4613).asInstanceOf[Token];
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_identifier_in_group_declaration4615)
      identifier229 = identifier();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, COLON, FOLLOW_COLON_in_group_declaration4617);
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_selected_name_in_group_declaration4619)
      selected_name230 = selected_name();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, LPAREN, FOLLOW_LPAREN_in_group_declaration4621);
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_group_constituent_list_in_group_declaration4623)
      group_constituent_list231 = group_constituent_list();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, RPAREN, FOLLOW_RPAREN_in_group_declaration4625);
      if (state.failed) return groupDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_group_declaration4627);
      if (state.failed) return groupDecl
      if (state.backtracking == 0) {
        groupDecl = new GroupDeclaration(toPosition(GROUP228), identifier229, selected_name230, group_constituent_list231)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 65, group_declaration_StartIndex)
      }
    }
    return groupDecl
  }

  // $ANTLR end "group_declaration"

  // $ANTLR start "group_constituent"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:789:1: group_constituent returns [Either[Name,Identifier] constituent] : ( name | CHARACTER_LITERAL );
  @throws(classOf[RecognitionException])
  def group_constituent(): Either[Name, Identifier] = {
    var constituent: Either[Name, Identifier] = null;
    val group_constituent_StartIndex = input.index()
    var CHARACTER_LITERAL233: Token = null
    var name232: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
        return constituent
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:789:66: ( name | CHARACTER_LITERAL )
      var alt114 = 2
      val LA114_0 = input.LA(1)

      if ((LA114_0 == STRING_LITERAL || (LA114_0 >= BASIC_IDENTIFIER && LA114_0 <= EXTENDED_IDENTIFIER))) {
        alt114 = 1
      }
      else if ((LA114_0 == 181) && ((vhdl2008))) {
        alt114 = 1
      }
      else if ((LA114_0 == CHARACTER_LITERAL)) {
        alt114 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return constituent
        }
        val nvae = new NoViableAltException("", 114, 0, input)

        throw nvae
      }
      alt114 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:790:2: name
          pushFollow(FOLLOW_name_in_group_constituent4644)
          name232 = name();

          state._fsp -= 1
          if (state.failed) return constituent
          if (state.backtracking == 0) {
            constituent = Left(name232)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:791:4: CHARACTER_LITERAL
          CHARACTER_LITERAL233 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_group_constituent4651).asInstanceOf[Token];
          if (state.failed) return constituent
          if (state.backtracking == 0) {
            constituent = Right(toIdentifier(CHARACTER_LITERAL233))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 66, group_constituent_StartIndex)
      }
    }
    return constituent
  }

  // $ANTLR end "group_constituent"

  // $ANTLR start "group_constituent_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:793:1: group_constituent_list returns [Seq[Either[Name,Identifier]] list] : c1= group_constituent ( COMMA c2= group_constituent )* ;
  @throws(classOf[RecognitionException])
  def group_constituent_list(): Seq[Either[Name, Identifier]] = {
    var list: Seq[Either[Name, Identifier]] = null;
    val group_constituent_list_StartIndex = input.index()
    var c1: Either[Name, Identifier] = null

    var c2: Either[Name, Identifier] = null



    val elements = new Buffer[Either[Name, Identifier]]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:796:3: (c1= group_constituent ( COMMA c2= group_constituent )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:2: c1= group_constituent ( COMMA c2= group_constituent )*
      pushFollow(FOLLOW_group_constituent_in_group_constituent_list4672)
      c1 = group_constituent();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += c1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:52: ( COMMA c2= group_constituent )*
      var loop115 = true
      do {
        var alt115 = 2
        val LA115_0 = input.LA(1)

        if ((LA115_0 == COMMA)) {
          alt115 = 1
        }


        alt115 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:54: COMMA c2= group_constituent
            `match`(input, COMMA, FOLLOW_COMMA_in_group_constituent_list4677);
            if (state.failed) return list
            pushFollow(FOLLOW_group_constituent_in_group_constituent_list4681)
            c2 = group_constituent();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += c2
            }


          case _ => loop115 = false
        }
      } while (loop115);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 67, group_constituent_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "group_constituent_list"

  // $ANTLR start "use_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:800:1: use_clause returns [UseClause useClause] : USE selected_name_list SEMICOLON ;
  @throws(classOf[RecognitionException])
  def use_clause(): UseClause = {
    var useClause: UseClause = null;
    val use_clause_StartIndex = input.index()
    var USE234: Token = null
    var selected_name_list235: Seq[SelectedName] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
        return useClause
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:800:42: ( USE selected_name_list SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:801:2: USE selected_name_list SEMICOLON
      USE234 = `match`(input, USE, FOLLOW_USE_in_use_clause4705).asInstanceOf[Token];
      if (state.failed) return useClause
      pushFollow(FOLLOW_selected_name_list_in_use_clause4707)
      selected_name_list235 = selected_name_list();

      state._fsp -= 1
      if (state.failed) return useClause
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_use_clause4709);
      if (state.failed) return useClause
      if (state.backtracking == 0) {
        useClause = new UseClause(toPosition(USE234), selected_name_list235)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 68, use_clause_StartIndex)
      }
    }
    return useClause
  }

  // $ANTLR end "use_clause"

  // $ANTLR start "enumeration_literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:805:1: enumeration_literal returns [Identifier id] : ( identifier | CHARACTER_LITERAL );
  @throws(classOf[RecognitionException])
  def enumeration_literal(): Identifier = {
    var id: Identifier = null;
    val enumeration_literal_StartIndex = input.index()
    var CHARACTER_LITERAL237: Token = null
    var identifier236: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:805:45: ( identifier | CHARACTER_LITERAL )
      var alt116 = 2
      val LA116_0 = input.LA(1)

      if (((LA116_0 >= BASIC_IDENTIFIER && LA116_0 <= EXTENDED_IDENTIFIER))) {
        alt116 = 1
      }
      else if ((LA116_0 == CHARACTER_LITERAL)) {
        alt116 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 116, 0, input)

        throw nvae
      }
      alt116 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:806:2: identifier
          pushFollow(FOLLOW_identifier_in_enumeration_literal4728)
          identifier236 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier236
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:807:4: CHARACTER_LITERAL
          CHARACTER_LITERAL237 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4735).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL237)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 69, enumeration_literal_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "enumeration_literal"

  // $ANTLR start "enumeration_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:809:1: enumeration_type_definition[Identifier id,Position pos] returns [EnumerationTypeDefinition enumTypeDef] : LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN ;
  @throws(classOf[RecognitionException])
  def enumeration_type_definition(id: Identifier, pos: Position): EnumerationTypeDefinition = {
    var enumTypeDef: EnumerationTypeDefinition = null;
    val enumeration_type_definition_StartIndex = input.index()
    var e1: Identifier = null

    var e2: Identifier = null



    val elements = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
        return enumTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:812:3: ( LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:813:2: LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_enumeration_type_definition4756);
      if (state.failed) return enumTypeDef
      pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4760)
      e1 = enumeration_literal();

      state._fsp -= 1
      if (state.failed) return enumTypeDef
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:813:52: ( COMMA e2= enumeration_literal )*
      var loop117 = true
      do {
        var alt117 = 2
        val LA117_0 = input.LA(1)

        if ((LA117_0 == COMMA)) {
          alt117 = 1
        }


        alt117 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:813:53: COMMA e2= enumeration_literal
            `match`(input, COMMA, FOLLOW_COMMA_in_enumeration_type_definition4764);
            if (state.failed) return enumTypeDef
            pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4768)
            e2 = enumeration_literal();

            state._fsp -= 1
            if (state.failed) return enumTypeDef
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop117 = false
        }
      } while (loop117);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_enumeration_type_definition4774);
      if (state.failed) return enumTypeDef
      if (state.backtracking == 0) {
        enumTypeDef = new EnumerationTypeDefinition(pos, id, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 70, enumeration_type_definition_StartIndex)
      }
    }
    return enumTypeDef
  }

  // $ANTLR end "enumeration_type_definition"

  // $ANTLR start "integer_or_floating_point_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:816:1: integer_or_floating_point_type_definition[Identifier id,Position pos] returns [IntegerOrFloatingPointTypeDefinition scalarTypeDef] : RANGE range ;
  @throws(classOf[RecognitionException])
  def integer_or_floating_point_type_definition(id: Identifier, pos: Position): IntegerOrFloatingPointTypeDefinition = {
    var scalarTypeDef: IntegerOrFloatingPointTypeDefinition = null;
    val integer_or_floating_point_type_definition_StartIndex = input.index()
    var range238: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 71)) {
        return scalarTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:816:132: ( RANGE range )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:817:2: RANGE range
      `match`(input, RANGE, FOLLOW_RANGE_in_integer_or_floating_point_type_definition4792);
      if (state.failed) return scalarTypeDef
      pushFollow(FOLLOW_range_in_integer_or_floating_point_type_definition4794)
      range238 = range();

      state._fsp -= 1
      if (state.failed) return scalarTypeDef
      if (state.backtracking == 0) {
        scalarTypeDef = new IntegerOrFloatingPointTypeDefinition(pos, id, range238)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 71, integer_or_floating_point_type_definition_StartIndex)
      }
    }
    return scalarTypeDef
  }

  // $ANTLR end "integer_or_floating_point_type_definition"

  // $ANTLR start "physical_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:820:1: physical_type_definition[Identifier id,Position pos] returns [PhysicalTypeDefinition physicalTypeDef] : RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? ;
  @throws(classOf[RecognitionException])
  def physical_type_definition(id: Identifier, pos: Position): PhysicalTypeDefinition = {
    var physicalTypeDef: PhysicalTypeDefinition = null;
    val physical_type_definition_StartIndex = input.index()
    var baseIdent: Identifier = null

    var idx: Identifier = null

    var endIdent: Identifier = null

    var physical_literal239: PhysicalLiteral = null

    var range240: Range = null



    val elements = new Buffer[PhysicalTypeDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
        return physicalTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:823:3: ( RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:824:2: RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )?
      `match`(input, RANGE, FOLLOW_RANGE_in_physical_type_definition4819);
      if (state.failed) return physicalTypeDef
      pushFollow(FOLLOW_range_in_physical_type_definition4821)
      range240 = range();

      state._fsp -= 1
      if (state.failed) return physicalTypeDef
      `match`(input, UNITS, FOLLOW_UNITS_in_physical_type_definition4824);
      if (state.failed) return physicalTypeDef
      pushFollow(FOLLOW_identifier_in_physical_type_definition4830)
      baseIdent = identifier();

      state._fsp -= 1
      if (state.failed) return physicalTypeDef
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_physical_type_definition4832);
      if (state.failed) return physicalTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:827:3: (idx= identifier EQ physical_literal SEMICOLON )*
      var loop118 = true
      do {
        var alt118 = 2
        val LA118_0 = input.LA(1)

        if (((LA118_0 >= BASIC_IDENTIFIER && LA118_0 <= EXTENDED_IDENTIFIER))) {
          alt118 = 1
        }


        alt118 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:828:4: idx= identifier EQ physical_literal SEMICOLON
            pushFollow(FOLLOW_identifier_in_physical_type_definition4843)
            idx = identifier();

            state._fsp -= 1
            if (state.failed) return physicalTypeDef
            `match`(input, EQ, FOLLOW_EQ_in_physical_type_definition4845);
            if (state.failed) return physicalTypeDef
            pushFollow(FOLLOW_physical_literal_in_physical_type_definition4847)
            physical_literal239 = physical_literal();

            state._fsp -= 1
            if (state.failed) return physicalTypeDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_physical_type_definition4849);
            if (state.failed) return physicalTypeDef
            if (state.backtracking == 0) {
              elements += new PhysicalTypeDefinition.Element(idx, physical_literal239)
            }


          case _ => loop118 = false
        }
      } while (loop118);

      `match`(input, END, FOLLOW_END_in_physical_type_definition4863);
      if (state.failed) return physicalTypeDef
      `match`(input, UNITS, FOLLOW_UNITS_in_physical_type_definition4865);
      if (state.failed) return physicalTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:831:20: (endIdent= identifier )?
      var alt119 = 2
      val LA119_0 = input.LA(1)

      if (((LA119_0 >= BASIC_IDENTIFIER && LA119_0 <= EXTENDED_IDENTIFIER))) {
        alt119 = 1
      }
      alt119 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:831:20: endIdent= identifier
          pushFollow(FOLLOW_identifier_in_physical_type_definition4869)
          endIdent = identifier();

          state._fsp -= 1
          if (state.failed) return physicalTypeDef


        case _ =>
      }

      if (state.backtracking == 0) {
        physicalTypeDef = new PhysicalTypeDefinition(pos, id, range240, baseIdent, elements.result, endIdent)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 72, physical_type_definition_StartIndex)
      }
    }
    return physicalTypeDef
  }

  // $ANTLR end "physical_type_definition"

  // $ANTLR start "index_subtype_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:834:1: index_subtype_definition returns [SelectedName typeMark] : type_mark RANGE BOX ;
  @throws(classOf[RecognitionException])
  def index_subtype_definition(): SelectedName = {
    var typeMark: SelectedName = null;
    val index_subtype_definition_StartIndex = input.index()
    var type_mark241: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 73)) {
        return typeMark
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:834:58: ( type_mark RANGE BOX )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:835:2: type_mark RANGE BOX
      pushFollow(FOLLOW_type_mark_in_index_subtype_definition4888)
      type_mark241 = type_mark();

      state._fsp -= 1
      if (state.failed) return typeMark
      `match`(input, RANGE, FOLLOW_RANGE_in_index_subtype_definition4890);
      if (state.failed) return typeMark
      `match`(input, BOX, FOLLOW_BOX_in_index_subtype_definition4892);
      if (state.failed) return typeMark
      if (state.backtracking == 0) {
        typeMark = type_mark241
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 73, index_subtype_definition_StartIndex)
      }
    }
    return typeMark
  }

  // $ANTLR end "index_subtype_definition"

  // $ANTLR start "array_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:837:1: array_type_definition[Identifier id,Position pos] returns [ArrayTypeDefinition arrayTypeDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication ;
  @throws(classOf[RecognitionException])
  def array_type_definition(id: Identifier, pos: Position): ArrayTypeDefinition = {
    var arrayTypeDef: ArrayTypeDefinition = null;
    val array_type_definition_StartIndex = input.index()
    var type1: SelectedName = null

    var type2: SelectedName = null

    var subtype_indication242: SubTypeIndication = null

    var index_constraint243: Seq[DiscreteRange] = null



    val unConstraintList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
        return arrayTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:840:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:841:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication
      `match`(input, ARRAY, FOLLOW_ARRAY_in_array_type_definition4916);
      if (state.failed) return arrayTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:841:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
      var alt121 = 2
      alt121 = dfa121.predict(input)
      alt121 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:842:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_array_type_definition4922);
          if (state.failed) return arrayTypeDef
          pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition4926)
          type1 = index_subtype_definition();

          state._fsp -= 1
          if (state.failed) return arrayTypeDef
          if (state.backtracking == 0) {
            unConstraintList += type1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:842:79: ( COMMA type2= index_subtype_definition )*
          var loop120 = true
          do {
            var alt120 = 2
            val LA120_0 = input.LA(1)

            if ((LA120_0 == COMMA)) {
              alt120 = 1
            }


            alt120 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:842:80: COMMA type2= index_subtype_definition
                `match`(input, COMMA, FOLLOW_COMMA_in_array_type_definition4931);
                if (state.failed) return arrayTypeDef
                pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition4935)
                type2 = index_subtype_definition();

                state._fsp -= 1
                if (state.failed) return arrayTypeDef
                if (state.backtracking == 0) {
                  unConstraintList += type2
                }


              case _ => loop120 = false
            }
          } while (loop120);

          `match`(input, RPAREN, FOLLOW_RPAREN_in_array_type_definition4941);
          if (state.failed) return arrayTypeDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:843:5: index_constraint
          pushFollow(FOLLOW_index_constraint_in_array_type_definition4947)
          index_constraint243 = index_constraint();

          state._fsp -= 1
          if (state.failed) return arrayTypeDef


        case _ =>
      }

      `match`(input, OF, FOLLOW_OF_in_array_type_definition4953);
      if (state.failed) return arrayTypeDef
      pushFollow(FOLLOW_subtype_indication_in_array_type_definition4955)
      subtype_indication242 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return arrayTypeDef
      if (state.backtracking == 0) {

        val result = unConstraintList.result
        arrayTypeDef = if (result.nonEmpty) new ArrayTypeDefinition(pos, id, Left(result), subtype_indication242)
        else new ArrayTypeDefinition(pos, id, Right(index_constraint243), subtype_indication242)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 74, array_type_definition_StartIndex)
      }
    }
    return arrayTypeDef
  }

  // $ANTLR end "array_type_definition"

  // $ANTLR start "record_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:851:1: record_type_definition[Identifier id,Position pos] returns [RecordTypeDefinition recordTypeDef] : RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? ;
  @throws(classOf[RecognitionException])
  def record_type_definition(id: Identifier, pos: Position): RecordTypeDefinition = {
    var recordTypeDef: RecordTypeDefinition = null;
    val record_type_definition_StartIndex = input.index()
    var identifier_list244: Seq[Identifier] = null

    var subtype_indication245: SubTypeIndication = null

    var identifier246: Identifier = null



    val elements = new Buffer[RecordTypeDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
        return recordTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:854:3: ( RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:855:2: RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )?
      `match`(input, RECORD, FOLLOW_RECORD_in_record_type_definition4978);
      if (state.failed) return recordTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:856:2: ( identifier_list COLON subtype_indication SEMICOLON )+
      var cnt122 = 0
      var loop122 = true
      do {
        var alt122 = 2
        val LA122_0 = input.LA(1)

        if (((LA122_0 >= BASIC_IDENTIFIER && LA122_0 <= EXTENDED_IDENTIFIER))) {
          alt122 = 1
        }


        alt122 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:857:3: identifier_list COLON subtype_indication SEMICOLON
            pushFollow(FOLLOW_identifier_list_in_record_type_definition4986)
            identifier_list244 = identifier_list();

            state._fsp -= 1
            if (state.failed) return recordTypeDef
            `match`(input, COLON, FOLLOW_COLON_in_record_type_definition4988);
            if (state.failed) return recordTypeDef
            pushFollow(FOLLOW_subtype_indication_in_record_type_definition4990)
            subtype_indication245 = subtype_indication();

            state._fsp -= 1
            if (state.failed) return recordTypeDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_record_type_definition4992);
            if (state.failed) return recordTypeDef
            if (state.backtracking == 0) {
              elements += new RecordTypeDefinition.Element(identifier_list244, subtype_indication245)
            }


          case _ =>
            if (cnt122 >= 1) loop122 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return recordTypeDef
              }
              val eee = new EarlyExitException(122, input)
              throw eee
            }
        }
        cnt122 += 1
      } while (loop122);

      `match`(input, END, FOLLOW_END_in_record_type_definition5003);
      if (state.failed) return recordTypeDef
      `match`(input, RECORD, FOLLOW_RECORD_in_record_type_definition5005);
      if (state.failed) return recordTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:860:13: ( identifier )?
      var alt123 = 2
      val LA123_0 = input.LA(1)

      if (((LA123_0 >= BASIC_IDENTIFIER && LA123_0 <= EXTENDED_IDENTIFIER))) {
        alt123 = 1
      }
      alt123 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:860:13: identifier
          pushFollow(FOLLOW_identifier_in_record_type_definition5007)
          identifier246 = identifier();

          state._fsp -= 1
          if (state.failed) return recordTypeDef


        case _ =>
      }

      if (state.backtracking == 0) {
        recordTypeDef = new RecordTypeDefinition(pos, id, elements.result, identifier246)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 75, record_type_definition_StartIndex)
      }
    }
    return recordTypeDef
  }

  // $ANTLR end "record_type_definition"

  // $ANTLR start "access_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:863:1: access_type_definition[Identifier id,Position pos] returns [AccessTypeDefinition accessTypeDef] : ACCESS subtype_indication ;
  @throws(classOf[RecognitionException])
  def access_type_definition(id: Identifier, pos: Position): AccessTypeDefinition = {
    var accessTypeDef: AccessTypeDefinition = null;
    val access_type_definition_StartIndex = input.index()
    var subtype_indication247: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
        return accessTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:863:97: ( ACCESS subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:864:2: ACCESS subtype_indication
      `match`(input, ACCESS, FOLLOW_ACCESS_in_access_type_definition5025);
      if (state.failed) return accessTypeDef
      pushFollow(FOLLOW_subtype_indication_in_access_type_definition5027)
      subtype_indication247 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return accessTypeDef
      if (state.backtracking == 0) {
        accessTypeDef = new AccessTypeDefinition(pos, id, subtype_indication247)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 76, access_type_definition_StartIndex)
      }
    }
    return accessTypeDef
  }

  // $ANTLR end "access_type_definition"

  // $ANTLR start "file_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:867:1: file_type_definition[Identifier id,Position pos] returns [FileTypeDefinition fileTypeDef] : FILE OF type_mark ;
  @throws(classOf[RecognitionException])
  def file_type_definition(id: Identifier, pos: Position): FileTypeDefinition = {
    var fileTypeDef: FileTypeDefinition = null;
    val file_type_definition_StartIndex = input.index()
    var type_mark248: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 77)) {
        return fileTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:867:91: ( FILE OF type_mark )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:868:2: FILE OF type_mark
      `match`(input, FILE, FOLLOW_FILE_in_file_type_definition5046);
      if (state.failed) return fileTypeDef
      `match`(input, OF, FOLLOW_OF_in_file_type_definition5048);
      if (state.failed) return fileTypeDef
      pushFollow(FOLLOW_type_mark_in_file_type_definition5050)
      type_mark248 = type_mark();

      state._fsp -= 1
      if (state.failed) return fileTypeDef
      if (state.backtracking == 0) {
        fileTypeDef = new FileTypeDefinition(pos, id, type_mark248)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 77, file_type_definition_StartIndex)
      }
    }
    return fileTypeDef
  }

  // $ANTLR end "file_type_definition"

  // $ANTLR start "ams_scalar_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:871:1: ams_scalar_nature_definition[Identifier id,Position pos] returns [ScalarNatureDefinition natureDef] : t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE ;
  @throws(classOf[RecognitionException])
  def ams_scalar_nature_definition(id: Identifier, pos: Position): ScalarNatureDefinition = {
    var natureDef: ScalarNatureDefinition = null;
    val ams_scalar_nature_definition_StartIndex = input.index()
    var t1: SelectedName = null

    var t2: SelectedName = null

    var identifier249: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:871:101: (t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:872:2: t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE
      pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition5070)
      t1 = type_mark();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_scalar_nature_definition5072);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition5076)
      t2 = type_mark();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_scalar_nature_definition5078);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_identifier_in_ams_scalar_nature_definition5080)
      identifier249 = identifier();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, REFERENCE, FOLLOW_REFERENCE_in_ams_scalar_nature_definition5082);
      if (state.failed) return natureDef
      if (state.backtracking == 0) {
        natureDef = new ScalarNatureDefinition(pos, id, t1, t2, identifier249)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 78, ams_scalar_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_scalar_nature_definition"

  // $ANTLR start "ams_array_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:875:1: ams_array_nature_definition[Identifier id,Position pos] returns [ArrayNatureTypeDefinition natureDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication ;
  @throws(classOf[RecognitionException])
  def ams_array_nature_definition(id: Identifier, pos: Position): ArrayNatureTypeDefinition = {
    var natureDef: ArrayNatureTypeDefinition = null;
    val ams_array_nature_definition_StartIndex = input.index()
    var type1: SelectedName = null

    var type2: SelectedName = null

    var ams_subnature_indication250: SubNatureIndication = null

    var index_constraint251: Seq[DiscreteRange] = null



    val unConstraintList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:878:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:879:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication
      `match`(input, ARRAY, FOLLOW_ARRAY_in_ams_array_nature_definition5103);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:879:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
      var alt125 = 2
      alt125 = dfa125.predict(input)
      alt125 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:880:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_ams_array_nature_definition5109);
          if (state.failed) return natureDef
          pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition5113)
          type1 = index_subtype_definition();

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            unConstraintList += type1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:880:79: ( COMMA type2= index_subtype_definition )*
          var loop124 = true
          do {
            var alt124 = 2
            val LA124_0 = input.LA(1)

            if ((LA124_0 == COMMA)) {
              alt124 = 1
            }


            alt124 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:880:80: COMMA type2= index_subtype_definition
                `match`(input, COMMA, FOLLOW_COMMA_in_ams_array_nature_definition5118);
                if (state.failed) return natureDef
                pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition5122)
                type2 = index_subtype_definition();

                state._fsp -= 1
                if (state.failed) return natureDef
                if (state.backtracking == 0) {
                  unConstraintList += type2
                }


              case _ => loop124 = false
            }
          } while (loop124);

          `match`(input, RPAREN, FOLLOW_RPAREN_in_ams_array_nature_definition5128);
          if (state.failed) return natureDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:881:5: index_constraint
          pushFollow(FOLLOW_index_constraint_in_ams_array_nature_definition5134)
          index_constraint251 = index_constraint();

          state._fsp -= 1
          if (state.failed) return natureDef


        case _ =>
      }

      `match`(input, OF, FOLLOW_OF_in_ams_array_nature_definition5139);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5141)
      ams_subnature_indication250 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return natureDef
      if (state.backtracking == 0) {

        val result = unConstraintList.result
        natureDef = if (result.nonEmpty) new ArrayNatureTypeDefinition(pos, id, Left(result), ams_subnature_indication250)
        else new ArrayNatureTypeDefinition(pos, id, Right(index_constraint251), ams_subnature_indication250)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 79, ams_array_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_array_nature_definition"

  // $ANTLR start "ams_record_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:889:1: ams_record_nature_definition[Identifier id,Position pos] returns [RecordNatureDefinition natureDef] : RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? ;
  @throws(classOf[RecognitionException])
  def ams_record_nature_definition(id: Identifier, pos: Position): RecordNatureDefinition = {
    var natureDef: RecordNatureDefinition = null;
    val ams_record_nature_definition_StartIndex = input.index()
    var identifier_list252: Seq[Identifier] = null

    var ams_subnature_indication253: SubNatureIndication = null

    var identifier254: Identifier = null



    val elements = new Buffer[RecordNatureDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 80)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:892:3: ( RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:893:2: RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )?
      `match`(input, RECORD, FOLLOW_RECORD_in_ams_record_nature_definition5162);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:894:2: ( identifier_list COLON ams_subnature_indication SEMICOLON )+
      var cnt126 = 0
      var loop126 = true
      do {
        var alt126 = 2
        val LA126_0 = input.LA(1)

        if (((LA126_0 >= BASIC_IDENTIFIER && LA126_0 <= EXTENDED_IDENTIFIER))) {
          alt126 = 1
        }


        alt126 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:895:3: identifier_list COLON ams_subnature_indication SEMICOLON
            pushFollow(FOLLOW_identifier_list_in_ams_record_nature_definition5169)
            identifier_list252 = identifier_list();

            state._fsp -= 1
            if (state.failed) return natureDef
            `match`(input, COLON, FOLLOW_COLON_in_ams_record_nature_definition5171);
            if (state.failed) return natureDef
            pushFollow(FOLLOW_ams_subnature_indication_in_ams_record_nature_definition5173)
            ams_subnature_indication253 = ams_subnature_indication();

            state._fsp -= 1
            if (state.failed) return natureDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_record_nature_definition5175);
            if (state.failed) return natureDef
            if (state.backtracking == 0) {
              elements += new RecordNatureDefinition.Element(identifier_list252, ams_subnature_indication253)
            }


          case _ =>
            if (cnt126 >= 1) loop126 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return natureDef
              }
              val eee = new EarlyExitException(126, input)
              throw eee
            }
        }
        cnt126 += 1
      } while (loop126);

      `match`(input, END, FOLLOW_END_in_ams_record_nature_definition5186);
      if (state.failed) return natureDef
      `match`(input, RECORD, FOLLOW_RECORD_in_ams_record_nature_definition5188);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:898:13: ( identifier )?
      var alt127 = 2
      val LA127_0 = input.LA(1)

      if (((LA127_0 >= BASIC_IDENTIFIER && LA127_0 <= EXTENDED_IDENTIFIER))) {
        alt127 = 1
      }
      alt127 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:898:13: identifier
          pushFollow(FOLLOW_identifier_in_ams_record_nature_definition5190)
          identifier254 = identifier();

          state._fsp -= 1
          if (state.failed) return natureDef


        case _ =>
      }

      if (state.backtracking == 0) {
        natureDef = new RecordNatureDefinition(pos, id, elements.result, identifier254)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 80, ams_record_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_record_nature_definition"

  // $ANTLR start "ams_subnature_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:901:1: ams_subnature_declaration returns [SubNatureDeclaration subnatureDecl] : SUBNATURE identifier IS ams_subnature_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_subnature_declaration(): SubNatureDeclaration = {
    var subnatureDecl: SubNatureDeclaration = null;
    val ams_subnature_declaration_StartIndex = input.index()
    var SUBNATURE255: Token = null
    var identifier256: Identifier = null

    var ams_subnature_indication257: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
        return subnatureDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:901:72: ( SUBNATURE identifier IS ams_subnature_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:902:2: SUBNATURE identifier IS ams_subnature_indication SEMICOLON
      SUBNATURE255 = `match`(input, SUBNATURE, FOLLOW_SUBNATURE_in_ams_subnature_declaration5207).asInstanceOf[Token];
      if (state.failed) return subnatureDecl
      pushFollow(FOLLOW_identifier_in_ams_subnature_declaration5209)
      identifier256 = identifier();

      state._fsp -= 1
      if (state.failed) return subnatureDecl
      `match`(input, IS, FOLLOW_IS_in_ams_subnature_declaration5211);
      if (state.failed) return subnatureDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_subnature_declaration5213)
      ams_subnature_indication257 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return subnatureDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_subnature_declaration5215);
      if (state.failed) return subnatureDecl
      if (state.backtracking == 0) {
        subnatureDecl = new SubNatureDeclaration(toPosition(SUBNATURE255), identifier256, ams_subnature_indication257)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 81, ams_subnature_declaration_StartIndex)
      }
    }
    return subnatureDecl
  }

  // $ANTLR end "ams_subnature_declaration"

  // $ANTLR start "ams_subnature_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:905:1: ams_subnature_indication returns [SubNatureIndication subNature] : ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? ;
  @throws(classOf[RecognitionException])
  def ams_subnature_indication(): SubNatureIndication = {
    var subNature: SubNatureIndication = null;
    val ams_subnature_indication_StartIndex = input.index()
    var e1: Expression = null

    var e2: Expression = null

    var ams_nature_mark258: SelectedName = null

    var index_constraint259: Seq[DiscreteRange] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
        return subNature
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:905:66: ( ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:906:2: ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
      pushFollow(FOLLOW_ams_nature_mark_in_ams_subnature_indication5232)
      ams_nature_mark258 = ams_nature_mark();

      state._fsp -= 1
      if (state.failed) return subNature
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:906:18: ( index_constraint )?
      var alt128 = 2
      val LA128_0 = input.LA(1)

      if ((LA128_0 == LPAREN)) {
        alt128 = 1
      }
      alt128 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:906:18: index_constraint
          pushFollow(FOLLOW_index_constraint_in_ams_subnature_indication5234)
          index_constraint259 = index_constraint();

          state._fsp -= 1
          if (state.failed) return subNature


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:906:36: ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
      var alt129 = 2
      val LA129_0 = input.LA(1)

      if ((LA129_0 == TOLERANCE)) {
        alt129 = 1
      }
      alt129 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:906:37: TOLERANCE e1= expression ACROSS e2= expression THROUGH
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_subnature_indication5238);
          if (state.failed) return subNature
          pushFollow(FOLLOW_expression_in_ams_subnature_indication5242)
          e1 = expression();

          state._fsp -= 1
          if (state.failed) return subNature
          `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_subnature_indication5244);
          if (state.failed) return subNature
          pushFollow(FOLLOW_expression_in_ams_subnature_indication5248)
          e2 = expression();

          state._fsp -= 1
          if (state.failed) return subNature
          `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_subnature_indication5250);
          if (state.failed) return subNature


        case _ =>
      }

      if (state.backtracking == 0) {
        subNature = new SubNatureIndication(ams_nature_mark258, index_constraint259, e1, e2)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 82, ams_subnature_indication_StartIndex)
      }
    }
    return subNature
  }

  // $ANTLR end "ams_subnature_indication"

  // $ANTLR start "ams_nature_mark"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:909:1: ams_nature_mark returns [SelectedName typeName] : selected_name ;
  @throws(classOf[RecognitionException])
  def ams_nature_mark(): SelectedName = {
    var typeName: SelectedName = null;
    val ams_nature_mark_StartIndex = input.index()
    var selected_name260: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 83)) {
        return typeName
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:909:49: ( selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:910:3: selected_name
      pushFollow(FOLLOW_selected_name_in_ams_nature_mark5270)
      selected_name260 = selected_name();

      state._fsp -= 1
      if (state.failed) return typeName
      if (state.backtracking == 0) {
        typeName = selected_name260
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 83, ams_nature_mark_StartIndex)
      }
    }
    return typeName
  }

  // $ANTLR end "ams_nature_mark"

  // $ANTLR start "protected_type_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:912:1: protected_type_declaration[Identifier id,Position pos] returns [ProtectedTypeDeclaration protectedTypeDecl] : PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? ;
  @throws(classOf[RecognitionException])
  def protected_type_declaration(id: Identifier, pos: Position): ProtectedTypeDeclaration = {
    var protectedTypeDecl: ProtectedTypeDeclaration = null;
    val protected_type_declaration_StartIndex = input.index()
    var protected_type_declarative_item261: DeclarativeItem = null

    var identifier262: Identifier = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
        return protectedTypeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:915:3: ( PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:916:2: PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )?
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_declaration5292);
      if (state.failed) return protectedTypeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:917:3: ( protected_type_declarative_item )*
      var loop130 = true
      do {
        var alt130 = 2
        val LA130_0 = input.LA(1)

        if ((LA130_0 == ATTRIBUTE || LA130_0 == FUNCTION || LA130_0 == IMPURE || LA130_0 == PROCEDURE || LA130_0 == PURE || LA130_0 == USE)) {
          alt130 = 1
        }


        alt130 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:917:4: protected_type_declarative_item
            pushFollow(FOLLOW_protected_type_declarative_item_in_protected_type_declaration5297)
            protected_type_declarative_item261 = protected_type_declarative_item();

            state._fsp -= 1
            if (state.failed) return protectedTypeDecl
            if (state.backtracking == 0) {
              items += protected_type_declarative_item261
            }


          case _ => loop130 = false
        }
      } while (loop130);

      `match`(input, END, FOLLOW_END_in_protected_type_declaration5303);
      if (state.failed) return protectedTypeDecl
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_declaration5305);
      if (state.failed) return protectedTypeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:918:16: ( identifier )?
      var alt131 = 2
      val LA131_0 = input.LA(1)

      if (((LA131_0 >= BASIC_IDENTIFIER && LA131_0 <= EXTENDED_IDENTIFIER))) {
        alt131 = 1
      }
      alt131 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:918:16: identifier
          pushFollow(FOLLOW_identifier_in_protected_type_declaration5307)
          identifier262 = identifier();

          state._fsp -= 1
          if (state.failed) return protectedTypeDecl


        case _ =>
      }

      if (state.backtracking == 0) {
        protectedTypeDecl = new ProtectedTypeDeclaration(pos, id, items.result, identifier262)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 84, protected_type_declaration_StartIndex)
      }
    }
    return protectedTypeDecl
  }

  // $ANTLR end "protected_type_declaration"

  // $ANTLR start "protected_type_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:1: protected_type_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => v2008_subprogram_instantiation_declaration | attribute_specification | use_clause );
  @throws(classOf[RecognitionException])
  def protected_type_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val protected_type_declarative_item_StartIndex = input.index()
    var subprogram_declaration263: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration264: DeclarativeItem = null

    var attribute_specification265: AttributeSpecification = null

    var use_clause266: UseClause = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:64: ( subprogram_declaration | {...}? => v2008_subprogram_instantiation_declaration | attribute_specification | use_clause )
      var alt132 = 4
      input.LA(1) match {
        case PROCEDURE =>
          val LA132_1 = input.LA(2)

          if ((LA132_1 == IS) && ((vhdl2008))) {
            alt132 = 2
          }
          else if (((LA132_1 >= BASIC_IDENTIFIER && LA132_1 <= EXTENDED_IDENTIFIER))) {
            alt132 = 1
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 132, 1, input)

            throw nvae
          }
        case IMPURE | PURE =>
          alt132 = 1
        case FUNCTION =>
          val LA132_3 = input.LA(2)

          if ((LA132_3 == IS) && ((vhdl2008))) {
            alt132 = 2
          }
          else if ((LA132_3 == STRING_LITERAL || (LA132_3 >= BASIC_IDENTIFIER && LA132_3 <= EXTENDED_IDENTIFIER))) {
            alt132 = 1
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 132, 3, input)

            throw nvae
          }
        case ATTRIBUTE =>
          alt132 = 3
        case USE =>
          alt132 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return item
          }
          val nvae = new NoViableAltException("", 132, 0, input)

          throw nvae
      }

      alt132 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:922:2: subprogram_declaration
          pushFollow(FOLLOW_subprogram_declaration_in_protected_type_declarative_item5326)
          subprogram_declaration263 = subprogram_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declaration263
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:923:4: {...}? => v2008_subprogram_instantiation_declaration
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "protected_type_declarative_item", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_declarative_item5335)
          v2008_subprogram_instantiation_declaration264 = v2008_subprogram_instantiation_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = v2008_subprogram_instantiation_declaration264
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:924:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_protected_type_declarative_item5342)
          attribute_specification265 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification265
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:925:4: use_clause
          pushFollow(FOLLOW_use_clause_in_protected_type_declarative_item5349)
          use_clause266 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause266
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 85, protected_type_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "protected_type_declarative_item"

  // $ANTLR start "protected_type_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:927:1: protected_type_body[Identifier id,Position pos] returns [ProtectedTypeBodyDeclaration protectedTypeBody] : PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? ;
  @throws(classOf[RecognitionException])
  def protected_type_body(id: Identifier, pos: Position): ProtectedTypeBodyDeclaration = {
    var protectedTypeBody: ProtectedTypeBodyDeclaration = null;
    val protected_type_body_StartIndex = input.index()
    var protected_type_body_declarative_item267: DeclarativeItem = null

    var identifier268: Identifier = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
        return protectedTypeBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:930:3: ( PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:931:2: PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )?
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_body5369);
      if (state.failed) return protectedTypeBody
      `match`(input, BODY, FOLLOW_BODY_in_protected_type_body5371);
      if (state.failed) return protectedTypeBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:932:3: ( protected_type_body_declarative_item )*
      var loop133 = true
      do {
        var alt133 = 2
        val LA133_0 = input.LA(1)

        if ((LA133_0 == FUNCTION || LA133_0 == IMPURE || LA133_0 == PROCEDURE || LA133_0 == PURE)) {
          alt133 = 1
        }
        else if ((LA133_0 == PACKAGE) && ((vhdl2008))) {
          alt133 = 1
        }
        else if ((LA133_0 == ALIAS || LA133_0 == ATTRIBUTE || LA133_0 == CONSTANT || LA133_0 == FILE || LA133_0 == GROUP || LA133_0 == SHARED || LA133_0 == SUBTYPE || LA133_0 == TYPE || (LA133_0 >= USE && LA133_0 <= VARIABLE))) {
          alt133 = 1
        }


        alt133 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:932:4: protected_type_body_declarative_item
            pushFollow(FOLLOW_protected_type_body_declarative_item_in_protected_type_body5376)
            protected_type_body_declarative_item267 = protected_type_body_declarative_item();

            state._fsp -= 1
            if (state.failed) return protectedTypeBody
            if (state.backtracking == 0) {
              items += protected_type_body_declarative_item267
            }


          case _ => loop133 = false
        }
      } while (loop133);

      `match`(input, END, FOLLOW_END_in_protected_type_body5382);
      if (state.failed) return protectedTypeBody
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_body5384);
      if (state.failed) return protectedTypeBody
      `match`(input, BODY, FOLLOW_BODY_in_protected_type_body5386);
      if (state.failed) return protectedTypeBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:933:21: ( identifier )?
      var alt134 = 2
      val LA134_0 = input.LA(1)

      if (((LA134_0 >= BASIC_IDENTIFIER && LA134_0 <= EXTENDED_IDENTIFIER))) {
        alt134 = 1
      }
      alt134 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:933:21: identifier
          pushFollow(FOLLOW_identifier_in_protected_type_body5388)
          identifier268 = identifier();

          state._fsp -= 1
          if (state.failed) return protectedTypeBody


        case _ =>
      }

      if (state.backtracking == 0) {
        protectedTypeBody = new ProtectedTypeBodyDeclaration(pos, id, items.result, identifier268)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 86, protected_type_body_StartIndex)
      }
    }
    return protectedTypeBody
  }

  // $ANTLR end "protected_type_body"

  // $ANTLR start "protected_type_body_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:936:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def protected_type_body_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val protected_type_body_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body269: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration270: DeclarativeItem = null

    var package_declaration271: PackageDeclaration = null

    var package_body272: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration273: DeclarativeItem = null

    var type_declaration274: AbstractTypeDeclaration = null

    var subtype_declaration275: SubTypeDeclaration = null

    var constant_declaration276: ConstantDeclaration = null

    var variable_declaration277: VariableDeclaration = null

    var file_declaration278: FileDeclaration = null

    var alias_declaration279: AliasDeclaration = null

    var attribute_declaration280: AttributeDeclaration = null

    var attribute_specification281: AttributeSpecification = null

    var use_clause282: UseClause = null

    var group_template_declaration283: GroupTemplateDeclaration = null

    var group_declaration284: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 87)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:936:69: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt136 = 13
      alt136 = dfa136.predict(input)
      alt136 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:937:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5407)
          subprogram_declartion_or_body269 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body269
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:938:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "protected_type_body_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:938:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt135 = 4
          val LA135_0 = input.LA(1)

          if ((LA135_0 == FUNCTION || LA135_0 == PROCEDURE)) {
            alt135 = 1
          }
          else if ((LA135_0 == PACKAGE)) {
            val LA135_2 = input.LA(2)

            if ((LA135_2 == BODY)) {
              alt135 = 3
            }
            else if (((LA135_2 >= BASIC_IDENTIFIER && LA135_2 <= EXTENDED_IDENTIFIER))) {
              val LA135_4 = input.LA(3)

              if ((LA135_4 == IS)) {
                val LA135_5 = input.LA(4)

                if ((LA135_5 == NEW)) {
                  alt135 = 4
                }
                else if ((LA135_5 == ALIAS || LA135_5 == ATTRIBUTE || LA135_5 == COMPONENT || (LA135_5 >= CONSTANT && LA135_5 <= DISCONNECT) || LA135_5 == END || LA135_5 == FILE || LA135_5 == FUNCTION || (LA135_5 >= GENERIC && LA135_5 <= GROUP) || LA135_5 == IMPURE || LA135_5 == PACKAGE || LA135_5 == PROCEDURE || LA135_5 == PURE || (LA135_5 >= SHARED && LA135_5 <= SIGNAL) || LA135_5 == SUBTYPE || LA135_5 == TYPE || (LA135_5 >= USE && LA135_5 <= VARIABLE) || (LA135_5 >= NATURE && LA135_5 <= TERMINAL) || LA135_5 == SUBNATURE)) {
                  alt135 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 135, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 135, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 135, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 135, 0, input)

            throw nvae
          }
          alt135 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:938:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_protected_type_body_declarative_item5417)
              v2008_subprogram_instantiation_declaration270 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration270
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:939:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_protected_type_body_declarative_item5426)
              package_declaration271 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration271
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:940:6: package_body
              pushFollow(FOLLOW_package_body_in_protected_type_body_declarative_item5435)
              package_body272 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body272
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:941:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_protected_type_body_declarative_item5444)
              v2008_package_instantiation_declaration273 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration273
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:943:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_protected_type_body_declarative_item5456)
          type_declaration274 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration274
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:944:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5463)
          subtype_declaration275 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration275
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:945:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_protected_type_body_declarative_item5470)
          constant_declaration276 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration276
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:946:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_protected_type_body_declarative_item5477)
          variable_declaration277 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration277
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:947:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_protected_type_body_declarative_item5483)
          file_declaration278 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration278
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:948:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_protected_type_body_declarative_item5490)
          alias_declaration279 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration279
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:949:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5497)
          attribute_declaration280 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration280
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:950:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_protected_type_body_declarative_item5504)
          attribute_specification281 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification281
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:951:4: use_clause
          pushFollow(FOLLOW_use_clause_in_protected_type_body_declarative_item5511)
          use_clause282 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause282
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:952:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5518)
          group_template_declaration283 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration283
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:953:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_protected_type_body_declarative_item5525)
          group_declaration284 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration284
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 87, protected_type_body_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "protected_type_body_declarative_item"

  // $ANTLR start "subtype_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:955:1: subtype_declaration returns [SubTypeDeclaration subTypeDecl] : SUBTYPE identifier IS subtype_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subtype_declaration(): SubTypeDeclaration = {
    var subTypeDecl: SubTypeDeclaration = null;
    val subtype_declaration_StartIndex = input.index()
    var SUBTYPE285: Token = null
    var identifier286: Identifier = null

    var subtype_indication287: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 88)) {
        return subTypeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:955:62: ( SUBTYPE identifier IS subtype_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:956:2: SUBTYPE identifier IS subtype_indication SEMICOLON
      SUBTYPE285 = `match`(input, SUBTYPE, FOLLOW_SUBTYPE_in_subtype_declaration5542).asInstanceOf[Token];
      if (state.failed) return subTypeDecl
      pushFollow(FOLLOW_identifier_in_subtype_declaration5544)
      identifier286 = identifier();

      state._fsp -= 1
      if (state.failed) return subTypeDecl
      `match`(input, IS, FOLLOW_IS_in_subtype_declaration5546);
      if (state.failed) return subTypeDecl
      pushFollow(FOLLOW_subtype_indication_in_subtype_declaration5548)
      subtype_indication287 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return subTypeDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subtype_declaration5550);
      if (state.failed) return subTypeDecl
      if (state.backtracking == 0) {
        subTypeDecl = new SubTypeDeclaration(toPosition(SUBTYPE285), identifier286, subtype_indication287)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 88, subtype_declaration_StartIndex)
      }
    }
    return subTypeDecl
  }

  // $ANTLR end "subtype_declaration"

  // $ANTLR start "subtype_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:959:1: subtype_indication returns [SubTypeIndication subType] : ({...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )? | n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )? );
  @throws(classOf[RecognitionException])
  def subtype_indication(): SubTypeIndication = {
    var subType: SubTypeIndication = null;
    val subtype_indication_StartIndex = input.index()
    var n1: SelectedName = null

    var n2: SelectedName = null

    var selected_name288: SelectedName = null

    var v2008_constraint289: Either[Range, Seq[DiscreteRange]] = null

    var expression290: Expression = null

    var constraint291: Either[Range, Seq[DiscreteRange]] = null

    var expression292: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 89)) {
        return subType
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:959:56: ({...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )? | n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )? )
      var alt143 = 2
      val LA143_0 = input.LA(1)

      if (((LA143_0 >= BASIC_IDENTIFIER && LA143_0 <= EXTENDED_IDENTIFIER))) {
        val LA143_1 = input.LA(2)

        if (((vhdl2008))) {
          alt143 = 1
        }
        else if ((true)) {
          alt143 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return subType
          }
          val nvae = new NoViableAltException("", 143, 1, input)

          throw nvae
        }
      }
      else if ((LA143_0 == STRING_LITERAL)) {
        val LA143_2 = input.LA(2)

        if (((vhdl2008))) {
          alt143 = 1
        }
        else if ((true)) {
          alt143 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return subType
          }
          val nvae = new NoViableAltException("", 143, 2, input)

          throw nvae
        }
      }
      else if ((LA143_0 == LPAREN) && ((vhdl2008))) {
        alt143 = 1
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return subType
        }
        val nvae = new NoViableAltException("", 143, 0, input)

        throw nvae
      }
      alt143 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:2: {...}? => ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )? selected_name ( v2008_constraint )? ({...}? => TOLERANCE expression )?
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return subType
            }
            throw new FailedPredicateException(input, "subtype_indication", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:15: ( ( v2008_resolution_indication selected_name )=> v2008_resolution_indication )?
          var alt137 = 2
          val LA137_0 = input.LA(1)

          if (((LA137_0 >= BASIC_IDENTIFIER && LA137_0 <= EXTENDED_IDENTIFIER))) {
            val LA137_1 = input.LA(2)

            if ((synpred7_VHDL())) {
              alt137 = 1
            }
          }
          else if ((LA137_0 == STRING_LITERAL)) {
            val LA137_2 = input.LA(2)

            if ((synpred7_VHDL())) {
              alt137 = 1
            }
          }
          else if ((LA137_0 == LPAREN) && (synpred7_VHDL())) {
            alt137 = 1
          }
          alt137 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:16: ( v2008_resolution_indication selected_name )=> v2008_resolution_indication
              pushFollow(FOLLOW_v2008_resolution_indication_in_subtype_indication5576)
              v2008_resolution_indication();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          pushFollow(FOLLOW_selected_name_in_subtype_indication5580)
          selected_name288 = selected_name();

          state._fsp -= 1
          if (state.failed) return subType
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:105: ( v2008_constraint )?
          var alt138 = 2
          val LA138_0 = input.LA(1)

          if ((LA138_0 == RANGE || LA138_0 == LPAREN || (LA138_0 >= BASIC_IDENTIFIER && LA138_0 <= EXTENDED_IDENTIFIER))) {
            alt138 = 1
          }
          alt138 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:105: v2008_constraint
              pushFollow(FOLLOW_v2008_constraint_in_subtype_indication5582)
              v2008_constraint289 = v2008_constraint();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:123: ({...}? => TOLERANCE expression )?
          var alt139 = 2
          val LA139_0 = input.LA(1)

          if ((LA139_0 == TOLERANCE) && ((ams))) {
            alt139 = 1
          }
          alt139 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:124: {...}? => TOLERANCE expression
              if (!((ams))) {
                if (state.backtracking > 0) {
                  state.failed = true; return subType
                }
                throw new FailedPredicateException(input, "subtype_indication", "ams")
              }
              `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_subtype_indication5589);
              if (state.failed) return subType
              pushFollow(FOLLOW_expression_in_subtype_indication5591)
              expression290 = expression();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          if (state.backtracking == 0) {
            subType = new SubTypeIndication(None, selected_name288, v2008_constraint289, expression290)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:4: n1= selected_name (n2= selected_name )? ( constraint )? ({...}? => TOLERANCE expression )?
          pushFollow(FOLLOW_selected_name_in_subtype_indication5604)
          n1 = selected_name();

          state._fsp -= 1
          if (state.failed) return subType
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:23: (n2= selected_name )?
          var alt140 = 2
          val LA140_0 = input.LA(1)

          if ((LA140_0 == STRING_LITERAL || (LA140_0 >= BASIC_IDENTIFIER && LA140_0 <= EXTENDED_IDENTIFIER))) {
            alt140 = 1
          }
          alt140 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:23: n2= selected_name
              pushFollow(FOLLOW_selected_name_in_subtype_indication5608)
              n2 = selected_name();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:39: ( constraint )?
          var alt141 = 2
          val LA141_0 = input.LA(1)

          if ((LA141_0 == RANGE || LA141_0 == LPAREN)) {
            alt141 = 1
          }
          alt141 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:39: constraint
              pushFollow(FOLLOW_constraint_in_subtype_indication5611)
              constraint291 = constraint();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:51: ({...}? => TOLERANCE expression )?
          var alt142 = 2
          val LA142_0 = input.LA(1)

          if ((LA142_0 == TOLERANCE) && ((ams))) {
            alt142 = 1
          }
          alt142 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:52: {...}? => TOLERANCE expression
              if (!((ams))) {
                if (state.backtracking > 0) {
                  state.failed = true; return subType
                }
                throw new FailedPredicateException(input, "subtype_indication", "ams")
              }
              `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_subtype_indication5618);
              if (state.failed) return subType
              pushFollow(FOLLOW_expression_in_subtype_indication5620)
              expression292 = expression();

              state._fsp -= 1
              if (state.failed) return subType


            case _ =>
          }

          if (state.backtracking == 0) {

            subType = if (n2 != null) new SubTypeIndication(n1, n2, constraint291, expression292)
            else new SubTypeIndication(None, n1, constraint291, expression292)

          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 89, subtype_indication_StartIndex)
      }
    }
    return subType
  }

  // $ANTLR end "subtype_indication"

  // $ANTLR start "v2008_resolution_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:968:1: v2008_resolution_indication : ( selected_name | LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN );
  @throws(classOf[RecognitionException])
  def v2008_resolution_indication(): Unit = {
    val v2008_resolution_indication_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 90)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:968:29: ( selected_name | LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN )
      var alt146 = 2
      val LA146_0 = input.LA(1)

      if ((LA146_0 == STRING_LITERAL || (LA146_0 >= BASIC_IDENTIFIER && LA146_0 <= EXTENDED_IDENTIFIER))) {
        alt146 = 1
      }
      else if ((LA146_0 == LPAREN)) {
        alt146 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return
        }
        val nvae = new NoViableAltException("", 146, 0, input)

        throw nvae
      }
      alt146 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:969:2: selected_name
          pushFollow(FOLLOW_selected_name_in_v2008_resolution_indication5636)
          selected_name();

          state._fsp -= 1
          if (state.failed) return

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:4: LPAREN ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* ) RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_v2008_resolution_indication5642);
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:11: ( v2008_resolution_indication | identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )* )
          var alt145 = 2
          val LA145_0 = input.LA(1)

          if (((LA145_0 >= BASIC_IDENTIFIER && LA145_0 <= EXTENDED_IDENTIFIER))) {
            val LA145_1 = input.LA(2)

            if ((LA145_1 == RPAREN || LA145_1 == DOT)) {
              alt145 = 1
            }
            else if ((LA145_1 == LPAREN || LA145_1 == STRING_LITERAL || (LA145_1 >= BASIC_IDENTIFIER && LA145_1 <= EXTENDED_IDENTIFIER))) {
              alt145 = 2
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return
              }
              val nvae = new NoViableAltException("", 145, 1, input)

              throw nvae
            }
          }
          else if ((LA145_0 == LPAREN || LA145_0 == STRING_LITERAL)) {
            alt145 = 1
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return
            }
            val nvae = new NoViableAltException("", 145, 0, input)

            throw nvae
          }
          alt145 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:12: v2008_resolution_indication
              pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5645)
              v2008_resolution_indication();

              state._fsp -= 1
              if (state.failed) return

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:42: identifier v2008_resolution_indication ( COMMA identifier v2008_resolution_indication )*
              pushFollow(FOLLOW_identifier_in_v2008_resolution_indication5649)
              identifier();

              state._fsp -= 1
              if (state.failed) return
              pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5651)
              v2008_resolution_indication();

              state._fsp -= 1
              if (state.failed) return
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:81: ( COMMA identifier v2008_resolution_indication )*
              var loop144 = true
              do {
                var alt144 = 2
                val LA144_0 = input.LA(1)

                if ((LA144_0 == COMMA)) {
                  alt144 = 1
                }


                alt144 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:970:82: COMMA identifier v2008_resolution_indication
                    `match`(input, COMMA, FOLLOW_COMMA_in_v2008_resolution_indication5654);
                    if (state.failed) return
                    pushFollow(FOLLOW_identifier_in_v2008_resolution_indication5656)
                    identifier();

                    state._fsp -= 1
                    if (state.failed) return
                    pushFollow(FOLLOW_v2008_resolution_indication_in_v2008_resolution_indication5658)
                    v2008_resolution_indication();

                    state._fsp -= 1
                    if (state.failed) return


                  case _ => loop144 = false
                }
              } while (loop144);


            case _ =>
          }

          `match`(input, RPAREN, FOLLOW_RPAREN_in_v2008_resolution_indication5663);
          if (state.failed) return


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 90, v2008_resolution_indication_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_resolution_indication"

  // $ANTLR start "direction"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:972:1: direction returns [Range.Direction.Value rangeDirection] : ( TO | DOWNTO );
  @throws(classOf[RecognitionException])
  def direction(): Range.Direction.Value = {
    var rangeDirection: Range.Direction.Value = null;
    val direction_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
        return rangeDirection
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:972:58: ( TO | DOWNTO )
      var alt147 = 2
      val LA147_0 = input.LA(1)

      if ((LA147_0 == TO)) {
        alt147 = 1
      }
      else if ((LA147_0 == DOWNTO)) {
        alt147 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return rangeDirection
        }
        val nvae = new NoViableAltException("", 147, 0, input)

        throw nvae
      }
      alt147 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:2: TO
          `match`(input, TO, FOLLOW_TO_in_direction5676);
          if (state.failed) return rangeDirection
          if (state.backtracking == 0) {
            rangeDirection = Range.Direction.To
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:974:4: DOWNTO
          `match`(input, DOWNTO, FOLLOW_DOWNTO_in_direction5683);
          if (state.failed) return rangeDirection
          if (state.backtracking == 0) {
            rangeDirection = Range.Direction.Downto
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 91, direction_StartIndex)
      }
    }
    return rangeDirection
  }

  // $ANTLR end "direction"

  // $ANTLR start "range_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:976:1: range_constraint returns [Range rangeContraint] : RANGE range ;
  @throws(classOf[RecognitionException])
  def range_constraint(): Range = {
    var rangeContraint: Range = null;
    val range_constraint_StartIndex = input.index()
    var range293: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
        return rangeContraint
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:976:49: ( RANGE range )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:977:2: RANGE range
      `match`(input, RANGE, FOLLOW_RANGE_in_range_constraint5698);
      if (state.failed) return rangeContraint
      pushFollow(FOLLOW_range_in_range_constraint5700)
      range293 = range();

      state._fsp -= 1
      if (state.failed) return rangeContraint
      if (state.backtracking == 0) {
        rangeContraint = range293
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 92, range_constraint_StartIndex)
      }
    }
    return rangeContraint
  }

  // $ANTLR end "range_constraint"

  // $ANTLR start "index_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:979:1: index_constraint returns [Seq[DiscreteRange] ranges] : LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN ;
  @throws(classOf[RecognitionException])
  def index_constraint(): Seq[DiscreteRange] = {
    var ranges: Seq[DiscreteRange] = null;
    val index_constraint_StartIndex = input.index()
    var d1: DiscreteRange = null

    var d2: DiscreteRange = null



    val list = new Buffer[DiscreteRange]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
        return ranges
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:982:3: ( LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:983:2: LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_index_constraint5719);
      if (state.failed) return ranges
      pushFollow(FOLLOW_discrete_range_in_index_constraint5723)
      d1 = discrete_range();

      state._fsp -= 1
      if (state.failed) return ranges
      if (state.backtracking == 0) {
        list += d1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:983:39: ( COMMA d2= discrete_range )*
      var loop148 = true
      do {
        var alt148 = 2
        val LA148_0 = input.LA(1)

        if ((LA148_0 == COMMA)) {
          alt148 = 1
        }


        alt148 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:983:40: COMMA d2= discrete_range
            `match`(input, COMMA, FOLLOW_COMMA_in_index_constraint5727);
            if (state.failed) return ranges
            pushFollow(FOLLOW_discrete_range_in_index_constraint5732)
            d2 = discrete_range();

            state._fsp -= 1
            if (state.failed) return ranges
            if (state.backtracking == 0) {
              list += d2
            }


          case _ => loop148 = false
        }
      } while (loop148);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_index_constraint5738);
      if (state.failed) return ranges
      if (state.backtracking == 0) {
        ranges = list.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 93, index_constraint_StartIndex)
      }
    }
    return ranges
  }

  // $ANTLR end "index_constraint"

  // $ANTLR start "range"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:986:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );
  @throws(classOf[RecognitionException])
  def range(): Range = {
    var range_ : Range = null;
    val range_StartIndex = input.index()
    var from: Expression = null

    var to: Expression = null

    var direction294: Range.Direction.Value = null

    var name295: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
        return range_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:986:30: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )
      var alt149 = 2
      alt149 = dfa149.predict(input)
      alt149 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:987:2: ( simple_expression direction )=>from= simple_expression direction to= simple_expression
          pushFollow(FOLLOW_simple_expression_in_range5765)
          from = simple_expression();

          state._fsp -= 1
          if (state.failed) return range_
          pushFollow(FOLLOW_direction_in_range5767)
          direction294 = direction();

          state._fsp -= 1
          if (state.failed) return range_
          pushFollow(FOLLOW_simple_expression_in_range5771)
          to = simple_expression();

          state._fsp -= 1
          if (state.failed) return range_
          if (state.backtracking == 0) {
            range_ = new Range(Left(from, direction294, to))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:988:4: name
          pushFollow(FOLLOW_name_in_range5778)
          name295 = name();

          state._fsp -= 1
          if (state.failed) return range_
          if (state.backtracking == 0) {
            range_ = new Range(Right(name295))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 94, range_StartIndex)
      }
    }
    return range_
  }

  // $ANTLR end "range"

  // $ANTLR start "v2008_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:990:1: v2008_constraint returns [Either[Range,Seq[DiscreteRange]] constraint] : ( array_constraint | v2008_record_constraint | range_constraint );
  @throws(classOf[RecognitionException])
  def v2008_constraint(): Either[Range, Seq[DiscreteRange]] = {
    var constraint: Either[Range, Seq[DiscreteRange]] = null;
    val v2008_constraint_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
        return constraint
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:990:74: ( array_constraint | v2008_record_constraint | range_constraint )
      var alt150 = 3
      input.LA(1) match {
        case LPAREN =>
          alt150 = 1
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt150 = 2
        case RANGE =>
          alt150 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return constraint
          }
          val nvae = new NoViableAltException("", 150, 0, input)

          throw nvae
      }

      alt150 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:991:2: array_constraint
          pushFollow(FOLLOW_array_constraint_in_v2008_constraint5794)
          array_constraint();

          state._fsp -= 1
          if (state.failed) return constraint

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:992:4: v2008_record_constraint
          pushFollow(FOLLOW_v2008_record_constraint_in_v2008_constraint5799)
          v2008_record_constraint();

          state._fsp -= 1
          if (state.failed) return constraint

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:993:4: range_constraint
          pushFollow(FOLLOW_range_constraint_in_v2008_constraint5804)
          range_constraint();

          state._fsp -= 1
          if (state.failed) return constraint


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 95, v2008_constraint_StartIndex)
      }
    }
    return constraint
  }

  // $ANTLR end "v2008_constraint"

  // $ANTLR start "constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:995:1: constraint returns [Either[Range,Seq[DiscreteRange]] constraint_] : ( index_constraint | range_constraint );
  @throws(classOf[RecognitionException])
  def constraint(): Either[Range, Seq[DiscreteRange]] = {
    var constraint_ : Either[Range, Seq[DiscreteRange]] = null;
    val constraint_StartIndex = input.index()
    var index_constraint296: Seq[DiscreteRange] = null

    var range_constraint297: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 96)) {
        return constraint_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:995:69: ( index_constraint | range_constraint )
      var alt151 = 2
      val LA151_0 = input.LA(1)

      if ((LA151_0 == LPAREN)) {
        alt151 = 1
      }
      else if ((LA151_0 == RANGE)) {
        alt151 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return constraint_
        }
        val nvae = new NoViableAltException("", 151, 0, input)

        throw nvae
      }
      alt151 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:996:2: index_constraint
          pushFollow(FOLLOW_index_constraint_in_constraint5819)
          index_constraint296 = index_constraint();

          state._fsp -= 1
          if (state.failed) return constraint_
          if (state.backtracking == 0) {
            constraint_ = Right(index_constraint296)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:997:4: range_constraint
          pushFollow(FOLLOW_range_constraint_in_constraint5826)
          range_constraint297 = range_constraint();

          state._fsp -= 1
          if (state.failed) return constraint_
          if (state.backtracking == 0) {
            constraint_ = Left(range_constraint297)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 96, constraint_StartIndex)
      }
    }
    return constraint_
  }

  // $ANTLR end "constraint"

  // $ANTLR start "array_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:999:1: array_constraint : ( index_constraint ( array_constraint | v2008_record_constraint )? | LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )? );
  @throws(classOf[RecognitionException])
  def array_constraint(): Unit = {
    val array_constraint_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 97)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:999:18: ( index_constraint ( array_constraint | v2008_record_constraint )? | LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )? )
      var alt154 = 2
      val LA154_0 = input.LA(1)

      if ((LA154_0 == LPAREN)) {
        val LA154_1 = input.LA(2)

        if ((LA154_1 == OPEN)) {
          alt154 = 2
        }
        else if ((LA154_1 == ABS || LA154_1 == AND || (LA154_1 >= NAND && LA154_1 <= NEW) || (LA154_1 >= NOR && LA154_1 <= NULL) || LA154_1 == OR || (LA154_1 >= XNOR && LA154_1 <= XOR) || LA154_1 == LPAREN || (LA154_1 >= PLUS && LA154_1 <= MINUS) || LA154_1 == STRING_LITERAL || LA154_1 == CHARACTER_LITERAL || (LA154_1 >= REAL_LITERAL && LA154_1 <= EXTENDED_IDENTIFIER) || LA154_1 == 181)) {
          alt154 = 1
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          val nvae = new NoViableAltException("", 154, 1, input)

          throw nvae
        }
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return
        }
        val nvae = new NoViableAltException("", 154, 0, input)

        throw nvae
      }
      alt154 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1000:2: index_constraint ( array_constraint | v2008_record_constraint )?
          pushFollow(FOLLOW_index_constraint_in_array_constraint5838)
          index_constraint();

          state._fsp -= 1
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1000:19: ( array_constraint | v2008_record_constraint )?
          var alt152 = 3
          val LA152_0 = input.LA(1)

          if ((LA152_0 == LPAREN)) {
            alt152 = 1
          }
          else if (((LA152_0 >= BASIC_IDENTIFIER && LA152_0 <= EXTENDED_IDENTIFIER))) {
            alt152 = 2
          }
          alt152 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1000:21: array_constraint
              pushFollow(FOLLOW_array_constraint_in_array_constraint5842)
              array_constraint();

              state._fsp -= 1
              if (state.failed) return

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1000:40: v2008_record_constraint
              pushFollow(FOLLOW_v2008_record_constraint_in_array_constraint5846)
              v2008_record_constraint();

              state._fsp -= 1
              if (state.failed) return


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1001:4: LPAREN OPEN RPAREN ( array_constraint | v2008_record_constraint )?
          `match`(input, LPAREN, FOLLOW_LPAREN_in_array_constraint5854);
          if (state.failed) return
          `match`(input, OPEN, FOLLOW_OPEN_in_array_constraint5856);
          if (state.failed) return
          `match`(input, RPAREN, FOLLOW_RPAREN_in_array_constraint5858);
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1001:23: ( array_constraint | v2008_record_constraint )?
          var alt153 = 3
          val LA153_0 = input.LA(1)

          if ((LA153_0 == LPAREN)) {
            alt153 = 1
          }
          else if (((LA153_0 >= BASIC_IDENTIFIER && LA153_0 <= EXTENDED_IDENTIFIER))) {
            alt153 = 2
          }
          alt153 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1001:25: array_constraint
              pushFollow(FOLLOW_array_constraint_in_array_constraint5862)
              array_constraint();

              state._fsp -= 1
              if (state.failed) return

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1001:44: v2008_record_constraint
              pushFollow(FOLLOW_v2008_record_constraint_in_array_constraint5866)
              v2008_record_constraint();

              state._fsp -= 1
              if (state.failed) return


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 97, array_constraint_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "array_constraint"

  // $ANTLR start "v2008_record_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1003:1: v2008_record_constraint : ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) ) ;
  @throws(classOf[RecognitionException])
  def v2008_record_constraint(): Unit = {
    val v2008_record_constraint_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1003:25: ( ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:2: ( identifier ( array_constraint | v2008_record_constraint ) ) ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:2: ( identifier ( array_constraint | v2008_record_constraint ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:3: identifier ( array_constraint | v2008_record_constraint )
      pushFollow(FOLLOW_identifier_in_v2008_record_constraint5879)
      identifier();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:14: ( array_constraint | v2008_record_constraint )
      var alt155 = 2
      val LA155_0 = input.LA(1)

      if ((LA155_0 == LPAREN)) {
        alt155 = 1
      }
      else if (((LA155_0 >= BASIC_IDENTIFIER && LA155_0 <= EXTENDED_IDENTIFIER))) {
        alt155 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return
        }
        val nvae = new NoViableAltException("", 155, 0, input)

        throw nvae
      }
      alt155 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:15: array_constraint
          pushFollow(FOLLOW_array_constraint_in_v2008_record_constraint5882)
          array_constraint();

          state._fsp -= 1
          if (state.failed) return

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:34: v2008_record_constraint
          pushFollow(FOLLOW_v2008_record_constraint_in_v2008_record_constraint5886)
          v2008_record_constraint();

          state._fsp -= 1
          if (state.failed) return


        case _ =>
      }




      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:62: ( COMMA ( identifier ( array_constraint | v2008_record_constraint ) ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:63: COMMA ( identifier ( array_constraint | v2008_record_constraint ) )
      `match`(input, COMMA, FOLLOW_COMMA_in_v2008_record_constraint5893);
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:69: ( identifier ( array_constraint | v2008_record_constraint ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:70: identifier ( array_constraint | v2008_record_constraint )
      pushFollow(FOLLOW_identifier_in_v2008_record_constraint5896)
      identifier();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:81: ( array_constraint | v2008_record_constraint )
      var alt156 = 2
      val LA156_0 = input.LA(1)

      if ((LA156_0 == LPAREN)) {
        alt156 = 1
      }
      else if (((LA156_0 >= BASIC_IDENTIFIER && LA156_0 <= EXTENDED_IDENTIFIER))) {
        alt156 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return
        }
        val nvae = new NoViableAltException("", 156, 0, input)

        throw nvae
      }
      alt156 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:82: array_constraint
          pushFollow(FOLLOW_array_constraint_in_v2008_record_constraint5899)
          array_constraint();

          state._fsp -= 1
          if (state.failed) return

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1004:101: v2008_record_constraint
          pushFollow(FOLLOW_v2008_record_constraint_in_v2008_record_constraint5903)
          v2008_record_constraint();

          state._fsp -= 1
          if (state.failed) return


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 98, v2008_record_constraint_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_record_constraint"

  // $ANTLR start "discrete_range"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1006:1: discrete_range returns [DiscreteRange discreteRange] : ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range );
  @throws(classOf[RecognitionException])
  def discrete_range(): DiscreteRange = {
    var discreteRange: DiscreteRange = null;
    val discrete_range_StartIndex = input.index()
    var subtype_indication298: SubTypeIndication = null

    var range299: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
        return discreteRange
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1006:54: ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range )
      var alt157 = 2
      alt157 = dfa157.predict(input)
      alt157 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1007:2: ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication
          pushFollow(FOLLOW_subtype_indication_in_discrete_range5954)
          subtype_indication298 = subtype_indication();

          state._fsp -= 1
          if (state.failed) return discreteRange
          if (state.backtracking == 0) {
            discreteRange = new DiscreteRange(Right(subtype_indication298))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1008:4: range
          pushFollow(FOLLOW_range_in_discrete_range5961)
          range299 = range();

          state._fsp -= 1
          if (state.failed) return discreteRange
          if (state.backtracking == 0) {
            discreteRange = new DiscreteRange(Left(range299))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 99, discrete_range_StartIndex)
      }
    }
    return discreteRange
  }

  // $ANTLR end "discrete_range"

  // $ANTLR start "type_mark"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1010:1: type_mark returns [SelectedName typeName] : selected_name ;
  @throws(classOf[RecognitionException])
  def type_mark(): SelectedName = {
    var typeName: SelectedName = null;
    val type_mark_StartIndex = input.index()
    var selected_name300: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
        return typeName
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1010:43: ( selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1011:2: selected_name
      pushFollow(FOLLOW_selected_name_in_type_mark5978)
      selected_name300 = selected_name();

      state._fsp -= 1
      if (state.failed) return typeName
      if (state.backtracking == 0) {
        typeName = selected_name300
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 100, type_mark_StartIndex)
      }
    }
    return typeName
  }

  // $ANTLR end "type_mark"

  // $ANTLR start "concurrent_statement_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1015:1: concurrent_statement_list returns [Seq[ConcurrentStatement] list] : ( concurrent_statement )* ;
  @throws(classOf[RecognitionException])
  def concurrent_statement_list(): Seq[ConcurrentStatement] = {
    var list: Seq[ConcurrentStatement] = null;
    val concurrent_statement_list_StartIndex = input.index()
    var concurrent_statement301: ConcurrentStatement = null



    val statementList = new Buffer[ConcurrentStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1018:3: ( ( concurrent_statement )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1019:2: ( concurrent_statement )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1019:2: ( concurrent_statement )*
      var loop158 = true
      do {
        var alt158 = 2
        val LA158_0 = input.LA(1)

        if (((LA158_0 >= BASIC_IDENTIFIER && LA158_0 <= EXTENDED_IDENTIFIER))) {
          alt158 = 1
        }
        else if ((LA158_0 == BREAK) && ((ams))) {
          alt158 = 1
        }
        else if (((LA158_0 >= PLUS && LA158_0 <= MINUS) || LA158_0 == STRING_LITERAL)) {
          alt158 = 1
        }
        else if ((LA158_0 == 181) && ((vhdl2008))) {
          alt158 = 1
        }
        else if ((LA158_0 == ABS || LA158_0 == NEW || (LA158_0 >= NOT && LA158_0 <= NULL) || LA158_0 == LPAREN || LA158_0 == CHARACTER_LITERAL || (LA158_0 >= REAL_LITERAL && LA158_0 <= BIT_STRING_LITERAL))) {
          alt158 = 1
        }
        else if ((LA158_0 == AND || LA158_0 == NAND || LA158_0 == NOR || LA158_0 == OR || (LA158_0 >= XNOR && LA158_0 <= XOR)) && ((vhdl2008))) {
          alt158 = 1
        }
        else if ((LA158_0 == ASSERT || LA158_0 == CASE || LA158_0 == IF || LA158_0 == POSTPONED || LA158_0 == PROCESS || LA158_0 == WITH || LA158_0 == PROCEDURAL)) {
          alt158 = 1
        }


        alt158 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1019:3: concurrent_statement
            pushFollow(FOLLOW_concurrent_statement_in_concurrent_statement_list6003)
            concurrent_statement301 = concurrent_statement();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              statementList += concurrent_statement301
            }


          case _ => loop158 = false
        }
      } while (loop158);

      if (state.backtracking == 0) {
        list = statementList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 101, concurrent_statement_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "concurrent_statement_list"

  // $ANTLR start "concurrent_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1022:1: concurrent_statement returns [ConcurrentStatement stmt] : (label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] );
  @throws(classOf[RecognitionException])
  def concurrent_statement(): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_StartIndex = input.index()
    var label: Identifier = null

    var concurrent_statement_with_label302: ConcurrentStatement = null

    var concurrent_statement_optional_label303: ConcurrentStatement = null

    var concurrent_statement_optional_label304: ConcurrentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1022:57: (label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] )
      var alt160 = 2
      val LA160_0 = input.LA(1)

      if (((LA160_0 >= BASIC_IDENTIFIER && LA160_0 <= EXTENDED_IDENTIFIER))) {
        val LA160_1 = input.LA(2)

        if ((LA160_1 == COLON)) {
          alt160 = 1
        }
        else if ((LA160_1 == MOD || LA160_1 == REM || (LA160_1 >= DOUBLESTAR && LA160_1 <= LEQ) || LA160_1 == SEMICOLON || (LA160_1 >= AMPERSAND && LA160_1 <= LPAREN) || LA160_1 == LBRACKET || (LA160_1 >= MUL && LA160_1 <= MINUS) || LA160_1 == DOT || LA160_1 == APOSTROPHE)) {
          alt160 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 160, 1, input)

          throw nvae
        }
      }
      else if ((LA160_0 == BREAK) && ((ams))) {
        alt160 = 2
      }
      else if (((LA160_0 >= PLUS && LA160_0 <= MINUS) || LA160_0 == STRING_LITERAL)) {
        alt160 = 2
      }
      else if ((LA160_0 == 181) && ((vhdl2008))) {
        alt160 = 2
      }
      else if ((LA160_0 == ABS || LA160_0 == NEW || (LA160_0 >= NOT && LA160_0 <= NULL) || LA160_0 == LPAREN || LA160_0 == CHARACTER_LITERAL || (LA160_0 >= REAL_LITERAL && LA160_0 <= BIT_STRING_LITERAL))) {
        alt160 = 2
      }
      else if ((LA160_0 == AND || LA160_0 == NAND || LA160_0 == NOR || LA160_0 == OR || (LA160_0 >= XNOR && LA160_0 <= XOR)) && ((vhdl2008))) {
        alt160 = 2
      }
      else if ((LA160_0 == ASSERT || LA160_0 == CASE || LA160_0 == IF || LA160_0 == POSTPONED || LA160_0 == PROCESS || LA160_0 == WITH || LA160_0 == PROCEDURAL)) {
        alt160 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return stmt
        }
        val nvae = new NoViableAltException("", 160, 0, input)

        throw nvae
      }
      alt160 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1023:4: label= label_colon ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
          pushFollow(FOLLOW_label_colon_in_concurrent_statement6028)
          label = label_colon();

          state._fsp -= 1
          if (state.failed) return stmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1023:22: ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
          var alt159 = 2
          alt159 = dfa159.predict(input)
          alt159 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:4: ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label]
              pushFollow(FOLLOW_concurrent_statement_with_label_in_concurrent_statement6097)
              concurrent_statement_with_label302 = concurrent_statement_with_label(label);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_statement_with_label302
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1025:6: concurrent_statement_optional_label[$label.label]
              pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement6107)
              concurrent_statement_optional_label303 = concurrent_statement_optional_label(label);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_statement_optional_label303
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:5: concurrent_statement_optional_label[$label.label]
          pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement6121)
          concurrent_statement_optional_label304 = concurrent_statement_optional_label(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = concurrent_statement_optional_label304
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 102, concurrent_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement"

  // $ANTLR start "concurrent_statement_with_label"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1029:1: concurrent_statement_with_label[Identifier label] returns [ConcurrentStatement stmt] : ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] );
  @throws(classOf[RecognitionException])
  def concurrent_statement_with_label(label: Identifier): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_with_label_StartIndex = input.index()
    var component_instantiation_statement305: ComponentInstantiationStatement = null

    var block_statement306: BlockStatement = null

    var generate_statement307: ConcurrentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 103)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1029:86: ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] )
      var alt161 = 3
      val LA161_0 = input.LA(1)

      if (((LA161_0 >= COMPONENT && LA161_0 <= CONFIGURATION) || LA161_0 == ENTITY || LA161_0 == STRING_LITERAL || (LA161_0 >= BASIC_IDENTIFIER && LA161_0 <= EXTENDED_IDENTIFIER))) {
        alt161 = 1
      }
      else if ((LA161_0 == BLOCK)) {
        alt161 = 2
      }
      else if ((LA161_0 == FOR || LA161_0 == IF)) {
        alt161 = 3
      }
      else if ((LA161_0 == CASE) && ((vhdl2008))) {
        alt161 = 3
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return stmt
        }
        val nvae = new NoViableAltException("", 161, 0, input)

        throw nvae
      }
      alt161 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1030:2: component_instantiation_statement[$label]
          pushFollow(FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label6138)
          component_instantiation_statement305 = component_instantiation_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = component_instantiation_statement305
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1031:4: block_statement[$label]
          pushFollow(FOLLOW_block_statement_in_concurrent_statement_with_label6146)
          block_statement306 = block_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = block_statement306
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1032:4: generate_statement[$label]
          pushFollow(FOLLOW_generate_statement_in_concurrent_statement_with_label6154)
          generate_statement307 = generate_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = generate_statement307
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 103, concurrent_statement_with_label_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement_with_label"

  // $ANTLR start "concurrent_statement_optional_label"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1034:1: concurrent_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) );
  @throws(classOf[RecognitionException])
  def concurrent_statement_optional_label(label: Identifier): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_optional_label_StartIndex = input.index()
    var postponed: Token = null
    var ams_concurrent_break_statement308: ConcurrentBreakStatement = null

    var ams_simultaneous_statement309: SimultaneousStatement = null

    var process_statement310: ProcessStatement = null

    var concurrent_assertion_statement311: ConcurrentAssertionStatement = null

    var concurrent_signal_assignment_statement312: ConcurrentSignalAssignmentStatement = null

    var concurrent_procedure_call_statement313: ConcurrentProcedureCallStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1034:90: ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) )
      var alt164 = 3
      alt164 = dfa164.predict(input)
      alt164 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1035:2: {...}? => ams_concurrent_break_statement[$label]
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            throw new FailedPredicateException(input, "concurrent_statement_optional_label", "ams")
          }
          pushFollow(FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label6177)
          ams_concurrent_break_statement308 = ams_concurrent_break_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_concurrent_break_statement308
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:4: ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_statement_in_concurrent_statement_optional_label6213)
          ams_simultaneous_statement309 = ams_simultaneous_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_statement309
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1037:4: (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1037:13: (postponed= POSTPONED )?
          var alt162 = 2
          val LA162_0 = input.LA(1)

          if ((LA162_0 == POSTPONED)) {
            alt162 = 1
          }
          alt162 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1037:13: postponed= POSTPONED
              postponed = `match`(input, POSTPONED, FOLLOW_POSTPONED_in_concurrent_statement_optional_label6224).asInstanceOf[Token]; if (state.failed) return stmt


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:3: ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
          var alt163 = 4
          val LA163_0 = input.LA(1)

          if ((LA163_0 == PROCESS)) {
            alt163 = 1
          }
          else if ((LA163_0 == ASSERT)) {
            alt163 = 2
          }
          else if (((LA163_0 >= BASIC_IDENTIFIER && LA163_0 <= EXTENDED_IDENTIFIER))) {
            val LA163_3 = input.LA(2)

            if ((synpred12_VHDL())) {
              alt163 = 3
            }
            else if ((true)) {
              alt163 = 4
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return stmt
              }
              val nvae = new NoViableAltException("", 163, 3, input)

              throw nvae
            }
          }
          else if ((LA163_0 == STRING_LITERAL)) {
            val LA163_4 = input.LA(2)

            if ((synpred12_VHDL())) {
              alt163 = 3
            }
            else if ((true)) {
              alt163 = 4
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return stmt
              }
              val nvae = new NoViableAltException("", 163, 4, input)

              throw nvae
            }
          }
          else if ((LA163_0 == 181) && (((synpred12_VHDL() && (vhdl2008)) || (synpred12_VHDL() && (vhdl2008)) || (synpred12_VHDL() && (vhdl2008))))) {
            alt163 = 3
          }
          else if ((LA163_0 == LPAREN) && (synpred12_VHDL())) {
            alt163 = 3
          }
          else if ((LA163_0 == WITH) && (synpred12_VHDL())) {
            alt163 = 3
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            val nvae = new NoViableAltException("", 163, 0, input)

            throw nvae
          }
          alt163 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1039:3: process_statement[$label,postponed!=null]
              pushFollow(FOLLOW_process_statement_in_concurrent_statement_optional_label6234)
              process_statement310 = process_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = process_statement310
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1040:5: concurrent_assertion_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label6243)
              concurrent_assertion_statement311 = concurrent_assertion_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_assertion_statement311
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1041:5: ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label6262)
              concurrent_signal_assignment_statement312 = concurrent_signal_assignment_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_signal_assignment_statement312
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1042:5: concurrent_procedure_call_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label6271)
              concurrent_procedure_call_statement313 = concurrent_procedure_call_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_procedure_call_statement313
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 104, concurrent_statement_optional_label_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement_optional_label"

  // $ANTLR start "generic_map_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1046:1: generic_map_aspect returns [AssociationList list] : GENERIC MAP LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def generic_map_aspect(): AssociationList = {
    var list: AssociationList = null;
    val generic_map_aspect_StartIndex = input.index()
    var association_list314: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1046:51: ( GENERIC MAP LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1047:2: GENERIC MAP LPAREN association_list RPAREN
      `match`(input, GENERIC, FOLLOW_GENERIC_in_generic_map_aspect6293);
      if (state.failed) return list
      `match`(input, MAP, FOLLOW_MAP_in_generic_map_aspect6295);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_generic_map_aspect6297);
      if (state.failed) return list
      pushFollow(FOLLOW_association_list_in_generic_map_aspect6299)
      association_list314 = association_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_generic_map_aspect6301);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = association_list314
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 105, generic_map_aspect_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_map_aspect"

  // $ANTLR start "port_map_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1049:1: port_map_aspect returns [AssociationList list] : PORT MAP LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def port_map_aspect(): AssociationList = {
    var list: AssociationList = null;
    val port_map_aspect_StartIndex = input.index()
    var association_list315: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1049:48: ( PORT MAP LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1050:2: PORT MAP LPAREN association_list RPAREN
      `match`(input, PORT, FOLLOW_PORT_in_port_map_aspect6318);
      if (state.failed) return list
      `match`(input, MAP, FOLLOW_MAP_in_port_map_aspect6320);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_port_map_aspect6322);
      if (state.failed) return list
      pushFollow(FOLLOW_association_list_in_port_map_aspect6324)
      association_list315 = association_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_port_map_aspect6326);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = association_list315
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 106, port_map_aspect_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_map_aspect"

  // $ANTLR start "block_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1052:1: block_statement[Identifier label] returns [BlockStatement blockStmt] : block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def block_statement(label: Identifier): BlockStatement = {
    var blockStmt: BlockStatement = null;
    val block_statement_StartIndex = input.index()
    var block: Token = null
    var guard_expression: Expression = null

    var end_block_label: Identifier = null

    var block_declarative_item316: DeclarativeItem = null

    var generic_clause317: Seq[InterfaceList.AbstractInterfaceElement] = null

    var generic_map_aspect318: AssociationList = null

    var port_clause319: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_map_aspect320: AssociationList = null

    var concurrent_statement_list321: Seq[ConcurrentStatement] = null



    val declItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
        return blockStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1055:3: (block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:2: block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON
      block = `match`(input, BLOCK, FOLLOW_BLOCK_in_block_statement6353).asInstanceOf[Token];
      if (state.failed) return blockStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:14: ( LPAREN guard_expression= expression RPAREN )?
      var alt165 = 2
      val LA165_0 = input.LA(1)

      if ((LA165_0 == LPAREN)) {
        alt165 = 1
      }
      alt165 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:15: LPAREN guard_expression= expression RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_block_statement6356);
          if (state.failed) return blockStmt
          pushFollow(FOLLOW_expression_in_block_statement6360)
          guard_expression = expression();

          state._fsp -= 1
          if (state.failed) return blockStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_block_statement6362);
          if (state.failed) return blockStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:59: ( IS )?
      var alt166 = 2
      val LA166_0 = input.LA(1)

      if ((LA166_0 == IS)) {
        alt166 = 1
      }
      alt166 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:59: IS
          `match`(input, IS, FOLLOW_IS_in_block_statement6366); if (state.failed) return blockStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1057:3: ( generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )? )?
      var alt168 = 2
      val LA168_0 = input.LA(1)

      if ((LA168_0 == GENERIC)) {
        alt168 = 1
      }
      alt168 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1057:4: generic_clause SEMICOLON ( generic_map_aspect SEMICOLON )?
          pushFollow(FOLLOW_generic_clause_in_block_statement6372)
          generic_clause317 = generic_clause();

          state._fsp -= 1
          if (state.failed) return blockStmt
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement6374);
          if (state.failed) return blockStmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1057:29: ( generic_map_aspect SEMICOLON )?
          var alt167 = 2
          val LA167_0 = input.LA(1)

          if ((LA167_0 == GENERIC)) {
            alt167 = 1
          }
          alt167 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1057:30: generic_map_aspect SEMICOLON
              pushFollow(FOLLOW_generic_map_aspect_in_block_statement6377)
              generic_map_aspect318 = generic_map_aspect();

              state._fsp -= 1
              if (state.failed) return blockStmt
              `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement6379);
              if (state.failed) return blockStmt


            case _ =>
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1058:3: ( port_clause ( port_map_aspect SEMICOLON )? )?
      var alt170 = 2
      val LA170_0 = input.LA(1)

      if ((LA170_0 == PORT)) {
        alt170 = 1
      }
      alt170 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1058:4: port_clause ( port_map_aspect SEMICOLON )?
          pushFollow(FOLLOW_port_clause_in_block_statement6388)
          port_clause319 = port_clause();

          state._fsp -= 1
          if (state.failed) return blockStmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1058:16: ( port_map_aspect SEMICOLON )?
          var alt169 = 2
          val LA169_0 = input.LA(1)

          if ((LA169_0 == PORT)) {
            alt169 = 1
          }
          alt169 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1058:17: port_map_aspect SEMICOLON
              pushFollow(FOLLOW_port_map_aspect_in_block_statement6391)
              port_map_aspect320 = port_map_aspect();

              state._fsp -= 1
              if (state.failed) return blockStmt
              `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement6393);
              if (state.failed) return blockStmt


            case _ =>
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1059:3: ( block_declarative_item )*
      var loop171 = true
      do {
        var alt171 = 2
        val LA171_0 = input.LA(1)

        if ((LA171_0 == FUNCTION || LA171_0 == IMPURE || LA171_0 == PROCEDURE || LA171_0 == PURE)) {
          alt171 = 1
        }
        else if ((LA171_0 == PACKAGE) && ((vhdl2008))) {
          alt171 = 1
        }
        else if ((LA171_0 == ALIAS || LA171_0 == ATTRIBUTE || LA171_0 == COMPONENT || (LA171_0 >= CONSTANT && LA171_0 <= DISCONNECT) || (LA171_0 >= FILE && LA171_0 <= FOR) || LA171_0 == GROUP || (LA171_0 >= SHARED && LA171_0 <= SIGNAL) || LA171_0 == SUBTYPE || LA171_0 == TYPE || (LA171_0 >= USE && LA171_0 <= VARIABLE))) {
          alt171 = 1
        }
        else if (((LA171_0 >= NATURE && LA171_0 <= QUANTITY) || (LA171_0 >= SUBNATURE && LA171_0 <= LIMIT)) && ((ams))) {
          alt171 = 1
        }


        alt171 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1059:4: block_declarative_item
            pushFollow(FOLLOW_block_declarative_item_in_block_statement6402)
            block_declarative_item316 = block_declarative_item();

            state._fsp -= 1
            if (state.failed) return blockStmt
            if (state.backtracking == 0) {
              declItems += block_declarative_item316
            }


          case _ => loop171 = false
        }
      } while (loop171);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_block_statement6408);
      if (state.failed) return blockStmt
      pushFollow(FOLLOW_concurrent_statement_list_in_block_statement6412)
      concurrent_statement_list321 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return blockStmt
      `match`(input, END, FOLLOW_END_in_block_statement6415);
      if (state.failed) return blockStmt
      `match`(input, BLOCK, FOLLOW_BLOCK_in_block_statement6417);
      if (state.failed) return blockStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1062:27: (end_block_label= identifier )?
      var alt172 = 2
      val LA172_0 = input.LA(1)

      if (((LA172_0 >= BASIC_IDENTIFIER && LA172_0 <= EXTENDED_IDENTIFIER))) {
        alt172 = 1
      }
      alt172 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1062:27: end_block_label= identifier
          pushFollow(FOLLOW_identifier_in_block_statement6421)
          end_block_label = identifier();

          state._fsp -= 1
          if (state.failed) return blockStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement6424);
      if (state.failed) return blockStmt
      if (state.backtracking == 0) {

        blockStmt = new BlockStatement(toPosition(block), label, guard_expression, generic_clause317, generic_map_aspect318, port_clause319, port_map_aspect320,
          declItems.result, concurrent_statement_list321, end_block_label)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 107, block_statement_StartIndex)
      }
    }
    return blockStmt
  }

  // $ANTLR end "block_statement"

  // $ANTLR start "block_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1068:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def block_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val block_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body322: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration323: DeclarativeItem = null

    var package_declaration324: PackageDeclaration = null

    var package_body325: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration326: DeclarativeItem = null

    var type_declaration327: AbstractTypeDeclaration = null

    var subtype_declaration328: SubTypeDeclaration = null

    var constant_declaration329: ConstantDeclaration = null

    var signal_declaration330: SignalDeclaration = null

    var variable_declaration331: VariableDeclaration = null

    var file_declaration332: FileDeclaration = null

    var alias_declaration333: AliasDeclaration = null

    var component_declaration334: ComponentDeclaration = null

    var attribute_declaration335: AttributeDeclaration = null

    var attribute_specification336: AttributeSpecification = null

    var configuration_specification337: ConfigurationSpecification = null

    var disconnection_specification338: DisconnectionSpecification = null

    var use_clause339: UseClause = null

    var group_template_declaration340: GroupTemplateDeclaration = null

    var group_declaration341: GroupDeclaration = null

    var ams_step_limit_specification342: StepLimitSpecification = null

    var ams_nature_declaration343: AbstractTypeDeclaration = null

    var ams_subnature_declaration344: SubNatureDeclaration = null

    var ams_quantity_declaration345: AbstractQuantityDeclaration = null

    var ams_terminal_declaration346: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1068:55: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
      var alt175 = 18
      alt175 = dfa175.predict(input)
      alt175 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1069:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_block_declarative_item6445)
          subprogram_declartion_or_body322 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body322
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1070:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "block_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1070:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt173 = 4
          val LA173_0 = input.LA(1)

          if ((LA173_0 == FUNCTION || LA173_0 == PROCEDURE)) {
            alt173 = 1
          }
          else if ((LA173_0 == PACKAGE)) {
            val LA173_2 = input.LA(2)

            if ((LA173_2 == BODY)) {
              alt173 = 3
            }
            else if (((LA173_2 >= BASIC_IDENTIFIER && LA173_2 <= EXTENDED_IDENTIFIER))) {
              val LA173_4 = input.LA(3)

              if ((LA173_4 == IS)) {
                val LA173_5 = input.LA(4)

                if ((LA173_5 == NEW)) {
                  alt173 = 4
                }
                else if ((LA173_5 == ALIAS || LA173_5 == ATTRIBUTE || LA173_5 == COMPONENT || (LA173_5 >= CONSTANT && LA173_5 <= DISCONNECT) || LA173_5 == END || LA173_5 == FILE || LA173_5 == FUNCTION || (LA173_5 >= GENERIC && LA173_5 <= GROUP) || LA173_5 == IMPURE || LA173_5 == PACKAGE || LA173_5 == PROCEDURE || LA173_5 == PURE || (LA173_5 >= SHARED && LA173_5 <= SIGNAL) || LA173_5 == SUBTYPE || LA173_5 == TYPE || (LA173_5 >= USE && LA173_5 <= VARIABLE) || (LA173_5 >= NATURE && LA173_5 <= TERMINAL) || LA173_5 == SUBNATURE)) {
                  alt173 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 173, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 173, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 173, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 173, 0, input)

            throw nvae
          }
          alt173 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1070:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_block_declarative_item6455)
              v2008_subprogram_instantiation_declaration323 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration323
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1071:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_block_declarative_item6464)
              package_declaration324 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration324
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1072:6: package_body
              pushFollow(FOLLOW_package_body_in_block_declarative_item6473)
              package_body325 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body325
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1073:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_block_declarative_item6482)
              v2008_package_instantiation_declaration326 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration326
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1075:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_block_declarative_item6494)
          type_declaration327 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration327
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1076:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_block_declarative_item6501)
          subtype_declaration328 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration328
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1077:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_block_declarative_item6508)
          constant_declaration329 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration329
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1078:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_block_declarative_item6515)
          signal_declaration330 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration330
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1079:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_block_declarative_item6522)
          variable_declaration331 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration331
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1080:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_block_declarative_item6529)
          file_declaration332 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration332
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1081:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_block_declarative_item6536)
          alias_declaration333 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration333
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1082:4: component_declaration
          pushFollow(FOLLOW_component_declaration_in_block_declarative_item6543)
          component_declaration334 = component_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = component_declaration334
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1083:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_block_declarative_item6550)
          attribute_declaration335 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration335
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1084:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_block_declarative_item6557)
          attribute_specification336 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification336
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1085:4: configuration_specification
          pushFollow(FOLLOW_configuration_specification_in_block_declarative_item6564)
          configuration_specification337 = configuration_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = configuration_specification337
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1086:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_block_declarative_item6571)
          disconnection_specification338 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification338
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1087:4: use_clause
          pushFollow(FOLLOW_use_clause_in_block_declarative_item6578)
          use_clause339 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause339
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1088:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_block_declarative_item6585)
          group_template_declaration340 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration340
          }

        case 17 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1089:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_block_declarative_item6592)
          group_declaration341 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration341
          }

        case 18 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1092:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "block_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1092:12: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          var alt174 = 5
          input.LA(1) match {
            case LIMIT =>
              alt174 = 1
            case NATURE =>
              alt174 = 2
            case SUBNATURE =>
              alt174 = 3
            case QUANTITY =>
              alt174 = 4
            case TERMINAL =>
              alt174 = 5
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 174, 0, input)

              throw nvae
          }

          alt174 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1093:3: ams_step_limit_specification
              pushFollow(FOLLOW_ams_step_limit_specification_in_block_declarative_item6609)
              ams_step_limit_specification342 = ams_step_limit_specification();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_step_limit_specification342
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1094:5: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_block_declarative_item6617)
              ams_nature_declaration343 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration343
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1095:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_block_declarative_item6625)
              ams_subnature_declaration344 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration344
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1096:5: ams_quantity_declaration
              pushFollow(FOLLOW_ams_quantity_declaration_in_block_declarative_item6633)
              ams_quantity_declaration345 = ams_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_quantity_declaration345
              }

            case 5 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1097:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_block_declarative_item6641)
              ams_terminal_declaration346 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration346
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 108, block_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "block_declarative_item"

  // $ANTLR start "process_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1100:1: process_statement[Identifier label,Boolean postponed] returns [ProcessStatement processStmt] : process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def process_statement(label: Identifier, postponed: Boolean): ProcessStatement = {
    var processStmt: ProcessStatement = null;
    val process_statement_StartIndex = input.index()
    var process: Token = null
    var end_process_label: Identifier = null

    var process_declarative_item347: DeclarativeItem = null

    var name_list348: Seq[Name] = null

    var sequence_of_statements349: Seq[SequentialStatement] = null



    val declItem = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 109)) {
        return processStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1103:3: (process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1104:2: process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON
      process = `match`(input, PROCESS, FOLLOW_PROCESS_in_process_statement6668).asInstanceOf[Token];
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1104:18: ( LPAREN name_list RPAREN )?
      var alt176 = 2
      val LA176_0 = input.LA(1)

      if ((LA176_0 == LPAREN)) {
        alt176 = 1
      }
      alt176 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1104:19: LPAREN name_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_process_statement6671);
          if (state.failed) return processStmt
          pushFollow(FOLLOW_name_list_in_process_statement6673)
          name_list348 = name_list();

          state._fsp -= 1
          if (state.failed) return processStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_process_statement6675);
          if (state.failed) return processStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1104:45: ( IS )?
      var alt177 = 2
      val LA177_0 = input.LA(1)

      if ((LA177_0 == IS)) {
        alt177 = 1
      }
      alt177 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1104:45: IS
          `match`(input, IS, FOLLOW_IS_in_process_statement6679); if (state.failed) return processStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1105:3: ( process_declarative_item )*
      var loop178 = true
      do {
        var alt178 = 2
        val LA178_0 = input.LA(1)

        if ((LA178_0 == FUNCTION || LA178_0 == IMPURE || LA178_0 == PROCEDURE || LA178_0 == PURE)) {
          alt178 = 1
        }
        else if ((LA178_0 == PACKAGE) && ((vhdl2008))) {
          alt178 = 1
        }
        else if ((LA178_0 == ALIAS || LA178_0 == ATTRIBUTE || LA178_0 == CONSTANT || LA178_0 == FILE || LA178_0 == GROUP || LA178_0 == SHARED || LA178_0 == SUBTYPE || LA178_0 == TYPE || (LA178_0 >= USE && LA178_0 <= VARIABLE))) {
          alt178 = 1
        }


        alt178 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1105:4: process_declarative_item
            pushFollow(FOLLOW_process_declarative_item_in_process_statement6685)
            process_declarative_item347 = process_declarative_item();

            state._fsp -= 1
            if (state.failed) return processStmt
            if (state.backtracking == 0) {
              declItem += process_declarative_item347
            }


          case _ => loop178 = false
        }
      } while (loop178);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_process_statement6692);
      if (state.failed) return processStmt
      pushFollow(FOLLOW_sequence_of_statements_in_process_statement6696)
      sequence_of_statements349 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return processStmt
      `match`(input, END, FOLLOW_END_in_process_statement6699);
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1108:6: ( POSTPONED )?
      var alt179 = 2
      val LA179_0 = input.LA(1)

      if ((LA179_0 == POSTPONED)) {
        alt179 = 1
      }
      alt179 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1108:6: POSTPONED
          `match`(input, POSTPONED, FOLLOW_POSTPONED_in_process_statement6701); if (state.failed) return processStmt


        case _ =>
      }

      `match`(input, PROCESS, FOLLOW_PROCESS_in_process_statement6704);
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1108:42: (end_process_label= identifier )?
      var alt180 = 2
      val LA180_0 = input.LA(1)

      if (((LA180_0 >= BASIC_IDENTIFIER && LA180_0 <= EXTENDED_IDENTIFIER))) {
        alt180 = 1
      }
      alt180 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1108:42: end_process_label= identifier
          pushFollow(FOLLOW_identifier_in_process_statement6708)
          end_process_label = identifier();

          state._fsp -= 1
          if (state.failed) return processStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_process_statement6711);
      if (state.failed) return processStmt
      if (state.backtracking == 0) {
        processStmt = new ProcessStatement(toPosition(process), label, postponed, name_list348, declItem.result, sequence_of_statements349, end_process_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 109, process_statement_StartIndex)
      }
    }
    return processStmt
  }

  // $ANTLR end "process_statement"

  // $ANTLR start "process_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1111:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def process_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val process_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body350: DeclarativeItem = null

    var v2008_subprogram_instantiation_declaration351: DeclarativeItem = null

    var package_declaration352: PackageDeclaration = null

    var package_body353: PackageBodyDeclaration = null

    var v2008_package_instantiation_declaration354: DeclarativeItem = null

    var type_declaration355: AbstractTypeDeclaration = null

    var subtype_declaration356: SubTypeDeclaration = null

    var constant_declaration357: ConstantDeclaration = null

    var variable_declaration358: VariableDeclaration = null

    var file_declaration359: FileDeclaration = null

    var alias_declaration360: AliasDeclaration = null

    var attribute_declaration361: AttributeDeclaration = null

    var attribute_specification362: AttributeSpecification = null

    var use_clause363: UseClause = null

    var group_template_declaration364: GroupTemplateDeclaration = null

    var group_declaration365: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1111:57: ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt182 = 13
      alt182 = dfa182.predict(input)
      alt182 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1112:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6732)
          subprogram_declartion_or_body350 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body350
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:4: {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "process_declarative_item", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:17: ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration )
          var alt181 = 4
          val LA181_0 = input.LA(1)

          if ((LA181_0 == FUNCTION || LA181_0 == PROCEDURE)) {
            alt181 = 1
          }
          else if ((LA181_0 == PACKAGE)) {
            val LA181_2 = input.LA(2)

            if ((LA181_2 == BODY)) {
              alt181 = 3
            }
            else if (((LA181_2 >= BASIC_IDENTIFIER && LA181_2 <= EXTENDED_IDENTIFIER))) {
              val LA181_4 = input.LA(3)

              if ((LA181_4 == IS)) {
                val LA181_5 = input.LA(4)

                if ((LA181_5 == NEW)) {
                  alt181 = 4
                }
                else if ((LA181_5 == ALIAS || LA181_5 == ATTRIBUTE || LA181_5 == COMPONENT || (LA181_5 >= CONSTANT && LA181_5 <= DISCONNECT) || LA181_5 == END || LA181_5 == FILE || LA181_5 == FUNCTION || (LA181_5 >= GENERIC && LA181_5 <= GROUP) || LA181_5 == IMPURE || LA181_5 == PACKAGE || LA181_5 == PROCEDURE || LA181_5 == PURE || (LA181_5 >= SHARED && LA181_5 <= SIGNAL) || LA181_5 == SUBTYPE || LA181_5 == TYPE || (LA181_5 >= USE && LA181_5 <= VARIABLE) || (LA181_5 >= NATURE && LA181_5 <= TERMINAL) || LA181_5 == SUBNATURE)) {
                  alt181 = 2
                }
                else {
                  if (state.backtracking > 0) {
                    state.failed = true; return item
                  }
                  val nvae = new NoViableAltException("", 181, 5, input)

                  throw nvae
                }
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return item
                }
                val nvae = new NoViableAltException("", 181, 4, input)

                throw nvae
              }
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 181, 2, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            val nvae = new NoViableAltException("", 181, 0, input)

            throw nvae
          }
          alt181 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:18: v2008_subprogram_instantiation_declaration
              pushFollow(FOLLOW_v2008_subprogram_instantiation_declaration_in_process_declarative_item6742)
              v2008_subprogram_instantiation_declaration351 = v2008_subprogram_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_subprogram_instantiation_declaration351
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1114:6: package_declaration
              pushFollow(FOLLOW_package_declaration_in_process_declarative_item6751)
              package_declaration352 = package_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_declaration352
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1115:6: package_body
              pushFollow(FOLLOW_package_body_in_process_declarative_item6760)
              package_body353 = package_body();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = package_body353
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1116:6: v2008_package_instantiation_declaration
              pushFollow(FOLLOW_v2008_package_instantiation_declaration_in_process_declarative_item6769)
              v2008_package_instantiation_declaration354 = v2008_package_instantiation_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = v2008_package_instantiation_declaration354
              }


            case _ =>
          }


        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1118:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_process_declarative_item6781)
          type_declaration355 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration355
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1119:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_process_declarative_item6788)
          subtype_declaration356 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration356
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1120:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_process_declarative_item6795)
          constant_declaration357 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration357
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1121:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_process_declarative_item6802)
          variable_declaration358 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration358
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1122:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_process_declarative_item6809)
          file_declaration359 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration359
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1123:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_process_declarative_item6816)
          alias_declaration360 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration360
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1124:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_process_declarative_item6823)
          attribute_declaration361 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration361
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1125:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_process_declarative_item6830)
          attribute_specification362 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification362
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1126:4: use_clause
          pushFollow(FOLLOW_use_clause_in_process_declarative_item6837)
          use_clause363 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause363
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1127:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_process_declarative_item6844)
          group_template_declaration364 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration364
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1128:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_process_declarative_item6851)
          group_declaration365 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration365
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 110, process_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "process_declarative_item"

  // $ANTLR start "concurrent_procedure_call_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1130:1: concurrent_procedure_call_statement[Identifier label,Boolean postponed] returns [ConcurrentProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_procedure_call_statement(label: Identifier, postponed: Boolean): ConcurrentProcedureCallStatement = {
    var procedureCallStmt: ConcurrentProcedureCallStatement = null;
    val concurrent_procedure_call_statement_StartIndex = input.index()
    var procedure_name: SelectedName = null

    var association_list366: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
        return procedureCallStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1130:134: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1131:2: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
      pushFollow(FOLLOW_selected_name_in_concurrent_procedure_call_statement6871)
      procedure_name = selected_name();

      state._fsp -= 1
      if (state.failed) return procedureCallStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1131:31: ( LPAREN association_list RPAREN )?
      var alt183 = 2
      val LA183_0 = input.LA(1)

      if ((LA183_0 == LPAREN)) {
        alt183 = 1
      }
      alt183 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1131:32: LPAREN association_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_concurrent_procedure_call_statement6874);
          if (state.failed) return procedureCallStmt
          pushFollow(FOLLOW_association_list_in_concurrent_procedure_call_statement6876)
          association_list366 = association_list();

          state._fsp -= 1
          if (state.failed) return procedureCallStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_concurrent_procedure_call_statement6878);
          if (state.failed) return procedureCallStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6882);
      if (state.failed) return procedureCallStmt
      if (state.backtracking == 0) {
        procedureCallStmt = new ConcurrentProcedureCallStatement(label, postponed, procedure_name, association_list366)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 111, concurrent_procedure_call_statement_StartIndex)
      }
    }
    return procedureCallStmt
  }

  // $ANTLR end "concurrent_procedure_call_statement"

  // $ANTLR start "concurrent_assertion_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1134:1: concurrent_assertion_statement[Identifier label,Boolean postponed] returns [ConcurrentAssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_assertion_statement(label: Identifier, postponed: Boolean): ConcurrentAssertionStatement = {
    var assertStmt: ConcurrentAssertionStatement = null;
    val concurrent_assertion_statement_StartIndex = input.index()
    var ASSERT367: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null

    var condition368: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 112)) {
        return assertStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1134:118: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1135:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
      ASSERT367 = `match`(input, ASSERT, FOLLOW_ASSERT_in_concurrent_assertion_statement6901).asInstanceOf[Token];
      if (state.failed) return assertStmt
      pushFollow(FOLLOW_condition_in_concurrent_assertion_statement6903)
      condition368 = condition();

      state._fsp -= 1
      if (state.failed) return assertStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1135:20: ( REPORT report_expression= expression )?
      var alt184 = 2
      val LA184_0 = input.LA(1)

      if ((LA184_0 == REPORT)) {
        alt184 = 1
      }
      alt184 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1135:21: REPORT report_expression= expression
          `match`(input, REPORT, FOLLOW_REPORT_in_concurrent_assertion_statement6907);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6911)
          report_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1135:59: ( SEVERITY severity_expression= expression )?
      var alt185 = 2
      val LA185_0 = input.LA(1)

      if ((LA185_0 == SEVERITY)) {
        alt185 = 1
      }
      alt185 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1135:60: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_concurrent_assertion_statement6916);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6920)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_assertion_statement6924);
      if (state.failed) return assertStmt
      if (state.backtracking == 0) {
        assertStmt = new ConcurrentAssertionStatement(toPosition(ASSERT367), label, postponed, condition368, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 112, concurrent_assertion_statement_StartIndex)
      }
    }
    return assertStmt
  }

  // $ANTLR end "concurrent_assertion_statement"

  // $ANTLR start "concurrent_signal_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:1: concurrent_signal_assignment_statement[Identifier label,Boolean postponed] returns [ConcurrentSignalAssignmentStatement concurrentSignalAssignStmt] : ( concurrent_conditional_signal_assignment[$label,$postponed] | concurrent_selected_signal_assignment[$label,$postponed] );
  @throws(classOf[RecognitionException])
  def concurrent_signal_assignment_statement(label: Identifier, postponed: Boolean): ConcurrentSignalAssignmentStatement = {
    var concurrentSignalAssignStmt: ConcurrentSignalAssignmentStatement = null;
    val concurrent_signal_assignment_statement_StartIndex = input.index()
    var concurrent_conditional_signal_assignment369: ConcurrentConditionalSignalAssignment = null

    var concurrent_selected_signal_assignment370: ConcurrentSelectedSignalAssignment = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 113)) {
        return concurrentSignalAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:149: ( concurrent_conditional_signal_assignment[$label,$postponed] | concurrent_selected_signal_assignment[$label,$postponed] )
      var alt186 = 2
      val LA186_0 = input.LA(1)

      if ((LA186_0 == STRING_LITERAL || (LA186_0 >= BASIC_IDENTIFIER && LA186_0 <= EXTENDED_IDENTIFIER))) {
        alt186 = 1
      }
      else if ((LA186_0 == 181) && ((vhdl2008))) {
        alt186 = 1
      }
      else if ((LA186_0 == LPAREN)) {
        alt186 = 1
      }
      else if ((LA186_0 == WITH)) {
        alt186 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return concurrentSignalAssignStmt
        }
        val nvae = new NoViableAltException("", 186, 0, input)

        throw nvae
      }
      alt186 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1139:2: concurrent_conditional_signal_assignment[$label,$postponed]
          pushFollow(FOLLOW_concurrent_conditional_signal_assignment_in_concurrent_signal_assignment_statement6948)
          concurrent_conditional_signal_assignment369 = concurrent_conditional_signal_assignment(label, postponed);

          state._fsp -= 1
          if (state.failed) return concurrentSignalAssignStmt
          if (state.backtracking == 0) {
            concurrentSignalAssignStmt = concurrent_conditional_signal_assignment369
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1140:4: concurrent_selected_signal_assignment[$label,$postponed]
          pushFollow(FOLLOW_concurrent_selected_signal_assignment_in_concurrent_signal_assignment_statement6955)
          concurrent_selected_signal_assignment370 = concurrent_selected_signal_assignment(label, postponed);

          state._fsp -= 1
          if (state.failed) return concurrentSignalAssignStmt
          if (state.backtracking == 0) {
            concurrentSignalAssignStmt = concurrent_selected_signal_assignment370
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 113, concurrent_signal_assignment_statement_StartIndex)
      }
    }
    return concurrentSignalAssignStmt
  }

  // $ANTLR end "concurrent_signal_assignment_statement"

  // $ANTLR start "concurrent_conditional_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1142:1: concurrent_conditional_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentConditionalSignalAssignment signalAssignment] : target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_conditional_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentConditionalSignalAssignment = {
    var signalAssignment: ConcurrentConditionalSignalAssignment = null;
    val concurrent_conditional_signal_assignment_StartIndex = input.index()
    var LEQ371: Token = null
    var GUARDED373: Token = null
    var target372: Target = null

    var delay_mechanism374: DelayMechanism = null



    val elements = new Buffer[ConcurrentConditionalSignalAssignment.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 114)) {
        return signalAssignment
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1145:3: ( target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1146:2: target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON
      pushFollow(FOLLOW_target_in_concurrent_conditional_signal_assignment6975)
      target372 = target();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      LEQ371 = `match`(input, LEQ, FOLLOW_LEQ_in_concurrent_conditional_signal_assignment6977).asInstanceOf[Token];
      if (state.failed) return signalAssignment
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1146:13: ( GUARDED )?
      var alt187 = 2
      val LA187_0 = input.LA(1)

      if ((LA187_0 == GUARDED)) {
        alt187 = 1
      }
      alt187 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1146:13: GUARDED
          GUARDED373 = `match`(input, GUARDED, FOLLOW_GUARDED_in_concurrent_conditional_signal_assignment6979).asInstanceOf[Token]; if (state.failed) return signalAssignment


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1146:22: ( delay_mechanism )?
      var alt188 = 2
      val LA188_0 = input.LA(1)

      if ((LA188_0 == INERTIAL || LA188_0 == REJECT || LA188_0 == TRANSPORT)) {
        alt188 = 1
      }
      alt188 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1146:22: delay_mechanism
          pushFollow(FOLLOW_delay_mechanism_in_concurrent_conditional_signal_assignment6982)
          delay_mechanism374 = delay_mechanism();

          state._fsp -= 1
          if (state.failed) return signalAssignment


        case _ =>
      }

      pushFollow(FOLLOW_conditional_waveforms_in_concurrent_conditional_signal_assignment6989)
      conditional_waveforms(elements);

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_conditional_signal_assignment6992);
      if (state.failed) return signalAssignment
      if (state.backtracking == 0) {
        signalAssignment = new ConcurrentConditionalSignalAssignment(toPosition(LEQ371), label, postponed, target372, GUARDED373 != null, delay_mechanism374, elements.result.reverse)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 114, concurrent_conditional_signal_assignment_StartIndex)
      }
    }
    return signalAssignment
  }

  // $ANTLR end "concurrent_conditional_signal_assignment"

  // $ANTLR start "conditional_waveforms"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1150:1: conditional_waveforms[Buffer[ConcurrentConditionalSignalAssignment.When] elements] : waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? ;
  @throws(classOf[RecognitionException])
  def conditional_waveforms(elements: Buffer[ConcurrentConditionalSignalAssignment.When]): Unit = {
    val conditional_waveforms_StartIndex = input.index()
    var waveform375: Waveform = null

    var condition376: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 115)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1150:85: ( waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1151:2: waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
      pushFollow(FOLLOW_waveform_in_conditional_waveforms7005)
      waveform375 = waveform();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1151:11: ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
      var alt190 = 2
      val LA190_0 = input.LA(1)

      if ((LA190_0 == WHEN)) {
        alt190 = 1
      }
      alt190 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1151:13: WHEN condition ( ELSE conditional_waveforms[elements] )?
          `match`(input, WHEN, FOLLOW_WHEN_in_conditional_waveforms7009);
          if (state.failed) return
          pushFollow(FOLLOW_condition_in_conditional_waveforms7011)
          condition376 = condition();

          state._fsp -= 1
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1151:28: ( ELSE conditional_waveforms[elements] )?
          var alt189 = 2
          val LA189_0 = input.LA(1)

          if ((LA189_0 == ELSE)) {
            alt189 = 1
          }
          alt189 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1151:30: ELSE conditional_waveforms[elements]
              `match`(input, ELSE, FOLLOW_ELSE_in_conditional_waveforms7015);
              if (state.failed) return
              pushFollow(FOLLOW_conditional_waveforms_in_conditional_waveforms7017)
              conditional_waveforms(elements);

              state._fsp -= 1
              if (state.failed) return


            case _ =>
          }


        case _ =>
      }

      if (state.backtracking == 0) {
        elements += new ConcurrentConditionalSignalAssignment.When(waveform375, condition376)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 115, conditional_waveforms_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "conditional_waveforms"

  // $ANTLR start "concurrent_selected_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1153:1: concurrent_selected_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentSelectedSignalAssignment signalAssignment] : WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_selected_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentSelectedSignalAssignment = {
    var signalAssignment: ConcurrentSelectedSignalAssignment = null;
    val concurrent_selected_signal_assignment_StartIndex = input.index()
    var WITH377: Token = null
    var GUARDED380: Token = null
    var expression378: Expression = null

    var target379: Target = null

    var delay_mechanism381: DelayMechanism = null

    var selected_waveforms382: Seq[ConcurrentSelectedSignalAssignment.When] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 116)) {
        return signalAssignment
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1153:137: ( WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:2: WITH expression SELECT ({...}? => QMARK )? target LEQ ( GUARDED )? ( delay_mechanism )? selected_waveforms SEMICOLON
      WITH377 = `match`(input, WITH, FOLLOW_WITH_in_concurrent_selected_signal_assignment7043).asInstanceOf[Token];
      if (state.failed) return signalAssignment
      pushFollow(FOLLOW_expression_in_concurrent_selected_signal_assignment7045)
      expression378 = expression();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, SELECT, FOLLOW_SELECT_in_concurrent_selected_signal_assignment7047);
      if (state.failed) return signalAssignment
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:25: ({...}? => QMARK )?
      var alt191 = 2
      val LA191_0 = input.LA(1)

      if ((LA191_0 == QMARK) && ((vhdl2008))) {
        alt191 = 1
      }
      alt191 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:26: {...}? => QMARK
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return signalAssignment
            }
            throw new FailedPredicateException(input, "concurrent_selected_signal_assignment", "vhdl2008")
          }
          `match`(input, QMARK, FOLLOW_QMARK_in_concurrent_selected_signal_assignment7052);
          if (state.failed) return signalAssignment


        case _ =>
      }

      pushFollow(FOLLOW_target_in_concurrent_selected_signal_assignment7058)
      target379 = target();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, LEQ, FOLLOW_LEQ_in_concurrent_selected_signal_assignment7060);
      if (state.failed) return signalAssignment
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1155:14: ( GUARDED )?
      var alt192 = 2
      val LA192_0 = input.LA(1)

      if ((LA192_0 == GUARDED)) {
        alt192 = 1
      }
      alt192 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1155:14: GUARDED
          GUARDED380 = `match`(input, GUARDED, FOLLOW_GUARDED_in_concurrent_selected_signal_assignment7062).asInstanceOf[Token]; if (state.failed) return signalAssignment


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1155:23: ( delay_mechanism )?
      var alt193 = 2
      val LA193_0 = input.LA(1)

      if ((LA193_0 == INERTIAL || LA193_0 == REJECT || LA193_0 == TRANSPORT)) {
        alt193 = 1
      }
      alt193 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1155:23: delay_mechanism
          pushFollow(FOLLOW_delay_mechanism_in_concurrent_selected_signal_assignment7065)
          delay_mechanism381 = delay_mechanism();

          state._fsp -= 1
          if (state.failed) return signalAssignment


        case _ =>
      }

      pushFollow(FOLLOW_selected_waveforms_in_concurrent_selected_signal_assignment7068)
      selected_waveforms382 = selected_waveforms();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_selected_signal_assignment7070);
      if (state.failed) return signalAssignment
      if (state.backtracking == 0) {
        signalAssignment = new ConcurrentSelectedSignalAssignment(toPosition(WITH377), label, postponed, expression378, target379, GUARDED380 != null, delay_mechanism381, selected_waveforms382)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 116, concurrent_selected_signal_assignment_StartIndex)
      }
    }
    return signalAssignment
  }

  // $ANTLR end "concurrent_selected_signal_assignment"

  // $ANTLR start "selected_waveform"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1158:1: selected_waveform returns [ConcurrentSelectedSignalAssignment.When whenClause] : waveform WHEN choices ;
  @throws(classOf[RecognitionException])
  def selected_waveform(): ConcurrentSelectedSignalAssignment.When = {
    var whenClause: ConcurrentSelectedSignalAssignment.When = null;
    val selected_waveform_StartIndex = input.index()
    var waveform383: Waveform = null

    var choices384: Seq[Choices.Choice] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 117)) {
        return whenClause
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1158:80: ( waveform WHEN choices )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1159:2: waveform WHEN choices
      pushFollow(FOLLOW_waveform_in_selected_waveform7088)
      waveform383 = waveform();

      state._fsp -= 1
      if (state.failed) return whenClause
      `match`(input, WHEN, FOLLOW_WHEN_in_selected_waveform7090);
      if (state.failed) return whenClause
      pushFollow(FOLLOW_choices_in_selected_waveform7092)
      choices384 = choices();

      state._fsp -= 1
      if (state.failed) return whenClause
      if (state.backtracking == 0) {
        whenClause = new ConcurrentSelectedSignalAssignment.When(waveform383, choices384)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 117, selected_waveform_StartIndex)
      }
    }
    return whenClause
  }

  // $ANTLR end "selected_waveform"

  // $ANTLR start "selected_waveforms"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1161:1: selected_waveforms returns [Seq[ConcurrentSelectedSignalAssignment.When] waveforms] : s1= selected_waveform ( COMMA s2= selected_waveform )* ;
  @throws(classOf[RecognitionException])
  def selected_waveforms(): Seq[ConcurrentSelectedSignalAssignment.When] = {
    var waveforms: Seq[ConcurrentSelectedSignalAssignment.When] = null;
    val selected_waveforms_StartIndex = input.index()
    var s1: ConcurrentSelectedSignalAssignment.When = null

    var s2: ConcurrentSelectedSignalAssignment.When = null



    val elements = new Buffer[ConcurrentSelectedSignalAssignment.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 118)) {
        return waveforms
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1164:3: (s1= selected_waveform ( COMMA s2= selected_waveform )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1165:2: s1= selected_waveform ( COMMA s2= selected_waveform )*
      pushFollow(FOLLOW_selected_waveform_in_selected_waveforms7114)
      s1 = selected_waveform();

      state._fsp -= 1
      if (state.failed) return waveforms
      if (state.backtracking == 0) {
        elements += s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1165:51: ( COMMA s2= selected_waveform )*
      var loop194 = true
      do {
        var alt194 = 2
        val LA194_0 = input.LA(1)

        if ((LA194_0 == COMMA)) {
          alt194 = 1
        }


        alt194 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1165:52: COMMA s2= selected_waveform
            `match`(input, COMMA, FOLLOW_COMMA_in_selected_waveforms7118);
            if (state.failed) return waveforms
            pushFollow(FOLLOW_selected_waveform_in_selected_waveforms7122)
            s2 = selected_waveform();

            state._fsp -= 1
            if (state.failed) return waveforms
            if (state.backtracking == 0) {
              elements += s2
            }


          case _ => loop194 = false
        }
      } while (loop194);

      if (state.backtracking == 0) {
        waveforms = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 118, selected_waveforms_StartIndex)
      }
    }
    return waveforms
  }

  // $ANTLR end "selected_waveforms"

  // $ANTLR start "target"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1168:1: target returns [Target target_] : ( name | aggregate );
  @throws(classOf[RecognitionException])
  def target(): Target = {
    var target_ : Target = null;
    val target_StartIndex = input.index()
    var name385: Name = null

    var aggregate386: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 119)) {
        return target_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1168:33: ( name | aggregate )
      var alt195 = 2
      val LA195_0 = input.LA(1)

      if ((LA195_0 == STRING_LITERAL || (LA195_0 >= BASIC_IDENTIFIER && LA195_0 <= EXTENDED_IDENTIFIER))) {
        alt195 = 1
      }
      else if ((LA195_0 == 181) && ((vhdl2008))) {
        alt195 = 1
      }
      else if ((LA195_0 == LPAREN)) {
        alt195 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return target_
        }
        val nvae = new NoViableAltException("", 195, 0, input)

        throw nvae
      }
      alt195 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1169:2: name
          pushFollow(FOLLOW_name_in_target7145)
          name385 = name();

          state._fsp -= 1
          if (state.failed) return target_
          if (state.backtracking == 0) {
            target_ = new Target(Left(name385))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1170:4: aggregate
          pushFollow(FOLLOW_aggregate_in_target7152)
          aggregate386 = aggregate();

          state._fsp -= 1
          if (state.failed) return target_
          if (state.backtracking == 0) {
            target_ = new Target(Right(aggregate386))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 119, target_StartIndex)
      }
    }
    return target_
  }

  // $ANTLR end "target"

  // $ANTLR start "component_instantiation_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1172:1: component_instantiation_statement[Identifier label] returns [ComponentInstantiationStatement stmt] : ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_instantiation_statement(label: Identifier): ComponentInstantiationStatement = {
    var stmt: ComponentInstantiationStatement = null;
    val component_instantiation_statement_StartIndex = input.index()
    var n: SelectedName = null

    var architecture_identifier: Identifier = null

    var generic_map_aspect387: AssociationList = null

    var port_map_aspect388: AssociationList = null



    var componentType: ComponentInstantiationStatement.ComponentType.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 120)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1176:3: ( ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1177:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1177:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name )
      var alt198 = 3
      input.LA(1) match {
        case COMPONENT | STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt198 = 1
        case ENTITY =>
          alt198 = 2
        case CONFIGURATION =>
          alt198 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 198, 0, input)

          throw nvae
      }

      alt198 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: ( COMPONENT )? n= selected_name
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: ( COMPONENT )?
          var alt196 = 2
          val LA196_0 = input.LA(1)

          if ((LA196_0 == COMPONENT)) {
            alt196 = 1
          }
          alt196 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: COMPONENT
              `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_instantiation_statement7181); if (state.failed) return stmt


            case _ =>
          }

          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7186)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.COMPONENT
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:5: ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
          `match`(input, ENTITY, FOLLOW_ENTITY_in_component_instantiation_statement7194);
          if (state.failed) return stmt
          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7198)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:28: ( LPAREN architecture_identifier= identifier RPAREN )?
          var alt197 = 2
          val LA197_0 = input.LA(1)

          if ((LA197_0 == LPAREN)) {
            alt197 = 1
          }
          alt197 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:29: LPAREN architecture_identifier= identifier RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_component_instantiation_statement7201);
              if (state.failed) return stmt
              pushFollow(FOLLOW_identifier_in_component_instantiation_statement7205)
              architecture_identifier = identifier();

              state._fsp -= 1
              if (state.failed) return stmt
              `match`(input, RPAREN, FOLLOW_RPAREN_in_component_instantiation_statement7207);
              if (state.failed) return stmt


            case _ =>
          }

          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.ENTITY
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1180:5: CONFIGURATION n= selected_name
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_component_instantiation_statement7217);
          if (state.failed) return stmt
          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7221)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.CONFIGURATION
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1182:2: ( generic_map_aspect )?
      var alt199 = 2
      val LA199_0 = input.LA(1)

      if ((LA199_0 == GENERIC)) {
        alt199 = 1
      }
      alt199 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1182:2: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_component_instantiation_statement7229)
          generic_map_aspect387 = generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1183:2: ( port_map_aspect )?
      var alt200 = 2
      val LA200_0 = input.LA(1)

      if ((LA200_0 == PORT)) {
        alt200 = 1
      }
      alt200 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1183:2: port_map_aspect
          pushFollow(FOLLOW_port_map_aspect_in_component_instantiation_statement7233)
          port_map_aspect388 = port_map_aspect();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_instantiation_statement7236);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new ComponentInstantiationStatement(position, label, componentType, n, architecture_identifier, generic_map_aspect387, port_map_aspect388)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 120, component_instantiation_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "component_instantiation_statement"

  // $ANTLR start "generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1186:1: generate_statement[Identifier label] returns [ConcurrentStatement generateStmt] : ( for_generate_statement[$label] | if_generate_statement[$label] | {...}? => v2008_case_generate_statement[$label] );
  @throws(classOf[RecognitionException])
  def generate_statement(label: Identifier): ConcurrentStatement = {
    var generateStmt: ConcurrentStatement = null;
    val generate_statement_StartIndex = input.index()
    var for_generate_statement389: ForGenerateStatement = null

    var if_generate_statement390: IfGenerateStatement = null

    var v2008_case_generate_statement391: ConcurrentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 121)) {
        return generateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1186:81: ( for_generate_statement[$label] | if_generate_statement[$label] | {...}? => v2008_case_generate_statement[$label] )
      var alt201 = 3
      val LA201_0 = input.LA(1)

      if ((LA201_0 == FOR)) {
        alt201 = 1
      }
      else if ((LA201_0 == IF)) {
        alt201 = 2
      }
      else if ((LA201_0 == CASE) && ((vhdl2008))) {
        alt201 = 3
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return generateStmt
        }
        val nvae = new NoViableAltException("", 201, 0, input)

        throw nvae
      }
      alt201 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1187:2: for_generate_statement[$label]
          pushFollow(FOLLOW_for_generate_statement_in_generate_statement7255)
          for_generate_statement389 = for_generate_statement(label);

          state._fsp -= 1
          if (state.failed) return generateStmt
          if (state.backtracking == 0) {
            generateStmt = for_generate_statement389
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1188:4: if_generate_statement[$label]
          pushFollow(FOLLOW_if_generate_statement_in_generate_statement7263)
          if_generate_statement390 = if_generate_statement(label);

          state._fsp -= 1
          if (state.failed) return generateStmt
          if (state.backtracking == 0) {
            generateStmt = if_generate_statement390
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1189:4: {...}? => v2008_case_generate_statement[$label]
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return generateStmt
            }
            throw new FailedPredicateException(input, "generate_statement", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_case_generate_statement_in_generate_statement7273)
          v2008_case_generate_statement391 = v2008_case_generate_statement(label);

          state._fsp -= 1
          if (state.failed) return generateStmt
          if (state.backtracking == 0) {
            generateStmt = v2008_case_generate_statement391
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 121, generate_statement_StartIndex)
      }
    }
    return generateStmt
  }

  // $ANTLR end "generate_statement"

  // $ANTLR start "for_generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1191:1: for_generate_statement[Identifier label] returns [ForGenerateStatement forGenerateStmt] : FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def for_generate_statement(label: Identifier): ForGenerateStatement = {
    var forGenerateStmt: ForGenerateStatement = null;
    val for_generate_statement_StartIndex = input.index()
    var FOR392: Token = null
    var loopIdentifier: Identifier = null

    var body: VHDLParser.generate_statement_body_return = null

    var end_generate_label: Identifier = null

    var discrete_range393: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 122)) {
        return forGenerateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1191:89: ( FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1192:2: FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
      FOR392 = `match`(input, FOR, FOLLOW_FOR_in_for_generate_statement7291).asInstanceOf[Token];
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_identifier_in_for_generate_statement7295)
      loopIdentifier = identifier();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, IN, FOLLOW_IN_in_for_generate_statement7297);
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_discrete_range_in_for_generate_statement7299)
      discrete_range393 = discrete_range();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_for_generate_statement7301);
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_generate_statement_body_in_for_generate_statement7307)
      body = generate_statement_body();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, END, FOLLOW_END_in_for_generate_statement7310);
      if (state.failed) return forGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_for_generate_statement7312);
      if (state.failed) return forGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1194:33: (end_generate_label= identifier )?
      var alt202 = 2
      val LA202_0 = input.LA(1)

      if (((LA202_0 >= BASIC_IDENTIFIER && LA202_0 <= EXTENDED_IDENTIFIER))) {
        alt202 = 1
      }
      alt202 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1194:33: end_generate_label= identifier
          pushFollow(FOLLOW_identifier_in_for_generate_statement7316)
          end_generate_label = identifier();

          state._fsp -= 1
          if (state.failed) return forGenerateStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_for_generate_statement7319);
      if (state.failed) return forGenerateStmt
      if (state.backtracking == 0) {
        forGenerateStmt = new ForGenerateStatement(toPosition(FOR392), label, loopIdentifier, discrete_range393, (if (body != null) body.blockItems else null), (if (body != null) body.statementList else null), end_generate_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 122, for_generate_statement_StartIndex)
      }
    }
    return forGenerateStmt
  }

  // $ANTLR end "for_generate_statement"

  // $ANTLR start "if_generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1197:1: if_generate_statement[Identifier label] returns [IfGenerateStatement ifGenerateStmt] : IF ({...}? =>alternative_label= label_colon )? if_condition= condition GENERATE body= generate_statement_body ({...}? => ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )* ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )? )? END GENERATE (end_generate_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def if_generate_statement(label: Identifier): IfGenerateStatement = {
    var ifGenerateStmt: IfGenerateStatement = null;
    val if_generate_statement_StartIndex = input.index()
    var IF394: Token = null
    var alternative_label: Identifier = null

    var if_condition: Expression = null

    var body: VHDLParser.generate_statement_body_return = null

    var end_generate_label: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 123)) {
        return ifGenerateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1197:86: ( IF ({...}? =>alternative_label= label_colon )? if_condition= condition GENERATE body= generate_statement_body ({...}? => ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )* ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )? )? END GENERATE (end_generate_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1198:2: IF ({...}? =>alternative_label= label_colon )? if_condition= condition GENERATE body= generate_statement_body ({...}? => ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )* ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )? )? END GENERATE (end_generate_label= identifier )? SEMICOLON
      IF394 = `match`(input, IF, FOLLOW_IF_in_if_generate_statement7338).asInstanceOf[Token];
      if (state.failed) return ifGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1198:5: ({...}? =>alternative_label= label_colon )?
      var alt203 = 2
      val LA203_0 = input.LA(1)

      if (((LA203_0 >= BASIC_IDENTIFIER && LA203_0 <= EXTENDED_IDENTIFIER))) {
        val LA203_1 = input.LA(2)

        if ((LA203_1 == COLON) && ((vhdl2008))) {
          alt203 = 1
        }
      }
      alt203 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1198:6: {...}? =>alternative_label= label_colon
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return ifGenerateStmt
            }
            throw new FailedPredicateException(input, "if_generate_statement", "vhdl2008")
          }
          pushFollow(FOLLOW_label_colon_in_if_generate_statement7345)
          alternative_label = label_colon();

          state._fsp -= 1
          if (state.failed) return ifGenerateStmt


        case _ =>
      }

      pushFollow(FOLLOW_condition_in_if_generate_statement7351)
      if_condition = condition();

      state._fsp -= 1
      if (state.failed) return ifGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement7353);
      if (state.failed) return ifGenerateStmt
      pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement7359)
      body = generate_statement_body();

      state._fsp -= 1
      if (state.failed) return ifGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:2: ({...}? => ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )* ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )? )?
      var alt208 = 2
      val LA208_0 = input.LA(1)

      if (((LA208_0 >= ELSE && LA208_0 <= ELSIF)) && ((vhdl2008))) {
        alt208 = 1
      }
      else if ((LA208_0 == END)) {
        val LA208_2 = input.LA(2)

        if (((vhdl2008))) {
          alt208 = 1
        }
      }
      alt208 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:3: {...}? => ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )* ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )?
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return ifGenerateStmt
            }
            throw new FailedPredicateException(input, "if_generate_statement", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:16: ( ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body )*
          var loop205 = true
          do {
            var alt205 = 2
            val LA205_0 = input.LA(1)

            if ((LA205_0 == ELSIF)) {
              alt205 = 1
            }


            alt205 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:17: ELSIF (alternative_label= label_colon )? condition GENERATE generate_statement_body
                `match`(input, ELSIF, FOLLOW_ELSIF_in_if_generate_statement7366);
                if (state.failed) return ifGenerateStmt
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:40: (alternative_label= label_colon )?
                var alt204 = 2
                val LA204_0 = input.LA(1)

                if (((LA204_0 >= BASIC_IDENTIFIER && LA204_0 <= EXTENDED_IDENTIFIER))) {
                  val LA204_1 = input.LA(2)

                  if ((LA204_1 == COLON)) {
                    alt204 = 1
                  }
                }
                alt204 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1200:40: alternative_label= label_colon
                    pushFollow(FOLLOW_label_colon_in_if_generate_statement7370)
                    alternative_label = label_colon();

                    state._fsp -= 1
                    if (state.failed) return ifGenerateStmt


                  case _ =>
                }

                pushFollow(FOLLOW_condition_in_if_generate_statement7373)
                condition();

                state._fsp -= 1
                if (state.failed) return ifGenerateStmt
                `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement7375);
                if (state.failed) return ifGenerateStmt
                pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement7379)
                generate_statement_body();

                state._fsp -= 1
                if (state.failed) return ifGenerateStmt


              case _ => loop205 = false
            }
          } while (loop205);

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1202:2: ( ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body )?
          var alt207 = 2
          val LA207_0 = input.LA(1)

          if ((LA207_0 == ELSE)) {
            alt207 = 1
          }
          alt207 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1202:3: ELSE (alternative_label= label_colon )? condition GENERATE generate_statement_body
              `match`(input, ELSE, FOLLOW_ELSE_in_if_generate_statement7385);
              if (state.failed) return ifGenerateStmt
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1202:26: (alternative_label= label_colon )?
              var alt206 = 2
              val LA206_0 = input.LA(1)

              if (((LA206_0 >= BASIC_IDENTIFIER && LA206_0 <= EXTENDED_IDENTIFIER))) {
                val LA206_1 = input.LA(2)

                if ((LA206_1 == COLON)) {
                  alt206 = 1
                }
              }
              alt206 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1202:26: alternative_label= label_colon
                  pushFollow(FOLLOW_label_colon_in_if_generate_statement7390)
                  alternative_label = label_colon();

                  state._fsp -= 1
                  if (state.failed) return ifGenerateStmt


                case _ =>
              }

              pushFollow(FOLLOW_condition_in_if_generate_statement7393)
              condition();

              state._fsp -= 1
              if (state.failed) return ifGenerateStmt
              `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement7395);
              if (state.failed) return ifGenerateStmt
              pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement7399)
              generate_statement_body();

              state._fsp -= 1
              if (state.failed) return ifGenerateStmt


            case _ =>
          }


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_if_generate_statement7406);
      if (state.failed) return ifGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement7408);
      if (state.failed) return ifGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1204:33: (end_generate_label= identifier )?
      var alt209 = 2
      val LA209_0 = input.LA(1)

      if (((LA209_0 >= BASIC_IDENTIFIER && LA209_0 <= EXTENDED_IDENTIFIER))) {
        alt209 = 1
      }
      alt209 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1204:33: end_generate_label= identifier
          pushFollow(FOLLOW_identifier_in_if_generate_statement7412)
          end_generate_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifGenerateStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_if_generate_statement7415);
      if (state.failed) return ifGenerateStmt
      if (state.backtracking == 0) {
        ifGenerateStmt = new IfGenerateStatement(toPosition(IF394), label, if_condition, (if (body != null) body.blockItems else null), (if (body != null) body.statementList else null), end_generate_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 123, if_generate_statement_StartIndex)
      }
    }
    return ifGenerateStmt
  }

  // $ANTLR end "if_generate_statement"

  // $ANTLR start "v2008_case_generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1207:1: v2008_case_generate_statement[Identifier label] returns [ConcurrentStatement caseGenerateStmt] : CASE expression GENERATE ( WHEN (alternative_label= label_colon )? choices ARROW generate_statement_body )+ END GENERATE (end_generate_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_case_generate_statement(label: Identifier): ConcurrentStatement = {
    var caseGenerateStmt: ConcurrentStatement = null;
    val v2008_case_generate_statement_StartIndex = input.index()
    var alternative_label: Identifier = null

    var end_generate_label: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 124)) {
        return caseGenerateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1207:96: ( CASE expression GENERATE ( WHEN (alternative_label= label_colon )? choices ARROW generate_statement_body )+ END GENERATE (end_generate_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1208:2: CASE expression GENERATE ( WHEN (alternative_label= label_colon )? choices ARROW generate_statement_body )+ END GENERATE (end_generate_label= identifier )? SEMICOLON
      `match`(input, CASE, FOLLOW_CASE_in_v2008_case_generate_statement7433);
      if (state.failed) return caseGenerateStmt
      pushFollow(FOLLOW_expression_in_v2008_case_generate_statement7435)
      expression();

      state._fsp -= 1
      if (state.failed) return caseGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_v2008_case_generate_statement7437);
      if (state.failed) return caseGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1209:3: ( WHEN (alternative_label= label_colon )? choices ARROW generate_statement_body )+
      var cnt211 = 0
      var loop211 = true
      do {
        var alt211 = 2
        val LA211_0 = input.LA(1)

        if ((LA211_0 == WHEN)) {
          alt211 = 1
        }


        alt211 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1209:4: WHEN (alternative_label= label_colon )? choices ARROW generate_statement_body
            `match`(input, WHEN, FOLLOW_WHEN_in_v2008_case_generate_statement7442);
            if (state.failed) return caseGenerateStmt
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1209:26: (alternative_label= label_colon )?
            var alt210 = 2
            val LA210_0 = input.LA(1)

            if (((LA210_0 >= BASIC_IDENTIFIER && LA210_0 <= EXTENDED_IDENTIFIER))) {
              val LA210_1 = input.LA(2)

              if ((LA210_1 == COLON)) {
                alt210 = 1
              }
            }
            alt210 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1209:26: alternative_label= label_colon
                pushFollow(FOLLOW_label_colon_in_v2008_case_generate_statement7446)
                alternative_label = label_colon();

                state._fsp -= 1
                if (state.failed) return caseGenerateStmt


              case _ =>
            }

            pushFollow(FOLLOW_choices_in_v2008_case_generate_statement7449)
            choices();

            state._fsp -= 1
            if (state.failed) return caseGenerateStmt
            `match`(input, ARROW, FOLLOW_ARROW_in_v2008_case_generate_statement7451);
            if (state.failed) return caseGenerateStmt
            pushFollow(FOLLOW_generate_statement_body_in_v2008_case_generate_statement7453)
            generate_statement_body();

            state._fsp -= 1
            if (state.failed) return caseGenerateStmt


          case _ =>
            if (cnt211 >= 1) loop211 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return caseGenerateStmt
              }
              val eee = new EarlyExitException(211, input)
              throw eee
            }
        }
        cnt211 += 1
      } while (loop211);

      `match`(input, END, FOLLOW_END_in_v2008_case_generate_statement7458);
      if (state.failed) return caseGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_v2008_case_generate_statement7460);
      if (state.failed) return caseGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1210:33: (end_generate_label= identifier )?
      var alt212 = 2
      val LA212_0 = input.LA(1)

      if (((LA212_0 >= BASIC_IDENTIFIER && LA212_0 <= EXTENDED_IDENTIFIER))) {
        alt212 = 1
      }
      alt212 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1210:33: end_generate_label= identifier
          pushFollow(FOLLOW_identifier_in_v2008_case_generate_statement7464)
          end_generate_label = identifier();

          state._fsp -= 1
          if (state.failed) return caseGenerateStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_case_generate_statement7467);
      if (state.failed) return caseGenerateStmt


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 124, v2008_case_generate_statement_StartIndex)
      }
    }
    return caseGenerateStmt
  }

  // $ANTLR end "v2008_case_generate_statement"

  // $ANTLR start "generate_statement_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1212:1: generate_statement_body returns [Seq[DeclarativeItem] blockItems,Seq[ConcurrentStatement] statementList] : ( ( block_declarative_item )* BEGIN )? concurrent_statement_list ({...}? => END (alternative_label= identifier )? SEMICOLON )? ;
  @throws(classOf[RecognitionException])
  def generate_statement_body(): VHDLParser.generate_statement_body_return = {
    val retval: VHDLParser.generate_statement_body_return = new VHDLParser.generate_statement_body_return()
    retval.start = input.LT(1)
    val generate_statement_body_StartIndex = input.index()
    var alternative_label: Identifier = null

    var block_declarative_item395: DeclarativeItem = null

    var concurrent_statement_list396: Seq[ConcurrentStatement] = null



    val tmpBockItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 125)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1215:3: ( ( ( block_declarative_item )* BEGIN )? concurrent_statement_list ({...}? => END (alternative_label= identifier )? SEMICOLON )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1216:2: ( ( block_declarative_item )* BEGIN )? concurrent_statement_list ({...}? => END (alternative_label= identifier )? SEMICOLON )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1216:2: ( ( block_declarative_item )* BEGIN )?
      var alt214 = 2
      alt214 = dfa214.predict(input)
      alt214 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1217:3: ( block_declarative_item )* BEGIN
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1217:3: ( block_declarative_item )*
          var loop213 = true
          do {
            var alt213 = 2
            val LA213_0 = input.LA(1)

            if ((LA213_0 == FUNCTION || LA213_0 == IMPURE || LA213_0 == PROCEDURE || LA213_0 == PURE)) {
              alt213 = 1
            }
            else if ((LA213_0 == PACKAGE) && ((vhdl2008))) {
              alt213 = 1
            }
            else if ((LA213_0 == ALIAS || LA213_0 == ATTRIBUTE || LA213_0 == COMPONENT || (LA213_0 >= CONSTANT && LA213_0 <= DISCONNECT) || (LA213_0 >= FILE && LA213_0 <= FOR) || LA213_0 == GROUP || (LA213_0 >= SHARED && LA213_0 <= SIGNAL) || LA213_0 == SUBTYPE || LA213_0 == TYPE || (LA213_0 >= USE && LA213_0 <= VARIABLE))) {
              alt213 = 1
            }
            else if (((LA213_0 >= NATURE && LA213_0 <= QUANTITY) || (LA213_0 >= SUBNATURE && LA213_0 <= LIMIT)) && ((ams))) {
              alt213 = 1
            }


            alt213 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1217:4: block_declarative_item
                pushFollow(FOLLOW_block_declarative_item_in_generate_statement_body7491)
                block_declarative_item395 = block_declarative_item();

                state._fsp -= 1
                if (state.failed) return retval
                if (state.backtracking == 0) {
                  tmpBockItems += block_declarative_item395
                }


              case _ => loop213 = false
            }
          } while (loop213);

          `match`(input, BEGIN, FOLLOW_BEGIN_in_generate_statement_body7498);
          if (state.failed) return retval


        case _ =>
      }

      pushFollow(FOLLOW_concurrent_statement_list_in_generate_statement_body7505)
      concurrent_statement_list396 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return retval
      if (state.backtracking == 0) {

        retval.blockItems = tmpBockItems.result
        retval.statementList = concurrent_statement_list396

      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1225:2: ({...}? => END (alternative_label= identifier )? SEMICOLON )?
      var alt216 = 2
      val LA216_0 = input.LA(1)

      if ((LA216_0 == END)) {
        val LA216_1 = input.LA(2)

        if ((LA216_1 == SEMICOLON || (LA216_1 >= BASIC_IDENTIFIER && LA216_1 <= EXTENDED_IDENTIFIER)) && ((vhdl2008))) {
          alt216 = 1
        }
      }
      alt216 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1225:3: {...}? => END (alternative_label= identifier )? SEMICOLON
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return retval
            }
            throw new FailedPredicateException(input, "generate_statement_body", "vhdl2008")
          }
          `match`(input, END, FOLLOW_END_in_generate_statement_body7514);
          if (state.failed) return retval
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1225:37: (alternative_label= identifier )?
          var alt215 = 2
          val LA215_0 = input.LA(1)

          if (((LA215_0 >= BASIC_IDENTIFIER && LA215_0 <= EXTENDED_IDENTIFIER))) {
            alt215 = 1
          }
          alt215 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1225:37: alternative_label= identifier
              pushFollow(FOLLOW_identifier_in_generate_statement_body7518)
              alternative_label = identifier();

              state._fsp -= 1
              if (state.failed) return retval


            case _ =>
          }

          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_generate_statement_body7521);
          if (state.failed) return retval


        case _ =>
      }




      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 125, generate_statement_body_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "generate_statement_body"

  // $ANTLR start "ams_concurrent_break_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1227:1: ams_concurrent_break_statement[Identifier label] returns [ConcurrentBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_concurrent_break_statement(label: Identifier): ConcurrentBreakStatement = {
    var breakStmt: ConcurrentBreakStatement = null;
    val ams_concurrent_break_statement_StartIndex = input.index()
    var BREAK397: Token = null
    var ams_break_element_list398: Seq[BreakElement] = null

    var name_list399: Seq[Name] = null

    var expression400: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 126)) {
        return breakStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1227:95: ( BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:2: BREAK ( ams_break_element_list )? ( ON name_list )? ( WHEN expression )? SEMICOLON
      BREAK397 = `match`(input, BREAK, FOLLOW_BREAK_in_ams_concurrent_break_statement7537).asInstanceOf[Token];
      if (state.failed) return breakStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:8: ( ams_break_element_list )?
      var alt217 = 2
      val LA217_0 = input.LA(1)

      if ((LA217_0 == FOR || LA217_0 == STRING_LITERAL || (LA217_0 >= BASIC_IDENTIFIER && LA217_0 <= EXTENDED_IDENTIFIER))) {
        alt217 = 1
      }
      else if ((LA217_0 == 181) && ((vhdl2008))) {
        alt217 = 1
      }
      alt217 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:8: ams_break_element_list
          pushFollow(FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement7539)
          ams_break_element_list398 = ams_break_element_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:32: ( ON name_list )?
      var alt218 = 2
      val LA218_0 = input.LA(1)

      if ((LA218_0 == ON)) {
        alt218 = 1
      }
      alt218 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:33: ON name_list
          `match`(input, ON, FOLLOW_ON_in_ams_concurrent_break_statement7543);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_name_list_in_ams_concurrent_break_statement7545)
          name_list399 = name_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:48: ( WHEN expression )?
      var alt219 = 2
      val LA219_0 = input.LA(1)

      if ((LA219_0 == WHEN)) {
        alt219 = 1
      }
      alt219 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1228:49: WHEN expression
          `match`(input, WHEN, FOLLOW_WHEN_in_ams_concurrent_break_statement7550);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_expression_in_ams_concurrent_break_statement7552)
          expression400 = expression();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_concurrent_break_statement7556);
      if (state.failed) return breakStmt
      if (state.backtracking == 0) {
        breakStmt = new ConcurrentBreakStatement(toPosition(BREAK397), label, ams_break_element_list398, name_list399, expression400)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 126, ams_concurrent_break_statement_StartIndex)
      }
    }
    return breakStmt
  }

  // $ANTLR end "ams_concurrent_break_statement"

  // $ANTLR start "ams_simultaneous_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1232:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );
  @throws(classOf[RecognitionException])
  def ams_simultaneous_statement(label: Identifier): SimultaneousStatement = {
    var stmt: SimultaneousStatement = null;
    val ams_simultaneous_statement_StartIndex = input.index()
    var ams_simple_simultaneous_statement401: SimpleSimultaneousStatement = null

    var ams_simultaneous_if_statement402: SimultaneousIfStatement = null

    var ams_simultaneous_procedural_statement403: SimultaneousProceduralStatement = null

    var ams_simultaneous_case_statement404: SimultaneousCaseStatement = null

    var ams_simultaneous_null_statement405: SimultaneousNullStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 127)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1232:83: ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] )
      var alt220 = 5
      alt220 = dfa220.predict(input)
      alt220 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1233:2: ams_simple_simultaneous_statement[$label]
          pushFollow(FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement7574)
          ams_simple_simultaneous_statement401 = ams_simple_simultaneous_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simple_simultaneous_statement401
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:4: ams_simultaneous_if_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement7582)
          ams_simultaneous_if_statement402 = ams_simultaneous_if_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_if_statement402
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1235:4: ams_simultaneous_procedural_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement7590)
          ams_simultaneous_procedural_statement403 = ams_simultaneous_procedural_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_procedural_statement403
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1236:4: ams_simultaneous_case_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement7598)
          ams_simultaneous_case_statement404 = ams_simultaneous_case_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_case_statement404
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1237:4: ams_simultaneous_null_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement7606)
          ams_simultaneous_null_statement405 = ams_simultaneous_null_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_null_statement405
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 127, ams_simultaneous_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "ams_simultaneous_statement"

  // $ANTLR start "ams_simultaneous_statement_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1239:1: ams_simultaneous_statement_list returns [Seq[SimultaneousStatement] list] : ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_statement_list(): Seq[SimultaneousStatement] = {
    var list: Seq[SimultaneousStatement] = null;
    val ams_simultaneous_statement_list_StartIndex = input.index()
    var label_colon406: Identifier = null

    var ams_simultaneous_statement407: SimultaneousStatement = null



    val tmpList = new Buffer[SimultaneousStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 128)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1242:3: ( ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
      var loop222 = true
      do {
        var alt222 = 2
        val LA222_0 = input.LA(1)

        if (((LA222_0 >= PLUS && LA222_0 <= MINUS) || LA222_0 == STRING_LITERAL || (LA222_0 >= BASIC_IDENTIFIER && LA222_0 <= EXTENDED_IDENTIFIER))) {
          alt222 = 1
        }
        else if ((LA222_0 == 181) && ((vhdl2008))) {
          alt222 = 1
        }
        else if ((LA222_0 == ABS || LA222_0 == NEW || (LA222_0 >= NOT && LA222_0 <= NULL) || LA222_0 == LPAREN || LA222_0 == CHARACTER_LITERAL || (LA222_0 >= REAL_LITERAL && LA222_0 <= BIT_STRING_LITERAL))) {
          alt222 = 1
        }
        else if ((LA222_0 == AND || LA222_0 == NAND || LA222_0 == NOR || LA222_0 == OR || (LA222_0 >= XNOR && LA222_0 <= XOR)) && ((vhdl2008))) {
          alt222 = 1
        }
        else if ((LA222_0 == CASE || LA222_0 == IF || LA222_0 == PROCEDURAL)) {
          alt222 = 1
        }


        alt222 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:3: ( label_colon )? ams_simultaneous_statement[$label_colon.label]
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:3: ( label_colon )?
            var alt221 = 2
            val LA221_0 = input.LA(1)

            if (((LA221_0 >= BASIC_IDENTIFIER && LA221_0 <= EXTENDED_IDENTIFIER))) {
              val LA221_1 = input.LA(2)

              if ((LA221_1 == COLON)) {
                alt221 = 1
              }
            }
            alt221 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:3: label_colon
                pushFollow(FOLLOW_label_colon_in_ams_simultaneous_statement_list7627)
                label_colon406 = label_colon();

                state._fsp -= 1
                if (state.failed) return list


              case _ =>
            }

            pushFollow(FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list7630)
            ams_simultaneous_statement407 = ams_simultaneous_statement(label_colon406);

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += ams_simultaneous_statement407
            }


          case _ => loop222 = false
        }
      } while (loop222);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 128, ams_simultaneous_statement_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "ams_simultaneous_statement_list"

  // $ANTLR start "ams_simple_simultaneous_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1246:1: ams_simple_simultaneous_statement[Identifier label] returns [SimpleSimultaneousStatement stmt] : e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simple_simultaneous_statement(label: Identifier): SimpleSimultaneousStatement = {
    var stmt: SimpleSimultaneousStatement = null;
    val ams_simple_simultaneous_statement_StartIndex = input.index()
    var e1: Expression = null

    var e2: Expression = null

    var tolerance_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 129)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1246:96: (e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1247:2: e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON
      pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7656)
      e1 = simple_expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, AMS_ASSIGN, FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement7658);
      if (state.failed) return stmt
      pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7662)
      e2 = simple_expression();

      state._fsp -= 1
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1247:55: ( TOLERANCE tolerance_expression= expression )?
      var alt223 = 2
      val LA223_0 = input.LA(1)

      if ((LA223_0 == TOLERANCE)) {
        alt223 = 1
      }
      alt223 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1247:56: TOLERANCE tolerance_expression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement7665);
          if (state.failed) return stmt
          pushFollow(FOLLOW_expression_in_ams_simple_simultaneous_statement7669)
          tolerance_expression = expression();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement7673);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new SimpleSimultaneousStatement(label, e1, e2, tolerance_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 129, ams_simple_simultaneous_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "ams_simple_simultaneous_statement"

  // $ANTLR start "ams_simultaneous_if_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1250:1: ams_simultaneous_if_statement[Identifier label] returns [SimultaneousIfStatement ifStmt] : ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_if_statement(label: Identifier): SimultaneousIfStatement = {
    var ifStmt: SimultaneousIfStatement = null;
    val ams_simultaneous_if_statement_StartIndex = input.index()
    var ifToken: Token = null
    var if_condition: Expression = null

    var if_simultaneous_statement: Seq[SimultaneousStatement] = null

    var elsif_condition: Expression = null

    var else_if_simultaneous_statement: Seq[SimultaneousStatement] = null

    var else_simultaneous_statement: Seq[SimultaneousStatement] = null

    var end_if_label: Identifier = null



    val ifList = new Buffer[SimultaneousIfStatement.IfUsePart]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 130)) {
        return ifStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1253:3: (ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1254:2: ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON
      ifToken = `match`(input, IF, FOLLOW_IF_in_ams_simultaneous_if_statement7701).asInstanceOf[Token];
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement7705)
      if_condition = condition();

      state._fsp -= 1
      if (state.failed) return ifStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement7707);
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7713)
      if_simultaneous_statement = ams_simultaneous_statement_list();

      state._fsp -= 1
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifList += new SimultaneousIfStatement.IfUsePart(if_condition, if_simultaneous_statement)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1256:2: ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )*
      var loop224 = true
      do {
        var alt224 = 2
        val LA224_0 = input.LA(1)

        if ((LA224_0 == ELSIF)) {
          alt224 = 1
        }


        alt224 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1256:3: ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list
            `match`(input, ELSIF, FOLLOW_ELSIF_in_ams_simultaneous_if_statement7719);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement7723)
            elsif_condition = condition();

            state._fsp -= 1
            if (state.failed) return ifStmt
            `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement7725);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7731)
            else_if_simultaneous_statement = ams_simultaneous_statement_list();

            state._fsp -= 1
            if (state.failed) return ifStmt
            if (state.backtracking == 0) {
              ifList += new SimultaneousIfStatement.IfUsePart(elsif_condition, else_if_simultaneous_statement)
            }


          case _ => loop224 = false
        }
      } while (loop224);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1260:2: ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )?
      var alt225 = 2
      val LA225_0 = input.LA(1)

      if ((LA225_0 == ELSE)) {
        alt225 = 1
      }
      alt225 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1260:3: ELSE else_simultaneous_statement= ams_simultaneous_statement_list
          `match`(input, ELSE, FOLLOW_ELSE_in_ams_simultaneous_if_statement7743);
          if (state.failed) return ifStmt
          pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7749)
          else_simultaneous_statement = ams_simultaneous_statement_list();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_ams_simultaneous_if_statement7754);
      if (state.failed) return ifStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement7756);
      if (state.failed) return ifStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1262:22: (end_if_label= identifier )?
      var alt226 = 2
      val LA226_0 = input.LA(1)

      if (((LA226_0 >= BASIC_IDENTIFIER && LA226_0 <= EXTENDED_IDENTIFIER))) {
        alt226 = 1
      }
      alt226 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1262:22: end_if_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_if_statement7760)
          end_if_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement7763);
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifStmt = new SimultaneousIfStatement(toPosition(ifToken), label, ifList.result, else_simultaneous_statement, end_if_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 130, ams_simultaneous_if_statement_StartIndex)
      }
    }
    return ifStmt
  }

  // $ANTLR end "ams_simultaneous_if_statement"

  // $ANTLR start "ams_simultaneous_case_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1265:1: ams_simultaneous_case_statement[Identifier label] returns [SimultaneousCaseStatement caseStmt] : caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_case_statement(label: Identifier): SimultaneousCaseStatement = {
    var caseStmt: SimultaneousCaseStatement = null;
    val ams_simultaneous_case_statement_StartIndex = input.index()
    var caseToken: Token = null
    var end_case_label: Identifier = null

    var choices408: Seq[Choices.Choice] = null

    var ams_simultaneous_statement_list409: Seq[SimultaneousStatement] = null

    var expression410: Expression = null



    val alternatives = new Buffer[SimultaneousCaseStatement.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 131)) {
        return caseStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1268:3: (caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1269:2: caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON
      caseToken = `match`(input, CASE, FOLLOW_CASE_in_ams_simultaneous_case_statement7792).asInstanceOf[Token];
      if (state.failed) return caseStmt
      pushFollow(FOLLOW_expression_in_ams_simultaneous_case_statement7794)
      expression410 = expression();

      state._fsp -= 1
      if (state.failed) return caseStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_case_statement7796);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1270:3: ( WHEN choices ARROW ams_simultaneous_statement_list )+
      var cnt227 = 0
      var loop227 = true
      do {
        var alt227 = 2
        val LA227_0 = input.LA(1)

        if ((LA227_0 == WHEN)) {
          alt227 = 1
        }


        alt227 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1270:4: WHEN choices ARROW ams_simultaneous_statement_list
            `match`(input, WHEN, FOLLOW_WHEN_in_ams_simultaneous_case_statement7801);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_choices_in_ams_simultaneous_case_statement7803)
            choices408 = choices();

            state._fsp -= 1
            if (state.failed) return caseStmt
            `match`(input, ARROW, FOLLOW_ARROW_in_ams_simultaneous_case_statement7805);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement7807)
            ams_simultaneous_statement_list409 = ams_simultaneous_statement_list();

            state._fsp -= 1
            if (state.failed) return caseStmt
            if (state.backtracking == 0) {
              alternatives += new SimultaneousCaseStatement.When(choices408, ams_simultaneous_statement_list409)
            }


          case _ =>
            if (cnt227 >= 1) loop227 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return caseStmt
              }
              val eee = new EarlyExitException(227, input)
              throw eee
            }
        }
        cnt227 += 1
      } while (loop227);

      `match`(input, END, FOLLOW_END_in_ams_simultaneous_case_statement7814);
      if (state.failed) return caseStmt
      `match`(input, CASE, FOLLOW_CASE_in_ams_simultaneous_case_statement7816);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1271:25: (end_case_label= identifier )?
      var alt228 = 2
      val LA228_0 = input.LA(1)

      if (((LA228_0 >= BASIC_IDENTIFIER && LA228_0 <= EXTENDED_IDENTIFIER))) {
        alt228 = 1
      }
      alt228 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1271:25: end_case_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_case_statement7820)
          end_case_label = identifier();

          state._fsp -= 1
          if (state.failed) return caseStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement7823);
      if (state.failed) return caseStmt
      if (state.backtracking == 0) {
        caseStmt = new SimultaneousCaseStatement(toPosition(caseToken), label, expression410, alternatives.result, end_case_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 131, ams_simultaneous_case_statement_StartIndex)
      }
    }
    return caseStmt
  }

  // $ANTLR end "ams_simultaneous_case_statement"

  // $ANTLR start "ams_simultaneous_procedural_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1274:1: ams_simultaneous_procedural_statement[Identifier label] returns [SimultaneousProceduralStatement proceduralStmt] : procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_procedural_statement(label: Identifier): SimultaneousProceduralStatement = {
    var proceduralStmt: SimultaneousProceduralStatement = null;
    val ams_simultaneous_procedural_statement_StartIndex = input.index()
    var procedural: Token = null
    var end_procedural_label: Identifier = null

    var ams_simultaneous_procedural_declarative_item411: DeclarativeItem = null

    var sequence_of_statements412: Seq[SequentialStatement] = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 132)) {
        return proceduralStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1277:3: (procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1278:2: procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON
      procedural = `match`(input, PROCEDURAL, FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7848).asInstanceOf[Token];
      if (state.failed) return proceduralStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1278:24: ( IS )?
      var alt229 = 2
      val LA229_0 = input.LA(1)

      if ((LA229_0 == IS)) {
        alt229 = 1
      }
      alt229 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1278:24: IS
          `match`(input, IS, FOLLOW_IS_in_ams_simultaneous_procedural_statement7850); if (state.failed) return proceduralStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1279:3: ( ams_simultaneous_procedural_declarative_item )*
      var loop230 = true
      do {
        var alt230 = 2
        val LA230_0 = input.LA(1)

        if ((LA230_0 == ALIAS || LA230_0 == ATTRIBUTE || LA230_0 == CONSTANT || LA230_0 == FUNCTION || LA230_0 == GROUP || LA230_0 == IMPURE || LA230_0 == PROCEDURE || LA230_0 == PURE || LA230_0 == SHARED || LA230_0 == SUBTYPE || LA230_0 == TYPE || (LA230_0 >= USE && LA230_0 <= VARIABLE))) {
          alt230 = 1
        }


        alt230 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1279:4: ams_simultaneous_procedural_declarative_item
            pushFollow(FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7856)
            ams_simultaneous_procedural_declarative_item411 = ams_simultaneous_procedural_declarative_item();

            state._fsp -= 1
            if (state.failed) return proceduralStmt
            if (state.backtracking == 0) {
              items += ams_simultaneous_procedural_declarative_item411
            }


          case _ => loop230 = false
        }
      } while (loop230);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7862);
      if (state.failed) return proceduralStmt
      pushFollow(FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7866)
      sequence_of_statements412 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return proceduralStmt
      `match`(input, END, FOLLOW_END_in_ams_simultaneous_procedural_statement7869);
      if (state.failed) return proceduralStmt
      `match`(input, PROCEDURAL, FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7871);
      if (state.failed) return proceduralStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1282:37: (end_procedural_label= identifier )?
      var alt231 = 2
      val LA231_0 = input.LA(1)

      if (((LA231_0 >= BASIC_IDENTIFIER && LA231_0 <= EXTENDED_IDENTIFIER))) {
        alt231 = 1
      }
      alt231 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1282:37: end_procedural_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_procedural_statement7875)
          end_procedural_label = identifier();

          state._fsp -= 1
          if (state.failed) return proceduralStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7878);
      if (state.failed) return proceduralStmt
      if (state.backtracking == 0) {
        proceduralStmt = new SimultaneousProceduralStatement(toPosition(procedural), label, items.result, sequence_of_statements412, end_procedural_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 132, ams_simultaneous_procedural_statement_StartIndex)
      }
    }
    return proceduralStmt
  }

  // $ANTLR end "ams_simultaneous_procedural_statement"

  // $ANTLR start "ams_simultaneous_procedural_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1285:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def ams_simultaneous_procedural_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val ams_simultaneous_procedural_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body413: DeclarativeItem = null

    var type_declaration414: AbstractTypeDeclaration = null

    var subtype_declaration415: SubTypeDeclaration = null

    var constant_declaration416: ConstantDeclaration = null

    var variable_declaration417: VariableDeclaration = null

    var alias_declaration418: AliasDeclaration = null

    var attribute_declaration419: AttributeDeclaration = null

    var attribute_specification420: AttributeSpecification = null

    var use_clause421: UseClause = null

    var group_template_declaration422: GroupTemplateDeclaration = null

    var group_declaration423: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 133)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1285:77: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt232 = 11
      alt232 = dfa232.predict(input)
      alt232 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1286:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7896)
          subprogram_declartion_or_body413 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body413
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1287:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7903)
          type_declaration414 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration414
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1288:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7910)
          subtype_declaration415 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration415
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1289:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7917)
          constant_declaration416 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration416
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1290:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7924)
          variable_declaration417 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration417
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1291:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7931)
          alias_declaration418 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration418
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1292:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7938)
          attribute_declaration419 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration419
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1293:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7945)
          attribute_specification420 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification420
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1294:4: use_clause
          pushFollow(FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7952)
          use_clause421 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause421
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1295:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7959)
          group_template_declaration422 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration422
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1296:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7966)
          group_declaration423 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration423
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 133, ams_simultaneous_procedural_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "ams_simultaneous_procedural_declarative_item"

  // $ANTLR start "ams_simultaneous_null_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1298:1: ams_simultaneous_null_statement[Identifier label] returns [SimultaneousNullStatement nullStmt] : NULL SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_null_statement(label: Identifier): SimultaneousNullStatement = {
    var nullStmt: SimultaneousNullStatement = null;
    val ams_simultaneous_null_statement_StartIndex = input.index()
    var NULL424: Token = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 134)) {
        return nullStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1298:96: ( NULL SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1299:2: NULL SEMICOLON
      NULL424 = `match`(input, NULL, FOLLOW_NULL_in_ams_simultaneous_null_statement7983).asInstanceOf[Token];
      if (state.failed) return nullStmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7985);
      if (state.failed) return nullStmt
      if (state.backtracking == 0) {
        nullStmt = new SimultaneousNullStatement(toPosition(NULL424), label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 134, ams_simultaneous_null_statement_StartIndex)
      }
    }
    return nullStmt
  }

  // $ANTLR end "ams_simultaneous_null_statement"

  // $ANTLR start "sequence_of_statements"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1303:1: sequence_of_statements returns [Seq[SequentialStatement] list] : ( sequential_statement )* ;
  @throws(classOf[RecognitionException])
  def sequence_of_statements(): Seq[SequentialStatement] = {
    var list: Seq[SequentialStatement] = null;
    val sequence_of_statements_StartIndex = input.index()
    var sequential_statement425: SequentialStatement = null



    val tmpList = new Buffer[SequentialStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 135)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1306:3: ( ( sequential_statement )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1307:2: ( sequential_statement )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1307:2: ( sequential_statement )*
      var loop233 = true
      do {
        var alt233 = 2
        val LA233_0 = input.LA(1)

        if ((LA233_0 == ASSERT || LA233_0 == REPORT || LA233_0 == WAIT || LA233_0 == STRING_LITERAL || (LA233_0 >= BASIC_IDENTIFIER && LA233_0 <= EXTENDED_IDENTIFIER))) {
          alt233 = 1
        }
        else if ((LA233_0 == 181) && ((vhdl2008))) {
          alt233 = 1
        }
        else if ((LA233_0 == LPAREN)) {
          alt233 = 1
        }
        else if ((LA233_0 == WITH) && ((vhdl2008))) {
          alt233 = 1
        }
        else if ((LA233_0 == CASE || LA233_0 == EXIT || LA233_0 == FOR || LA233_0 == IF || LA233_0 == LOOP || LA233_0 == NEXT || LA233_0 == NULL || LA233_0 == RETURN || LA233_0 == WHILE)) {
          alt233 = 1
        }
        else if ((LA233_0 == BREAK) && ((ams))) {
          alt233 = 1
        }


        alt233 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1307:3: sequential_statement
            pushFollow(FOLLOW_sequential_statement_in_sequence_of_statements8007)
            sequential_statement425 = sequential_statement();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += sequential_statement425
            }


          case _ => loop233 = false
        }
      } while (loop233);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 135, sequence_of_statements_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "sequence_of_statements"

  // $ANTLR start "sequential_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1310:1: sequential_statement returns [SequentialStatement stmt] : (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ | WITH )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) ;
  @throws(classOf[RecognitionException])
  def sequential_statement(): SequentialStatement = {
    var stmt: SequentialStatement = null;
    val sequential_statement_StartIndex = input.index()
    var label: Identifier = null

    var wait_statement426: WaitStatement = null

    var assertion_statement427: AssertionStatement = null

    var report_statement428: ReportStatement = null

    var signal_assignment_statement429: SignalAssignmentStatement = null

    var variable_assignment_statement430: VariableAssignmentStatement = null

    var if_statement431: IfStatement = null

    var case_statement432: CaseStatement = null

    var loop_statement433: SequentialStatement = null

    var next_statement434: NextStatement = null

    var exit_statement435: ExitStatement = null

    var return_statement436: ReturnStatement = null

    var null_statement437: NullStatement = null

    var procedure_call_statement438: ProcedureCallStatement = null

    var ams_break_statement439: AMSBreakStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 136)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1310:57: ( (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ | WITH )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1311:2: (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ | WITH )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1311:7: (label= label_colon )?
      var alt234 = 2
      alt234 = dfa234.predict(input)
      alt234 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1311:7: label= label_colon
          pushFollow(FOLLOW_label_colon_in_sequential_statement8028)
          label = label_colon();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1312:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ | WITH )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
      var alt235 = 14
      alt235 = dfa235.predict(input)
      alt235 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1312:3: wait_statement[$label.label]
          pushFollow(FOLLOW_wait_statement_in_sequential_statement8034)
          wait_statement426 = wait_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = wait_statement426
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1313:4: assertion_statement[$label.label]
          pushFollow(FOLLOW_assertion_statement_in_sequential_statement8042)
          assertion_statement427 = assertion_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = assertion_statement427
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1314:4: report_statement[$label.label]
          pushFollow(FOLLOW_report_statement_in_sequential_statement8050)
          report_statement428 = report_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = report_statement428
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1315:4: ( target LEQ | WITH )=> signal_assignment_statement[$label.label]
          pushFollow(FOLLOW_signal_assignment_statement_in_sequential_statement8068)
          signal_assignment_statement429 = signal_assignment_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = signal_assignment_statement429
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:4: ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label]
          pushFollow(FOLLOW_variable_assignment_statement_in_sequential_statement8086)
          variable_assignment_statement430 = variable_assignment_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = variable_assignment_statement430
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1317:4: if_statement[$label.label]
          pushFollow(FOLLOW_if_statement_in_sequential_statement8094)
          if_statement431 = if_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = if_statement431
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1318:4: case_statement[$label.label]
          pushFollow(FOLLOW_case_statement_in_sequential_statement8102)
          case_statement432 = case_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = case_statement432
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1319:4: loop_statement[$label.label]
          pushFollow(FOLLOW_loop_statement_in_sequential_statement8110)
          loop_statement433 = loop_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = loop_statement433
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1320:4: next_statement[$label.label]
          pushFollow(FOLLOW_next_statement_in_sequential_statement8118)
          next_statement434 = next_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = next_statement434
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1321:4: exit_statement[$label.label]
          pushFollow(FOLLOW_exit_statement_in_sequential_statement8126)
          exit_statement435 = exit_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = exit_statement435
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1322:4: return_statement[$label.label]
          pushFollow(FOLLOW_return_statement_in_sequential_statement8134)
          return_statement436 = return_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = return_statement436
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1323:4: null_statement[$label.label]
          pushFollow(FOLLOW_null_statement_in_sequential_statement8142)
          null_statement437 = null_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = null_statement437
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1324:4: procedure_call_statement[$label.label]
          pushFollow(FOLLOW_procedure_call_statement_in_sequential_statement8150)
          procedure_call_statement438 = procedure_call_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = procedure_call_statement438
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1325:4: {...}? => ams_break_statement[$label.label]
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            throw new FailedPredicateException(input, "sequential_statement", "ams")
          }
          pushFollow(FOLLOW_ams_break_statement_in_sequential_statement8160)
          ams_break_statement439 = ams_break_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_break_statement439
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 136, sequential_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "sequential_statement"

  // $ANTLR start "wait_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1328:1: wait_statement[Identifier label] returns [WaitStatement waitStmt] : WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def wait_statement(label: Identifier): WaitStatement = {
    var waitStmt: WaitStatement = null;
    val wait_statement_StartIndex = input.index()
    var WAIT440: Token = null
    var name_list441: Seq[Name] = null

    var condition442: Expression = null

    var expression443: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 137)) {
        return waitStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1328:67: ( WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:2: WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON
      WAIT440 = `match`(input, WAIT, FOLLOW_WAIT_in_wait_statement8181).asInstanceOf[Token];
      if (state.failed) return waitStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:7: ( ON name_list )?
      var alt236 = 2
      val LA236_0 = input.LA(1)

      if ((LA236_0 == ON)) {
        alt236 = 1
      }
      alt236 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:8: ON name_list
          `match`(input, ON, FOLLOW_ON_in_wait_statement8184);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_name_list_in_wait_statement8186)
          name_list441 = name_list();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:23: ( UNTIL condition )?
      var alt237 = 2
      val LA237_0 = input.LA(1)

      if ((LA237_0 == UNTIL)) {
        alt237 = 1
      }
      alt237 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:24: UNTIL condition
          `match`(input, UNTIL, FOLLOW_UNTIL_in_wait_statement8191);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_condition_in_wait_statement8193)
          condition442 = condition();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:42: ( FOR expression )?
      var alt238 = 2
      val LA238_0 = input.LA(1)

      if ((LA238_0 == FOR)) {
        alt238 = 1
      }
      alt238 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:43: FOR expression
          `match`(input, FOR, FOLLOW_FOR_in_wait_statement8198);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_expression_in_wait_statement8200)
          expression443 = expression();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_wait_statement8204);
      if (state.failed) return waitStmt
      if (state.backtracking == 0) {
        waitStmt = new WaitStatement(toPosition(WAIT440), label, name_list441, condition442, expression443)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 137, wait_statement_StartIndex)
      }
    }
    return waitStmt
  }

  // $ANTLR end "wait_statement"

  // $ANTLR start "assertion_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1332:1: assertion_statement[Identifier label] returns [AssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def assertion_statement(label: Identifier): AssertionStatement = {
    var assertStmt: AssertionStatement = null;
    val assertion_statement_StartIndex = input.index()
    var ASSERT444: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null

    var condition445: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 138)) {
        return assertStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1332:79: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1333:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
      ASSERT444 = `match`(input, ASSERT, FOLLOW_ASSERT_in_assertion_statement8225).asInstanceOf[Token];
      if (state.failed) return assertStmt
      pushFollow(FOLLOW_condition_in_assertion_statement8227)
      condition445 = condition();

      state._fsp -= 1
      if (state.failed) return assertStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1333:19: ( REPORT report_expression= expression )?
      var alt239 = 2
      val LA239_0 = input.LA(1)

      if ((LA239_0 == REPORT)) {
        alt239 = 1
      }
      alt239 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1333:20: REPORT report_expression= expression
          `match`(input, REPORT, FOLLOW_REPORT_in_assertion_statement8230);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_assertion_statement8234)
          report_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1333:58: ( SEVERITY severity_expression= expression )?
      var alt240 = 2
      val LA240_0 = input.LA(1)

      if ((LA240_0 == SEVERITY)) {
        alt240 = 1
      }
      alt240 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1333:59: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_assertion_statement8239);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_assertion_statement8243)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_assertion_statement8247);
      if (state.failed) return assertStmt
      if (state.backtracking == 0) {
        assertStmt = new AssertionStatement(toPosition(ASSERT444), label, condition445, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 138, assertion_statement_StartIndex)
      }
    }
    return assertStmt
  }

  // $ANTLR end "assertion_statement"

  // $ANTLR start "report_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1336:1: report_statement[Identifier label] returns [ReportStatement reportStmt] : REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def report_statement(label: Identifier): ReportStatement = {
    var reportStmt: ReportStatement = null;
    val report_statement_StartIndex = input.index()
    var REPORT446: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 139)) {
        return reportStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1336:73: ( REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1337:2: REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON
      REPORT446 = `match`(input, REPORT, FOLLOW_REPORT_in_report_statement8272).asInstanceOf[Token];
      if (state.failed) return reportStmt
      pushFollow(FOLLOW_expression_in_report_statement8276)
      report_expression = expression();

      state._fsp -= 1
      if (state.failed) return reportStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1337:38: ( SEVERITY severity_expression= expression )?
      var alt241 = 2
      val LA241_0 = input.LA(1)

      if ((LA241_0 == SEVERITY)) {
        alt241 = 1
      }
      alt241 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1337:39: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_report_statement8279);
          if (state.failed) return reportStmt
          pushFollow(FOLLOW_expression_in_report_statement8283)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return reportStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_report_statement8287);
      if (state.failed) return reportStmt
      if (state.backtracking == 0) {
        reportStmt = new ReportStatement(toPosition(REPORT446), label, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 139, report_statement_StartIndex)
      }
    }
    return reportStmt
  }

  // $ANTLR end "report_statement"

  // $ANTLR start "signal_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1340:1: signal_assignment_statement[Identifier label] returns [SignalAssignmentStatement signalAssignStmt] : ( v2008_conditional_signal_assignment[$label] | {...}? => v2008_selected_signal_assignment[$label] );
  @throws(classOf[RecognitionException])
  def signal_assignment_statement(label: Identifier): SignalAssignmentStatement = {
    var signalAssignStmt: SignalAssignmentStatement = null;
    val signal_assignment_statement_StartIndex = input.index()
    var v2008_conditional_signal_assignment447: SimpleSignalAssignmentStatement = null

    var v2008_selected_signal_assignment448: SignalAssignmentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 140)) {
        return signalAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1340:100: ( v2008_conditional_signal_assignment[$label] | {...}? => v2008_selected_signal_assignment[$label] )
      var alt242 = 2
      val LA242_0 = input.LA(1)

      if ((LA242_0 == STRING_LITERAL || (LA242_0 >= BASIC_IDENTIFIER && LA242_0 <= EXTENDED_IDENTIFIER))) {
        alt242 = 1
      }
      else if ((LA242_0 == 181) && ((vhdl2008))) {
        alt242 = 1
      }
      else if ((LA242_0 == LPAREN)) {
        alt242 = 1
      }
      else if ((LA242_0 == WITH) && ((vhdl2008))) {
        alt242 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return signalAssignStmt
        }
        val nvae = new NoViableAltException("", 242, 0, input)

        throw nvae
      }
      alt242 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1341:2: v2008_conditional_signal_assignment[$label]
          pushFollow(FOLLOW_v2008_conditional_signal_assignment_in_signal_assignment_statement8305)
          v2008_conditional_signal_assignment447 = v2008_conditional_signal_assignment(label);

          state._fsp -= 1
          if (state.failed) return signalAssignStmt
          if (state.backtracking == 0) {
            signalAssignStmt = v2008_conditional_signal_assignment447
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1342:4: {...}? => v2008_selected_signal_assignment[$label]
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return signalAssignStmt
            }
            throw new FailedPredicateException(input, "signal_assignment_statement", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_selected_signal_assignment_in_signal_assignment_statement8315)
          v2008_selected_signal_assignment448 = v2008_selected_signal_assignment(label);

          state._fsp -= 1
          if (state.failed) return signalAssignStmt
          if (state.backtracking == 0) {
            signalAssignStmt = v2008_selected_signal_assignment448
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 140, signal_assignment_statement_StartIndex)
      }
    }
    return signalAssignStmt
  }

  // $ANTLR end "signal_assignment_statement"

  // $ANTLR start "v2008_conditional_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1344:1: v2008_conditional_signal_assignment[Identifier label] returns [SimpleSignalAssignmentStatement stmt] : target LEQ ({...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] ) | (delay= delay_mechanism )? waveform ) SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_conditional_signal_assignment(label: Identifier): SimpleSignalAssignmentStatement = {
    var stmt: SimpleSignalAssignmentStatement = null;
    val v2008_conditional_signal_assignment_StartIndex = input.index()
    var LEQ449: Token = null
    var delay: DelayMechanism = null

    var target450: Target = null

    var waveform451: Waveform = null



    val elements = new Buffer[ConcurrentConditionalSignalAssignment.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 141)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1347:3: ( target LEQ ({...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] ) | (delay= delay_mechanism )? waveform ) SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1348:2: target LEQ ({...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] ) | (delay= delay_mechanism )? waveform ) SEMICOLON
      pushFollow(FOLLOW_target_in_v2008_conditional_signal_assignment8338)
      target450 = target();

      state._fsp -= 1
      if (state.failed) return stmt
      LEQ449 = `match`(input, LEQ, FOLLOW_LEQ_in_v2008_conditional_signal_assignment8340).asInstanceOf[Token];
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1349:3: ({...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] ) | (delay= delay_mechanism )? waveform )
      var alt248 = 2
      alt248 = dfa248.predict(input)
      alt248 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1350:3: {...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            throw new FailedPredicateException(input, "v2008_conditional_signal_assignment", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1350:16: ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] )
          var alt246 = 3
          val LA246_0 = input.LA(1)

          if ((LA246_0 == RELEASE)) {
            alt246 = 1
          }
          else if ((LA246_0 == FORCE)) {
            alt246 = 2
          }
          else if ((LA246_0 == INERTIAL || LA246_0 == REJECT || LA246_0 == TRANSPORT || (LA246_0 >= PLUS && LA246_0 <= MINUS) || LA246_0 == STRING_LITERAL || (LA246_0 >= BASIC_IDENTIFIER && LA246_0 <= EXTENDED_IDENTIFIER))) {
            alt246 = 3
          }
          else if ((LA246_0 == 181) && ((vhdl2008))) {
            alt246 = 3
          }
          else if ((LA246_0 == ABS || LA246_0 == NEW || (LA246_0 >= NOT && LA246_0 <= NULL) || LA246_0 == LPAREN || LA246_0 == CHARACTER_LITERAL || (LA246_0 >= REAL_LITERAL && LA246_0 <= BIT_STRING_LITERAL))) {
            alt246 = 3
          }
          else if ((LA246_0 == AND || LA246_0 == NAND || LA246_0 == NOR || LA246_0 == OR || (LA246_0 >= XNOR && LA246_0 <= XOR) || LA246_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            alt246 = 3
          }
          else if ((LA246_0 == UNAFFECTED)) {
            alt246 = 3
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            val nvae = new NoViableAltException("", 246, 0, input)

            throw nvae
          }
          alt246 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1351:4: RELEASE ( IN | OUT )?
              `match`(input, RELEASE, FOLLOW_RELEASE_in_v2008_conditional_signal_assignment8360);
              if (state.failed) return stmt
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1351:12: ( IN | OUT )?
              var alt243 = 2
              val LA243_0 = input.LA(1)

              if ((LA243_0 == IN || LA243_0 == OUT)) {
                alt243 = 1
              }
              alt243 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:
                  if (input.LA(1) == IN || input.LA(1) == OUT) {
                    input.consume()
                    state.errorRecovery = false;
                    state.failed = false
                  }
                  else {
                    if (state.backtracking > 0) {
                      state.failed = true; return stmt
                    }
                    val mse = new MismatchedSetException(null, input)
                    throw mse

                  }


                case _ =>
              }


            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1352:6: FORCE ( IN | OUT )? v2008_conditional_expressions
              `match`(input, FORCE, FOLLOW_FORCE_in_v2008_conditional_signal_assignment8374);
              if (state.failed) return stmt
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1352:12: ( IN | OUT )?
              var alt244 = 2
              val LA244_0 = input.LA(1)

              if ((LA244_0 == IN || LA244_0 == OUT)) {
                alt244 = 1
              }
              alt244 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:
                  if (input.LA(1) == IN || input.LA(1) == OUT) {
                    input.consume()
                    state.errorRecovery = false;
                    state.failed = false
                  }
                  else {
                    if (state.backtracking > 0) {
                      state.failed = true; return stmt
                    }
                    val mse = new MismatchedSetException(null, input)
                    throw mse

                  }


                case _ =>
              }

              pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_signal_assignment8383)
              v2008_conditional_expressions();

              state._fsp -= 1
              if (state.failed) return stmt

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1353:6: ( delay_mechanism )? conditional_waveforms[elements]
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1353:6: ( delay_mechanism )?
              var alt245 = 2
              val LA245_0 = input.LA(1)

              if ((LA245_0 == INERTIAL || LA245_0 == REJECT || LA245_0 == TRANSPORT)) {
                alt245 = 1
              }
              alt245 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1353:6: delay_mechanism
                  pushFollow(FOLLOW_delay_mechanism_in_v2008_conditional_signal_assignment8391)
                  delay_mechanism();

                  state._fsp -= 1
                  if (state.failed) return stmt


                case _ =>
              }

              pushFollow(FOLLOW_conditional_waveforms_in_v2008_conditional_signal_assignment8394)
              conditional_waveforms(elements);

              state._fsp -= 1
              if (state.failed) return stmt


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1355:5: (delay= delay_mechanism )? waveform
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1355:10: (delay= delay_mechanism )?
          var alt247 = 2
          val LA247_0 = input.LA(1)

          if ((LA247_0 == INERTIAL || LA247_0 == REJECT || LA247_0 == TRANSPORT)) {
            alt247 = 1
          }
          alt247 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1355:10: delay= delay_mechanism
              pushFollow(FOLLOW_delay_mechanism_in_v2008_conditional_signal_assignment8409)
              delay = delay_mechanism();

              state._fsp -= 1
              if (state.failed) return stmt


            case _ =>
          }

          pushFollow(FOLLOW_waveform_in_v2008_conditional_signal_assignment8412)
          waveform451 = waveform();

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = new SimpleSignalAssignmentStatement(toPosition(LEQ449), label, target450, delay, waveform451)
          }


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_conditional_signal_assignment8419);
      if (state.failed) return stmt


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 141, v2008_conditional_signal_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "v2008_conditional_signal_assignment"

  // $ANTLR start "v2008_selected_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1358:1: v2008_selected_signal_assignment[Identifier label] returns [SignalAssignmentStatement stmt] : WITH expression SELECT ( QMARK )? target LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( IN | OUT )? v2008_selected_expressions ) SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_selected_signal_assignment(label: Identifier): SignalAssignmentStatement = {
    var stmt: SignalAssignmentStatement = null;
    val v2008_selected_signal_assignment_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 142)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1358:93: ( WITH expression SELECT ( QMARK )? target LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( IN | OUT )? v2008_selected_expressions ) SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1359:2: WITH expression SELECT ( QMARK )? target LEQ ( ( delay_mechanism )? selected_waveforms | FORCE ( IN | OUT )? v2008_selected_expressions ) SEMICOLON
      `match`(input, WITH, FOLLOW_WITH_in_v2008_selected_signal_assignment8435);
      if (state.failed) return stmt
      pushFollow(FOLLOW_expression_in_v2008_selected_signal_assignment8437)
      expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SELECT, FOLLOW_SELECT_in_v2008_selected_signal_assignment8439);
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1359:25: ( QMARK )?
      var alt249 = 2
      val LA249_0 = input.LA(1)

      if ((LA249_0 == QMARK)) {
        alt249 = 1
      }
      alt249 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1359:25: QMARK
          `match`(input, QMARK, FOLLOW_QMARK_in_v2008_selected_signal_assignment8441); if (state.failed) return stmt


        case _ =>
      }

      pushFollow(FOLLOW_target_in_v2008_selected_signal_assignment8446)
      target();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, LEQ, FOLLOW_LEQ_in_v2008_selected_signal_assignment8448);
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1361:3: ( ( delay_mechanism )? selected_waveforms | FORCE ( IN | OUT )? v2008_selected_expressions )
      var alt252 = 2
      val LA252_0 = input.LA(1)

      if ((LA252_0 == INERTIAL || LA252_0 == REJECT || LA252_0 == TRANSPORT || (LA252_0 >= PLUS && LA252_0 <= MINUS) || LA252_0 == STRING_LITERAL || (LA252_0 >= BASIC_IDENTIFIER && LA252_0 <= EXTENDED_IDENTIFIER))) {
        alt252 = 1
      }
      else if ((LA252_0 == 181) && ((vhdl2008))) {
        alt252 = 1
      }
      else if ((LA252_0 == ABS || LA252_0 == NEW || (LA252_0 >= NOT && LA252_0 <= NULL) || LA252_0 == LPAREN || LA252_0 == CHARACTER_LITERAL || (LA252_0 >= REAL_LITERAL && LA252_0 <= BIT_STRING_LITERAL))) {
        alt252 = 1
      }
      else if ((LA252_0 == AND || LA252_0 == NAND || LA252_0 == NOR || LA252_0 == OR || (LA252_0 >= XNOR && LA252_0 <= XOR) || LA252_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
        alt252 = 1
      }
      else if ((LA252_0 == UNAFFECTED)) {
        alt252 = 1
      }
      else if ((LA252_0 == FORCE)) {
        alt252 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return stmt
        }
        val nvae = new NoViableAltException("", 252, 0, input)

        throw nvae
      }
      alt252 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1362:3: ( delay_mechanism )? selected_waveforms
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1362:3: ( delay_mechanism )?
          var alt250 = 2
          val LA250_0 = input.LA(1)

          if ((LA250_0 == INERTIAL || LA250_0 == REJECT || LA250_0 == TRANSPORT)) {
            alt250 = 1
          }
          alt250 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1362:3: delay_mechanism
              pushFollow(FOLLOW_delay_mechanism_in_v2008_selected_signal_assignment8456)
              delay_mechanism();

              state._fsp -= 1
              if (state.failed) return stmt


            case _ =>
          }

          pushFollow(FOLLOW_selected_waveforms_in_v2008_selected_signal_assignment8459)
          selected_waveforms();

          state._fsp -= 1
          if (state.failed) return stmt

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1363:5: FORCE ( IN | OUT )? v2008_selected_expressions
          `match`(input, FORCE, FOLLOW_FORCE_in_v2008_selected_signal_assignment8466);
          if (state.failed) return stmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1363:11: ( IN | OUT )?
          var alt251 = 2
          val LA251_0 = input.LA(1)

          if ((LA251_0 == IN || LA251_0 == OUT)) {
            alt251 = 1
          }
          alt251 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:
              if (input.LA(1) == IN || input.LA(1) == OUT) {
                input.consume()
                state.errorRecovery = false;
                state.failed = false
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return stmt
                }
                val mse = new MismatchedSetException(null, input)
                throw mse

              }


            case _ =>
          }

          pushFollow(FOLLOW_v2008_selected_expressions_in_v2008_selected_signal_assignment8475)
          v2008_selected_expressions();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_selected_signal_assignment8481);
      if (state.failed) return stmt


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 142, v2008_selected_signal_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "v2008_selected_signal_assignment"

  // $ANTLR start "delay_mechanism"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1366:1: delay_mechanism returns [DelayMechanism mechanism] : ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL );
  @throws(classOf[RecognitionException])
  def delay_mechanism(): DelayMechanism = {
    var mechanism: DelayMechanism = null;
    val delay_mechanism_StartIndex = input.index()
    var time_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 143)) {
        return mechanism
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1370:3: ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL )
      var alt254 = 2
      val LA254_0 = input.LA(1)

      if ((LA254_0 == TRANSPORT)) {
        alt254 = 1
      }
      else if ((LA254_0 == INERTIAL || LA254_0 == REJECT)) {
        alt254 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return mechanism
        }
        val nvae = new NoViableAltException("", 254, 0, input)

        throw nvae
      }
      alt254 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1371:2: TRANSPORT
          `match`(input, TRANSPORT, FOLLOW_TRANSPORT_in_delay_mechanism8504); if (state.failed) return mechanism

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1372:4: ( REJECT time_expression= expression )? INERTIAL
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1372:4: ( REJECT time_expression= expression )?
          var alt253 = 2
          val LA253_0 = input.LA(1)

          if ((LA253_0 == REJECT)) {
            alt253 = 1
          }
          alt253 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1372:5: REJECT time_expression= expression
              `match`(input, REJECT, FOLLOW_REJECT_in_delay_mechanism8511);
              if (state.failed) return mechanism
              pushFollow(FOLLOW_expression_in_delay_mechanism8515)
              time_expression = expression();

              state._fsp -= 1
              if (state.failed) return mechanism


            case _ =>
          }

          `match`(input, INERTIAL, FOLLOW_INERTIAL_in_delay_mechanism8519);
          if (state.failed) return mechanism


        case _ =>
      }
      if (state.backtracking == 0) {

        if (time_expression == null) mechanism = new DelayMechanism(DelayMechanism.DelayType.TRANSPORT, None)
        else mechanism = new DelayMechanism(DelayMechanism.DelayType.INERTIAL, time_expression)

      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 143, delay_mechanism_StartIndex)
      }
    }
    return mechanism
  }

  // $ANTLR end "delay_mechanism"

  // $ANTLR start "waveform_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1374:1: waveform_element returns [Waveform.Element element] : value_expression= expression ( AFTER time_expression= expression )? ;
  @throws(classOf[RecognitionException])
  def waveform_element(): Waveform.Element = {
    var element: Waveform.Element = null;
    val waveform_element_StartIndex = input.index()
    var value_expression: Expression = null

    var time_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 144)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1374:53: (value_expression= expression ( AFTER time_expression= expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1375:2: value_expression= expression ( AFTER time_expression= expression )?
      pushFollow(FOLLOW_expression_in_waveform_element8534)
      value_expression = expression();

      state._fsp -= 1
      if (state.failed) return element
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1375:30: ( AFTER time_expression= expression )?
      var alt255 = 2
      val LA255_0 = input.LA(1)

      if ((LA255_0 == AFTER)) {
        alt255 = 1
      }
      alt255 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1375:31: AFTER time_expression= expression
          `match`(input, AFTER, FOLLOW_AFTER_in_waveform_element8537);
          if (state.failed) return element
          pushFollow(FOLLOW_expression_in_waveform_element8541)
          time_expression = expression();

          state._fsp -= 1
          if (state.failed) return element


        case _ =>
      }

      if (state.backtracking == 0) {
        return new Waveform.Element(value_expression, time_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 144, waveform_element_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "waveform_element"

  // $ANTLR start "waveform"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1378:1: waveform returns [Waveform waveForm] : (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED ) ;
  @throws(classOf[RecognitionException])
  def waveform(): Waveform = {
    var waveForm: Waveform = null;
    val waveform_StartIndex = input.index()
    var e1: Waveform.Element = null

    var e2: Waveform.Element = null



    val elements = new Buffer[Waveform.Element]()
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 145)) {
        return waveForm
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1382:3: ( (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1383:2: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1383:2: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
      var alt257 = 2
      val LA257_0 = input.LA(1)

      if (((LA257_0 >= PLUS && LA257_0 <= MINUS) || LA257_0 == STRING_LITERAL || (LA257_0 >= BASIC_IDENTIFIER && LA257_0 <= EXTENDED_IDENTIFIER))) {
        alt257 = 1
      }
      else if ((LA257_0 == 181) && ((vhdl2008))) {
        alt257 = 1
      }
      else if ((LA257_0 == ABS || LA257_0 == NEW || (LA257_0 >= NOT && LA257_0 <= NULL) || LA257_0 == LPAREN || LA257_0 == CHARACTER_LITERAL || (LA257_0 >= REAL_LITERAL && LA257_0 <= BIT_STRING_LITERAL))) {
        alt257 = 1
      }
      else if ((LA257_0 == AND || LA257_0 == NAND || LA257_0 == NOR || LA257_0 == OR || (LA257_0 >= XNOR && LA257_0 <= XOR) || LA257_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
        alt257 = 1
      }
      else if ((LA257_0 == UNAFFECTED)) {
        alt257 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return waveForm
        }
        val nvae = new NoViableAltException("", 257, 0, input)

        throw nvae
      }
      alt257 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1384:3: e1= waveform_element ( COMMA e2= waveform_element )*
          pushFollow(FOLLOW_waveform_element_in_waveform8573)
          e1 = waveform_element();

          state._fsp -= 1
          if (state.failed) return waveForm
          if (state.backtracking == 0) {
            elements += e1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1384:48: ( COMMA e2= waveform_element )*
          var loop256 = true
          do {
            var alt256 = 2
            val LA256_0 = input.LA(1)

            if ((LA256_0 == COMMA)) {
              alt256 = 1
            }


            alt256 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1384:49: COMMA e2= waveform_element
                `match`(input, COMMA, FOLLOW_COMMA_in_waveform8577);
                if (state.failed) return waveForm
                pushFollow(FOLLOW_waveform_element_in_waveform8581)
                e2 = waveform_element();

                state._fsp -= 1
                if (state.failed) return waveForm
                if (state.backtracking == 0) {
                  elements += e2
                }


              case _ => loop256 = false
            }
          } while (loop256);


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1385:5: UNAFFECTED
          `match`(input, UNAFFECTED, FOLLOW_UNAFFECTED_in_waveform8590); if (state.failed) return waveForm


        case _ =>
      }

      if (state.backtracking == 0) {
        waveForm = new Waveform(position, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 145, waveform_StartIndex)
      }
    }
    return waveForm
  }

  // $ANTLR end "waveform"

  // $ANTLR start "variable_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1389:1: variable_assignment_statement[Identifier label] returns [VariableAssignmentStatement varAssignStmt] : ({...}? => ( v2008_conditional_variable_assignment[$label] | v2008_selected_variable_assignment[$label] ) | simple_variable_assignment[$label] );
  @throws(classOf[RecognitionException])
  def variable_assignment_statement(label: Identifier): VariableAssignmentStatement = {
    var varAssignStmt: VariableAssignmentStatement = null;
    val variable_assignment_statement_StartIndex = input.index()
    var v2008_conditional_variable_assignment452: SimpleVariableAssignmentStatement = null

    var v2008_selected_variable_assignment453: SimpleVariableAssignmentStatement = null

    var simple_variable_assignment454: SimpleVariableAssignmentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 146)) {
        return varAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1389:101: ({...}? => ( v2008_conditional_variable_assignment[$label] | v2008_selected_variable_assignment[$label] ) | simple_variable_assignment[$label] )
      var alt259 = 2
      val LA259_0 = input.LA(1)

      if (((LA259_0 >= BASIC_IDENTIFIER && LA259_0 <= EXTENDED_IDENTIFIER))) {
        val LA259_1 = input.LA(2)

        if (((vhdl2008))) {
          alt259 = 1
        }
        else if ((true)) {
          alt259 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return varAssignStmt
          }
          val nvae = new NoViableAltException("", 259, 1, input)

          throw nvae
        }
      }
      else if ((LA259_0 == STRING_LITERAL)) {
        val LA259_2 = input.LA(2)

        if (((vhdl2008))) {
          alt259 = 1
        }
        else if ((true)) {
          alt259 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return varAssignStmt
          }
          val nvae = new NoViableAltException("", 259, 2, input)

          throw nvae
        }
      }
      else if ((LA259_0 == 181) && ((vhdl2008))) {
        val LA259_3 = input.LA(2)

        if (((vhdl2008))) {
          alt259 = 1
        }
        else if (((vhdl2008))) {
          alt259 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return varAssignStmt
          }
          val nvae = new NoViableAltException("", 259, 3, input)

          throw nvae
        }
      }
      else if ((LA259_0 == LPAREN)) {
        val LA259_4 = input.LA(2)

        if (((vhdl2008))) {
          alt259 = 1
        }
        else if ((true)) {
          alt259 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return varAssignStmt
          }
          val nvae = new NoViableAltException("", 259, 4, input)

          throw nvae
        }
      }
      else if ((LA259_0 == WITH) && ((vhdl2008))) {
        alt259 = 1
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return varAssignStmt
        }
        val nvae = new NoViableAltException("", 259, 0, input)

        throw nvae
      }
      alt259 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1390:2: {...}? => ( v2008_conditional_variable_assignment[$label] | v2008_selected_variable_assignment[$label] )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return varAssignStmt
            }
            throw new FailedPredicateException(input, "variable_assignment_statement", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1390:15: ( v2008_conditional_variable_assignment[$label] | v2008_selected_variable_assignment[$label] )
          var alt258 = 2
          val LA258_0 = input.LA(1)

          if ((LA258_0 == STRING_LITERAL || (LA258_0 >= BASIC_IDENTIFIER && LA258_0 <= EXTENDED_IDENTIFIER))) {
            alt258 = 1
          }
          else if ((LA258_0 == 181) && ((vhdl2008))) {
            alt258 = 1
          }
          else if ((LA258_0 == LPAREN)) {
            alt258 = 1
          }
          else if ((LA258_0 == WITH)) {
            alt258 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return varAssignStmt
            }
            val nvae = new NoViableAltException("", 258, 0, input)

            throw nvae
          }
          alt258 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1391:8: v2008_conditional_variable_assignment[$label]
              pushFollow(FOLLOW_v2008_conditional_variable_assignment_in_variable_assignment_statement8625)
              v2008_conditional_variable_assignment452 = v2008_conditional_variable_assignment(label);

              state._fsp -= 1
              if (state.failed) return varAssignStmt
              if (state.backtracking == 0) {
                varAssignStmt = v2008_conditional_variable_assignment452
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1392:10: v2008_selected_variable_assignment[$label]
              pushFollow(FOLLOW_v2008_selected_variable_assignment_in_variable_assignment_statement8639)
              v2008_selected_variable_assignment453 = v2008_selected_variable_assignment(label);

              state._fsp -= 1
              if (state.failed) return varAssignStmt
              if (state.backtracking == 0) {
                varAssignStmt = v2008_selected_variable_assignment453
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1394:4: simple_variable_assignment[$label]
          pushFollow(FOLLOW_simple_variable_assignment_in_variable_assignment_statement8656)
          simple_variable_assignment454 = simple_variable_assignment(label);

          state._fsp -= 1
          if (state.failed) return varAssignStmt
          if (state.backtracking == 0) {
            varAssignStmt = simple_variable_assignment454
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 146, variable_assignment_statement_StartIndex)
      }
    }
    return varAssignStmt
  }

  // $ANTLR end "variable_assignment_statement"

  // $ANTLR start "simple_variable_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1396:1: simple_variable_assignment[Identifier label] returns [SimpleVariableAssignmentStatement stmt] : target VAR_ASSIGN expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def simple_variable_assignment(label: Identifier): SimpleVariableAssignmentStatement = {
    var stmt: SimpleVariableAssignmentStatement = null;
    val simple_variable_assignment_StartIndex = input.index()
    var VAR_ASSIGN455: Token = null
    var target456: Target = null

    var expression457: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 147)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1396:95: ( target VAR_ASSIGN expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1397:2: target VAR_ASSIGN expression SEMICOLON
      pushFollow(FOLLOW_target_in_simple_variable_assignment8675)
      target456 = target();

      state._fsp -= 1
      if (state.failed) return stmt
      VAR_ASSIGN455 = `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_simple_variable_assignment8677).asInstanceOf[Token];
      if (state.failed) return stmt
      pushFollow(FOLLOW_expression_in_simple_variable_assignment8679)
      expression457 = expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_simple_variable_assignment8681);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new SimpleVariableAssignmentStatement(toPosition(VAR_ASSIGN455), label, target456, expression457)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 147, simple_variable_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "simple_variable_assignment"

  // $ANTLR start "v2008_conditional_variable_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1400:1: v2008_conditional_variable_assignment[Identifier label] returns [SimpleVariableAssignmentStatement stmt] : target VAR_ASSIGN v2008_conditional_expressions SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_conditional_variable_assignment(label: Identifier): SimpleVariableAssignmentStatement = {
    var stmt: SimpleVariableAssignmentStatement = null;
    val v2008_conditional_variable_assignment_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 148)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1400:106: ( target VAR_ASSIGN v2008_conditional_expressions SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1401:2: target VAR_ASSIGN v2008_conditional_expressions SEMICOLON
      pushFollow(FOLLOW_target_in_v2008_conditional_variable_assignment8699)
      target();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_v2008_conditional_variable_assignment8701);
      if (state.failed) return stmt
      pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_variable_assignment8706)
      v2008_conditional_expressions();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_conditional_variable_assignment8708);
      if (state.failed) return stmt


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 148, v2008_conditional_variable_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "v2008_conditional_variable_assignment"

  // $ANTLR start "v2008_conditional_expressions"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1404:1: v2008_conditional_expressions : expression ( WHEN condition ( ELSE v2008_conditional_expressions )? )? ;
  @throws(classOf[RecognitionException])
  def v2008_conditional_expressions(): Unit = {
    val v2008_conditional_expressions_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 149)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1404:31: ( expression ( WHEN condition ( ELSE v2008_conditional_expressions )? )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1405:2: expression ( WHEN condition ( ELSE v2008_conditional_expressions )? )?
      pushFollow(FOLLOW_expression_in_v2008_conditional_expressions8717)
      expression();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1405:13: ( WHEN condition ( ELSE v2008_conditional_expressions )? )?
      var alt261 = 2
      val LA261_0 = input.LA(1)

      if ((LA261_0 == WHEN)) {
        alt261 = 1
      }
      alt261 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1405:15: WHEN condition ( ELSE v2008_conditional_expressions )?
          `match`(input, WHEN, FOLLOW_WHEN_in_v2008_conditional_expressions8721);
          if (state.failed) return
          pushFollow(FOLLOW_condition_in_v2008_conditional_expressions8723)
          condition();

          state._fsp -= 1
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1405:30: ( ELSE v2008_conditional_expressions )?
          var alt260 = 2
          val LA260_0 = input.LA(1)

          if ((LA260_0 == ELSE)) {
            alt260 = 1
          }
          alt260 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1405:32: ELSE v2008_conditional_expressions
              `match`(input, ELSE, FOLLOW_ELSE_in_v2008_conditional_expressions8727);
              if (state.failed) return
              pushFollow(FOLLOW_v2008_conditional_expressions_in_v2008_conditional_expressions8729)
              v2008_conditional_expressions();

              state._fsp -= 1
              if (state.failed) return


            case _ =>
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 149, v2008_conditional_expressions_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_conditional_expressions"

  // $ANTLR start "v2008_selected_expressions"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1407:1: v2008_selected_expressions : expression WHEN choices ( COMMA expression WHEN choices ) ;
  @throws(classOf[RecognitionException])
  def v2008_selected_expressions(): Unit = {
    val v2008_selected_expressions_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 150)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1407:28: ( expression WHEN choices ( COMMA expression WHEN choices ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1408:2: expression WHEN choices ( COMMA expression WHEN choices )
      pushFollow(FOLLOW_expression_in_v2008_selected_expressions8745)
      expression();

      state._fsp -= 1
      if (state.failed) return
      `match`(input, WHEN, FOLLOW_WHEN_in_v2008_selected_expressions8747);
      if (state.failed) return
      pushFollow(FOLLOW_choices_in_v2008_selected_expressions8749)
      choices();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1408:26: ( COMMA expression WHEN choices )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1408:27: COMMA expression WHEN choices
      `match`(input, COMMA, FOLLOW_COMMA_in_v2008_selected_expressions8752);
      if (state.failed) return
      pushFollow(FOLLOW_expression_in_v2008_selected_expressions8754)
      expression();

      state._fsp -= 1
      if (state.failed) return
      `match`(input, WHEN, FOLLOW_WHEN_in_v2008_selected_expressions8756);
      if (state.failed) return
      pushFollow(FOLLOW_choices_in_v2008_selected_expressions8758)
      choices();

      state._fsp -= 1
      if (state.failed) return


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 150, v2008_selected_expressions_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_selected_expressions"

  // $ANTLR start "v2008_selected_variable_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1410:1: v2008_selected_variable_assignment[Identifier label] returns [SimpleVariableAssignmentStatement stmt] : WITH expression SELECT ( QMARK )? target VAR_ASSIGN v2008_selected_expressions SEMICOLON ;
  @throws(classOf[RecognitionException])
  def v2008_selected_variable_assignment(label: Identifier): SimpleVariableAssignmentStatement = {
    var stmt: SimpleVariableAssignmentStatement = null;
    val v2008_selected_variable_assignment_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 151)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1410:103: ( WITH expression SELECT ( QMARK )? target VAR_ASSIGN v2008_selected_expressions SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1411:2: WITH expression SELECT ( QMARK )? target VAR_ASSIGN v2008_selected_expressions SEMICOLON
      `match`(input, WITH, FOLLOW_WITH_in_v2008_selected_variable_assignment8773);
      if (state.failed) return stmt
      pushFollow(FOLLOW_expression_in_v2008_selected_variable_assignment8775)
      expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SELECT, FOLLOW_SELECT_in_v2008_selected_variable_assignment8777);
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1411:25: ( QMARK )?
      var alt262 = 2
      val LA262_0 = input.LA(1)

      if ((LA262_0 == QMARK)) {
        alt262 = 1
      }
      alt262 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1411:25: QMARK
          `match`(input, QMARK, FOLLOW_QMARK_in_v2008_selected_variable_assignment8779); if (state.failed) return stmt


        case _ =>
      }

      pushFollow(FOLLOW_target_in_v2008_selected_variable_assignment8784)
      target();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_v2008_selected_variable_assignment8786);
      if (state.failed) return stmt
      pushFollow(FOLLOW_v2008_selected_expressions_in_v2008_selected_variable_assignment8790)
      v2008_selected_expressions();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_v2008_selected_variable_assignment8792);
      if (state.failed) return stmt


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 151, v2008_selected_variable_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "v2008_selected_variable_assignment"

  // $ANTLR start "procedure_call_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1415:1: procedure_call_statement[Identifier label] returns [ProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def procedure_call_statement(label: Identifier): ProcedureCallStatement = {
    var procedureCallStmt: ProcedureCallStatement = null;
    val procedure_call_statement_StartIndex = input.index()
    var procedure_name: SelectedName = null

    var association_list458: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 152)) {
        return procedureCallStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1415:95: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1416:2: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
      pushFollow(FOLLOW_selected_name_in_procedure_call_statement8812)
      procedure_name = selected_name();

      state._fsp -= 1
      if (state.failed) return procedureCallStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1416:31: ( LPAREN association_list RPAREN )?
      var alt263 = 2
      val LA263_0 = input.LA(1)

      if ((LA263_0 == LPAREN)) {
        alt263 = 1
      }
      alt263 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1416:32: LPAREN association_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_procedure_call_statement8815);
          if (state.failed) return procedureCallStmt
          pushFollow(FOLLOW_association_list_in_procedure_call_statement8817)
          association_list458 = association_list();

          state._fsp -= 1
          if (state.failed) return procedureCallStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_procedure_call_statement8819);
          if (state.failed) return procedureCallStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_procedure_call_statement8823);
      if (state.failed) return procedureCallStmt
      if (state.backtracking == 0) {
        procedureCallStmt = new ProcedureCallStatement(label, procedure_name, association_list458)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 152, procedure_call_statement_StartIndex)
      }
    }
    return procedureCallStmt
  }

  // $ANTLR end "procedure_call_statement"

  // $ANTLR start "if_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1419:1: if_statement[Identifier label] returns [IfStatement ifStmt] : ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def if_statement(label: Identifier): IfStatement = {
    var ifStmt: IfStatement = null;
    val if_statement_StartIndex = input.index()
    var ifToken: Token = null
    var if_condition: Expression = null

    var if_sequential_statement: Seq[SequentialStatement] = null

    var elsif_condition: Expression = null

    var elsif_sequential_statement: Seq[SequentialStatement] = null

    var else_sequential_statement: Seq[SequentialStatement] = null

    var end_if_label: Identifier = null



    val ifList = new Buffer[IfStatement.IfThenPart]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 153)) {
        return ifStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1422:3: (ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1423:2: ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON
      ifToken = `match`(input, IF, FOLLOW_IF_in_if_statement8847).asInstanceOf[Token];
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_condition_in_if_statement8851)
      if_condition = condition();

      state._fsp -= 1
      if (state.failed) return ifStmt
      `match`(input, THEN, FOLLOW_THEN_in_if_statement8853);
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_sequence_of_statements_in_if_statement8859)
      if_sequential_statement = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifList += new IfStatement.IfThenPart(if_condition, if_sequential_statement)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1425:2: ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )*
      var loop264 = true
      do {
        var alt264 = 2
        val LA264_0 = input.LA(1)

        if ((LA264_0 == ELSIF)) {
          alt264 = 1
        }


        alt264 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1425:3: ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements
            `match`(input, ELSIF, FOLLOW_ELSIF_in_if_statement8865);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_condition_in_if_statement8869)
            elsif_condition = condition();

            state._fsp -= 1
            if (state.failed) return ifStmt
            `match`(input, THEN, FOLLOW_THEN_in_if_statement8871);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_sequence_of_statements_in_if_statement8878)
            elsif_sequential_statement = sequence_of_statements();

            state._fsp -= 1
            if (state.failed) return ifStmt
            if (state.backtracking == 0) {
              ifList += new IfStatement.IfThenPart(elsif_condition, elsif_sequential_statement)
            }


          case _ => loop264 = false
        }
      } while (loop264);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1429:2: ( ELSE else_sequential_statement= sequence_of_statements )?
      var alt265 = 2
      val LA265_0 = input.LA(1)

      if ((LA265_0 == ELSE)) {
        alt265 = 1
      }
      alt265 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1429:3: ELSE else_sequential_statement= sequence_of_statements
          `match`(input, ELSE, FOLLOW_ELSE_in_if_statement8891);
          if (state.failed) return ifStmt
          pushFollow(FOLLOW_sequence_of_statements_in_if_statement8898)
          else_sequential_statement = sequence_of_statements();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_if_statement8903);
      if (state.failed) return ifStmt
      `match`(input, IF, FOLLOW_IF_in_if_statement8905);
      if (state.failed) return ifStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1431:21: (end_if_label= identifier )?
      var alt266 = 2
      val LA266_0 = input.LA(1)

      if (((LA266_0 >= BASIC_IDENTIFIER && LA266_0 <= EXTENDED_IDENTIFIER))) {
        alt266 = 1
      }
      alt266 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1431:21: end_if_label= identifier
          pushFollow(FOLLOW_identifier_in_if_statement8909)
          end_if_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_if_statement8912);
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifStmt = new IfStatement(toPosition(ifToken), label, ifList.result, else_sequential_statement, end_if_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 153, if_statement_StartIndex)
      }
    }
    return ifStmt
  }

  // $ANTLR end "if_statement"

  // $ANTLR start "case_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1434:1: case_statement[Identifier label] returns [CaseStatement caseStmt] : caseToken= CASE ({...}? => QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? (end_case_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def case_statement(label: Identifier): CaseStatement = {
    var caseStmt: CaseStatement = null;
    val case_statement_StartIndex = input.index()
    var caseToken: Token = null
    var end_case_label: Identifier = null

    var choices459: Seq[Choices.Choice] = null

    var sequence_of_statements460: Seq[SequentialStatement] = null

    var expression461: Expression = null



    val alternatives = new Buffer[CaseStatement.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 154)) {
        return caseStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1437:3: (caseToken= CASE ({...}? => QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? (end_case_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1438:2: caseToken= CASE ({...}? => QMARK )? expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE ({...}? => QMARK )? (end_case_label= identifier )? SEMICOLON
      caseToken = `match`(input, CASE, FOLLOW_CASE_in_case_statement8936).asInstanceOf[Token];
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1438:17: ({...}? => QMARK )?
      var alt267 = 2
      val LA267_0 = input.LA(1)

      if ((LA267_0 == QMARK) && ((vhdl2008))) {
        alt267 = 1
      }
      alt267 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1438:18: {...}? => QMARK
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return caseStmt
            }
            throw new FailedPredicateException(input, "case_statement", "vhdl2008")
          }
          `match`(input, QMARK, FOLLOW_QMARK_in_case_statement8941);
          if (state.failed) return caseStmt


        case _ =>
      }

      pushFollow(FOLLOW_expression_in_case_statement8945)
      expression461 = expression();

      state._fsp -= 1
      if (state.failed) return caseStmt
      `match`(input, IS, FOLLOW_IS_in_case_statement8947);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1439:3: ( WHEN choices ARROW sequence_of_statements )+
      var cnt268 = 0
      var loop268 = true
      do {
        var alt268 = 2
        val LA268_0 = input.LA(1)

        if ((LA268_0 == WHEN)) {
          alt268 = 1
        }


        alt268 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1439:4: WHEN choices ARROW sequence_of_statements
            `match`(input, WHEN, FOLLOW_WHEN_in_case_statement8952);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_choices_in_case_statement8954)
            choices459 = choices();

            state._fsp -= 1
            if (state.failed) return caseStmt
            `match`(input, ARROW, FOLLOW_ARROW_in_case_statement8956);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_sequence_of_statements_in_case_statement8958)
            sequence_of_statements460 = sequence_of_statements();

            state._fsp -= 1
            if (state.failed) return caseStmt
            if (state.backtracking == 0) {
              alternatives += new CaseStatement.When(choices459, sequence_of_statements460)
            }


          case _ =>
            if (cnt268 >= 1) loop268 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return caseStmt
              }
              val eee = new EarlyExitException(268, input)
              throw eee
            }
        }
        cnt268 += 1
      } while (loop268);

      `match`(input, END, FOLLOW_END_in_case_statement8965);
      if (state.failed) return caseStmt
      `match`(input, CASE, FOLLOW_CASE_in_case_statement8967);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1440:11: ({...}? => QMARK )?
      var alt269 = 2
      val LA269_0 = input.LA(1)

      if ((LA269_0 == QMARK) && ((vhdl2008))) {
        alt269 = 1
      }
      alt269 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1440:12: {...}? => QMARK
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return caseStmt
            }
            throw new FailedPredicateException(input, "case_statement", "vhdl2008")
          }
          `match`(input, QMARK, FOLLOW_QMARK_in_case_statement8972);
          if (state.failed) return caseStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1440:47: (end_case_label= identifier )?
      var alt270 = 2
      val LA270_0 = input.LA(1)

      if (((LA270_0 >= BASIC_IDENTIFIER && LA270_0 <= EXTENDED_IDENTIFIER))) {
        alt270 = 1
      }
      alt270 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1440:47: end_case_label= identifier
          pushFollow(FOLLOW_identifier_in_case_statement8978)
          end_case_label = identifier();

          state._fsp -= 1
          if (state.failed) return caseStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_case_statement8981);
      if (state.failed) return caseStmt
      if (state.backtracking == 0) {
        caseStmt = new CaseStatement(toPosition(caseToken), label, expression461, alternatives.result, end_case_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 154, case_statement_StartIndex)
      }
    }
    return caseStmt
  }

  // $ANTLR end "case_statement"

  // $ANTLR start "iteration_scheme"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1443:1: iteration_scheme returns [Either[Expression,(Identifier,DiscreteRange)] scheme] : ( WHILE condition | FOR identifier IN discrete_range );
  @throws(classOf[RecognitionException])
  def iteration_scheme(): Either[Expression, (Identifier, DiscreteRange)] = {
    var scheme: Either[Expression, (Identifier, DiscreteRange)] = null;
    val iteration_scheme_StartIndex = input.index()
    var condition462: Expression = null

    var identifier463: Identifier = null

    var discrete_range464: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 155)) {
        return scheme
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1443:82: ( WHILE condition | FOR identifier IN discrete_range )
      var alt271 = 2
      val LA271_0 = input.LA(1)

      if ((LA271_0 == WHILE)) {
        alt271 = 1
      }
      else if ((LA271_0 == FOR)) {
        alt271 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return scheme
        }
        val nvae = new NoViableAltException("", 271, 0, input)

        throw nvae
      }
      alt271 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1444:2: WHILE condition
          `match`(input, WHILE, FOLLOW_WHILE_in_iteration_scheme8997);
          if (state.failed) return scheme
          pushFollow(FOLLOW_condition_in_iteration_scheme8999)
          condition462 = condition();

          state._fsp -= 1
          if (state.failed) return scheme
          if (state.backtracking == 0) {
            scheme = Left(condition462)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1445:4: FOR identifier IN discrete_range
          `match`(input, FOR, FOLLOW_FOR_in_iteration_scheme9006);
          if (state.failed) return scheme
          pushFollow(FOLLOW_identifier_in_iteration_scheme9008)
          identifier463 = identifier();

          state._fsp -= 1
          if (state.failed) return scheme
          `match`(input, IN, FOLLOW_IN_in_iteration_scheme9010);
          if (state.failed) return scheme
          pushFollow(FOLLOW_discrete_range_in_iteration_scheme9012)
          discrete_range464 = discrete_range();

          state._fsp -= 1
          if (state.failed) return scheme
          if (state.backtracking == 0) {
            scheme = Right((identifier463, discrete_range464))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 155, iteration_scheme_StartIndex)
      }
    }
    return scheme
  }

  // $ANTLR end "iteration_scheme"

  // $ANTLR start "loop_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1447:1: loop_statement[Identifier label] returns [SequentialStatement loopStmt] : (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def loop_statement(label: Identifier): SequentialStatement = {
    var loopStmt: SequentialStatement = null;
    val loop_statement_StartIndex = input.index()
    var stmtType: Either[Expression, (Identifier, DiscreteRange)] = null

    var end_loop_label: Identifier = null

    var sequence_of_statements465: Seq[SequentialStatement] = null



    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 156)) {
        return loopStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1450:3: ( (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1451:2: (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1451:10: (stmtType= iteration_scheme )?
      var alt272 = 2
      val LA272_0 = input.LA(1)

      if ((LA272_0 == FOR || LA272_0 == WHILE)) {
        alt272 = 1
      }
      alt272 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1451:10: stmtType= iteration_scheme
          pushFollow(FOLLOW_iteration_scheme_in_loop_statement9038)
          stmtType = iteration_scheme();

          state._fsp -= 1
          if (state.failed) return loopStmt


        case _ =>
      }

      `match`(input, LOOP, FOLLOW_LOOP_in_loop_statement9041);
      if (state.failed) return loopStmt
      pushFollow(FOLLOW_sequence_of_statements_in_loop_statement9045)
      sequence_of_statements465 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return loopStmt
      `match`(input, END, FOLLOW_END_in_loop_statement9048);
      if (state.failed) return loopStmt
      `match`(input, LOOP, FOLLOW_LOOP_in_loop_statement9050);
      if (state.failed) return loopStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1453:25: (end_loop_label= identifier )?
      var alt273 = 2
      val LA273_0 = input.LA(1)

      if (((LA273_0 >= BASIC_IDENTIFIER && LA273_0 <= EXTENDED_IDENTIFIER))) {
        alt273 = 1
      }
      alt273 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1453:25: end_loop_label= identifier
          pushFollow(FOLLOW_identifier_in_loop_statement9054)
          end_loop_label = identifier();

          state._fsp -= 1
          if (state.failed) return loopStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_loop_statement9057);
      if (state.failed) return loopStmt
      if (state.backtracking == 0) {

        loopStmt = Option(stmtType) match {
          case Some(x) => x match {
            case Left(condition) => new WhileStatement(position, label, condition, sequence_of_statements465, end_loop_label)
            case Right((identifier, discreteRange)) => new ForStatement(position, label, identifier, discreteRange, sequence_of_statements465, end_loop_label)
          }
          case None => new LoopStatement(position, label, sequence_of_statements465, end_loop_label)
        }

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 156, loop_statement_StartIndex)
      }
    }
    return loopStmt
  }

  // $ANTLR end "loop_statement"

  // $ANTLR start "next_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1464:1: next_statement[Identifier label] returns [NextStatement nextStmt] : NEXT ( identifier )? ( WHEN condition )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def next_statement(label: Identifier): NextStatement = {
    var nextStmt: NextStatement = null;
    val next_statement_StartIndex = input.index()
    var NEXT466: Token = null
    var identifier467: Identifier = null

    var condition468: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 157)) {
        return nextStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1464:67: ( NEXT ( identifier )? ( WHEN condition )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1465:2: NEXT ( identifier )? ( WHEN condition )? SEMICOLON
      NEXT466 = `match`(input, NEXT, FOLLOW_NEXT_in_next_statement9074).asInstanceOf[Token];
      if (state.failed) return nextStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1465:7: ( identifier )?
      var alt274 = 2
      val LA274_0 = input.LA(1)

      if (((LA274_0 >= BASIC_IDENTIFIER && LA274_0 <= EXTENDED_IDENTIFIER))) {
        alt274 = 1
      }
      alt274 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1465:7: identifier
          pushFollow(FOLLOW_identifier_in_next_statement9076)
          identifier467 = identifier();

          state._fsp -= 1
          if (state.failed) return nextStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1465:19: ( WHEN condition )?
      var alt275 = 2
      val LA275_0 = input.LA(1)

      if ((LA275_0 == WHEN)) {
        alt275 = 1
      }
      alt275 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1465:20: WHEN condition
          `match`(input, WHEN, FOLLOW_WHEN_in_next_statement9080);
          if (state.failed) return nextStmt
          pushFollow(FOLLOW_condition_in_next_statement9082)
          condition468 = condition();

          state._fsp -= 1
          if (state.failed) return nextStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_next_statement9086);
      if (state.failed) return nextStmt
      if (state.backtracking == 0) {
        nextStmt = new NextStatement(toPosition(NEXT466), label, identifier467, condition468)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 157, next_statement_StartIndex)
      }
    }
    return nextStmt
  }

  // $ANTLR end "next_statement"

  // $ANTLR start "exit_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1468:1: exit_statement[Identifier label] returns [ExitStatement exitStmt] : EXIT ( identifier )? ( WHEN condition )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def exit_statement(label: Identifier): ExitStatement = {
    var exitStmt: ExitStatement = null;
    val exit_statement_StartIndex = input.index()
    var EXIT469: Token = null
    var identifier470: Identifier = null

    var condition471: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 158)) {
        return exitStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1468:67: ( EXIT ( identifier )? ( WHEN condition )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1469:2: EXIT ( identifier )? ( WHEN condition )? SEMICOLON
      EXIT469 = `match`(input, EXIT, FOLLOW_EXIT_in_exit_statement9104).asInstanceOf[Token];
      if (state.failed) return exitStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1469:7: ( identifier )?
      var alt276 = 2
      val LA276_0 = input.LA(1)

      if (((LA276_0 >= BASIC_IDENTIFIER && LA276_0 <= EXTENDED_IDENTIFIER))) {
        alt276 = 1
      }
      alt276 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1469:7: identifier
          pushFollow(FOLLOW_identifier_in_exit_statement9106)
          identifier470 = identifier();

          state._fsp -= 1
          if (state.failed) return exitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1469:19: ( WHEN condition )?
      var alt277 = 2
      val LA277_0 = input.LA(1)

      if ((LA277_0 == WHEN)) {
        alt277 = 1
      }
      alt277 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1469:20: WHEN condition
          `match`(input, WHEN, FOLLOW_WHEN_in_exit_statement9110);
          if (state.failed) return exitStmt
          pushFollow(FOLLOW_condition_in_exit_statement9112)
          condition471 = condition();

          state._fsp -= 1
          if (state.failed) return exitStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_exit_statement9116);
      if (state.failed) return exitStmt
      if (state.backtracking == 0) {
        exitStmt = new ExitStatement(toPosition(EXIT469), label, identifier470, condition471)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 158, exit_statement_StartIndex)
      }
    }
    return exitStmt
  }

  // $ANTLR end "exit_statement"

  // $ANTLR start "return_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1472:1: return_statement[Identifier label] returns [ReturnStatement returnStmt] : RETURN ( expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def return_statement(label: Identifier): ReturnStatement = {
    var returnStmt: ReturnStatement = null;
    val return_statement_StartIndex = input.index()
    var RETURN472: Token = null
    var expression473: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 159)) {
        return returnStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1472:73: ( RETURN ( expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1473:2: RETURN ( expression )? SEMICOLON
      RETURN472 = `match`(input, RETURN, FOLLOW_RETURN_in_return_statement9134).asInstanceOf[Token];
      if (state.failed) return returnStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1473:9: ( expression )?
      var alt278 = 2
      val LA278_0 = input.LA(1)

      if (((LA278_0 >= PLUS && LA278_0 <= MINUS) || LA278_0 == STRING_LITERAL || (LA278_0 >= BASIC_IDENTIFIER && LA278_0 <= EXTENDED_IDENTIFIER))) {
        alt278 = 1
      }
      else if ((LA278_0 == 181) && ((vhdl2008))) {
        alt278 = 1
      }
      else if ((LA278_0 == ABS || LA278_0 == NEW || (LA278_0 >= NOT && LA278_0 <= NULL) || LA278_0 == LPAREN || LA278_0 == CHARACTER_LITERAL || (LA278_0 >= REAL_LITERAL && LA278_0 <= BIT_STRING_LITERAL))) {
        alt278 = 1
      }
      else if ((LA278_0 == AND || LA278_0 == NAND || LA278_0 == NOR || LA278_0 == OR || (LA278_0 >= XNOR && LA278_0 <= XOR) || LA278_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
        alt278 = 1
      }
      alt278 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1473:9: expression
          pushFollow(FOLLOW_expression_in_return_statement9136)
          expression473 = expression();

          state._fsp -= 1
          if (state.failed) return returnStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_return_statement9139);
      if (state.failed) return returnStmt
      if (state.backtracking == 0) {
        returnStmt = new ReturnStatement(toPosition(RETURN472), label, expression473)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 159, return_statement_StartIndex)
      }
    }
    return returnStmt
  }

  // $ANTLR end "return_statement"

  // $ANTLR start "null_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1476:1: null_statement[Identifier label] returns [NullStatement nullStmt] : NULL SEMICOLON ;
  @throws(classOf[RecognitionException])
  def null_statement(label: Identifier): NullStatement = {
    var nullStmt: NullStatement = null;
    val null_statement_StartIndex = input.index()
    var NULL474: Token = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 160)) {
        return nullStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1476:67: ( NULL SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1477:2: NULL SEMICOLON
      NULL474 = `match`(input, NULL, FOLLOW_NULL_in_null_statement9158).asInstanceOf[Token];
      if (state.failed) return nullStmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_null_statement9160);
      if (state.failed) return nullStmt
      if (state.backtracking == 0) {
        nullStmt = new NullStatement(toPosition(NULL474), label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 160, null_statement_StartIndex)
      }
    }
    return nullStmt
  }

  // $ANTLR end "null_statement"

  // $ANTLR start "ams_break_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1480:1: ams_break_statement[Identifier label] returns [AMSBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_break_statement(label: Identifier): AMSBreakStatement = {
    var breakStmt: AMSBreakStatement = null;
    val ams_break_statement_StartIndex = input.index()
    var BREAK475: Token = null
    var ams_break_element_list476: Seq[BreakElement] = null

    var expression477: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 161)) {
        return breakStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1480:77: ( BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1481:2: BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON
      BREAK475 = `match`(input, BREAK, FOLLOW_BREAK_in_ams_break_statement9177).asInstanceOf[Token];
      if (state.failed) return breakStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1481:8: ( ams_break_element_list )?
      var alt279 = 2
      val LA279_0 = input.LA(1)

      if ((LA279_0 == FOR || LA279_0 == STRING_LITERAL || (LA279_0 >= BASIC_IDENTIFIER && LA279_0 <= EXTENDED_IDENTIFIER))) {
        alt279 = 1
      }
      else if ((LA279_0 == 181) && ((vhdl2008))) {
        alt279 = 1
      }
      alt279 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1481:8: ams_break_element_list
          pushFollow(FOLLOW_ams_break_element_list_in_ams_break_statement9179)
          ams_break_element_list476 = ams_break_element_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1481:32: ( WHEN expression )?
      var alt280 = 2
      val LA280_0 = input.LA(1)

      if ((LA280_0 == WHEN)) {
        alt280 = 1
      }
      alt280 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1481:33: WHEN expression
          `match`(input, WHEN, FOLLOW_WHEN_in_ams_break_statement9183);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_expression_in_ams_break_statement9185)
          expression477 = expression();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_break_statement9189);
      if (state.failed) return breakStmt
      if (state.backtracking == 0) {
        breakStmt = new AMSBreakStatement(toPosition(BREAK475), label, ams_break_element_list476, expression477)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 161, ams_break_statement_StartIndex)
      }
    }
    return breakStmt
  }

  // $ANTLR end "ams_break_statement"

  // $ANTLR start "ams_break_element_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1484:1: ams_break_element_list returns [Seq[BreakElement] list] : e1= ams_break_element ( COMMA e2= ams_break_element )* ;
  @throws(classOf[RecognitionException])
  def ams_break_element_list(): Seq[BreakElement] = {
    var list: Seq[BreakElement] = null;
    val ams_break_element_list_StartIndex = input.index()
    var e1: BreakElement = null

    var e2: BreakElement = null



    val elements = new Buffer[BreakElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 162)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1487:3: (e1= ams_break_element ( COMMA e2= ams_break_element )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:2: e1= ams_break_element ( COMMA e2= ams_break_element )*
      pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list9211)
      e1 = ams_break_element();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:53: ( COMMA e2= ams_break_element )*
      var loop281 = true
      do {
        var alt281 = 2
        val LA281_0 = input.LA(1)

        if ((LA281_0 == COMMA)) {
          alt281 = 1
        }


        alt281 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:54: COMMA e2= ams_break_element
            `match`(input, COMMA, FOLLOW_COMMA_in_ams_break_element_list9215);
            if (state.failed) return list
            pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list9219)
            e2 = ams_break_element();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop281 = false
        }
      } while (loop281);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 162, ams_break_element_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "ams_break_element_list"

  // $ANTLR start "ams_break_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1491:1: ams_break_element returns [BreakElement breakElement] : ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression ;
  @throws(classOf[RecognitionException])
  def ams_break_element(): BreakElement = {
    var breakElement: BreakElement = null;
    val ams_break_element_StartIndex = input.index()
    var quantity_name1: Name = null

    var quantity_name2: Name = null

    var expr: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 163)) {
        return breakElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1491:55: ( ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:2: ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:2: ( FOR quantity_name1= name USE )?
      var alt282 = 2
      val LA282_0 = input.LA(1)

      if ((LA282_0 == FOR)) {
        alt282 = 1
      }
      alt282 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:3: FOR quantity_name1= name USE
          `match`(input, FOR, FOLLOW_FOR_in_ams_break_element9243);
          if (state.failed) return breakElement
          pushFollow(FOLLOW_name_in_ams_break_element9247)
          quantity_name1 = name();

          state._fsp -= 1
          if (state.failed) return breakElement
          `match`(input, USE, FOLLOW_USE_in_ams_break_element9249);
          if (state.failed) return breakElement


        case _ =>
      }

      pushFollow(FOLLOW_name_in_ams_break_element9255)
      quantity_name2 = name();

      state._fsp -= 1
      if (state.failed) return breakElement
      `match`(input, ARROW, FOLLOW_ARROW_in_ams_break_element9257);
      if (state.failed) return breakElement
      pushFollow(FOLLOW_expression_in_ams_break_element9261)
      expr = expression();

      state._fsp -= 1
      if (state.failed) return breakElement
      if (state.backtracking == 0) {
        breakElement = new BreakElement(quantity_name1, quantity_name2, expr)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 163, ams_break_element_StartIndex)
      }
    }
    return breakElement
  }

  // $ANTLR end "ams_break_element"

  // $ANTLR start "inteface_element_port"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1496:1: inteface_element_port returns [InterfaceList.AbstractInterfaceElement element] : ( interface_signal_declaration_port | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
  @throws(classOf[RecognitionException])
  def inteface_element_port(): InterfaceList.AbstractInterfaceElement = {
    var element: InterfaceList.AbstractInterfaceElement = null;
    val inteface_element_port_StartIndex = input.index()
    var interface_signal_declaration_port478: InterfaceList.InterfaceSignalDeclaration = null

    var ams_interface_terminal_declaration479: InterfaceList.InterfaceTerminalDeclaration = null

    var ams_interface_quantity_declaration480: InterfaceList.InterfaceQuantityDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 164)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1496:80: ( interface_signal_declaration_port | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
      var alt284 = 2
      val LA284_0 = input.LA(1)

      if ((LA284_0 == SIGNAL || (LA284_0 >= BASIC_IDENTIFIER && LA284_0 <= EXTENDED_IDENTIFIER))) {
        alt284 = 1
      }
      else if (((LA284_0 >= TERMINAL && LA284_0 <= QUANTITY)) && ((ams))) {
        alt284 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return element
        }
        val nvae = new NoViableAltException("", 284, 0, input)

        throw nvae
      }
      alt284 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1497:2: interface_signal_declaration_port
          pushFollow(FOLLOW_interface_signal_declaration_port_in_inteface_element_port9278)
          interface_signal_declaration_port478 = interface_signal_declaration_port();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_signal_declaration_port478
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1498:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "inteface_element_port", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1498:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          var alt283 = 2
          val LA283_0 = input.LA(1)

          if ((LA283_0 == TERMINAL)) {
            alt283 = 1
          }
          else if ((LA283_0 == QUANTITY)) {
            alt283 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            val nvae = new NoViableAltException("", 283, 0, input)

            throw nvae
          }
          alt283 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1499:3: ams_interface_terminal_declaration
              pushFollow(FOLLOW_ams_interface_terminal_declaration_in_inteface_element_port9291)
              ams_interface_terminal_declaration479 = ams_interface_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_terminal_declaration479
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1500:5: ams_interface_quantity_declaration
              pushFollow(FOLLOW_ams_interface_quantity_declaration_in_inteface_element_port9299)
              ams_interface_quantity_declaration480 = ams_interface_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_quantity_declaration480
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 164, inteface_element_port_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "inteface_element_port"

  // $ANTLR start "interface_element_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1503:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( VARIABLE | identifier_list COLON ( OUT | INOUT ) )=> interface_variable_declaration | interface_constant_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) );
  @throws(classOf[RecognitionException])
  def interface_element_procedure(): InterfaceList.AbstractInterfaceElement = {
    var element: InterfaceList.AbstractInterfaceElement = null;
    val interface_element_procedure_StartIndex = input.index()
    var interface_variable_declaration481: InterfaceList.InterfaceVariableDeclaration = null

    var interface_constant_declaration482: InterfaceList.InterfaceConstantDeclaration = null

    var interface_signal_declaration_procedure483: InterfaceList.InterfaceSignalDeclaration = null

    var interface_file_declaration484: InterfaceList.InterfaceFileDeclaration = null

    var ams_interface_terminal_declaration485: InterfaceList.InterfaceTerminalDeclaration = null

    var ams_interface_quantity_declaration486: InterfaceList.InterfaceQuantityDeclaration = null

    var v2008_interface_type_declaration487: InterfaceList.AbstractInterfaceElement = null

    var v2008_interface_subprogram_declaration488: InterfaceList.AbstractInterfaceElement = null

    var v2008_interface_package_declaration489: InterfaceList.AbstractInterfaceElement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 165)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1503:86: ( ( VARIABLE | identifier_list COLON ( OUT | INOUT ) )=> interface_variable_declaration | interface_constant_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) )
      var alt287 = 6
      alt287 = dfa287.predict(input)
      alt287 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:2: ( VARIABLE | identifier_list COLON ( OUT | INOUT ) )=> interface_variable_declaration
          pushFollow(FOLLOW_interface_variable_declaration_in_interface_element_procedure9335)
          interface_variable_declaration481 = interface_variable_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_variable_declaration481
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1505:4: interface_constant_declaration
          pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_procedure9343)
          interface_constant_declaration482 = interface_constant_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_constant_declaration482
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1506:4: interface_signal_declaration_procedure
          pushFollow(FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure9352)
          interface_signal_declaration_procedure483 = interface_signal_declaration_procedure();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_signal_declaration_procedure483
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1507:4: interface_file_declaration
          pushFollow(FOLLOW_interface_file_declaration_in_interface_element_procedure9359)
          interface_file_declaration484 = interface_file_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_file_declaration484
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1508:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_procedure", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1508:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          var alt285 = 2
          val LA285_0 = input.LA(1)

          if ((LA285_0 == TERMINAL)) {
            alt285 = 1
          }
          else if ((LA285_0 == QUANTITY)) {
            alt285 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            val nvae = new NoViableAltException("", 285, 0, input)

            throw nvae
          }
          alt285 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1509:3: ams_interface_terminal_declaration
              pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure9373)
              ams_interface_terminal_declaration485 = ams_interface_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_terminal_declaration485
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1510:5: ams_interface_quantity_declaration
              pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure9381)
              ams_interface_quantity_declaration486 = ams_interface_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_quantity_declaration486
              }


            case _ =>
          }


        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1512:4: {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_procedure", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1512:17: ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
          var alt286 = 4
          input.LA(1) match {
            case SEMICOLON | RPAREN =>
              alt286 = 1
            case TYPE =>
              alt286 = 2
            case FUNCTION | IMPURE | PROCEDURE | PURE =>
              alt286 = 3
            case PACKAGE =>
              alt286 = 4
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return element
              }
              val nvae = new NoViableAltException("", 286, 0, input)

              throw nvae
          }

          alt286 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1513:3:
            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1513:5: v2008_interface_type_declaration
              pushFollow(FOLLOW_v2008_interface_type_declaration_in_interface_element_procedure9400)
              v2008_interface_type_declaration487 = v2008_interface_type_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_type_declaration487
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1514:5: v2008_interface_subprogram_declaration
              pushFollow(FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_procedure9408)
              v2008_interface_subprogram_declaration488 = v2008_interface_subprogram_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_subprogram_declaration488
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1515:5: v2008_interface_package_declaration
              pushFollow(FOLLOW_v2008_interface_package_declaration_in_interface_element_procedure9416)
              v2008_interface_package_declaration489 = v2008_interface_package_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_package_declaration489
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 165, interface_element_procedure_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "interface_element_procedure"

  // $ANTLR start "interface_element_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1518:1: interface_element_function returns [InterfaceList.AbstractInterfaceElement element] : ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) );
  @throws(classOf[RecognitionException])
  def interface_element_function(): InterfaceList.AbstractInterfaceElement = {
    var element: InterfaceList.AbstractInterfaceElement = null;
    val interface_element_function_StartIndex = input.index()
    var interface_constant_declaration490: InterfaceList.InterfaceConstantDeclaration = null

    var interface_signal_declaration_function491: InterfaceList.InterfaceSignalDeclaration = null

    var interface_file_declaration492: InterfaceList.InterfaceFileDeclaration = null

    var ams_interface_terminal_declaration493: InterfaceList.InterfaceTerminalDeclaration = null

    var ams_interface_quantity_declaration494: InterfaceList.InterfaceQuantityDeclaration = null

    var v2008_interface_type_declaration495: InterfaceList.AbstractInterfaceElement = null

    var v2008_interface_subprogram_declaration496: InterfaceList.AbstractInterfaceElement = null

    var v2008_interface_package_declaration497: InterfaceList.AbstractInterfaceElement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 166)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1518:85: ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) )
      var alt290 = 5
      val LA290_0 = input.LA(1)

      if ((LA290_0 == CONSTANT || (LA290_0 >= BASIC_IDENTIFIER && LA290_0 <= EXTENDED_IDENTIFIER))) {
        alt290 = 1
      }
      else if ((LA290_0 == SIGNAL)) {
        alt290 = 2
      }
      else if ((LA290_0 == FILE)) {
        alt290 = 3
      }
      else if (((LA290_0 >= TERMINAL && LA290_0 <= QUANTITY)) && ((ams))) {
        alt290 = 4
      }
      else if ((LA290_0 == FUNCTION || LA290_0 == IMPURE || LA290_0 == PACKAGE || LA290_0 == PROCEDURE || LA290_0 == PURE || LA290_0 == TYPE || LA290_0 == SEMICOLON || LA290_0 == RPAREN) && ((vhdl2008))) {
        alt290 = 5
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return element
        }
        val nvae = new NoViableAltException("", 290, 0, input)

        throw nvae
      }
      alt290 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1519:2: interface_constant_declaration
          pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_function9437)
          interface_constant_declaration490 = interface_constant_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_constant_declaration490
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:4: interface_signal_declaration_function
          pushFollow(FOLLOW_interface_signal_declaration_function_in_interface_element_function9445)
          interface_signal_declaration_function491 = interface_signal_declaration_function();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_signal_declaration_function491
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:4: interface_file_declaration
          pushFollow(FOLLOW_interface_file_declaration_in_interface_element_function9452)
          interface_file_declaration492 = interface_file_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_file_declaration492
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1522:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_function", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1522:12: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          var alt288 = 2
          val LA288_0 = input.LA(1)

          if ((LA288_0 == TERMINAL)) {
            alt288 = 1
          }
          else if ((LA288_0 == QUANTITY)) {
            alt288 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            val nvae = new NoViableAltException("", 288, 0, input)

            throw nvae
          }
          alt288 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1523:3: ams_interface_terminal_declaration
              pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_function9466)
              ams_interface_terminal_declaration493 = ams_interface_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_terminal_declaration493
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1524:5: ams_interface_quantity_declaration
              pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_function9474)
              ams_interface_quantity_declaration494 = ams_interface_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_quantity_declaration494
              }


            case _ =>
          }


        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1526:4: {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_function", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1526:17: ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration )
          var alt289 = 4
          input.LA(1) match {
            case SEMICOLON | RPAREN =>
              alt289 = 1
            case TYPE =>
              alt289 = 2
            case FUNCTION | IMPURE | PROCEDURE | PURE =>
              alt289 = 3
            case PACKAGE =>
              alt289 = 4
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return element
              }
              val nvae = new NoViableAltException("", 289, 0, input)

              throw nvae
          }

          alt289 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1527:3:
            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1527:5: v2008_interface_type_declaration
              pushFollow(FOLLOW_v2008_interface_type_declaration_in_interface_element_function9493)
              v2008_interface_type_declaration495 = v2008_interface_type_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_type_declaration495
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1528:5: v2008_interface_subprogram_declaration
              pushFollow(FOLLOW_v2008_interface_subprogram_declaration_in_interface_element_function9501)
              v2008_interface_subprogram_declaration496 = v2008_interface_subprogram_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_subprogram_declaration496
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1529:5: v2008_interface_package_declaration
              pushFollow(FOLLOW_v2008_interface_package_declaration_in_interface_element_function9509)
              v2008_interface_package_declaration497 = v2008_interface_package_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = v2008_interface_package_declaration497
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 166, interface_element_function_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "interface_element_function"

  // $ANTLR start "parameter_interface_list_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1532:1: parameter_interface_list_procedure returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* ;
  @throws(classOf[RecognitionException])
  def parameter_interface_list_procedure(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val parameter_interface_list_procedure_StartIndex = input.index()
    var e1: InterfaceList.AbstractInterfaceElement = null

    var e2: InterfaceList.AbstractInterfaceElement = null



    val elements = new Buffer[InterfaceList.AbstractInterfaceElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 167)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1535:3: (e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1536:2: e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )*
      pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9536)
      e1 = interface_element_procedure();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1536:58: ( SEMICOLON e2= interface_element_procedure )*
      var loop291 = true
      do {
        var alt291 = 2
        val LA291_0 = input.LA(1)

        if ((LA291_0 == SEMICOLON)) {
          alt291 = 1
        }


        alt291 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1536:59: SEMICOLON e2= interface_element_procedure
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_parameter_interface_list_procedure9540);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9544)
            e2 = interface_element_procedure();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop291 = false
        }
      } while (loop291);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 167, parameter_interface_list_procedure_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "parameter_interface_list_procedure"

  // $ANTLR start "parameter_interface_list_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1539:1: parameter_interface_list_function returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_function ( SEMICOLON e2= interface_element_function )* ;
  @throws(classOf[RecognitionException])
  def parameter_interface_list_function(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val parameter_interface_list_function_StartIndex = input.index()
    var e1: InterfaceList.AbstractInterfaceElement = null

    var e2: InterfaceList.AbstractInterfaceElement = null



    val elements = new Buffer[InterfaceList.AbstractInterfaceElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 168)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1542:3: (e1= interface_element_function ( SEMICOLON e2= interface_element_function )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1543:2: e1= interface_element_function ( SEMICOLON e2= interface_element_function )*
      pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function9573)
      e1 = interface_element_function();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1543:58: ( SEMICOLON e2= interface_element_function )*
      var loop292 = true
      do {
        var alt292 = 2
        val LA292_0 = input.LA(1)

        if ((LA292_0 == SEMICOLON)) {
          alt292 = 1
        }


        alt292 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1543:59: SEMICOLON e2= interface_element_function
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_parameter_interface_list_function9578);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function9582)
            e2 = interface_element_function();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop292 = false
        }
      } while (loop292);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 168, parameter_interface_list_function_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "parameter_interface_list_function"

  // $ANTLR start "interface_constant_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1546:1: interface_constant_declaration returns [InterfaceList.InterfaceConstantDeclaration constElement] : ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_constant_declaration(): InterfaceList.InterfaceConstantDeclaration = {
    var constElement: InterfaceList.InterfaceConstantDeclaration = null;
    val interface_constant_declaration_StartIndex = input.index()
    var identifier_list498: Seq[Identifier] = null

    var subtype_indication499: SubTypeIndication = null

    var expression500: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 169)) {
        return constElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1546:97: ( ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:2: ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:2: ( CONSTANT )?
      var alt293 = 2
      val LA293_0 = input.LA(1)

      if ((LA293_0 == CONSTANT)) {
        alt293 = 1
      }
      alt293 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:2: CONSTANT
          `match`(input, CONSTANT, FOLLOW_CONSTANT_in_interface_constant_declaration9605); if (state.failed) return constElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_constant_declaration9608)
      identifier_list498 = identifier_list();

      state._fsp -= 1
      if (state.failed) return constElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_constant_declaration9610);
      if (state.failed) return constElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:34: ( IN )?
      var alt294 = 2
      val LA294_0 = input.LA(1)

      if ((LA294_0 == IN)) {
        alt294 = 1
      }
      alt294 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:34: IN
          `match`(input, IN, FOLLOW_IN_in_interface_constant_declaration9612); if (state.failed) return constElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_constant_declaration9615)
      subtype_indication499 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return constElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:57: ( VAR_ASSIGN expression )?
      var alt295 = 2
      val LA295_0 = input.LA(1)

      if ((LA295_0 == VAR_ASSIGN)) {
        alt295 = 1
      }
      alt295 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1547:58: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_constant_declaration9618);
          if (state.failed) return constElement
          pushFollow(FOLLOW_expression_in_interface_constant_declaration9620)
          expression500 = expression();

          state._fsp -= 1
          if (state.failed) return constElement


        case _ =>
      }

      if (state.backtracking == 0) {
        constElement = new InterfaceList.InterfaceConstantDeclaration(identifier_list498, subtype_indication499, expression500)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 169, interface_constant_declaration_StartIndex)
      }
    }
    return constElement
  }

  // $ANTLR end "interface_constant_declaration"

  // $ANTLR start "interface_signal_declaration_port"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1550:1: interface_signal_declaration_port returns [InterfaceList.InterfaceSignalDeclaration signalElement] : ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_signal_declaration_port(): InterfaceList.InterfaceSignalDeclaration = {
    var signalElement: InterfaceList.InterfaceSignalDeclaration = null;
    val interface_signal_declaration_port_StartIndex = input.index()
    var BUS504: Token = null
    var identifier_list501: Seq[Identifier] = null

    var interface_mode502: InterfaceList.Mode.Value = null

    var subtype_indication503: SubTypeIndication = null

    var expression505: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 170)) {
        return signalElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1550:100: ( ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:2: ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:2: ( SIGNAL )?
      var alt296 = 2
      val LA296_0 = input.LA(1)

      if ((LA296_0 == SIGNAL)) {
        alt296 = 1
      }
      alt296 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:2: SIGNAL
          `match`(input, SIGNAL, FOLLOW_SIGNAL_in_interface_signal_declaration_port9639); if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_port9642)
      identifier_list501 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_signal_declaration_port9644);
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:32: ( interface_mode )?
      var alt297 = 2
      val LA297_0 = input.LA(1)

      if ((LA297_0 == BUFFER || LA297_0 == IN || LA297_0 == INOUT || LA297_0 == LINKAGE || LA297_0 == OUT)) {
        alt297 = 1
      }
      alt297 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:32: interface_mode
          pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_port9646)
          interface_mode502 = interface_mode();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_port9649)
      subtype_indication503 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:67: ( BUS )?
      var alt298 = 2
      val LA298_0 = input.LA(1)

      if ((LA298_0 == BUS)) {
        alt298 = 1
      }
      alt298 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:67: BUS
          BUS504 = `match`(input, BUS, FOLLOW_BUS_in_interface_signal_declaration_port9651).asInstanceOf[Token]; if (state.failed) return signalElement


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:72: ( VAR_ASSIGN expression )?
      var alt299 = 2
      val LA299_0 = input.LA(1)

      if ((LA299_0 == VAR_ASSIGN)) {
        alt299 = 1
      }
      alt299 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1551:73: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_port9655);
          if (state.failed) return signalElement
          pushFollow(FOLLOW_expression_in_interface_signal_declaration_port9657)
          expression505 = expression();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      if (state.backtracking == 0) {
        signalElement = new InterfaceList.InterfaceSignalDeclaration(identifier_list501, interface_mode502, subtype_indication503, BUS504 != null, expression505)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 170, interface_signal_declaration_port_StartIndex)
      }
    }
    return signalElement
  }

  // $ANTLR end "interface_signal_declaration_port"

  // $ANTLR start "interface_signal_declaration_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1554:1: interface_signal_declaration_procedure returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_signal_declaration_procedure(): InterfaceList.InterfaceSignalDeclaration = {
    var signalElement: InterfaceList.InterfaceSignalDeclaration = null;
    val interface_signal_declaration_procedure_StartIndex = input.index()
    var BUS509: Token = null
    var identifier_list506: Seq[Identifier] = null

    var interface_mode507: InterfaceList.Mode.Value = null

    var subtype_indication508: SubTypeIndication = null

    var expression510: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 171)) {
        return signalElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1554:105: ( SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:2: SIGNAL identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
      `match`(input, SIGNAL, FOLLOW_SIGNAL_in_interface_signal_declaration_procedure9676);
      if (state.failed) return signalElement
      pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_procedure9678)
      identifier_list506 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_signal_declaration_procedure9680);
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:31: ( interface_mode )?
      var alt300 = 2
      val LA300_0 = input.LA(1)

      if ((LA300_0 == BUFFER || LA300_0 == IN || LA300_0 == INOUT || LA300_0 == LINKAGE || LA300_0 == OUT)) {
        alt300 = 1
      }
      alt300 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:31: interface_mode
          pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_procedure9682)
          interface_mode507 = interface_mode();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_procedure9685)
      subtype_indication508 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:66: ( BUS )?
      var alt301 = 2
      val LA301_0 = input.LA(1)

      if ((LA301_0 == BUS)) {
        alt301 = 1
      }
      alt301 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:66: BUS
          BUS509 = `match`(input, BUS, FOLLOW_BUS_in_interface_signal_declaration_procedure9687).asInstanceOf[Token]; if (state.failed) return signalElement


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:71: ( VAR_ASSIGN expression )?
      var alt302 = 2
      val LA302_0 = input.LA(1)

      if ((LA302_0 == VAR_ASSIGN)) {
        alt302 = 1
      }
      alt302 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1555:72: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure9691);
          if (state.failed) return signalElement
          pushFollow(FOLLOW_expression_in_interface_signal_declaration_procedure9693)
          expression510 = expression();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      if (state.backtracking == 0) {
        signalElement = new InterfaceList.InterfaceSignalDeclaration(identifier_list506, interface_mode507, subtype_indication508, BUS509 != null, expression510)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 171, interface_signal_declaration_procedure_StartIndex)
      }
    }
    return signalElement
  }

  // $ANTLR end "interface_signal_declaration_procedure"

  // $ANTLR start "interface_signal_declaration_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1558:1: interface_signal_declaration_function returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_signal_declaration_function(): InterfaceList.InterfaceSignalDeclaration = {
    var signalElement: InterfaceList.InterfaceSignalDeclaration = null;
    val interface_signal_declaration_function_StartIndex = input.index()
    var BUS513: Token = null
    var identifier_list511: Seq[Identifier] = null

    var subtype_indication512: SubTypeIndication = null

    var expression514: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 172)) {
        return signalElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1558:104: ( SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:2: SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
      `match`(input, SIGNAL, FOLLOW_SIGNAL_in_interface_signal_declaration_function9713);
      if (state.failed) return signalElement
      pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_function9715)
      identifier_list511 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_signal_declaration_function9717);
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:31: ( IN )?
      var alt303 = 2
      val LA303_0 = input.LA(1)

      if ((LA303_0 == IN)) {
        alt303 = 1
      }
      alt303 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:31: IN
          `match`(input, IN, FOLLOW_IN_in_interface_signal_declaration_function9719); if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_function9722)
      subtype_indication512 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:54: ( BUS )?
      var alt304 = 2
      val LA304_0 = input.LA(1)

      if ((LA304_0 == BUS)) {
        alt304 = 1
      }
      alt304 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:54: BUS
          BUS513 = `match`(input, BUS, FOLLOW_BUS_in_interface_signal_declaration_function9724).asInstanceOf[Token]; if (state.failed) return signalElement


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:59: ( VAR_ASSIGN expression )?
      var alt305 = 2
      val LA305_0 = input.LA(1)

      if ((LA305_0 == VAR_ASSIGN)) {
        alt305 = 1
      }
      alt305 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1559:60: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function9728);
          if (state.failed) return signalElement
          pushFollow(FOLLOW_expression_in_interface_signal_declaration_function9730)
          expression514 = expression();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      if (state.backtracking == 0) {
        signalElement = new InterfaceList.InterfaceSignalDeclaration(identifier_list511, InterfaceList.Mode.IN, subtype_indication512, BUS513 != null, expression514)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 172, interface_signal_declaration_function_StartIndex)
      }
    }
    return signalElement
  }

  // $ANTLR end "interface_signal_declaration_function"

  // $ANTLR start "interface_variable_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1562:1: interface_variable_declaration returns [InterfaceList.InterfaceVariableDeclaration varElement] : ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_variable_declaration(): InterfaceList.InterfaceVariableDeclaration = {
    var varElement: InterfaceList.InterfaceVariableDeclaration = null;
    val interface_variable_declaration_StartIndex = input.index()
    var identifier_list515: Seq[Identifier] = null

    var interface_mode516: InterfaceList.Mode.Value = null

    var subtype_indication517: SubTypeIndication = null

    var expression518: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 173)) {
        return varElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1562:96: ( ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:2: ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:2: ( VARIABLE )?
      var alt306 = 2
      val LA306_0 = input.LA(1)

      if ((LA306_0 == VARIABLE)) {
        alt306 = 1
      }
      alt306 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:2: VARIABLE
          `match`(input, VARIABLE, FOLLOW_VARIABLE_in_interface_variable_declaration9749); if (state.failed) return varElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_variable_declaration9752)
      identifier_list515 = identifier_list();

      state._fsp -= 1
      if (state.failed) return varElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_variable_declaration9754);
      if (state.failed) return varElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:34: ( interface_mode )?
      var alt307 = 2
      val LA307_0 = input.LA(1)

      if ((LA307_0 == BUFFER || LA307_0 == IN || LA307_0 == INOUT || LA307_0 == LINKAGE || LA307_0 == OUT)) {
        alt307 = 1
      }
      alt307 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:34: interface_mode
          pushFollow(FOLLOW_interface_mode_in_interface_variable_declaration9756)
          interface_mode516 = interface_mode();

          state._fsp -= 1
          if (state.failed) return varElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_variable_declaration9759)
      subtype_indication517 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return varElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:69: ( VAR_ASSIGN expression )?
      var alt308 = 2
      val LA308_0 = input.LA(1)

      if ((LA308_0 == VAR_ASSIGN)) {
        alt308 = 1
      }
      alt308 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1563:70: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_variable_declaration9762);
          if (state.failed) return varElement
          pushFollow(FOLLOW_expression_in_interface_variable_declaration9764)
          expression518 = expression();

          state._fsp -= 1
          if (state.failed) return varElement


        case _ =>
      }

      if (state.backtracking == 0) {
        varElement = new InterfaceList.InterfaceVariableDeclaration(identifier_list515, interface_mode516, subtype_indication517, expression518)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 173, interface_variable_declaration_StartIndex)
      }
    }
    return varElement
  }

  // $ANTLR end "interface_variable_declaration"

  // $ANTLR start "interface_mode"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1566:1: interface_mode returns [InterfaceList.Mode.Value mode] : ( IN | OUT | INOUT | BUFFER | LINKAGE );
  @throws(classOf[RecognitionException])
  def interface_mode(): InterfaceList.Mode.Value = {
    var mode: InterfaceList.Mode.Value = null;
    val interface_mode_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 174)) {
        return mode
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1566:56: ( IN | OUT | INOUT | BUFFER | LINKAGE )
      var alt309 = 5
      input.LA(1) match {
        case IN =>
          alt309 = 1
        case OUT =>
          alt309 = 2
        case INOUT =>
          alt309 = 3
        case BUFFER =>
          alt309 = 4
        case LINKAGE =>
          alt309 = 5
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return mode
          }
          val nvae = new NoViableAltException("", 309, 0, input)

          throw nvae
      }

      alt309 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1567:2: IN
          `match`(input, IN, FOLLOW_IN_in_interface_mode9783);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.IN
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1568:4: OUT
          `match`(input, OUT, FOLLOW_OUT_in_interface_mode9790);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.OUT
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:4: INOUT
          `match`(input, INOUT, FOLLOW_INOUT_in_interface_mode9797);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.INOUT
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1570:4: BUFFER
          `match`(input, BUFFER, FOLLOW_BUFFER_in_interface_mode9804);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.BUFFER
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1571:4: LINKAGE
          `match`(input, LINKAGE, FOLLOW_LINKAGE_in_interface_mode9811);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.LINKAGE
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 174, interface_mode_StartIndex)
      }
    }
    return mode
  }

  // $ANTLR end "interface_mode"

  // $ANTLR start "interface_file_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:1: interface_file_declaration returns [InterfaceList.InterfaceFileDeclaration fileElement] : FILE identifier_list COLON subtype_indication ;
  @throws(classOf[RecognitionException])
  def interface_file_declaration(): InterfaceList.InterfaceFileDeclaration = {
    var fileElement: InterfaceList.InterfaceFileDeclaration = null;
    val interface_file_declaration_StartIndex = input.index()
    var identifier_list519: Seq[Identifier] = null

    var subtype_indication520: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 175)) {
        return fileElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:89: ( FILE identifier_list COLON subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1574:2: FILE identifier_list COLON subtype_indication
      `match`(input, FILE, FOLLOW_FILE_in_interface_file_declaration9826);
      if (state.failed) return fileElement
      pushFollow(FOLLOW_identifier_list_in_interface_file_declaration9828)
      identifier_list519 = identifier_list();

      state._fsp -= 1
      if (state.failed) return fileElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_file_declaration9830);
      if (state.failed) return fileElement
      pushFollow(FOLLOW_subtype_indication_in_interface_file_declaration9832)
      subtype_indication520 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return fileElement
      if (state.backtracking == 0) {
        fileElement = new InterfaceList.InterfaceFileDeclaration(identifier_list519, subtype_indication520)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 175, interface_file_declaration_StartIndex)
      }
    }
    return fileElement
  }

  // $ANTLR end "interface_file_declaration"

  // $ANTLR start "ams_interface_terminal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1577:1: ams_interface_terminal_declaration returns [InterfaceList.InterfaceTerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication ;
  @throws(classOf[RecognitionException])
  def ams_interface_terminal_declaration(): InterfaceList.InterfaceTerminalDeclaration = {
    var terminalDecl: InterfaceList.InterfaceTerminalDeclaration = null;
    val ams_interface_terminal_declaration_StartIndex = input.index()
    var identifier_list521: Seq[Identifier] = null

    var ams_subnature_indication522: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 176)) {
        return terminalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1577:102: ( TERMINAL identifier_list COLON ams_subnature_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1578:2: TERMINAL identifier_list COLON ams_subnature_indication
      `match`(input, TERMINAL, FOLLOW_TERMINAL_in_ams_interface_terminal_declaration9850);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_identifier_list_in_ams_interface_terminal_declaration9852)
      identifier_list521 = identifier_list();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_interface_terminal_declaration9854);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration9856)
      ams_subnature_indication522 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      if (state.backtracking == 0) {
        terminalDecl = new InterfaceList.InterfaceTerminalDeclaration(identifier_list521, ams_subnature_indication522)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 176, ams_interface_terminal_declaration_StartIndex)
      }
    }
    return terminalDecl
  }

  // $ANTLR end "ams_interface_terminal_declaration"

  // $ANTLR start "ams_interface_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1581:1: ams_interface_quantity_declaration returns [InterfaceList.InterfaceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def ams_interface_quantity_declaration(): InterfaceList.InterfaceQuantityDeclaration = {
    var quantityDecl: InterfaceList.InterfaceQuantityDeclaration = null;
    val ams_interface_quantity_declaration_StartIndex = input.index()
    var out: Token = null
    var identifier_list523: Seq[Identifier] = null

    var subtype_indication524: SubTypeIndication = null

    var expression525: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 177)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1581:102: ( QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:2: QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )?
      `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_interface_quantity_declaration9872);
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_identifier_list_in_ams_interface_quantity_declaration9874)
      identifier_list523 = identifier_list();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_interface_quantity_declaration9876);
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:33: ( IN | out= OUT )?
      var alt310 = 3
      val LA310_0 = input.LA(1)

      if ((LA310_0 == IN)) {
        alt310 = 1
      }
      else if ((LA310_0 == OUT)) {
        alt310 = 2
      }
      alt310 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:34: IN
          `match`(input, IN, FOLLOW_IN_in_ams_interface_quantity_declaration9879); if (state.failed) return quantityDecl

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:37: out= OUT
          out = `match`(input, OUT, FOLLOW_OUT_in_ams_interface_quantity_declaration9883).asInstanceOf[Token]; if (state.failed) return quantityDecl


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_ams_interface_quantity_declaration9887)
      subtype_indication524 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:66: ( VAR_ASSIGN expression )?
      var alt311 = 2
      val LA311_0 = input.LA(1)

      if ((LA311_0 == VAR_ASSIGN)) {
        alt311 = 1
      }
      alt311 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1582:67: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration9890);
          if (state.failed) return quantityDecl
          pushFollow(FOLLOW_expression_in_ams_interface_quantity_declaration9892)
          expression525 = expression();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      if (state.backtracking == 0) {

        val mode = if (out != null) InterfaceList.Mode.OUT
        else InterfaceList.Mode.IN
        quantityDecl = new InterfaceList.InterfaceQuantityDeclaration(identifier_list523, mode, subtype_indication524, expression525)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 177, ams_interface_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_interface_quantity_declaration"

  // $ANTLR start "v2008_interface_type_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1589:1: v2008_interface_type_declaration returns [InterfaceList.AbstractInterfaceElement typeDecl] : TYPE identifier ;
  @throws(classOf[RecognitionException])
  def v2008_interface_type_declaration(): InterfaceList.AbstractInterfaceElement = {
    var typeDecl: InterfaceList.AbstractInterfaceElement = null;
    val v2008_interface_type_declaration_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 178)) {
        return typeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1589:92: ( TYPE identifier )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1589:94: TYPE identifier
      `match`(input, TYPE, FOLLOW_TYPE_in_v2008_interface_type_declaration9910);
      if (state.failed) return typeDecl
      pushFollow(FOLLOW_identifier_in_v2008_interface_type_declaration9912)
      identifier();

      state._fsp -= 1
      if (state.failed) return typeDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 178, v2008_interface_type_declaration_StartIndex)
      }
    }
    return typeDecl
  }

  // $ANTLR end "v2008_interface_type_declaration"

  // $ANTLR start "v2008_interface_subprogram_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1591:1: v2008_interface_subprogram_declaration returns [InterfaceList.AbstractInterfaceElement subprogramDecl] : ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )? | ( PURE | IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )? RETURN type_mark ) ( IS (subprogram_name= selected_name | BOX ) )? ;
  @throws(classOf[RecognitionException])
  def v2008_interface_subprogram_declaration(): InterfaceList.AbstractInterfaceElement = {
    var subprogramDecl: InterfaceList.AbstractInterfaceElement = null;
    val v2008_interface_subprogram_declaration_StartIndex = input.index()
    var parameter_interface_list: Seq[InterfaceList.AbstractInterfaceElement] = null

    var subprogram_name: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 179)) {
        return subprogramDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1591:103: ( ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )? | ( PURE | IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )? RETURN type_mark ) ( IS (subprogram_name= selected_name | BOX ) )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:3: ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )? | ( PURE | IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )? RETURN type_mark ) ( IS (subprogram_name= selected_name | BOX ) )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:3: ( PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )? | ( PURE | IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )? RETURN type_mark )
      var alt317 = 2
      val LA317_0 = input.LA(1)

      if ((LA317_0 == PROCEDURE)) {
        alt317 = 1
      }
      else if ((LA317_0 == FUNCTION || LA317_0 == IMPURE || LA317_0 == PURE)) {
        alt317 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return subprogramDecl
        }
        val nvae = new NoViableAltException("", 317, 0, input)

        throw nvae
      }
      alt317 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:4: PROCEDURE identifier ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )?
          `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_v2008_interface_subprogram_declaration9928);
          if (state.failed) return subprogramDecl
          pushFollow(FOLLOW_identifier_in_v2008_interface_subprogram_declaration9930)
          identifier();

          state._fsp -= 1
          if (state.failed) return subprogramDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1593:4: ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN )?
          var alt313 = 2
          val LA313_0 = input.LA(1)

          if ((LA313_0 == LPAREN || LA313_0 == PARAMETER)) {
            alt313 = 1
          }
          alt313 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1593:5: ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_procedure RPAREN
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1593:5: ( PARAMETER )?
              var alt312 = 2
              val LA312_0 = input.LA(1)

              if ((LA312_0 == PARAMETER)) {
                alt312 = 1
              }
              alt312 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1593:5: PARAMETER
                  `match`(input, PARAMETER, FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration9936); if (state.failed) return subprogramDecl


                case _ =>
              }

              `match`(input, LPAREN, FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration9939);
              if (state.failed) return subprogramDecl
              pushFollow(FOLLOW_parameter_interface_list_procedure_in_v2008_interface_subprogram_declaration9943)
              parameter_interface_list = parameter_interface_list_procedure();

              state._fsp -= 1
              if (state.failed) return subprogramDecl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration9945);
              if (state.failed) return subprogramDecl


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1594:4: ( PURE | IMPURE )? FUNCTION designator ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )? RETURN type_mark
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1594:4: ( PURE | IMPURE )?
          var alt314 = 2
          val LA314_0 = input.LA(1)

          if ((LA314_0 == IMPURE || LA314_0 == PURE)) {
            alt314 = 1
          }
          alt314 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:
              if (input.LA(1) == IMPURE || input.LA(1) == PURE) {
                input.consume()
                state.errorRecovery = false;
                state.failed = false
              }
              else {
                if (state.backtracking > 0) {
                  state.failed = true; return subprogramDecl
                }
                val mse = new MismatchedSetException(null, input)
                throw mse

              }


            case _ =>
          }

          `match`(input, FUNCTION, FOLLOW_FUNCTION_in_v2008_interface_subprogram_declaration9959);
          if (state.failed) return subprogramDecl
          pushFollow(FOLLOW_designator_in_v2008_interface_subprogram_declaration9961)
          designator();

          state._fsp -= 1
          if (state.failed) return subprogramDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1595:4: ( ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN )?
          var alt316 = 2
          val LA316_0 = input.LA(1)

          if ((LA316_0 == LPAREN || LA316_0 == PARAMETER)) {
            alt316 = 1
          }
          alt316 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1595:5: ( PARAMETER )? LPAREN parameter_interface_list= parameter_interface_list_function RPAREN
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1595:5: ( PARAMETER )?
              var alt315 = 2
              val LA315_0 = input.LA(1)

              if ((LA315_0 == PARAMETER)) {
                alt315 = 1
              }
              alt315 match {
                case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1595:5: PARAMETER
                  `match`(input, PARAMETER, FOLLOW_PARAMETER_in_v2008_interface_subprogram_declaration9967); if (state.failed) return subprogramDecl


                case _ =>
              }

              `match`(input, LPAREN, FOLLOW_LPAREN_in_v2008_interface_subprogram_declaration9970);
              if (state.failed) return subprogramDecl
              pushFollow(FOLLOW_parameter_interface_list_function_in_v2008_interface_subprogram_declaration9974)
              parameter_interface_list = parameter_interface_list_function();

              state._fsp -= 1
              if (state.failed) return subprogramDecl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_v2008_interface_subprogram_declaration9976);
              if (state.failed) return subprogramDecl


            case _ =>
          }

          `match`(input, RETURN, FOLLOW_RETURN_in_v2008_interface_subprogram_declaration9980);
          if (state.failed) return subprogramDecl
          pushFollow(FOLLOW_type_mark_in_v2008_interface_subprogram_declaration9982)
          type_mark();

          state._fsp -= 1
          if (state.failed) return subprogramDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1596:4: ( IS (subprogram_name= selected_name | BOX ) )?
      var alt319 = 2
      val LA319_0 = input.LA(1)

      if ((LA319_0 == IS)) {
        alt319 = 1
      }
      alt319 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1596:5: IS (subprogram_name= selected_name | BOX )
          `match`(input, IS, FOLLOW_IS_in_v2008_interface_subprogram_declaration9988);
          if (state.failed) return subprogramDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1596:8: (subprogram_name= selected_name | BOX )
          var alt318 = 2
          val LA318_0 = input.LA(1)

          if ((LA318_0 == STRING_LITERAL || (LA318_0 >= BASIC_IDENTIFIER && LA318_0 <= EXTENDED_IDENTIFIER))) {
            alt318 = 1
          }
          else if ((LA318_0 == BOX)) {
            alt318 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return subprogramDecl
            }
            val nvae = new NoViableAltException("", 318, 0, input)

            throw nvae
          }
          alt318 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1596:9: subprogram_name= selected_name
              pushFollow(FOLLOW_selected_name_in_v2008_interface_subprogram_declaration9993)
              subprogram_name = selected_name();

              state._fsp -= 1
              if (state.failed) return subprogramDecl

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1596:41: BOX
              `match`(input, BOX, FOLLOW_BOX_in_v2008_interface_subprogram_declaration9997); if (state.failed) return subprogramDecl


            case _ =>
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 179, v2008_interface_subprogram_declaration_StartIndex)
      }
    }
    return subprogramDecl
  }

  // $ANTLR end "v2008_interface_subprogram_declaration"

  // $ANTLR start "v2008_interface_package_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1598:1: v2008_interface_package_declaration returns [InterfaceList.AbstractInterfaceElement packageDecl] : PACKAGE identifier IS NEW uninstantiated_package_name= selected_name GENERIC MAP LPAREN (generic_association_list= association_list | BOX | DEFAULT ) RPAREN ;
  @throws(classOf[RecognitionException])
  def v2008_interface_package_declaration(): InterfaceList.AbstractInterfaceElement = {
    var packageDecl: InterfaceList.AbstractInterfaceElement = null;
    val v2008_interface_package_declaration_StartIndex = input.index()
    var uninstantiated_package_name: SelectedName = null

    var generic_association_list: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 180)) {
        return packageDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1598:98: ( PACKAGE identifier IS NEW uninstantiated_package_name= selected_name GENERIC MAP LPAREN (generic_association_list= association_list | BOX | DEFAULT ) RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1599:2: PACKAGE identifier IS NEW uninstantiated_package_name= selected_name GENERIC MAP LPAREN (generic_association_list= association_list | BOX | DEFAULT ) RPAREN
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_v2008_interface_package_declaration10015);
      if (state.failed) return packageDecl
      pushFollow(FOLLOW_identifier_in_v2008_interface_package_declaration10017)
      identifier();

      state._fsp -= 1
      if (state.failed) return packageDecl
      `match`(input, IS, FOLLOW_IS_in_v2008_interface_package_declaration10019);
      if (state.failed) return packageDecl
      `match`(input, NEW, FOLLOW_NEW_in_v2008_interface_package_declaration10021);
      if (state.failed) return packageDecl
      pushFollow(FOLLOW_selected_name_in_v2008_interface_package_declaration10025)
      uninstantiated_package_name = selected_name();

      state._fsp -= 1
      if (state.failed) return packageDecl
      `match`(input, GENERIC, FOLLOW_GENERIC_in_v2008_interface_package_declaration10029);
      if (state.failed) return packageDecl
      `match`(input, MAP, FOLLOW_MAP_in_v2008_interface_package_declaration10031);
      if (state.failed) return packageDecl
      `match`(input, LPAREN, FOLLOW_LPAREN_in_v2008_interface_package_declaration10033);
      if (state.failed) return packageDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1600:22: (generic_association_list= association_list | BOX | DEFAULT )
      var alt320 = 3
      alt320 = dfa320.predict(input)
      alt320 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1600:23: generic_association_list= association_list
          pushFollow(FOLLOW_association_list_in_v2008_interface_package_declaration10038)
          generic_association_list = association_list();

          state._fsp -= 1
          if (state.failed) return packageDecl

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1600:67: BOX
          `match`(input, BOX, FOLLOW_BOX_in_v2008_interface_package_declaration10042); if (state.failed) return packageDecl

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1600:73: DEFAULT
          `match`(input, DEFAULT, FOLLOW_DEFAULT_in_v2008_interface_package_declaration10046); if (state.failed) return packageDecl


        case _ =>
      }

      `match`(input, RPAREN, FOLLOW_RPAREN_in_v2008_interface_package_declaration10049);
      if (state.failed) return packageDecl


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 180, v2008_interface_package_declaration_StartIndex)
      }
    }
    return packageDecl
  }

  // $ANTLR end "v2008_interface_package_declaration"

  // $ANTLR start "association_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1602:1: association_element returns [AssociationList.Element element] : ( ( formal_part ARROW )=> formal_part ARROW )? actual_part ;
  @throws(classOf[RecognitionException])
  def association_element(): AssociationList.Element = {
    var element: AssociationList.Element = null;
    val association_element_StartIndex = input.index()
    var formal_part526: Either[Identifier, (SelectedName, Name.Part)] = null

    var actual_part527: Either[Expression, Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 181)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1602:63: ( ( ( formal_part ARROW )=> formal_part ARROW )? actual_part )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1603:2: ( ( formal_part ARROW )=> formal_part ARROW )? actual_part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1603:2: ( ( formal_part ARROW )=> formal_part ARROW )?
      var alt321 = 2
      alt321 = dfa321.predict(input)
      alt321 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1603:3: ( formal_part ARROW )=> formal_part ARROW
          pushFollow(FOLLOW_formal_part_in_association_element10069)
          formal_part526 = formal_part();

          state._fsp -= 1
          if (state.failed) return element
          `match`(input, ARROW, FOLLOW_ARROW_in_association_element10071);
          if (state.failed) return element


        case _ =>
      }

      pushFollow(FOLLOW_actual_part_in_association_element10075)
      actual_part527 = actual_part();

      state._fsp -= 1
      if (state.failed) return element
      if (state.backtracking == 0) {
        element = new AssociationList.Element(formal_part526, actual_part527)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 181, association_element_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "association_element"

  // $ANTLR start "association_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1606:1: association_list returns [AssociationList list] : e1= association_element ( COMMA e2= association_element )* ;
  @throws(classOf[RecognitionException])
  def association_list(): AssociationList = {
    var list: AssociationList = null;
    val association_list_StartIndex = input.index()
    var e1: AssociationList.Element = null

    var e2: AssociationList.Element = null



    val elements = new Buffer[AssociationList.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 182)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1609:3: (e1= association_element ( COMMA e2= association_element )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1610:2: e1= association_element ( COMMA e2= association_element )*
      pushFollow(FOLLOW_association_element_in_association_list10102)
      e1 = association_element();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1610:51: ( COMMA e2= association_element )*
      var loop322 = true
      do {
        var alt322 = 2
        val LA322_0 = input.LA(1)

        if ((LA322_0 == COMMA)) {
          alt322 = 1
        }


        alt322 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1610:52: COMMA e2= association_element
            `match`(input, COMMA, FOLLOW_COMMA_in_association_list10107);
            if (state.failed) return list
            pushFollow(FOLLOW_association_element_in_association_list10111)
            e2 = association_element();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop322 = false
        }
      } while (loop322);

      if (state.backtracking == 0) {
        list = new AssociationList(elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 182, association_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "association_list"

  // $ANTLR start "formal_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1613:1: formal_part returns [Either[Identifier,(SelectedName,Name.Part)] formal_part_] : ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) );
  @throws(classOf[RecognitionException])
  def formal_part(): Either[Identifier, (SelectedName, Name.Part)] = {
    var formal_part_ : Either[Identifier, (SelectedName, Name.Part)] = null;
    val formal_part_StartIndex = input.index()
    var identifier528: Identifier = null

    var selected_name529: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 183)) {
        return formal_part_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1613:81: ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) )
      var alt324 = 2
      val LA324_0 = input.LA(1)

      if (((LA324_0 >= BASIC_IDENTIFIER && LA324_0 <= EXTENDED_IDENTIFIER))) {
        val LA324_1 = input.LA(2)

        if ((LA324_1 == ARROW)) {
          alt324 = 1
        }
        else if ((LA324_1 == LPAREN || LA324_1 == DOT)) {
          alt324 = 2
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return formal_part_
          }
          val nvae = new NoViableAltException("", 324, 1, input)

          throw nvae
        }
      }
      else if ((LA324_0 == STRING_LITERAL)) {
        alt324 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return formal_part_
        }
        val nvae = new NoViableAltException("", 324, 0, input)

        throw nvae
      }
      alt324 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:2: identifier
          pushFollow(FOLLOW_identifier_in_formal_part10133)
          identifier528 = identifier();

          state._fsp -= 1
          if (state.failed) return formal_part_
          if (state.backtracking == 0) {
            formal_part_ = Left(identifier528)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:4: selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
          pushFollow(FOLLOW_selected_name_in_formal_part10140)
          selected_name529 = selected_name();

          state._fsp -= 1
          if (state.failed) return formal_part_
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:18: ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
          var alt323 = 2
          val LA323_0 = input.LA(1)

          if ((LA323_0 == LPAREN)) {
            val LA323_1 = input.LA(2)

            if ((synpred17_VHDL())) {
              alt323 = 1
            }
            else if ((true)) {
              alt323 = 2
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return formal_part_
              }
              val nvae = new NoViableAltException("", 323, 1, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return formal_part_
            }
            val nvae = new NoViableAltException("", 323, 0, input)

            throw nvae
          }
          alt323 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:19: ( name_association_list_part )=> name_association_list_part
              pushFollow(FOLLOW_name_association_list_part_in_formal_part10147)
              name_association_list_part();

              state._fsp -= 1
              if (state.failed) return formal_part_

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:78: name_slice_part
              pushFollow(FOLLOW_name_slice_part_in_formal_part10151)
              name_slice_part();

              state._fsp -= 1
              if (state.failed) return formal_part_


            case _ =>
          }

          if (state.backtracking == 0) {
            formal_part_ = Right((selected_name529, null))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 183, formal_part_StartIndex)
      }
    }
    return formal_part_
  }

  // $ANTLR end "formal_part"

  // $ANTLR start "actual_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1617:1: actual_part returns [Either[Expression,Identifier] actual_part_ ] : ( ({...}? => INERTIAL )? expression | OPEN );
  @throws(classOf[RecognitionException])
  def actual_part(): Either[Expression, Identifier] = {
    var actual_part_ : Either[Expression, Identifier] = null;
    val actual_part_StartIndex = input.index()
    var OPEN531: Token = null
    var expression530: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 184)) {
        return actual_part_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1617:68: ( ({...}? => INERTIAL )? expression | OPEN )
      var alt326 = 2
      val LA326_0 = input.LA(1)

      if ((LA326_0 == INERTIAL) && ((vhdl2008))) {
        alt326 = 1
      }
      else if (((LA326_0 >= PLUS && LA326_0 <= MINUS) || LA326_0 == STRING_LITERAL || (LA326_0 >= BASIC_IDENTIFIER && LA326_0 <= EXTENDED_IDENTIFIER))) {
        alt326 = 1
      }
      else if ((LA326_0 == 181) && ((vhdl2008))) {
        alt326 = 1
      }
      else if ((LA326_0 == ABS || LA326_0 == NEW || (LA326_0 >= NOT && LA326_0 <= NULL) || LA326_0 == LPAREN || LA326_0 == CHARACTER_LITERAL || (LA326_0 >= REAL_LITERAL && LA326_0 <= BIT_STRING_LITERAL))) {
        alt326 = 1
      }
      else if ((LA326_0 == AND || LA326_0 == NAND || LA326_0 == NOR || LA326_0 == OR || (LA326_0 >= XNOR && LA326_0 <= XOR) || LA326_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
        alt326 = 1
      }
      else if ((LA326_0 == OPEN)) {
        alt326 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return actual_part_
        }
        val nvae = new NoViableAltException("", 326, 0, input)

        throw nvae
      }
      alt326 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1619:2: ({...}? => INERTIAL )? expression
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1619:2: ({...}? => INERTIAL )?
          var alt325 = 2
          val LA325_0 = input.LA(1)

          if ((LA325_0 == INERTIAL) && ((vhdl2008))) {
            alt325 = 1
          }
          alt325 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1619:3: {...}? => INERTIAL
              if (!((vhdl2008))) {
                if (state.backtracking > 0) {
                  state.failed = true; return actual_part_
                }
                throw new FailedPredicateException(input, "actual_part", "vhdl2008")
              }
              `match`(input, INERTIAL, FOLLOW_INERTIAL_in_actual_part10174);
              if (state.failed) return actual_part_


            case _ =>
          }

          pushFollow(FOLLOW_expression_in_actual_part10178)
          expression530 = expression();

          state._fsp -= 1
          if (state.failed) return actual_part_
          if (state.backtracking == 0) {
            actual_part_ = Left(expression530)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1621:4: OPEN
          OPEN531 = `match`(input, OPEN, FOLLOW_OPEN_in_actual_part10187).asInstanceOf[Token];
          if (state.failed) return actual_part_
          if (state.backtracking == 0) {
            actual_part_ = Right(toIdentifier(OPEN531))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 184, actual_part_StartIndex)
      }
    }
    return actual_part_
  }

  // $ANTLR end "actual_part"

  // $ANTLR start "condition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1624:1: condition returns [Expression con] : expression ;
  @throws(classOf[RecognitionException])
  def condition(): Expression = {
    var con: Expression = null;
    val condition_StartIndex = input.index()
    var expression532: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 185)) {
        return con
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1624:36: ( expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1625:2: expression
      pushFollow(FOLLOW_expression_in_condition10206)
      expression532 = expression();

      state._fsp -= 1
      if (state.failed) return con
      if (state.backtracking == 0) {
        con = expression532
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 185, condition_StartIndex)
      }
    }
    return con
  }

  // $ANTLR end "condition"

  // $ANTLR start "expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1627:1: expression returns [Expression expr] : ( logical_expression | {...}? => CONDITION_OPERATOR primary );
  @throws(classOf[RecognitionException])
  def expression(): Expression = {
    var expr: Expression = null;
    val expression_StartIndex = input.index()
    var logical_expression533: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 186)) {
        return expr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1627:37: ( logical_expression | {...}? => CONDITION_OPERATOR primary )
      var alt327 = 2
      val LA327_0 = input.LA(1)

      if (((LA327_0 >= PLUS && LA327_0 <= MINUS) || LA327_0 == STRING_LITERAL || (LA327_0 >= BASIC_IDENTIFIER && LA327_0 <= EXTENDED_IDENTIFIER))) {
        alt327 = 1
      }
      else if ((LA327_0 == 181) && ((vhdl2008))) {
        alt327 = 1
      }
      else if ((LA327_0 == ABS || LA327_0 == NEW || (LA327_0 >= NOT && LA327_0 <= NULL) || LA327_0 == LPAREN || LA327_0 == CHARACTER_LITERAL || (LA327_0 >= REAL_LITERAL && LA327_0 <= BIT_STRING_LITERAL))) {
        alt327 = 1
      }
      else if ((LA327_0 == AND || LA327_0 == NAND || LA327_0 == NOR || LA327_0 == OR || (LA327_0 >= XNOR && LA327_0 <= XOR)) && ((vhdl2008))) {
        alt327 = 1
      }
      else if ((LA327_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
        alt327 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return expr
        }
        val nvae = new NoViableAltException("", 327, 0, input)

        throw nvae
      }
      alt327 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1628:3: logical_expression
          pushFollow(FOLLOW_logical_expression_in_expression10223)
          logical_expression533 = logical_expression();

          state._fsp -= 1
          if (state.failed) return expr
          if (state.backtracking == 0) {
            expr = logical_expression533
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1629:5: {...}? => CONDITION_OPERATOR primary
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return expr
            }
            throw new FailedPredicateException(input, "expression", "vhdl2008")
          }
          `match`(input, CONDITION_OPERATOR, FOLLOW_CONDITION_OPERATOR_in_expression10234);
          if (state.failed) return expr
          pushFollow(FOLLOW_primary_in_expression10236)
          primary();

          state._fsp -= 1
          if (state.failed) return expr


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 186, expression_StartIndex)
      }
    }
    return expr
  }

  // $ANTLR end "expression"

  // $ANTLR start "logical_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1631:1: logical_expression returns [Expression expr] : r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) ;
  @throws(classOf[RecognitionException])
  def logical_expression(): Expression = {
    var expr: Expression = null;
    val logical_expression_StartIndex = input.index()
    var nand: Token = null
    var nor: Token = null
    var r1: Expression = null

    var r2: Expression = null

    var logical_operator534: VHDLParser.logical_operator_return = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 187)) {
        return expr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1632:44: (r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1633:2: r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
      pushFollow(FOLLOW_relation_in_logical_expression10255)
      r1 = relation();

      state._fsp -= 1
      if (state.failed) return expr
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1633:14: ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
      var alt330 = 2
      val LA330_0 = input.LA(1)

      if ((LA330_0 == NAND || LA330_0 == NOR)) {
        alt330 = 1
      }
      else if ((LA330_0 == EOF || LA330_0 == AFTER || LA330_0 == AND || LA330_0 == BUS || LA330_0 == ELSE || LA330_0 == FOR || LA330_0 == GENERATE || LA330_0 == INERTIAL || LA330_0 == IS || LA330_0 == LOOP || (LA330_0 >= ON && LA330_0 <= OR) || LA330_0 == REGISTER || LA330_0 == REPORT || (LA330_0 >= SELECT && LA330_0 <= SEVERITY) || LA330_0 == THEN || LA330_0 == USE || LA330_0 == WHEN || (LA330_0 >= XNOR && LA330_0 <= XOR) || LA330_0 == ARROW || LA330_0 == VAR_ASSIGN || (LA330_0 >= SEMICOLON && LA330_0 <= COMMA) || LA330_0 == RPAREN || LA330_0 == BAR || (LA330_0 >= ACROSS && LA330_0 <= NOISE) || LA330_0 == 182)) {
        alt330 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return expr
        }
        val nvae = new NoViableAltException("", 330, 0, input)

        throw nvae
      }
      alt330 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1634:5: (nand= NAND | nor= NOR ) r2= relation
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1634:5: (nand= NAND | nor= NOR )
          var alt328 = 2
          val LA328_0 = input.LA(1)

          if ((LA328_0 == NAND)) {
            alt328 = 1
          }
          else if ((LA328_0 == NOR)) {
            alt328 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return expr
            }
            val nvae = new NoViableAltException("", 328, 0, input)

            throw nvae
          }
          alt328 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1634:6: nand= NAND
              nand = `match`(input, NAND, FOLLOW_NAND_in_logical_expression10266).asInstanceOf[Token]; if (state.failed) return expr

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1634:16: nor= NOR
              nor = `match`(input, NOR, FOLLOW_NOR_in_logical_expression10270).asInstanceOf[Token]; if (state.failed) return expr


            case _ =>
          }

          pushFollow(FOLLOW_relation_in_logical_expression10275)
          r2 = relation();

          state._fsp -= 1
          if (state.failed) return expr
          if (state.backtracking == 0) {
            expr = new LogicalExpression(toPosition(if (nand ne null) nand else nor), r1, if (nand ne null) LogicalExpression.Operator.NAND else LogicalExpression.Operator.NOR, r2)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1635:7: ( logical_operator r2= relation )*
          if (state.backtracking == 0) {
            expr = r1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1635:23: ( logical_operator r2= relation )*
          var loop329 = true
          do {
            var alt329 = 2
            val LA329_0 = input.LA(1)

            if ((LA329_0 == AND || LA329_0 == OR || (LA329_0 >= XNOR && LA329_0 <= XOR))) {
              alt329 = 1
            }


            alt329 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1635:24: logical_operator r2= relation
                pushFollow(FOLLOW_logical_operator_in_logical_expression10288)
                logical_operator534 = logical_operator();

                state._fsp -= 1
                if (state.failed) return expr
                pushFollow(FOLLOW_relation_in_logical_expression10292)
                r2 = relation();

                state._fsp -= 1
                if (state.failed) return expr
                if (state.backtracking == 0) {
                  expr = new LogicalExpression((if (logical_operator534 != null) logical_operator534.pos else null), expr, (if (logical_operator534 != null) logical_operator534.logOp else null), r2)
                }


              case _ => loop329 = false
            }
          } while (loop329);


        case _ =>
      }




      if (state.backtracking == 0) {
        if (expr == null) expr = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 187, logical_expression_StartIndex)
      }
    }
    return expr
  }

  // $ANTLR end "logical_expression"

  // $ANTLR start "logical_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1638:1: logical_operator returns [LogicalExpression.Operator.Value logOp,Position pos] : ( AND | OR | XOR | XNOR );
  @throws(classOf[RecognitionException])
  def logical_operator(): VHDLParser.logical_operator_return = {
    val retval: VHDLParser.logical_operator_return = new VHDLParser.logical_operator_return()
    retval.start = input.LT(1)
    val logical_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 188)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1641:3: ( AND | OR | XOR | XNOR )
      var alt331 = 4
      input.LA(1) match {
        case AND =>
          alt331 = 1
        case OR =>
          alt331 = 2
        case XOR =>
          alt331 = 3
        case XNOR =>
          alt331 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 331, 0, input)

          throw nvae
      }

      alt331 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1642:2: AND
          `match`(input, AND, FOLLOW_AND_in_logical_operator10316);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.AND
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1643:4: OR
          `match`(input, OR, FOLLOW_OR_in_logical_operator10323);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.OR
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1644:4: XOR
          `match`(input, XOR, FOLLOW_XOR_in_logical_operator10330);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.XOR
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1645:4: XNOR
          `match`(input, XNOR, FOLLOW_XNOR_in_logical_operator10337);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.XNOR
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 188, logical_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "logical_operator"

  // $ANTLR start "relation"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1649:1: relation returns [Expression rel] : s1= shift_expression (op= relational_operator s2= shift_expression )? ;
  @throws(classOf[RecognitionException])
  def relation(): Expression = {
    var rel: Expression = null;
    val relation_StartIndex = input.index()
    var s1: Expression = null

    var op: VHDLParser.relational_operator_return = null

    var s2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 189)) {
        return rel
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1650:43: (s1= shift_expression (op= relational_operator s2= shift_expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1651:2: s1= shift_expression (op= relational_operator s2= shift_expression )?
      pushFollow(FOLLOW_shift_expression_in_relation10362)
      s1 = shift_expression();

      state._fsp -= 1
      if (state.failed) return rel
      if (state.backtracking == 0) {
        rel = s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1652:2: (op= relational_operator s2= shift_expression )?
      var alt332 = 2
      val LA332_0 = input.LA(1)

      if (((LA332_0 >= LEQ && LA332_0 <= GEQ) || LA332_0 == NEQ || (LA332_0 >= LT && LA332_0 <= EQ))) {
        alt332 = 1
      }
      else if (((LA332_0 >= MEQ && LA332_0 <= MGEQ)) && ((vhdl2008))) {
        alt332 = 1
      }
      alt332 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1652:3: op= relational_operator s2= shift_expression
          pushFollow(FOLLOW_relational_operator_in_relation10370)
          op = relational_operator();

          state._fsp -= 1
          if (state.failed) return rel
          pushFollow(FOLLOW_shift_expression_in_relation10374)
          s2 = shift_expression();

          state._fsp -= 1
          if (state.failed) return rel
          if (state.backtracking == 0) {
            rel = new Relation((if (op != null) op.pos else null), s1, (if (op != null) op.relOp else null), s2)
          }


        case _ =>
      }




      if (state.backtracking == 0) {
        if (rel == null) rel = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 189, relation_StartIndex)
      }
    }
    return rel
  }

  // $ANTLR end "relation"

  // $ANTLR start "relational_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1654:1: relational_operator returns [Relation.Operator.Value relOp,Position pos] : ( EQ | NEQ | LT | LEQ | GT | GEQ | {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ ) );
  @throws(classOf[RecognitionException])
  def relational_operator(): VHDLParser.relational_operator_return = {
    val retval: VHDLParser.relational_operator_return = new VHDLParser.relational_operator_return()
    retval.start = input.LT(1)
    val relational_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 190)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1657:3: ( EQ | NEQ | LT | LEQ | GT | GEQ | {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ ) )
      var alt333 = 7
      val LA333_0 = input.LA(1)

      if ((LA333_0 == EQ)) {
        alt333 = 1
      }
      else if ((LA333_0 == NEQ)) {
        alt333 = 2
      }
      else if ((LA333_0 == LT)) {
        alt333 = 3
      }
      else if ((LA333_0 == LEQ)) {
        alt333 = 4
      }
      else if ((LA333_0 == GT)) {
        alt333 = 5
      }
      else if ((LA333_0 == GEQ)) {
        alt333 = 6
      }
      else if (((LA333_0 >= MEQ && LA333_0 <= MGEQ)) && ((vhdl2008))) {
        alt333 = 7
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return retval
        }
        val nvae = new NoViableAltException("", 333, 0, input)

        throw nvae
      }
      alt333 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1658:2: EQ
          `match`(input, EQ, FOLLOW_EQ_in_relational_operator10395);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.EQ
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1659:4: NEQ
          `match`(input, NEQ, FOLLOW_NEQ_in_relational_operator10402);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.NEQ
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1660:4: LT
          `match`(input, LT, FOLLOW_LT_in_relational_operator10409);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.LT
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1661:4: LEQ
          `match`(input, LEQ, FOLLOW_LEQ_in_relational_operator10416);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.LEQ
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1662:4: GT
          `match`(input, GT, FOLLOW_GT_in_relational_operator10423);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.GT
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1663:4: GEQ
          `match`(input, GEQ, FOLLOW_GEQ_in_relational_operator10430);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.GEQ
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1664:4: {...}? => ( MEQ | MNEQ | MLT | MLEQ | MGT | MGEQ )
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return retval
            }
            throw new FailedPredicateException(input, "relational_operator", "vhdl2008")
          }
          if ((input.LA(1) >= MEQ && input.LA(1) <= MGEQ)) {
            input.consume()
            state.errorRecovery = false;
            state.failed = false
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return retval
            }
            val mse = new MismatchedSetException(null, input)
            throw mse

          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 190, relational_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "relational_operator"

  // $ANTLR start "shift_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1671:1: shift_expression returns [Expression shiftExpr] : s1= simple_expression (op= shift_operator s2= simple_expression )? ;
  @throws(classOf[RecognitionException])
  def shift_expression(): Expression = {
    var shiftExpr: Expression = null;
    val shift_expression_StartIndex = input.index()
    var s1: Expression = null

    var op: VHDLParser.shift_operator_return = null

    var s2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 191)) {
        return shiftExpr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1672:55: (s1= simple_expression (op= shift_operator s2= simple_expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1673:2: s1= simple_expression (op= shift_operator s2= simple_expression )?
      pushFollow(FOLLOW_simple_expression_in_shift_expression10497)
      s1 = simple_expression();

      state._fsp -= 1
      if (state.failed) return shiftExpr
      if (state.backtracking == 0) {
        shiftExpr = s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1674:2: (op= shift_operator s2= simple_expression )?
      var alt334 = 2
      val LA334_0 = input.LA(1)

      if (((LA334_0 >= ROL && LA334_0 <= ROR) || (LA334_0 >= SLA && LA334_0 <= SRL))) {
        alt334 = 1
      }
      alt334 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1674:3: op= shift_operator s2= simple_expression
          pushFollow(FOLLOW_shift_operator_in_shift_expression10505)
          op = shift_operator();

          state._fsp -= 1
          if (state.failed) return shiftExpr
          pushFollow(FOLLOW_simple_expression_in_shift_expression10509)
          s2 = simple_expression();

          state._fsp -= 1
          if (state.failed) return shiftExpr
          if (state.backtracking == 0) {
            shiftExpr = new ShiftExpression((if (op != null) op.pos else null), s1, (if (op != null) op.shiftOp else null), s2)
          }


        case _ =>
      }




      if (state.backtracking == 0) {
        if (shiftExpr == null) shiftExpr = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 191, shift_expression_StartIndex)
      }
    }
    return shiftExpr
  }

  // $ANTLR end "shift_expression"

  // $ANTLR start "shift_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1676:1: shift_operator returns [ShiftExpression.Operator.Value shiftOp,Position pos] : ( SLL | SRL | SLA | SRA | ROL | ROR );
  @throws(classOf[RecognitionException])
  def shift_operator(): VHDLParser.shift_operator_return = {
    val retval: VHDLParser.shift_operator_return = new VHDLParser.shift_operator_return()
    retval.start = input.LT(1)
    val shift_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 192)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1679:3: ( SLL | SRL | SLA | SRA | ROL | ROR )
      var alt335 = 6
      input.LA(1) match {
        case SLL =>
          alt335 = 1
        case SRL =>
          alt335 = 2
        case SLA =>
          alt335 = 3
        case SRA =>
          alt335 = 4
        case ROL =>
          alt335 = 5
        case ROR =>
          alt335 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 335, 0, input)

          throw nvae
      }

      alt335 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1680:2: SLL
          `match`(input, SLL, FOLLOW_SLL_in_shift_operator10530);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SLL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1681:4: SRL
          `match`(input, SRL, FOLLOW_SRL_in_shift_operator10537);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SRL
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1682:4: SLA
          `match`(input, SLA, FOLLOW_SLA_in_shift_operator10544);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SLA
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1683:4: SRA
          `match`(input, SRA, FOLLOW_SRA_in_shift_operator10551);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SRA
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1684:4: ROL
          `match`(input, ROL, FOLLOW_ROL_in_shift_operator10558);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.ROL
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1685:4: ROR
          `match`(input, ROR, FOLLOW_ROR_in_shift_operator10565);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.ROR
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 192, shift_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "shift_operator"

  // $ANTLR start "simple_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1687:1: simple_expression returns [Expression simpleExpr] : (s= sign )? t1= term (op= adding_operator t2= term )* ;
  @throws(classOf[RecognitionException])
  def simple_expression(): Expression = {
    var simpleExpr: Expression = null;
    val simple_expression_StartIndex = input.index()
    var s: VHDLParser.sign_return = null

    var t1: Expression = null

    var op: VHDLParser.adding_operator_return = null

    var t2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 193)) {
        return simpleExpr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1688:57: ( (s= sign )? t1= term (op= adding_operator t2= term )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1689:2: (s= sign )? t1= term (op= adding_operator t2= term )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1689:3: (s= sign )?
      var alt336 = 2
      val LA336_0 = input.LA(1)

      if (((LA336_0 >= PLUS && LA336_0 <= MINUS))) {
        alt336 = 1
      }
      alt336 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1689:3: s= sign
          pushFollow(FOLLOW_sign_in_simple_expression10588)
          s = sign();

          state._fsp -= 1
          if (state.failed) return simpleExpr


        case _ =>
      }

      pushFollow(FOLLOW_term_in_simple_expression10593)
      t1 = term();

      state._fsp -= 1
      if (state.failed) return simpleExpr
      if (state.backtracking == 0) {
        simpleExpr = if (s != null) new SimpleExpression((if (s != null) s.pos else null), (if (s != null) s.signOp else null), t1, None, None) else t1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1691:2: (op= adding_operator t2= term )*
      var loop337 = true
      do {
        var alt337 = 2
        val LA337_0 = input.LA(1)

        if ((LA337_0 == AMPERSAND || (LA337_0 >= PLUS && LA337_0 <= MINUS))) {
          alt337 = 1
        }


        alt337 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1691:4: op= adding_operator t2= term
            pushFollow(FOLLOW_adding_operator_in_simple_expression10604)
            op = adding_operator();

            state._fsp -= 1
            if (state.failed) return simpleExpr
            pushFollow(FOLLOW_term_in_simple_expression10608)
            t2 = term();

            state._fsp -= 1
            if (state.failed) return simpleExpr
            if (state.backtracking == 0) {
              simpleExpr = new SimpleExpression((if (op != null) op.pos else null), None, simpleExpr, (if (op != null) op.addOp else null), t2)
            }


          case _ => loop337 = false
        }
      } while (loop337);




      if (state.backtracking == 0) {
        if (simpleExpr == null) simpleExpr = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 193, simple_expression_StartIndex)
      }
    }
    return simpleExpr
  }

  // $ANTLR end "simple_expression"

  // $ANTLR start "sign"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1693:1: sign returns [SimpleExpression.SignOperator.Value signOp,Position pos] : ( PLUS | MINUS );
  @throws(classOf[RecognitionException])
  def sign(): VHDLParser.sign_return = {
    val retval: VHDLParser.sign_return = new VHDLParser.sign_return()
    retval.start = input.LT(1)
    val sign_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 194)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1696:3: ( PLUS | MINUS )
      var alt338 = 2
      val LA338_0 = input.LA(1)

      if ((LA338_0 == PLUS)) {
        alt338 = 1
      }
      else if ((LA338_0 == MINUS)) {
        alt338 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return retval
        }
        val nvae = new NoViableAltException("", 338, 0, input)

        throw nvae
      }
      alt338 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1697:2: PLUS
          `match`(input, PLUS, FOLLOW_PLUS_in_sign10629);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.signOp = SimpleExpression.SignOperator.PLUS
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1698:4: MINUS
          `match`(input, MINUS, FOLLOW_MINUS_in_sign10636);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.signOp = SimpleExpression.SignOperator.MINUS
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 194, sign_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "sign"

  // $ANTLR start "adding_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1700:1: adding_operator returns [SimpleExpression.AddOperator.Value addOp,Position pos] : ( PLUS | MINUS | AMPERSAND );
  @throws(classOf[RecognitionException])
  def adding_operator(): VHDLParser.adding_operator_return = {
    val retval: VHDLParser.adding_operator_return = new VHDLParser.adding_operator_return()
    retval.start = input.LT(1)
    val adding_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 195)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1703:3: ( PLUS | MINUS | AMPERSAND )
      var alt339 = 3
      input.LA(1) match {
        case PLUS =>
          alt339 = 1
        case MINUS =>
          alt339 = 2
        case AMPERSAND =>
          alt339 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 339, 0, input)

          throw nvae
      }

      alt339 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1704:2: PLUS
          `match`(input, PLUS, FOLLOW_PLUS_in_adding_operator10659);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.PLUS
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1705:4: MINUS
          `match`(input, MINUS, FOLLOW_MINUS_in_adding_operator10666);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.MINUS
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1706:4: AMPERSAND
          `match`(input, AMPERSAND, FOLLOW_AMPERSAND_in_adding_operator10673);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.CONCATENATION
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 195, adding_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "adding_operator"

  // $ANTLR start "multiplying_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1708:1: multiplying_operator returns [Term.Operator.Value mulOp,Position pos] : ( MUL | DIV | MOD | REM );
  @throws(classOf[RecognitionException])
  def multiplying_operator(): VHDLParser.multiplying_operator_return = {
    val retval: VHDLParser.multiplying_operator_return = new VHDLParser.multiplying_operator_return()
    retval.start = input.LT(1)
    val multiplying_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 196)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1711:3: ( MUL | DIV | MOD | REM )
      var alt340 = 4
      input.LA(1) match {
        case MUL =>
          alt340 = 1
        case DIV =>
          alt340 = 2
        case MOD =>
          alt340 = 3
        case REM =>
          alt340 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 340, 0, input)

          throw nvae
      }

      alt340 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1712:2: MUL
          `match`(input, MUL, FOLLOW_MUL_in_multiplying_operator10692);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.MUL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1713:4: DIV
          `match`(input, DIV, FOLLOW_DIV_in_multiplying_operator10699);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.DIV
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1714:4: MOD
          `match`(input, MOD, FOLLOW_MOD_in_multiplying_operator10706);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.MOD
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1715:4: REM
          `match`(input, REM, FOLLOW_REM_in_multiplying_operator10713);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.REM
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 196, multiplying_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "multiplying_operator"

  // $ANTLR start "term"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1717:1: term returns [Expression term_] : f1= factor ( multiplying_operator f2= factor )* ;
  @throws(classOf[RecognitionException])
  def term(): Expression = {
    var term_ : Expression = null;
    val term_StartIndex = input.index()
    var f1: Expression = null

    var f2: Expression = null

    var multiplying_operator535: VHDLParser.multiplying_operator_return = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 197)) {
        return term_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1718:49: (f1= factor ( multiplying_operator f2= factor )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1719:2: f1= factor ( multiplying_operator f2= factor )*
      pushFollow(FOLLOW_factor_in_term10733)
      f1 = factor();

      state._fsp -= 1
      if (state.failed) return term_
      if (state.backtracking == 0) {
        term_ = f1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1720:2: ( multiplying_operator f2= factor )*
      var loop341 = true
      do {
        var alt341 = 2
        val LA341_0 = input.LA(1)

        if ((LA341_0 == MOD || LA341_0 == REM || (LA341_0 >= MUL && LA341_0 <= DIV))) {
          alt341 = 1
        }


        alt341 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1720:4: multiplying_operator f2= factor
            pushFollow(FOLLOW_multiplying_operator_in_term10741)
            multiplying_operator535 = multiplying_operator();

            state._fsp -= 1
            if (state.failed) return term_
            pushFollow(FOLLOW_factor_in_term10745)
            f2 = factor();

            state._fsp -= 1
            if (state.failed) return term_
            if (state.backtracking == 0) {
              term_ = new Term((if (multiplying_operator535 != null) multiplying_operator535.pos else null), term_, (if (multiplying_operator535 != null) multiplying_operator535.mulOp else null), f2)
            }


          case _ => loop341 = false
        }
      } while (loop341);




      if (state.backtracking == 0) {
        if (term_ == null) term_ = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 197, term_StartIndex)
      }
    }
    return term_
  }

  // $ANTLR end "term"

  // $ANTLR start "factor"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1722:1: factor returns [Expression factor_] : (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary | {...}? => ( NAND | NOR | logical_operator ) primary );
  @throws(classOf[RecognitionException])
  def factor(): Expression = {
    var factor_ : Expression = null;
    val factor_StartIndex = input.index()
    var DOUBLESTAR536: Token = null
    var ABS537: Token = null
    var NOT539: Token = null
    var p1: Expression = null

    var p2: Expression = null

    var primary538: Expression = null

    var primary540: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 198)) {
        return factor_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1723:53: (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary | {...}? => ( NAND | NOR | logical_operator ) primary )
      var alt344 = 4
      val LA344_0 = input.LA(1)

      if ((LA344_0 == STRING_LITERAL || (LA344_0 >= BASIC_IDENTIFIER && LA344_0 <= EXTENDED_IDENTIFIER))) {
        alt344 = 1
      }
      else if ((LA344_0 == 181) && ((vhdl2008))) {
        alt344 = 1
      }
      else if ((LA344_0 == NEW || LA344_0 == NULL || LA344_0 == LPAREN || LA344_0 == CHARACTER_LITERAL || (LA344_0 >= REAL_LITERAL && LA344_0 <= BIT_STRING_LITERAL))) {
        alt344 = 1
      }
      else if ((LA344_0 == ABS)) {
        alt344 = 2
      }
      else if ((LA344_0 == NOT)) {
        alt344 = 3
      }
      else if ((LA344_0 == AND || LA344_0 == NAND || LA344_0 == NOR || LA344_0 == OR || (LA344_0 >= XNOR && LA344_0 <= XOR)) && ((vhdl2008))) {
        alt344 = 4
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return factor_
        }
        val nvae = new NoViableAltException("", 344, 0, input)

        throw nvae
      }
      alt344 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1724:2: p1= primary ( DOUBLESTAR p2= primary )?
          pushFollow(FOLLOW_primary_in_factor10768)
          p1 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = p1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1724:32: ( DOUBLESTAR p2= primary )?
          var alt342 = 2
          val LA342_0 = input.LA(1)

          if ((LA342_0 == DOUBLESTAR)) {
            alt342 = 1
          }
          alt342 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1724:33: DOUBLESTAR p2= primary
              DOUBLESTAR536 = `match`(input, DOUBLESTAR, FOLLOW_DOUBLESTAR_in_factor10771).asInstanceOf[Token];
              if (state.failed) return factor_
              pushFollow(FOLLOW_primary_in_factor10775)
              p2 = primary();

              state._fsp -= 1
              if (state.failed) return factor_
              if (state.backtracking == 0) {
                factor_ = new Factor(toPosition(DOUBLESTAR536), p1, Factor.Operator.POW, p2)
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1725:4: ABS primary
          ABS537 = `match`(input, ABS, FOLLOW_ABS_in_factor10784).asInstanceOf[Token];
          if (state.failed) return factor_
          pushFollow(FOLLOW_primary_in_factor10786)
          primary538 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = new Factor(toPosition(ABS537), primary538, Factor.Operator.ABS)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1726:4: NOT primary
          NOT539 = `match`(input, NOT, FOLLOW_NOT_in_factor10793).asInstanceOf[Token];
          if (state.failed) return factor_
          pushFollow(FOLLOW_primary_in_factor10795)
          primary540 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = new Factor(toPosition(NOT539), primary540, Factor.Operator.NOT)
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1727:4: {...}? => ( NAND | NOR | logical_operator ) primary
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return factor_
            }
            throw new FailedPredicateException(input, "factor", "vhdl2008")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1727:17: ( NAND | NOR | logical_operator )
          var alt343 = 3
          input.LA(1) match {
            case NAND =>
              alt343 = 1
            case NOR =>
              alt343 = 2
            case AND | OR | XNOR | XOR =>
              alt343 = 3
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return factor_
              }
              val nvae = new NoViableAltException("", 343, 0, input)

              throw nvae
          }

          alt343 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1727:18: NAND
              `match`(input, NAND, FOLLOW_NAND_in_factor10805); if (state.failed) return factor_

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1728:6: NOR
              `match`(input, NOR, FOLLOW_NOR_in_factor10813); if (state.failed) return factor_

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1729:6: logical_operator
              pushFollow(FOLLOW_logical_operator_in_factor10821)
              logical_operator();

              state._fsp -= 1
              if (state.failed) return factor_


            case _ =>
          }

          pushFollow(FOLLOW_primary_in_factor10824)
          primary();

          state._fsp -= 1
          if (state.failed) return factor_


        case _ =>
      }
      if (state.backtracking == 0) {
        if (factor_ == null) factor_ = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 198, factor_StartIndex)
      }
    }
    return factor_
  }

  // $ANTLR end "factor"

  // $ANTLR start "primary"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1731:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );
  @throws(classOf[RecognitionException])
  def primary(): Expression = {
    var obj: Expression = null;
    val primary_StartIndex = input.index()
    var selected_name541: SelectedName = null

    var qualified_expression542: QualifiedExpression = null

    var name543: Name = null

    var literal544: Expression = null

    var allocator545: Expression = null

    var aggregate546: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 199)) {
        return obj
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1732:42: ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate )
      var alt345 = 5
      alt345 = dfa345.predict(input)
      alt345 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1733:2: selected_name qualified_expression[$selected_name.name_]
          pushFollow(FOLLOW_selected_name_in_primary10840)
          selected_name541 = selected_name();

          state._fsp -= 1
          if (state.failed) return obj
          pushFollow(FOLLOW_qualified_expression_in_primary10842)
          qualified_expression542 = qualified_expression(selected_name541);

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = qualified_expression542
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1734:4: name
          pushFollow(FOLLOW_name_in_primary10850)
          name543 = name();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = name543
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1735:4: literal
          pushFollow(FOLLOW_literal_in_primary10857)
          literal544 = literal();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = literal544
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1736:4: allocator
          pushFollow(FOLLOW_allocator_in_primary10865)
          allocator545 = allocator();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = allocator545
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1737:4: aggregate
          pushFollow(FOLLOW_aggregate_in_primary10872)
          aggregate546 = aggregate();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = aggregate546
          }


        case _ =>
      }
      if (state.backtracking == 0) {
        if (obj == null) obj = NoExpression
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 199, primary_StartIndex)
      }
    }
    return obj
  }

  // $ANTLR end "primary"

  // $ANTLR start "allocator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1739:1: allocator returns [Expression newExpression] : NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) ;
  @throws(classOf[RecognitionException])
  def allocator(): Expression = {
    var newExpression: Expression = null;
    val allocator_StartIndex = input.index()
    var NEW548: Token = null
    var selected_name547: SelectedName = null

    var qualified_expression549: QualifiedExpression = null

    var index_constraint550: Seq[DiscreteRange] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 200)) {
        return newExpression
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1739:46: ( NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1740:2: NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
      NEW548 = `match`(input, NEW, FOLLOW_NEW_in_allocator10888).asInstanceOf[Token];
      if (state.failed) return newExpression
      pushFollow(FOLLOW_selected_name_in_allocator10890)
      selected_name547 = selected_name();

      state._fsp -= 1
      if (state.failed) return newExpression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1741:3: ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
      var alt347 = 2
      val LA347_0 = input.LA(1)

      if ((LA347_0 == APOSTROPHE)) {
        alt347 = 1
      }
      else if ((LA347_0 == EOF || LA347_0 == AFTER || LA347_0 == AND || LA347_0 == BUS || (LA347_0 >= DOWNTO && LA347_0 <= ELSE) || LA347_0 == FOR || LA347_0 == GENERATE || LA347_0 == INERTIAL || LA347_0 == IS || LA347_0 == LOOP || (LA347_0 >= MOD && LA347_0 <= NAND) || LA347_0 == NOR || (LA347_0 >= ON && LA347_0 <= OR) || LA347_0 == REGISTER || (LA347_0 >= REM && LA347_0 <= REPORT) || (LA347_0 >= ROL && LA347_0 <= SEVERITY) || (LA347_0 >= SLA && LA347_0 <= SRL) || (LA347_0 >= THEN && LA347_0 <= TO) || LA347_0 == UNITS || LA347_0 == USE || LA347_0 == WHEN || (LA347_0 >= XNOR && LA347_0 <= VAR_ASSIGN) || (LA347_0 >= SEMICOLON && LA347_0 <= RPAREN) || (LA347_0 >= MUL && LA347_0 <= BAR) || (LA347_0 >= MEQ && LA347_0 <= MGEQ) || (LA347_0 >= TOLERANCE && LA347_0 <= NOISE) || LA347_0 == 182)) {
        alt347 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return newExpression
        }
        val nvae = new NoViableAltException("", 347, 0, input)

        throw nvae
      }
      alt347 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1741:5: qualified_expression[$selected_name.name_]
          pushFollow(FOLLOW_qualified_expression_in_allocator10897)
          qualified_expression549 = qualified_expression(selected_name547);

          state._fsp -= 1
          if (state.failed) return newExpression
          if (state.backtracking == 0) {
            newExpression = new NewExpression(toPosition(NEW548), Left(qualified_expression549))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1742:6: ( index_constraint )?
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1742:6: ( index_constraint )?
          var alt346 = 2
          val LA346_0 = input.LA(1)

          if ((LA346_0 == LPAREN)) {
            alt346 = 1
          }
          alt346 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1742:6: index_constraint
              pushFollow(FOLLOW_index_constraint_in_allocator10907)
              index_constraint550 = index_constraint();

              state._fsp -= 1
              if (state.failed) return newExpression


            case _ =>
          }

          if (state.backtracking == 0) {
            newExpression = new NewExpression(toPosition(NEW548), Right(new SubTypeIndication(None, selected_name547, if (index_constraint550 == null) None else Right(index_constraint550), None)))
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 200, allocator_StartIndex)
      }
    }
    return newExpression
  }

  // $ANTLR end "allocator"

  // $ANTLR start "qualified_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1745:1: qualified_expression[SelectedName typeName] returns [QualifiedExpression expr] : APOSTROPHE aggregate ;
  @throws(classOf[RecognitionException])
  def qualified_expression(typeName: SelectedName): QualifiedExpression = {
    var expr: QualifiedExpression = null;
    val qualified_expression_StartIndex = input.index()
    var aggregate551: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 201)) {
        return expr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1745:80: ( APOSTROPHE aggregate )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1746:2: APOSTROPHE aggregate
      `match`(input, APOSTROPHE, FOLLOW_APOSTROPHE_in_qualified_expression10930);
      if (state.failed) return expr
      pushFollow(FOLLOW_aggregate_in_qualified_expression10932)
      aggregate551 = aggregate();

      state._fsp -= 1
      if (state.failed) return expr
      if (state.backtracking == 0) {
        expr = new QualifiedExpression(typeName, aggregate551)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 201, qualified_expression_StartIndex)
      }
    }
    return expr
  }

  // $ANTLR end "qualified_expression"

  // $ANTLR start "selected_name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1749:1: selected_name_list returns [Seq[SelectedName] list] : n1= selected_name ( COMMA n2= selected_name )* ;
  @throws(classOf[RecognitionException])
  def selected_name_list(): Seq[SelectedName] = {
    var list: Seq[SelectedName] = null;
    val selected_name_list_StartIndex = input.index()
    var n1: SelectedName = null

    var n2: SelectedName = null



    val tmpList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 202)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1752:3: (n1= selected_name ( COMMA n2= selected_name )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1753:2: n1= selected_name ( COMMA n2= selected_name )*
      pushFollow(FOLLOW_selected_name_in_selected_name_list10954)
      n1 = selected_name();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        tmpList += n1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1753:42: ( COMMA n2= selected_name )*
      var loop348 = true
      do {
        var alt348 = 2
        val LA348_0 = input.LA(1)

        if ((LA348_0 == COMMA)) {
          alt348 = 1
        }


        alt348 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1753:43: COMMA n2= selected_name
            `match`(input, COMMA, FOLLOW_COMMA_in_selected_name_list10959);
            if (state.failed) return list
            pushFollow(FOLLOW_selected_name_in_selected_name_list10963)
            n2 = selected_name();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += n2
            }


          case _ => loop348 = false
        }
      } while (loop348);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 202, selected_name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "selected_name_list"

  // $ANTLR start "selected_name"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1756:1: selected_name returns [SelectedName name_] : name_prefix ( name_selected_part )* ;
  @throws(classOf[RecognitionException])
  def selected_name(): SelectedName = {
    var name_ : SelectedName = null;
    val selected_name_StartIndex = input.index()
    var name_selected_part552: Name.SelectedPart = null

    var name_prefix553: Identifier = null



    val parts = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 203)) {
        return name_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1759:3: ( name_prefix ( name_selected_part )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1760:2: name_prefix ( name_selected_part )*
      pushFollow(FOLLOW_name_prefix_in_selected_name10990)
      name_prefix553 = name_prefix();

      state._fsp -= 1
      if (state.failed) return name_
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1760:14: ( name_selected_part )*
      var loop349 = true
      do {
        var alt349 = 2
        val LA349_0 = input.LA(1)

        if ((LA349_0 == DOT)) {
          alt349 = 1
        }


        alt349 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1760:16: name_selected_part
            pushFollow(FOLLOW_name_selected_part_in_selected_name10994)
            name_selected_part552 = name_selected_part();

            state._fsp -= 1
            if (state.failed) return name_
            if (state.backtracking == 0) {
              parts += name_selected_part552.identifier
            }


          case _ => loop349 = false
        }
      } while (loop349);

      if (state.backtracking == 0) {
        name_ = new SelectedName(name_prefix553 +: parts.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 203, selected_name_StartIndex)
      }
    }
    return name_
  }

  // $ANTLR end "selected_name"

  // $ANTLR start "name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1763:1: name_list returns [Seq[Name] list] : n1= name ( COMMA n2= name )* ;
  @throws(classOf[RecognitionException])
  def name_list(): Seq[Name] = {
    var list: Seq[Name] = null;
    val name_list_StartIndex = input.index()
    var n1: Name = null

    var n2: Name = null



    val tmpList = new Buffer[Name]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 204)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1766:3: (n1= name ( COMMA n2= name )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1767:2: n1= name ( COMMA n2= name )*
      pushFollow(FOLLOW_name_in_name_list11020)
      n1 = name();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        tmpList += n1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1767:33: ( COMMA n2= name )*
      var loop350 = true
      do {
        var alt350 = 2
        val LA350_0 = input.LA(1)

        if ((LA350_0 == COMMA)) {
          alt350 = 1
        }


        alt350 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1767:34: COMMA n2= name
            `match`(input, COMMA, FOLLOW_COMMA_in_name_list11025);
            if (state.failed) return list
            pushFollow(FOLLOW_name_in_name_list11029)
            n2 = name();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += n2
            }


          case _ => loop350 = false
        }
      } while (loop350);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 204, name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "name_list"

  // $ANTLR start "name"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1770:1: name returns [Name name_] : ( name_prefix ( name_part )* | {...}? => v2008_external_name );
  @throws(classOf[RecognitionException])
  def name(): Name = {
    var name_ : Name = null;
    val name_StartIndex = input.index()
    var name_part554: Name.Part = null

    var name_prefix555: Identifier = null



    val parts = new Buffer[Name.Part]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 205)) {
        return name_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1773:3: ( name_prefix ( name_part )* | {...}? => v2008_external_name )
      var alt352 = 2
      val LA352_0 = input.LA(1)

      if ((LA352_0 == STRING_LITERAL || (LA352_0 >= BASIC_IDENTIFIER && LA352_0 <= EXTENDED_IDENTIFIER))) {
        alt352 = 1
      }
      else if ((LA352_0 == 181) && ((vhdl2008))) {
        alt352 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return name_
        }
        val nvae = new NoViableAltException("", 352, 0, input)

        throw nvae
      }
      alt352 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1774:2: name_prefix ( name_part )*
          pushFollow(FOLLOW_name_prefix_in_name11057)
          name_prefix555 = name_prefix();

          state._fsp -= 1
          if (state.failed) return name_
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1774:14: ( name_part )*
          var loop351 = true
          do {
            var alt351 = 2
            alt351 = dfa351.predict(input)
            alt351 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1774:15: name_part
                pushFollow(FOLLOW_name_part_in_name11060)
                name_part554 = name_part();

                state._fsp -= 1
                if (state.failed) return name_
                if (state.backtracking == 0) {
                  parts += name_part554
                }


              case _ => loop351 = false
            }
          } while (loop351);

          if (state.backtracking == 0) {
            name_ = new Name(name_prefix555, parts.result)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1775:4: {...}? => v2008_external_name
          if (!((vhdl2008))) {
            if (state.backtracking > 0) {
              state.failed = true; return name_
            }
            throw new FailedPredicateException(input, "name", "vhdl2008")
          }
          pushFollow(FOLLOW_v2008_external_name_in_name11073)
          v2008_external_name();

          state._fsp -= 1
          if (state.failed) return name_


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 205, name_StartIndex)
      }
    }
    return name_
  }

  // $ANTLR end "name"

  // $ANTLR start "name_prefix"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1777:1: name_prefix returns [Identifier id] : ( identifier | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def name_prefix(): Identifier = {
    var id: Identifier = null;
    val name_prefix_StartIndex = input.index()
    var STRING_LITERAL557: Token = null
    var identifier556: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 206)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1777:37: ( identifier | STRING_LITERAL )
      var alt353 = 2
      val LA353_0 = input.LA(1)

      if (((LA353_0 >= BASIC_IDENTIFIER && LA353_0 <= EXTENDED_IDENTIFIER))) {
        alt353 = 1
      }
      else if ((LA353_0 == STRING_LITERAL)) {
        alt353 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 353, 0, input)

        throw nvae
      }
      alt353 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1778:2: identifier
          pushFollow(FOLLOW_identifier_in_name_prefix11086)
          identifier556 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier556
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1779:5: STRING_LITERAL
          STRING_LITERAL557 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_name_prefix11094).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL557)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 206, name_prefix_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "name_prefix"

  // $ANTLR start "name_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1781:1: name_part returns [Name.Part part] : ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part );
  @throws(classOf[RecognitionException])
  def name_part(): Name.Part = {
    var part: Name.Part = null;
    val name_part_StartIndex = input.index()
    var name_selected_part558: Name.SelectedPart = null

    var name_attribute_part559: Name.AttributePart = null

    var name_association_list_part560: Name.AssociationListPart = null

    var name_slice_part561: Name.SlicePart = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 207)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1781:36: ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part )
      var alt354 = 4
      input.LA(1) match {
        case DOT =>
          alt354 = 1
        case LBRACKET | APOSTROPHE =>
          alt354 = 2
        case LPAREN =>
          val LA354_4 = input.LA(2)

          if ((synpred18_VHDL())) {
            alt354 = 3
          }
          else if ((true)) {
            alt354 = 4
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return part
            }
            val nvae = new NoViableAltException("", 354, 4, input)

            throw nvae
          }
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return part
          }
          val nvae = new NoViableAltException("", 354, 0, input)

          throw nvae
      }

      alt354 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1782:2: name_selected_part
          pushFollow(FOLLOW_name_selected_part_in_name_part11110)
          name_selected_part558 = name_selected_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_selected_part558
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1783:4: name_attribute_part
          pushFollow(FOLLOW_name_attribute_part_in_name_part11117)
          name_attribute_part559 = name_attribute_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_attribute_part559
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1784:4: ( name_association_list_part )=> name_association_list_part
          pushFollow(FOLLOW_name_association_list_part_in_name_part11128)
          name_association_list_part560 = name_association_list_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_association_list_part560
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1785:4: name_slice_part
          pushFollow(FOLLOW_name_slice_part_in_name_part11135)
          name_slice_part561 = name_slice_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_slice_part561
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 207, name_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_part"

  // $ANTLR start "name_selected_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1788:1: name_selected_part returns [Name.SelectedPart part] : DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) ;
  @throws(classOf[RecognitionException])
  def name_selected_part(): Name.SelectedPart = {
    var part: Name.SelectedPart = null;
    val name_selected_part_StartIndex = input.index()
    var CHARACTER_LITERAL563: Token = null
    var STRING_LITERAL564: Token = null
    var ALL565: Token = null
    var identifier562: Identifier = null


    part = new Name.SelectedPart(Identifier.NoIdentifier)
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 208)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1789:60: ( DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1790:2: DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
      `match`(input, DOT, FOLLOW_DOT_in_name_selected_part11159);
      if (state.failed) return part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1790:6: ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
      var alt355 = 4
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt355 = 1
        case CHARACTER_LITERAL =>
          alt355 = 2
        case STRING_LITERAL =>
          alt355 = 3
        case ALL =>
          alt355 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return part
          }
          val nvae = new NoViableAltException("", 355, 0, input)

          throw nvae
      }

      alt355 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1791:2: identifier
          pushFollow(FOLLOW_identifier_in_name_selected_part11164)
          identifier562 = identifier();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(identifier562)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1792:4: CHARACTER_LITERAL
          CHARACTER_LITERAL563 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_name_selected_part11170).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(CHARACTER_LITERAL563))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1793:4: STRING_LITERAL
          STRING_LITERAL564 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_name_selected_part11177).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(STRING_LITERAL564))
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1794:4: ALL
          ALL565 = `match`(input, ALL, FOLLOW_ALL_in_name_selected_part11183).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(ALL565))
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 208, name_selected_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_selected_part"

  // $ANTLR start "name_association_list_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1797:1: name_association_list_part returns [Name.AssociationListPart part] : LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def name_association_list_part(): Name.AssociationListPart = {
    var part: Name.AssociationListPart = null;
    val name_association_list_part_StartIndex = input.index()
    var LPAREN566: Token = null
    var association_list567: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 209)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1797:68: ( LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1798:2: LPAREN association_list RPAREN
      LPAREN566 = `match`(input, LPAREN, FOLLOW_LPAREN_in_name_association_list_part11200).asInstanceOf[Token];
      if (state.failed) return part
      pushFollow(FOLLOW_association_list_in_name_association_list_part11202)
      association_list567 = association_list();

      state._fsp -= 1
      if (state.failed) return part
      `match`(input, RPAREN, FOLLOW_RPAREN_in_name_association_list_part11204);
      if (state.failed) return part
      if (state.backtracking == 0) {
        part = new Name.AssociationListPart(toPosition(LPAREN566), association_list567)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 209, name_association_list_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_association_list_part"

  // $ANTLR start "name_slice_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1800:1: name_slice_part returns [Name.SlicePart part] : LPAREN discrete_range RPAREN ;
  @throws(classOf[RecognitionException])
  def name_slice_part(): Name.SlicePart = {
    var part: Name.SlicePart = null;
    val name_slice_part_StartIndex = input.index()
    var discrete_range568: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 210)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1800:47: ( LPAREN discrete_range RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1801:2: LPAREN discrete_range RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_name_slice_part11223);
      if (state.failed) return part
      pushFollow(FOLLOW_discrete_range_in_name_slice_part11225)
      discrete_range568 = discrete_range();

      state._fsp -= 1
      if (state.failed) return part
      `match`(input, RPAREN, FOLLOW_RPAREN_in_name_slice_part11227);
      if (state.failed) return part
      if (state.backtracking == 0) {
        part = new Name.SlicePart(discrete_range568)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 210, name_slice_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_slice_part"

  // $ANTLR start "name_attribute_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1803:1: name_attribute_part returns [Name.AttributePart part] : ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )? ;
  @throws(classOf[RecognitionException])
  def name_attribute_part(): Name.AttributePart = {
    var part: Name.AttributePart = null;
    val name_attribute_part_StartIndex = input.index()
    var RANGE569: Token = null
    var TOLERANCE570: Token = null
    var ACROSS571: Token = null
    var THROUGH572: Token = null
    var REFERENCE573: Token = null
    var id: Identifier = null

    var expr: Expression = null

    var signature574: Signature = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 211)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1803:55: ( ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:2: ( signature )? APOSTROPHE (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE ) ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:2: ( signature )?
      var alt356 = 2
      val LA356_0 = input.LA(1)

      if ((LA356_0 == LBRACKET)) {
        alt356 = 1
      }
      alt356 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:2: signature
          pushFollow(FOLLOW_signature_in_name_attribute_part11243)
          signature574 = signature();

          state._fsp -= 1
          if (state.failed) return part


        case _ =>
      }

      `match`(input, APOSTROPHE, FOLLOW_APOSTROPHE_in_name_attribute_part11246);
      if (state.failed) return part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:24: (id= identifier | RANGE | TOLERANCE | ACROSS | THROUGH | REFERENCE )
      var alt357 = 6
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt357 = 1
        case RANGE =>
          alt357 = 2
        case TOLERANCE =>
          alt357 = 3
        case ACROSS =>
          alt357 = 4
        case THROUGH =>
          alt357 = 5
        case REFERENCE =>
          alt357 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return part
          }
          val nvae = new NoViableAltException("", 357, 0, input)

          throw nvae
      }

      alt357 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:25: id= identifier
          pushFollow(FOLLOW_identifier_in_name_attribute_part11251)
          id = identifier();

          state._fsp -= 1
          if (state.failed) return part

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:39: RANGE
          RANGE569 = `match`(input, RANGE, FOLLOW_RANGE_in_name_attribute_part11253).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(RANGE569)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:72: TOLERANCE
          TOLERANCE570 = `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_name_attribute_part11258).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(TOLERANCE570)
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:113: ACROSS
          ACROSS571 = `match`(input, ACROSS, FOLLOW_ACROSS_in_name_attribute_part11263).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(ACROSS571)
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:147: THROUGH
          THROUGH572 = `match`(input, THROUGH, FOLLOW_THROUGH_in_name_attribute_part11267).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(THROUGH572)
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:184: REFERENCE
          REFERENCE573 = `match`(input, REFERENCE, FOLLOW_REFERENCE_in_name_attribute_part11272).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(REFERENCE573)
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:2: ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?
      var alt359 = 2
      alt359 = dfa359.predict(input)
      alt359 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:4: ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_name_attribute_part11285);
          if (state.failed) return part
          pushFollow(FOLLOW_expression_in_name_attribute_part11289)
          expr = expression();

          state._fsp -= 1
          if (state.failed) return part
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:38: ({...}? => COMMA expression )*
          var loop358 = true
          do {
            var alt358 = 2
            val LA358_0 = input.LA(1)

            if ((LA358_0 == COMMA) && ((ams))) {
              alt358 = 1
            }


            alt358 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:39: {...}? => COMMA expression
                if (!((ams))) {
                  if (state.backtracking > 0) {
                    state.failed = true; return part
                  }
                  throw new FailedPredicateException(input, "name_attribute_part", "ams")
                }
                `match`(input, COMMA, FOLLOW_COMMA_in_name_attribute_part11294);
                if (state.failed) return part
                pushFollow(FOLLOW_expression_in_name_attribute_part11296)
                expression();

                state._fsp -= 1
                if (state.failed) return part


              case _ => loop358 = false
            }
          } while (loop358);

          `match`(input, RPAREN, FOLLOW_RPAREN_in_name_attribute_part11300);
          if (state.failed) return part


        case _ =>
      }

      if (state.backtracking == 0) {
        part = new Name.AttributePart(signature574, id, expr)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 211, name_attribute_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_attribute_part"

  // $ANTLR start "signature"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1807:1: signature returns [Signature signature_] : LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET ;
  @throws(classOf[RecognitionException])
  def signature(): Signature = {
    var signature_ : Signature = null;
    val signature_StartIndex = input.index()
    var LBRACKET575: Token = null
    var selected_name_list576: Seq[SelectedName] = null

    var type_mark577: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 212)) {
        return signature_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1807:42: ( LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:2: LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET
      LBRACKET575 = `match`(input, LBRACKET, FOLLOW_LBRACKET_in_signature11319).asInstanceOf[Token];
      if (state.failed) return signature_
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:11: ( selected_name_list )?
      var alt360 = 2
      val LA360_0 = input.LA(1)

      if ((LA360_0 == STRING_LITERAL || (LA360_0 >= BASIC_IDENTIFIER && LA360_0 <= EXTENDED_IDENTIFIER))) {
        alt360 = 1
      }
      alt360 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:11: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_signature11321)
          selected_name_list576 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return signature_


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:31: ( RETURN type_mark )?
      var alt361 = 2
      val LA361_0 = input.LA(1)

      if ((LA361_0 == RETURN)) {
        alt361 = 1
      }
      alt361 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:32: RETURN type_mark
          `match`(input, RETURN, FOLLOW_RETURN_in_signature11325);
          if (state.failed) return signature_
          pushFollow(FOLLOW_type_mark_in_signature11327)
          type_mark577 = type_mark();

          state._fsp -= 1
          if (state.failed) return signature_


        case _ =>
      }

      `match`(input, RBRACKET, FOLLOW_RBRACKET_in_signature11331);
      if (state.failed) return signature_
      if (state.backtracking == 0) {
        signature_ = new Signature(toPosition(LBRACKET575), selected_name_list576, type_mark577)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 212, signature_StartIndex)
      }
    }
    return signature_
  }

  // $ANTLR end "signature"

  // $ANTLR start "v2008_external_name"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1812:1: v2008_external_name : ( '<<' CONSTANT v2008_external_pathname COLON subtype_indication '>>' | '<<' SIGNAL v2008_external_pathname COLON subtype_indication '>>' | '<<' VARIABLE v2008_external_pathname COLON subtype_indication '>>' );
  @throws(classOf[RecognitionException])
  def v2008_external_name(): Unit = {
    val v2008_external_name_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 213)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1812:21: ( '<<' CONSTANT v2008_external_pathname COLON subtype_indication '>>' | '<<' SIGNAL v2008_external_pathname COLON subtype_indication '>>' | '<<' VARIABLE v2008_external_pathname COLON subtype_indication '>>' )
      var alt362 = 3
      val LA362_0 = input.LA(1)

      if ((LA362_0 == 181)) {
        input.LA(2) match {
          case CONSTANT =>
            alt362 = 1
          case SIGNAL =>
            alt362 = 2
          case VARIABLE =>
            alt362 = 3
          case _ =>
            if (state.backtracking > 0) {
              state.failed = true; return
            }
            val nvae = new NoViableAltException("", 362, 1, input)

            throw nvae
        }

      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return
        }
        val nvae = new NoViableAltException("", 362, 0, input)

        throw nvae
      }
      alt362 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1813:2: '<<' CONSTANT v2008_external_pathname COLON subtype_indication '>>'
          `match`(input, 181, FOLLOW_181_in_v2008_external_name11345);
          if (state.failed) return
          `match`(input, CONSTANT, FOLLOW_CONSTANT_in_v2008_external_name11347);
          if (state.failed) return
          pushFollow(FOLLOW_v2008_external_pathname_in_v2008_external_name11349)
          v2008_external_pathname();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, COLON, FOLLOW_COLON_in_v2008_external_name11351);
          if (state.failed) return
          pushFollow(FOLLOW_subtype_indication_in_v2008_external_name11353)
          subtype_indication();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, 182, FOLLOW_182_in_v2008_external_name11355);
          if (state.failed) return

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1814:4: '<<' SIGNAL v2008_external_pathname COLON subtype_indication '>>'
          `match`(input, 181, FOLLOW_181_in_v2008_external_name11360);
          if (state.failed) return
          `match`(input, SIGNAL, FOLLOW_SIGNAL_in_v2008_external_name11362);
          if (state.failed) return
          pushFollow(FOLLOW_v2008_external_pathname_in_v2008_external_name11364)
          v2008_external_pathname();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, COLON, FOLLOW_COLON_in_v2008_external_name11366);
          if (state.failed) return
          pushFollow(FOLLOW_subtype_indication_in_v2008_external_name11368)
          subtype_indication();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, 182, FOLLOW_182_in_v2008_external_name11370);
          if (state.failed) return

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1815:4: '<<' VARIABLE v2008_external_pathname COLON subtype_indication '>>'
          `match`(input, 181, FOLLOW_181_in_v2008_external_name11375);
          if (state.failed) return
          `match`(input, VARIABLE, FOLLOW_VARIABLE_in_v2008_external_name11377);
          if (state.failed) return
          pushFollow(FOLLOW_v2008_external_pathname_in_v2008_external_name11379)
          v2008_external_pathname();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, COLON, FOLLOW_COLON_in_v2008_external_name11381);
          if (state.failed) return
          pushFollow(FOLLOW_subtype_indication_in_v2008_external_name11383)
          subtype_indication();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, 182, FOLLOW_182_in_v2008_external_name11385);
          if (state.failed) return


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 213, v2008_external_name_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_external_name"

  // $ANTLR start "v2008_external_pathname"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1817:1: v2008_external_pathname : ( v2008_absolute_pathname | v2008_relative_pathname | v2008_package_pathname );
  @throws(classOf[RecognitionException])
  def v2008_external_pathname(): Unit = {
    val v2008_external_pathname_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 214)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1817:25: ( v2008_absolute_pathname | v2008_relative_pathname | v2008_package_pathname )
      var alt363 = 3
      input.LA(1) match {
        case DOT =>
          alt363 = 1
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER | 183 =>
          alt363 = 2
        case AT =>
          alt363 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          val nvae = new NoViableAltException("", 363, 0, input)

          throw nvae
      }

      alt363 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1818:2: v2008_absolute_pathname
          pushFollow(FOLLOW_v2008_absolute_pathname_in_v2008_external_pathname11396)
          v2008_absolute_pathname();

          state._fsp -= 1
          if (state.failed) return

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1818:28: v2008_relative_pathname
          pushFollow(FOLLOW_v2008_relative_pathname_in_v2008_external_pathname11400)
          v2008_relative_pathname();

          state._fsp -= 1
          if (state.failed) return

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1818:54: v2008_package_pathname
          pushFollow(FOLLOW_v2008_package_pathname_in_v2008_external_pathname11404)
          v2008_package_pathname();

          state._fsp -= 1
          if (state.failed) return


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 214, v2008_external_pathname_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_external_pathname"

  // $ANTLR start "v2008_absolute_pathname"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1820:1: v2008_absolute_pathname : DOT ( v2008_pathname_element DOT )* object_identifier= identifier ;
  @throws(classOf[RecognitionException])
  def v2008_absolute_pathname(): Unit = {
    val v2008_absolute_pathname_StartIndex = input.index()
    var object_identifier: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 215)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1820:25: ( DOT ( v2008_pathname_element DOT )* object_identifier= identifier )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1821:2: DOT ( v2008_pathname_element DOT )* object_identifier= identifier
      `match`(input, DOT, FOLLOW_DOT_in_v2008_absolute_pathname11414);
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1821:6: ( v2008_pathname_element DOT )*
      var loop364 = true
      do {
        var alt364 = 2
        val LA364_0 = input.LA(1)

        if (((LA364_0 >= BASIC_IDENTIFIER && LA364_0 <= EXTENDED_IDENTIFIER))) {
          val LA364_1 = input.LA(2)

          if ((LA364_1 == LPAREN || LA364_1 == DOT)) {
            alt364 = 1
          }


        }


        alt364 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1821:7: v2008_pathname_element DOT
            pushFollow(FOLLOW_v2008_pathname_element_in_v2008_absolute_pathname11417)
            v2008_pathname_element();

            state._fsp -= 1
            if (state.failed) return
            `match`(input, DOT, FOLLOW_DOT_in_v2008_absolute_pathname11419);
            if (state.failed) return


          case _ => loop364 = false
        }
      } while (loop364);

      pushFollow(FOLLOW_identifier_in_v2008_absolute_pathname11425)
      object_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 215, v2008_absolute_pathname_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_absolute_pathname"

  // $ANTLR start "v2008_relative_pathname"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1823:1: v2008_relative_pathname : ( '^' DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier ;
  @throws(classOf[RecognitionException])
  def v2008_relative_pathname(): Unit = {
    val v2008_relative_pathname_StartIndex = input.index()
    var object_identifier: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 216)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1823:25: ( ( '^' DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1824:2: ( '^' DOT )* ( v2008_pathname_element DOT )* object_identifier= identifier
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1824:2: ( '^' DOT )*
      var loop365 = true
      do {
        var alt365 = 2
        val LA365_0 = input.LA(1)

        if ((LA365_0 == 183)) {
          alt365 = 1
        }


        alt365 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1824:3: '^' DOT
            `match`(input, 183, FOLLOW_183_in_v2008_relative_pathname11436);
            if (state.failed) return
            `match`(input, DOT, FOLLOW_DOT_in_v2008_relative_pathname11438);
            if (state.failed) return


          case _ => loop365 = false
        }
      } while (loop365);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1824:13: ( v2008_pathname_element DOT )*
      var loop366 = true
      do {
        var alt366 = 2
        val LA366_0 = input.LA(1)

        if (((LA366_0 >= BASIC_IDENTIFIER && LA366_0 <= EXTENDED_IDENTIFIER))) {
          val LA366_1 = input.LA(2)

          if ((LA366_1 == LPAREN || LA366_1 == DOT)) {
            alt366 = 1
          }


        }


        alt366 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1824:14: v2008_pathname_element DOT
            pushFollow(FOLLOW_v2008_pathname_element_in_v2008_relative_pathname11443)
            v2008_pathname_element();

            state._fsp -= 1
            if (state.failed) return
            `match`(input, DOT, FOLLOW_DOT_in_v2008_relative_pathname11445);
            if (state.failed) return


          case _ => loop366 = false
        }
      } while (loop366);

      pushFollow(FOLLOW_identifier_in_v2008_relative_pathname11451)
      object_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 216, v2008_relative_pathname_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_relative_pathname"

  // $ANTLR start "v2008_pathname_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1826:1: v2008_pathname_element : element= identifier ( LPAREN static_expression= expression RPAREN )? ;
  @throws(classOf[RecognitionException])
  def v2008_pathname_element(): Unit = {
    val v2008_pathname_element_StartIndex = input.index()
    var element: Identifier = null

    var static_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 217)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1826:24: (element= identifier ( LPAREN static_expression= expression RPAREN )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1828:2: element= identifier ( LPAREN static_expression= expression RPAREN )?
      pushFollow(FOLLOW_identifier_in_v2008_pathname_element11466)
      element = identifier();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1828:21: ( LPAREN static_expression= expression RPAREN )?
      var alt367 = 2
      val LA367_0 = input.LA(1)

      if ((LA367_0 == LPAREN)) {
        alt367 = 1
      }
      alt367 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1828:22: LPAREN static_expression= expression RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_v2008_pathname_element11469);
          if (state.failed) return
          pushFollow(FOLLOW_expression_in_v2008_pathname_element11473)
          static_expression = expression();

          state._fsp -= 1
          if (state.failed) return
          `match`(input, RPAREN, FOLLOW_RPAREN_in_v2008_pathname_element11475);
          if (state.failed) return


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 217, v2008_pathname_element_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_pathname_element"

  // $ANTLR start "v2008_package_pathname"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1830:1: v2008_package_pathname : AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier ;
  @throws(classOf[RecognitionException])
  def v2008_package_pathname(): Unit = {
    val v2008_package_pathname_StartIndex = input.index()
    var library_identifier: Identifier = null

    var package_identifier: Identifier = null

    var object_identifier: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 218)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1830:24: ( AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1831:2: AT library_identifier= identifier DOT (package_identifier= identifier DOT )* object_identifier= identifier
      `match`(input, AT, FOLLOW_AT_in_v2008_package_pathname11488);
      if (state.failed) return
      pushFollow(FOLLOW_identifier_in_v2008_package_pathname11492)
      library_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return
      `match`(input, DOT, FOLLOW_DOT_in_v2008_package_pathname11494);
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1831:39: (package_identifier= identifier DOT )*
      var loop368 = true
      do {
        var alt368 = 2
        val LA368_0 = input.LA(1)

        if (((LA368_0 >= BASIC_IDENTIFIER && LA368_0 <= EXTENDED_IDENTIFIER))) {
          val LA368_1 = input.LA(2)

          if ((LA368_1 == DOT)) {
            alt368 = 1
          }


        }


        alt368 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1831:40: package_identifier= identifier DOT
            pushFollow(FOLLOW_identifier_in_v2008_package_pathname11499)
            package_identifier = identifier();

            state._fsp -= 1
            if (state.failed) return
            `match`(input, DOT, FOLLOW_DOT_in_v2008_package_pathname11501);
            if (state.failed) return


          case _ => loop368 = false
        }
      } while (loop368);

      pushFollow(FOLLOW_identifier_in_v2008_package_pathname11507)
      object_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 218, v2008_package_pathname_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_package_pathname"

  // $ANTLR start "literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1833:1: literal returns [Expression literal_] : ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? ;
  @throws(classOf[RecognitionException])
  def literal(): Expression = {
    var literal_ : Expression = null;
    val literal_StartIndex = input.index()
    var selected_name578: SelectedName = null



    var literalType: Literal.Type.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 219)) {
        return literal_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1837:3: ( ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1838:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1838:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL )
      var alt369 = 6
      input.LA(1) match {
        case REAL_LITERAL =>
          alt369 = 1
        case INTEGER_LITERAL =>
          alt369 = 2
        case BASED_LITERAL =>
          alt369 = 3
        case CHARACTER_LITERAL =>
          alt369 = 4
        case BIT_STRING_LITERAL =>
          alt369 = 5
        case NULL =>
          alt369 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return literal_
          }
          val nvae = new NoViableAltException("", 369, 0, input)

          throw nvae
      }

      alt369 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1839:3: REAL_LITERAL
          `match`(input, REAL_LITERAL, FOLLOW_REAL_LITERAL_in_literal11529);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.REAL_LITERAL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1840:5: INTEGER_LITERAL
          `match`(input, INTEGER_LITERAL, FOLLOW_INTEGER_LITERAL_in_literal11537);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.INTEGER_LITERAL
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1841:5: BASED_LITERAL
          `match`(input, BASED_LITERAL, FOLLOW_BASED_LITERAL_in_literal11545);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.BASED_LITERAL
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1842:5: CHARACTER_LITERAL
          `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_literal11553);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.CHARACTER_LITERAL
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1844:5: BIT_STRING_LITERAL
          `match`(input, BIT_STRING_LITERAL, FOLLOW_BIT_STRING_LITERAL_in_literal11564);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.BIT_STRING_LITERAL
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1845:5: NULL
          `match`(input, NULL, FOLLOW_NULL_in_literal11572);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.NULL_LITERAL
          }


        case _ =>
      }

      if (state.backtracking == 0) {
        literal_ = new Literal(position, input.LT(-1).getText(), literalType)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1848:2: ({...}? => selected_name )?
      var alt370 = 2
      val LA370_0 = input.LA(1)

      if ((LA370_0 == STRING_LITERAL || (LA370_0 >= BASIC_IDENTIFIER && LA370_0 <= EXTENDED_IDENTIFIER)) && ((input.LA(-1) == INTEGER_LITERAL || input.LA(-1) == REAL_LITERAL || input.LA(-1) == BASED_LITERAL))) {
        alt370 = 1
      }
      alt370 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1848:3: {...}? => selected_name
          if (!((input.LA(-1) == INTEGER_LITERAL || input.LA(-1) == REAL_LITERAL || input.LA(-1) == BASED_LITERAL))) {
            if (state.backtracking > 0) {
              state.failed = true; return literal_
            }
            throw new FailedPredicateException(input, "literal", "input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL || input.LA(-1)==BASED_LITERAL")
          }
          pushFollow(FOLLOW_selected_name_in_literal11587)
          selected_name578 = selected_name();

          state._fsp -= 1
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literal_ = new PhysicalLiteral(literal_.asInstanceOf[Literal], selected_name578)
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 219, literal_StartIndex)
      }
    }
    return literal_
  }

  // $ANTLR end "literal"

  // $ANTLR start "physical_literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1850:1: physical_literal returns [PhysicalLiteral literal_] : ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name ;
  @throws(classOf[RecognitionException])
  def physical_literal(): PhysicalLiteral = {
    var literal_ : PhysicalLiteral = null;
    val physical_literal_StartIndex = input.index()
    var selected_name579: SelectedName = null



    var text: String = null
    var literalType: Literal.Type.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 220)) {
        return literal_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1855:3: ( ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1856:2: ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL ) selected_name
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1856:2: ( INTEGER_LITERAL | REAL_LITERAL | BASED_LITERAL )
      var alt371 = 3
      input.LA(1) match {
        case INTEGER_LITERAL =>
          alt371 = 1
        case REAL_LITERAL =>
          alt371 = 2
        case BASED_LITERAL =>
          alt371 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return literal_
          }
          val nvae = new NoViableAltException("", 371, 0, input)

          throw nvae
      }

      alt371 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1857:3: INTEGER_LITERAL
          `match`(input, INTEGER_LITERAL, FOLLOW_INTEGER_LITERAL_in_physical_literal11613);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            text = input.LT(-1).getText();
            literalType = Literal.Type.INTEGER_LITERAL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1858:5: REAL_LITERAL
          `match`(input, REAL_LITERAL, FOLLOW_REAL_LITERAL_in_physical_literal11621);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            text = input.LT(-1).getText();
            literalType = Literal.Type.REAL_LITERAL
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1859:5: BASED_LITERAL
          `match`(input, BASED_LITERAL, FOLLOW_BASED_LITERAL_in_physical_literal11629);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            text = input.LT(-1).getText();
            literalType = Literal.Type.BASED_LITERAL
          }


        case _ =>
      }

      pushFollow(FOLLOW_selected_name_in_physical_literal11636)
      selected_name579 = selected_name();

      state._fsp -= 1
      if (state.failed) return literal_
      if (state.backtracking == 0) {
        literal_ = new PhysicalLiteral(position, text, selected_name579, literalType)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 220, physical_literal_StartIndex)
      }
    }
    return literal_
  }

  // $ANTLR end "physical_literal"

  // $ANTLR start "element_association"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1863:1: element_association returns [Aggregate.ElementAssociation element] : ( ( choices ARROW )=> choices ARROW )? expression ;
  @throws(classOf[RecognitionException])
  def element_association(): Aggregate.ElementAssociation = {
    var element: Aggregate.ElementAssociation = null;
    val element_association_StartIndex = input.index()
    var choices580: Seq[Choices.Choice] = null

    var expression581: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 221)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1863:68: ( ( ( choices ARROW )=> choices ARROW )? expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:2: ( ( choices ARROW )=> choices ARROW )? expression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:2: ( ( choices ARROW )=> choices ARROW )?
      var alt372 = 2
      alt372 = dfa372.predict(input)
      alt372 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:4: ( choices ARROW )=> choices ARROW
          pushFollow(FOLLOW_choices_in_element_association11662)
          choices580 = choices();

          state._fsp -= 1
          if (state.failed) return element
          `match`(input, ARROW, FOLLOW_ARROW_in_element_association11664);
          if (state.failed) return element


        case _ =>
      }

      pushFollow(FOLLOW_expression_in_element_association11669)
      expression581 = expression();

      state._fsp -= 1
      if (state.failed) return element
      if (state.backtracking == 0) {
        element = new Aggregate.ElementAssociation(choices580, expression581)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 221, element_association_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "element_association"

  // $ANTLR start "aggregate"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1867:1: aggregate returns [Aggregate aggregate_] : LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN ;
  @throws(classOf[RecognitionException])
  def aggregate(): Aggregate = {
    var aggregate_ : Aggregate = null;
    val aggregate_StartIndex = input.index()
    var LPAREN582: Token = null
    var e1: Aggregate.ElementAssociation = null

    var e2: Aggregate.ElementAssociation = null



    val elements = new Buffer[Aggregate.ElementAssociation]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 222)) {
        return aggregate_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1870:3: ( LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1871:2: LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN
      LPAREN582 = `match`(input, LPAREN, FOLLOW_LPAREN_in_aggregate11690).asInstanceOf[Token];
      if (state.failed) return aggregate_
      pushFollow(FOLLOW_element_association_in_aggregate11694)
      e1 = element_association();

      state._fsp -= 1
      if (state.failed) return aggregate_
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1871:57: ( COMMA e2= element_association )*
      var loop373 = true
      do {
        var alt373 = 2
        val LA373_0 = input.LA(1)

        if ((LA373_0 == COMMA)) {
          alt373 = 1
        }


        alt373 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1871:58: COMMA e2= element_association
            `match`(input, COMMA, FOLLOW_COMMA_in_aggregate11698);
            if (state.failed) return aggregate_
            pushFollow(FOLLOW_element_association_in_aggregate11702)
            e2 = element_association();

            state._fsp -= 1
            if (state.failed) return aggregate_
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop373 = false
        }
      } while (loop373);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_aggregate11708);
      if (state.failed) return aggregate_
      if (state.backtracking == 0) {
        aggregate_ = new Aggregate(toPosition(LPAREN582), elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 222, aggregate_StartIndex)
      }
    }
    return aggregate_
  }

  // $ANTLR end "aggregate"

  // $ANTLR start "choice"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1874:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );
  @throws(classOf[RecognitionException])
  def choice(): Choices.Choice = {
    var choice_ : Choices.Choice = null;
    val choice_StartIndex = input.index()
    var identifier583: Identifier = null

    var simple_expression584: Expression = null

    var discrete_range585: DiscreteRange = null



    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 223)) {
        return choice_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1877:3: ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS )
      var alt374 = 4
      alt374 = dfa374.predict(input)
      alt374 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1878:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier
          pushFollow(FOLLOW_identifier_in_choice11749)
          identifier583 = identifier();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(Third(identifier583)))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression
          pushFollow(FOLLOW_simple_expression_in_choice11776)
          simple_expression584 = simple_expression();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(Second(simple_expression584)))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1880:4: discrete_range
          pushFollow(FOLLOW_discrete_range_in_choice11783)
          discrete_range585 = discrete_range();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(First(discrete_range585)))
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1881:4: OTHERS
          `match`(input, OTHERS, FOLLOW_OTHERS_in_choice11790);
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, None)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 223, choice_StartIndex)
      }
    }
    return choice_
  }

  // $ANTLR end "choice"

  // $ANTLR start "choices"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1883:1: choices returns [Seq[Choices.Choice] choices_] : c1= choice ( BAR c2= choice )* ;
  @throws(classOf[RecognitionException])
  def choices(): Seq[Choices.Choice] = {
    var choices_ : Seq[Choices.Choice] = null;
    val choices_StartIndex = input.index()
    var c1: Choices.Choice = null

    var c2: Choices.Choice = null



    val elements = new Buffer[Choices.Choice]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 224)) {
        return choices_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1886:3: (c1= choice ( BAR c2= choice )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1887:2: c1= choice ( BAR c2= choice )*
      pushFollow(FOLLOW_choice_in_choices11811)
      c1 = choice();

      state._fsp -= 1
      if (state.failed) return choices_
      if (state.backtracking == 0) {
        elements += c1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1887:37: ( BAR c2= choice )*
      var loop375 = true
      do {
        var alt375 = 2
        val LA375_0 = input.LA(1)

        if ((LA375_0 == BAR)) {
          alt375 = 1
        }


        alt375 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1887:39: BAR c2= choice
            `match`(input, BAR, FOLLOW_BAR_in_choices11816);
            if (state.failed) return choices_
            pushFollow(FOLLOW_choice_in_choices11820)
            c2 = choice();

            state._fsp -= 1
            if (state.failed) return choices_
            if (state.backtracking == 0) {
              elements += c2
            }


          case _ => loop375 = false
        }
      } while (loop375);

      if (state.backtracking == 0) {
        choices_ = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 224, choices_StartIndex)
      }
    }
    return choices_
  }

  // $ANTLR end "choices"

  // $ANTLR start "identifier_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1902:1: identifier_list returns [Seq[Identifier] list] : id1= identifier ( COMMA id2= identifier )* ;
  @throws(classOf[RecognitionException])
  def identifier_list(): Seq[Identifier] = {
    var list: Seq[Identifier] = null;
    val identifier_list_StartIndex = input.index()
    var id1: Identifier = null

    var id2: Identifier = null



    val identifiers = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 225)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1905:3: (id1= identifier ( COMMA id2= identifier )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1906:2: id1= identifier ( COMMA id2= identifier )*
      pushFollow(FOLLOW_identifier_in_identifier_list11851)
      id1 = identifier();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        identifiers += id1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1906:42: ( COMMA id2= identifier )*
      var loop376 = true
      do {
        var alt376 = 2
        val LA376_0 = input.LA(1)

        if ((LA376_0 == COMMA)) {
          alt376 = 1
        }


        alt376 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1906:43: COMMA id2= identifier
            `match`(input, COMMA, FOLLOW_COMMA_in_identifier_list11856);
            if (state.failed) return list
            pushFollow(FOLLOW_identifier_in_identifier_list11860)
            id2 = identifier();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              identifiers += id2
            }


          case _ => loop376 = false
        }
      } while (loop376);

      if (state.backtracking == 0) {
        list = identifiers.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 225, identifier_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "identifier_list"

  // $ANTLR start "identifier"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1909:1: identifier returns [Identifier id] : ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER ) ;
  @throws(classOf[RecognitionException])
  def identifier(): Identifier = {
    var id: Identifier = null;
    val identifier_StartIndex = input.index()
    id = Identifier.NoIdentifier
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 226)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1910:38: ( ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1911:2: ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER )
      if ((input.LA(1) >= BASIC_IDENTIFIER && input.LA(1) <= EXTENDED_IDENTIFIER)) {
        input.consume()
        state.errorRecovery = false;
        state.failed = false
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val mse = new MismatchedSetException(null, input)
        throw mse

      }

      if (state.backtracking == 0) {
        id = if (input.LA(-1) == EXTENDED_IDENTIFIER) toIdentifier(input.LT(-1), false) else toIdentifier(input.LT(-1))
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 226, identifier_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "identifier"

  // $ANTLR start "v2008_tool_directive"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:1: v2008_tool_directive : '\\'' identifier ( GRAPHIC_CHARACTER )* ;
  @throws(classOf[RecognitionException])
  def v2008_tool_directive(): Unit = {
    val v2008_tool_directive_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 227)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:22: ( '\\'' identifier ( GRAPHIC_CHARACTER )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:24: '\\'' identifier ( GRAPHIC_CHARACTER )*
      `match`(input, 184, FOLLOW_184_in_v2008_tool_directive11906);
      if (state.failed) return
      pushFollow(FOLLOW_identifier_in_v2008_tool_directive11908)
      identifier();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:40: ( GRAPHIC_CHARACTER )*
      var loop377 = true
      do {
        var alt377 = 2
        val LA377_0 = input.LA(1)

        if ((LA377_0 == GRAPHIC_CHARACTER)) {
          alt377 = 1
        }


        alt377 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:40: GRAPHIC_CHARACTER
            `match`(input, GRAPHIC_CHARACTER, FOLLOW_GRAPHIC_CHARACTER_in_v2008_tool_directive11910); if (state.failed) return


          case _ => loop377 = false
        }
      } while (loop377);


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 227, v2008_tool_directive_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "v2008_tool_directive"

  // $ANTLR start "label_colon"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1917:1: label_colon returns [Identifier label] : identifier COLON ;
  @throws(classOf[RecognitionException])
  def label_colon(): Identifier = {
    var label: Identifier = null;
    val label_colon_StartIndex = input.index()
    var identifier586: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 228)) {
        return label
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1917:40: ( identifier COLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1918:2: identifier COLON
      pushFollow(FOLLOW_identifier_in_label_colon11924)
      identifier586 = identifier();

      state._fsp -= 1
      if (state.failed) return label
      `match`(input, COLON, FOLLOW_COLON_in_label_colon11926);
      if (state.failed) return label
      if (state.backtracking == 0) {
        label = identifier586
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 228, label_colon_StartIndex)
      }
    }
    return label
  }

  // $ANTLR end "label_colon"

  // $ANTLR start synpred1_VHDL
  @throws(classOf[RecognitionException])
  def synpred1_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:4: ( discrete_range )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:5: discrete_range
    pushFollow(FOLLOW_discrete_range_in_synpred1_VHDL2077)
    discrete_range();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred1_VHDL

  // $ANTLR start synpred2_VHDL
  @throws(classOf[RecognitionException])
  def synpred2_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:2: ( identifier LPAREN )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:3: identifier LPAREN
    pushFollow(FOLLOW_identifier_in_synpred2_VHDL2119)
    identifier();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, LPAREN, FOLLOW_LPAREN_in_synpred2_VHDL2121);
    if (state.failed) return


  }

  // $ANTLR end synpred2_VHDL

  // $ANTLR start synpred3_VHDL
  @throws(classOf[RecognitionException])
  def synpred3_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:586:4: ( RANGE range UNITS )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:586:5: RANGE range UNITS
    `match`(input, RANGE, FOLLOW_RANGE_in_synpred3_VHDL3243);
    if (state.failed) return
    pushFollow(FOLLOW_range_in_synpred3_VHDL3245)
    range();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, UNITS, FOLLOW_UNITS_in_synpred3_VHDL3247);
    if (state.failed) return


  }

  // $ANTLR end synpred3_VHDL

  // $ANTLR start synpred4_VHDL
  @throws(classOf[RecognitionException])
  def synpred4_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:592:4: ( PROTECTED BODY )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:592:5: PROTECTED BODY
    `match`(input, PROTECTED, FOLLOW_PROTECTED_in_synpred4_VHDL3301);
    if (state.failed) return
    `match`(input, BODY, FOLLOW_BODY_in_synpred4_VHDL3303);
    if (state.failed) return


  }

  // $ANTLR end synpred4_VHDL

  // $ANTLR start synpred5_VHDL
  @throws(classOf[RecognitionException])
  def synpred5_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:609:2: ( QUANTITY identifier_list COLON )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:609:3: QUANTITY identifier_list COLON
    `match`(input, QUANTITY, FOLLOW_QUANTITY_in_synpred5_VHDL3416);
    if (state.failed) return
    pushFollow(FOLLOW_identifier_list_in_synpred5_VHDL3418)
    identifier_list();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, COLON, FOLLOW_COLON_in_synpred5_VHDL3420);
    if (state.failed) return


  }

  // $ANTLR end synpred5_VHDL

  // $ANTLR start synpred6_VHDL
  @throws(classOf[RecognitionException])
  def synpred6_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:13: ( ams_across_aspect )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:14: ams_across_aspect
    pushFollow(FOLLOW_ams_across_aspect_in_synpred6_VHDL3516)
    ams_across_aspect();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred6_VHDL

  // $ANTLR start synpred7_VHDL
  @throws(classOf[RecognitionException])
  def synpred7_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:16: ( v2008_resolution_indication selected_name )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:17: v2008_resolution_indication selected_name
    pushFollow(FOLLOW_v2008_resolution_indication_in_synpred7_VHDL5571)
    v2008_resolution_indication();

    state._fsp -= 1
    if (state.failed) return
    pushFollow(FOLLOW_selected_name_in_synpred7_VHDL5573)
    selected_name();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred7_VHDL

  // $ANTLR start synpred8_VHDL
  @throws(classOf[RecognitionException])
  def synpred8_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:987:2: ( simple_expression direction )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:987:3: simple_expression direction
    pushFollow(FOLLOW_simple_expression_in_synpred8_VHDL5757)
    simple_expression();

    state._fsp -= 1
    if (state.failed) return
    pushFollow(FOLLOW_direction_in_synpred8_VHDL5759)
    direction();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred8_VHDL

  // $ANTLR start synpred9_VHDL
  @throws(classOf[RecognitionException])
  def synpred9_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1007:2: ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1007:3: subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON )
    pushFollow(FOLLOW_subtype_indication_in_synpred9_VHDL5923)
    subtype_indication();

    state._fsp -= 1
    if (state.failed) return
    if (input.LA(1) == GENERATE || input.LA(1) == LOOP || input.LA(1) == ARROW || (input.LA(1) >= SEMICOLON && input.LA(1) <= COMMA) || input.LA(1) == RPAREN || input.LA(1) == BAR) {
      input.consume()
      state.errorRecovery = false;
      state.failed = false
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val mse = new MismatchedSetException(null, input)
      throw mse

    }


  }

  // $ANTLR end synpred9_VHDL

  // $ANTLR start synpred10_VHDL
  @throws(classOf[RecognitionException])
  def synpred10_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:4: ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )
    var alt379 = 8
    val LA379_0 = input.LA(1)

    if ((LA379_0 == COMPONENT)) {
      alt379 = 1
    }
    else if ((LA379_0 == STRING_LITERAL || (LA379_0 >= BASIC_IDENTIFIER && LA379_0 <= EXTENDED_IDENTIFIER))) {
      alt379 = 2
    }
    else if ((LA379_0 == ENTITY)) {
      alt379 = 3
    }
    else if ((LA379_0 == CONFIGURATION)) {
      alt379 = 4
    }
    else if ((LA379_0 == BLOCK)) {
      alt379 = 5
    }
    else if ((LA379_0 == IF)) {
      alt379 = 6
    }
    else if ((LA379_0 == FOR)) {
      alt379 = 7
    }
    else if ((LA379_0 == CASE) && ((vhdl2008))) {
      alt379 = 8
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 379, 0, input)

      throw nvae
    }
    alt379 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:5: COMPONENT
        `match`(input, COMPONENT, FOLLOW_COMPONENT_in_synpred10_VHDL6036); if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:17: ( selected_name ( GENERIC | PORT ) MAP )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:17: ( selected_name ( GENERIC | PORT ) MAP )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:18: selected_name ( GENERIC | PORT ) MAP
        pushFollow(FOLLOW_selected_name_in_synpred10_VHDL6041)
        selected_name();

        state._fsp -= 1
        if (state.failed) return
        if (input.LA(1) == GENERIC || input.LA(1) == PORT) {
          input.consume()
          state.errorRecovery = false;
          state.failed = false
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          val mse = new MismatchedSetException(null, input)
          throw mse

        }

        `match`(input, MAP, FOLLOW_MAP_in_synpred10_VHDL6051);
        if (state.failed) return


      case 3 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:56: ENTITY
        `match`(input, ENTITY, FOLLOW_ENTITY_in_synpred10_VHDL6056); if (state.failed) return

      case 4 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:65: CONFIGURATION
        `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_synpred10_VHDL6060); if (state.failed) return

      case 5 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:81: BLOCK
        `match`(input, BLOCK, FOLLOW_BLOCK_in_synpred10_VHDL6064); if (state.failed) return

      case 6 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:89: IF ({...}? => label_colon )? condition GENERATE
        `match`(input, IF, FOLLOW_IF_in_synpred10_VHDL6068);
        if (state.failed) return
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:92: ({...}? => label_colon )?
        var alt378 = 2
        val LA378_0 = input.LA(1)

        if (((LA378_0 >= BASIC_IDENTIFIER && LA378_0 <= EXTENDED_IDENTIFIER))) {
          val LA378_1 = input.LA(2)

          if ((LA378_1 == COLON) && ((vhdl2008))) {
            alt378 = 1
          }
        }
        alt378 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:93: {...}? => label_colon
            if (!((vhdl2008))) {
              if (state.backtracking > 0) {
                state.failed = true; return
              }
              throw new FailedPredicateException(input, "synpred10_VHDL", "vhdl2008")
            }
            pushFollow(FOLLOW_label_colon_in_synpred10_VHDL6073)
            label_colon();

            state._fsp -= 1
            if (state.failed) return


          case _ =>
        }

        pushFollow(FOLLOW_condition_in_synpred10_VHDL6077)
        condition();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, GENERATE, FOLLOW_GENERATE_in_synpred10_VHDL6079);
        if (state.failed) return

      case 7 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:141: FOR
        `match`(input, FOR, FOLLOW_FOR_in_synpred10_VHDL6083); if (state.failed) return

      case 8 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1024:147: {...}? => CASE expression GENERATE
        if (!((vhdl2008))) {
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          throw new FailedPredicateException(input, "synpred10_VHDL", "vhdl2008")
        }
        `match`(input, CASE, FOLLOW_CASE_in_synpred10_VHDL6090);
        if (state.failed) return
        pushFollow(FOLLOW_expression_in_synpred10_VHDL6092)
        expression();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, GENERATE, FOLLOW_GENERATE_in_synpred10_VHDL6094);
        if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred10_VHDL

  // $ANTLR start synpred11_VHDL
  @throws(classOf[RecognitionException])
  def synpred11_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:4: ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:5: {...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )
    if (!((ams))) {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      throw new FailedPredicateException(input, "synpred11_VHDL", "ams")
    }
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:13: ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )
    var alt380 = 5
    alt380 = dfa380.predict(input)
    alt380 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:14: ( simple_expression AMS_ASSIGN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:14: ( simple_expression AMS_ASSIGN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:15: simple_expression AMS_ASSIGN
        pushFollow(FOLLOW_simple_expression_in_synpred11_VHDL6190)
        simple_expression();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, AMS_ASSIGN, FOLLOW_AMS_ASSIGN_in_synpred11_VHDL6192);
        if (state.failed) return


      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:47: IF
        `match`(input, IF, FOLLOW_IF_in_synpred11_VHDL6197); if (state.failed) return

      case 3 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:52: PROCEDURAL
        `match`(input, PROCEDURAL, FOLLOW_PROCEDURAL_in_synpred11_VHDL6201); if (state.failed) return

      case 4 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:65: CASE
        `match`(input, CASE, FOLLOW_CASE_in_synpred11_VHDL6205); if (state.failed) return

      case 5 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1036:72: NULL
        `match`(input, NULL, FOLLOW_NULL_in_synpred11_VHDL6209); if (state.failed) return


      case _ =>
    }


  }

  // $ANTLR end synpred11_VHDL

  // $ANTLR start synpred12_VHDL
  @throws(classOf[RecognitionException])
  def synpred12_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1041:5: ( target LEQ | WITH )
    var alt381 = 2
    val LA381_0 = input.LA(1)

    if ((LA381_0 == STRING_LITERAL || (LA381_0 >= BASIC_IDENTIFIER && LA381_0 <= EXTENDED_IDENTIFIER))) {
      alt381 = 1
    }
    else if ((LA381_0 == 181) && ((vhdl2008))) {
      alt381 = 1
    }
    else if ((LA381_0 == LPAREN)) {
      alt381 = 1
    }
    else if ((LA381_0 == WITH)) {
      alt381 = 2
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 381, 0, input)

      throw nvae
    }
    alt381 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1041:6: target LEQ
        pushFollow(FOLLOW_target_in_synpred12_VHDL6253)
        target();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, LEQ, FOLLOW_LEQ_in_synpred12_VHDL6255);
        if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1041:19: WITH
        `match`(input, WITH, FOLLOW_WITH_in_synpred12_VHDL6259); if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred12_VHDL

  // $ANTLR start synpred13_VHDL
  @throws(classOf[RecognitionException])
  def synpred13_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1315:4: ( target LEQ | WITH )
    var alt382 = 2
    val LA382_0 = input.LA(1)

    if ((LA382_0 == STRING_LITERAL || (LA382_0 >= BASIC_IDENTIFIER && LA382_0 <= EXTENDED_IDENTIFIER))) {
      alt382 = 1
    }
    else if ((LA382_0 == 181) && ((vhdl2008))) {
      alt382 = 1
    }
    else if ((LA382_0 == LPAREN)) {
      alt382 = 1
    }
    else if ((LA382_0 == WITH)) {
      alt382 = 2
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 382, 0, input)

      throw nvae
    }
    alt382 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1315:5: target LEQ
        pushFollow(FOLLOW_target_in_synpred13_VHDL8059)
        target();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, LEQ, FOLLOW_LEQ_in_synpred13_VHDL8061);
        if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1315:18: WITH
        `match`(input, WITH, FOLLOW_WITH_in_synpred13_VHDL8065); if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred13_VHDL

  // $ANTLR start synpred14_VHDL
  @throws(classOf[RecognitionException])
  def synpred14_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:4: ( target VAR_ASSIGN | WITH )
    var alt383 = 2
    val LA383_0 = input.LA(1)

    if ((LA383_0 == STRING_LITERAL || (LA383_0 >= BASIC_IDENTIFIER && LA383_0 <= EXTENDED_IDENTIFIER))) {
      alt383 = 1
    }
    else if ((LA383_0 == 181) && ((vhdl2008))) {
      alt383 = 1
    }
    else if ((LA383_0 == LPAREN)) {
      alt383 = 1
    }
    else if ((LA383_0 == WITH)) {
      alt383 = 2
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 383, 0, input)

      throw nvae
    }
    alt383 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:5: target VAR_ASSIGN
        pushFollow(FOLLOW_target_in_synpred14_VHDL8077)
        target();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_synpred14_VHDL8079);
        if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:25: WITH
        `match`(input, WITH, FOLLOW_WITH_in_synpred14_VHDL8083); if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred14_VHDL

  // $ANTLR start synpred15_VHDL
  @throws(classOf[RecognitionException])
  def synpred15_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:2: ( VARIABLE | identifier_list COLON ( OUT | INOUT ) )
    var alt384 = 2
    val LA384_0 = input.LA(1)

    if ((LA384_0 == VARIABLE)) {
      alt384 = 1
    }
    else if (((LA384_0 >= BASIC_IDENTIFIER && LA384_0 <= EXTENDED_IDENTIFIER))) {
      alt384 = 2
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 384, 0, input)

      throw nvae
    }
    alt384 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:3: VARIABLE
        `match`(input, VARIABLE, FOLLOW_VARIABLE_in_synpred15_VHDL9320); if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:14: identifier_list COLON ( OUT | INOUT )
        pushFollow(FOLLOW_identifier_list_in_synpred15_VHDL9324)
        identifier_list();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, COLON, FOLLOW_COLON_in_synpred15_VHDL9326);
        if (state.failed) return
        if (input.LA(1) == INOUT || input.LA(1) == OUT) {
          input.consume()
          state.errorRecovery = false;
          state.failed = false
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          val mse = new MismatchedSetException(null, input)
          throw mse

        }


      case _ =>
    }
  }

  // $ANTLR end synpred15_VHDL

  // $ANTLR start synpred16_VHDL
  @throws(classOf[RecognitionException])
  def synpred16_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1603:3: ( formal_part ARROW )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1603:4: formal_part ARROW
    pushFollow(FOLLOW_formal_part_in_synpred16_VHDL10064)
    formal_part();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, ARROW, FOLLOW_ARROW_in_synpred16_VHDL10066);
    if (state.failed) return


  }

  // $ANTLR end synpred16_VHDL

  // $ANTLR start synpred17_VHDL
  @throws(classOf[RecognitionException])
  def synpred17_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:19: ( name_association_list_part )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1615:20: name_association_list_part
    pushFollow(FOLLOW_name_association_list_part_in_synpred17_VHDL10144)
    name_association_list_part();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred17_VHDL

  // $ANTLR start synpred18_VHDL
  @throws(classOf[RecognitionException])
  def synpred18_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1784:4: ( name_association_list_part )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1784:5: name_association_list_part
    pushFollow(FOLLOW_name_association_list_part_in_synpred18_VHDL11125)
    name_association_list_part();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred18_VHDL

  // $ANTLR start synpred19_VHDL
  @throws(classOf[RecognitionException])
  def synpred19_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:4: ( LPAREN )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:5: LPAREN
    `match`(input, LPAREN, FOLLOW_LPAREN_in_synpred19_VHDL11281);
    if (state.failed) return


  }

  // $ANTLR end synpred19_VHDL

  // $ANTLR start synpred20_VHDL
  @throws(classOf[RecognitionException])
  def synpred20_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:4: ( choices ARROW )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:5: choices ARROW
    pushFollow(FOLLOW_choices_in_synpred20_VHDL11656)
    choices();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, ARROW, FOLLOW_ARROW_in_synpred20_VHDL11658);
    if (state.failed) return


  }

  // $ANTLR end synpred20_VHDL

  // $ANTLR start synpred21_VHDL
  @throws(classOf[RecognitionException])
  def synpred21_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1878:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1878:3: identifier ( BAR | ARROW | COMMA | SEMICOLON )
    pushFollow(FOLLOW_identifier_in_synpred21_VHDL11730)
    identifier();

    state._fsp -= 1
    if (state.failed) return
    if (input.LA(1) == ARROW || (input.LA(1) >= SEMICOLON && input.LA(1) <= COMMA) || input.LA(1) == BAR) {
      input.consume()
      state.errorRecovery = false;
      state.failed = false
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val mse = new MismatchedSetException(null, input)
      throw mse

    }


  }

  // $ANTLR end synpred21_VHDL

  // $ANTLR start synpred22_VHDL
  @throws(classOf[RecognitionException])
  def synpred22_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:5: simple_expression ( BAR | ARROW | COMMA | SEMICOLON )
    pushFollow(FOLLOW_simple_expression_in_synpred22_VHDL11757)
    simple_expression();

    state._fsp -= 1
    if (state.failed) return
    if (input.LA(1) == ARROW || (input.LA(1) >= SEMICOLON && input.LA(1) <= COMMA) || input.LA(1) == BAR) {
      input.consume()
      state.errorRecovery = false;
      state.failed = false
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val mse = new MismatchedSetException(null, input)
      throw mse

    }


  }

  // $ANTLR end synpred22_VHDL

  // Delegated rules
  def synpred1_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred1_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred12_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred12_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred2_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred2_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred10_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred10_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred15_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred15_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred4_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred4_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred19_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred19_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred14_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred14_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred6_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred6_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred5_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred5_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred3_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred3_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred8_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred8_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred21_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred21_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred9_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred9_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred18_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred18_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred11_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred11_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred22_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred22_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred17_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred17_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred16_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred16_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred20_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred20_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred7_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred7_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred13_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred13_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  final private class DFA3(rec: BaseRecognizer) extends DFA {
    private val DFA3_eotS = "\13\uffff"
    private val DFA3_eofS = "\13\uffff"
    private val DFA3_minS = "\1\12\2\uffff\1\20\3\uffff\1\52\1\7\2\uffff"
    private val DFA3_maxS = "\1\u0089\2\uffff\1\u00a3\3\uffff\1\52\1\u0095" +
      "\2\uffff"
    private val DFA3_acceptS = "\1\uffff\1\1\1\2\1\uffff\1\6\1\7\1\4\2\uffff" +
      "\1\5\1\3"
    private val DFA3_specialS = "\1\1\7\uffff\1\0\2\uffff}>"
    private val DFA3_transitionS = Array("\1\2\12\uffff\1\5\6\uffff\1\1" +
      "\41\uffff\1\3\112\uffff\1\4",
      "",
      "",
      "\1\6\u0091\uffff\2\7",
      "",
      "",
      "",
      "\1\10",
      "\1\12\5\uffff\1\12\6\uffff\1\12\1\uffff\2\12\3\uffff\1\12\2\uffff\1\12" +
        "\1\uffff\1\12\1\uffff\2\12\2\uffff\1\12\14\uffff\1\11\12\uffff\1\12\2\uffff" +
        "\1\12\2\uffff\1\12\13\uffff\2\12\4\uffff\1\12\3\uffff\1\12\3\uffff\2\12" +
        "\54\uffff\2\12\7\uffff\1\12",
      "",
      "")

    private val DFA3_eot = DFA.unpackEncodedString(DFA3_eotS)
    private val DFA3_eof = DFA.unpackEncodedString(DFA3_eofS)
    private val DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS)
    private val DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS)
    private val DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS)
    private val DFA3_special = DFA.unpackEncodedString(DFA3_specialS)
    private val DFA3_transition = new Array[Array[Short]](DFA3_transitionS.length)
    for (i <- DFA3_transition.indices) {
      DFA3_transition(i) = DFA.unpackEncodedString(DFA3_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 3
    this.eot = DFA3_eot
    this.eof = DFA3_eof
    this.min = DFA3_min
    this.max = DFA3_max
    this.accept = DFA3_accept
    this.special = DFA3_special
    this.transition = DFA3_transition

    val description = "284:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | {...}? => v2008_package_instantiation_declaration | {...}? => v2008_context_declaration | configuration_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA3_8 = input.LA(1)


          val index3_8 = _input.index()
          _input.rewind()
          s = -1
          if ((LA3_8 == NEW) && ((vhdl2008))) {
            s = 9
          }

          else if ((LA3_8 == ALIAS || LA3_8 == ATTRIBUTE || LA3_8 == COMPONENT || (LA3_8 >= CONSTANT && LA3_8 <= DISCONNECT) || LA3_8 == END || LA3_8 == FILE || LA3_8 == FUNCTION || (LA3_8 >= GENERIC && LA3_8 <= GROUP) || LA3_8 == IMPURE || LA3_8 == PACKAGE || LA3_8 == PROCEDURE || LA3_8 == PURE || (LA3_8 >= SHARED && LA3_8 <= SIGNAL) || LA3_8 == SUBTYPE || LA3_8 == TYPE || (LA3_8 >= USE && LA3_8 <= VARIABLE) || (LA3_8 >= NATURE && LA3_8 <= TERMINAL) || LA3_8 == SUBNATURE)) {
            s = 10
          }


          _input.seek(index3_8)
          if (s >= 0) return s
        case 1 =>
          val LA3_0 = input.LA(1)


          val index3_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA3_0 == ENTITY)) {
            s = 1
          }

          else if ((LA3_0 == ARCHITECTURE)) {
            s = 2
          }

          else if ((LA3_0 == PACKAGE)) {
            s = 3
          }

          else if ((LA3_0 == CONTEXT) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA3_0 == CONFIGURATION)) {
            s = 5
          }


          _input.seek(index3_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 3, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA18(rec: BaseRecognizer) extends DFA {
    private val DFA18_eotS = "\27\uffff"
    private val DFA18_eofS = "\27\uffff"
    private val DFA18_minS = "\1\7\1\52\1\uffff\1\52\10\uffff\1\u00a2\2" +
      "\uffff\1\u00a2\1\uffff\1\70\1\52\4\uffff"
    private val DFA18_maxS = "\1\u0096\1\u00a3\1\uffff\1\u00a3\10\uffff" +
      "\1\u00a3\2\uffff\1\u00a3\1\uffff\2\166\4\uffff"
    private val DFA18_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\11\1\uffff\1\14\1\15\1\uffff\1\20\2\uffff\1\12\1\13\1" +
      "\16\1\17"
    private val DFA18_specialS = "\1\1\1\2\1\uffff\1\0\23\uffff}>"
    private val DFA18_transitionS = Array("\1\13\5\uffff\1\14\10\uffff\1" +
      "\7\1\15\6\uffff\1\12\1\uffff\1\3\2\uffff\1\17\2\uffff\1\2\27\uffff\1\4\2" +
      "\uffff\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff\1\5\3\uffff" +
      "\1\16\1\11\54\uffff\3\20\6\uffff\2\20",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\21",
      "",
      "",
      "\2\22",
      "",
      "\1\24\75\uffff\1\23",
      "\1\25\113\uffff\1\26",
      "",
      "",
      "",
      "")

    private val DFA18_eot = DFA.unpackEncodedString(DFA18_eotS)
    private val DFA18_eof = DFA.unpackEncodedString(DFA18_eofS)
    private val DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS)
    private val DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS)
    private val DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS)
    private val DFA18_special = DFA.unpackEncodedString(DFA18_specialS)
    private val DFA18_transition = new Array[Array[Short]](DFA18_transitionS.length)
    for (i <- DFA18_transition.indices) {
      DFA18_transition(i) = DFA.unpackEncodedString(DFA18_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 18
    this.eot = DFA18_eot
    this.eof = DFA18_eof
    this.min = DFA18_min
    this.max = DFA18_max
    this.accept = DFA18_accept
    this.special = DFA18_special
    this.transition = DFA18_transition

    val description = "345:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA18_3 = input.LA(1)


          val index18_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA18_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA18_3 == STRING_LITERAL || (LA18_3 >= BASIC_IDENTIFIER && LA18_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index18_3)
          if (s >= 0) return s
        case 1 =>
          val LA18_0 = input.LA(1)


          val index18_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA18_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA18_0 == IMPURE || LA18_0 == PURE)) {
            s = 2
          }

          else if ((LA18_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA18_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA18_0 == TYPE)) {
            s = 5
          }

          else if ((LA18_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA18_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA18_0 == SIGNAL)) {
            s = 8
          }

          else if ((LA18_0 == SHARED || LA18_0 == VARIABLE)) {
            s = 9
          }

          else if ((LA18_0 == FILE)) {
            s = 10
          }

          else if ((LA18_0 == ALIAS)) {
            s = 11
          }

          else if ((LA18_0 == ATTRIBUTE)) {
            s = 12
          }

          else if ((LA18_0 == DISCONNECT)) {
            s = 13
          }

          else if ((LA18_0 == USE)) {
            s = 14
          }

          else if ((LA18_0 == GROUP)) {
            s = 15
          }

          else if (((LA18_0 >= NATURE && LA18_0 <= QUANTITY) || (LA18_0 >= SUBNATURE && LA18_0 <= LIMIT)) && ((ams))) {
            s = 16
          }


          _input.seek(index18_0)
          if (s >= 0) return s
        case 2 =>
          val LA18_1 = input.LA(1)


          val index18_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA18_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA18_1 >= BASIC_IDENTIFIER && LA18_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index18_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 18, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA26(rec: BaseRecognizer) extends DFA {
    private val DFA26_eotS = "\31\uffff"
    private val DFA26_eofS = "\31\uffff"
    private val DFA26_minS = "\1\4\25\0\3\uffff"
    private val DFA26_maxS = "\1\u00b5\25\0\3\uffff"
    private val DFA26_acceptS = "\26\uffff\1\3\1\1\1\2"
    private val DFA26_specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10" +
      "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3" +
      "\uffff}>"
    private val DFA26_transitionS = Array("\1\16\4\uffff\1\22\50\uffff\1" +
      "\20\1\15\1\uffff\1\21\1\17\1\14\3\uffff\1\23\50\uffff\1\25\1\24\14\uffff" +
      "\1\3\6\uffff\1\4\1\5\15\uffff\1\26\1\uffff\1\2\11\uffff\1\12\11\uffff\1" +
      "\7\1\10\1\11\1\13\2\1\21\uffff\1\6",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "")

    private val DFA26_eot = DFA.unpackEncodedString(DFA26_eotS)
    private val DFA26_eof = DFA.unpackEncodedString(DFA26_eofS)
    private val DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS)
    private val DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS)
    private val DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS)
    private val DFA26_special = DFA.unpackEncodedString(DFA26_specialS)
    private val DFA26_transition = new Array[Array[Short]](DFA26_transitionS.length)
    for (i <- DFA26_transition.indices) {
      DFA26_transition(i) = DFA.unpackEncodedString(DFA26_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 26
    this.eot = DFA26_eot
    this.eof = DFA26_eof
    this.min = DFA26_min
    this.max = DFA26_max
    this.accept = DFA26_accept
    this.special = DFA26_special
    this.transition = DFA26_transition

    val description = "403:1: block_configuration_index returns [Either[DiscreteRange,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | {...}? => identifier | expression );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA26_0 = input.LA(1)


          val index26_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA26_0 >= BASIC_IDENTIFIER && LA26_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA26_0 == STRING_LITERAL)) {
            s = 2
          }

          else if ((LA26_0 == LPAREN)) {
            s = 3
          }

          else if ((LA26_0 == PLUS)) {
            s = 4
          }

          else if ((LA26_0 == MINUS)) {
            s = 5
          }

          else if ((LA26_0 == 181) && ((vhdl2008))) {
            s = 6
          }

          else if ((LA26_0 == REAL_LITERAL)) {
            s = 7
          }

          else if ((LA26_0 == INTEGER_LITERAL)) {
            s = 8
          }

          else if ((LA26_0 == BASED_LITERAL)) {
            s = 9
          }

          else if ((LA26_0 == CHARACTER_LITERAL)) {
            s = 10
          }

          else if ((LA26_0 == BIT_STRING_LITERAL)) {
            s = 11
          }

          else if ((LA26_0 == NULL)) {
            s = 12
          }

          else if ((LA26_0 == NEW)) {
            s = 13
          }

          else if ((LA26_0 == ABS)) {
            s = 14
          }

          else if ((LA26_0 == NOT)) {
            s = 15
          }

          else if ((LA26_0 == NAND) && ((vhdl2008))) {
            s = 16
          }

          else if ((LA26_0 == NOR) && ((vhdl2008))) {
            s = 17
          }

          else if ((LA26_0 == AND) && ((vhdl2008))) {
            s = 18
          }

          else if ((LA26_0 == OR) && ((vhdl2008))) {
            s = 19
          }

          else if ((LA26_0 == XOR) && ((vhdl2008))) {
            s = 20
          }

          else if ((LA26_0 == XNOR) && ((vhdl2008))) {
            s = 21
          }

          else if ((LA26_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_0)
          if (s >= 0) return s
        case 1 =>
          val LA26_1 = input.LA(1)


          val index26_1 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() || (synpred1_VHDL() && (vhdl2008))))) {
            s = 23
          }

          else if (((vhdl2008 && (input.LA(1) == BASIC_IDENTIFIER || input.LA(1) == EXTENDED_IDENTIFIER) && input.LA(2) == RPAREN))) {
            s = 24
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_1)
          if (s >= 0) return s
        case 2 =>
          val LA26_2 = input.LA(1)


          val index26_2 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() || (synpred1_VHDL() && (vhdl2008))))) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_2)
          if (s >= 0) return s
        case 3 =>
          val LA26_3 = input.LA(1)


          val index26_3 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() || (synpred1_VHDL() && (vhdl2008))))) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_3)
          if (s >= 0) return s
        case 4 =>
          val LA26_4 = input.LA(1)


          val index26_4 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_4)
          if (s >= 0) return s
        case 5 =>
          val LA26_5 = input.LA(1)


          val index26_5 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_5)
          if (s >= 0) return s
        case 6 =>
          val LA26_6 = input.LA(1)


          val index26_6 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred1_VHDL() && (vhdl2008)) || (synpred1_VHDL() && (vhdl2008))))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_6)
          if (s >= 0) return s
        case 7 =>
          val LA26_7 = input.LA(1)


          val index26_7 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_7)
          if (s >= 0) return s
        case 8 =>
          val LA26_8 = input.LA(1)


          val index26_8 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_8)
          if (s >= 0) return s
        case 9 =>
          val LA26_9 = input.LA(1)


          val index26_9 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_9)
          if (s >= 0) return s
        case 10 =>
          val LA26_10 = input.LA(1)


          val index26_10 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_10)
          if (s >= 0) return s
        case 11 =>
          val LA26_11 = input.LA(1)


          val index26_11 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_11)
          if (s >= 0) return s
        case 12 =>
          val LA26_12 = input.LA(1)


          val index26_12 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_12)
          if (s >= 0) return s
        case 13 =>
          val LA26_13 = input.LA(1)


          val index26_13 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_13)
          if (s >= 0) return s
        case 14 =>
          val LA26_14 = input.LA(1)


          val index26_14 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_14)
          if (s >= 0) return s
        case 15 =>
          val LA26_15 = input.LA(1)


          val index26_15 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 23
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index26_15)
          if (s >= 0) return s
        case 16 =>
          val LA26_16 = input.LA(1)


          val index26_16 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_16)
          if (s >= 0) return s
        case 17 =>
          val LA26_17 = input.LA(1)


          val index26_17 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_17)
          if (s >= 0) return s
        case 18 =>
          val LA26_18 = input.LA(1)


          val index26_18 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_18)
          if (s >= 0) return s
        case 19 =>
          val LA26_19 = input.LA(1)


          val index26_19 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_19)
          if (s >= 0) return s
        case 20 =>
          val LA26_20 = input.LA(1)


          val index26_20 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_20)
          if (s >= 0) return s
        case 21 =>
          val LA26_21 = input.LA(1)


          val index26_21 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred1_VHDL() && (vhdl2008)))) {
            s = 23
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index26_21)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 26, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA43(rec: BaseRecognizer) extends DFA {
    private val DFA43_eotS = "\30\uffff"
    private val DFA43_eofS = "\30\uffff"
    private val DFA43_minS = "\1\7\1\52\1\uffff\1\52\11\uffff\1\u00a2\2" +
      "\uffff\1\u00a2\1\uffff\1\70\1\52\4\uffff"
    private val DFA43_maxS = "\1\u0095\1\u00a3\1\uffff\1\u00a3\11\uffff" +
      "\1\u00a3\2\uffff\1\u00a3\1\uffff\2\166\4\uffff"
    private val DFA43_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\11\1\12\1\uffff\1\15\1\16\1\uffff\1\21\2\uffff\1\13\1" +
      "\14\1\17\1\20"
    private val DFA43_specialS = "\1\1\1\2\1\uffff\1\0\24\uffff}>"
    private val DFA43_transitionS = Array("\1\13\5\uffff\1\15\6\uffff\1" +
      "\14\1\uffff\1\7\1\16\6\uffff\1\12\1\uffff\1\3\2\uffff\1\20\2\uffff\1\2\27" +
      "\uffff\1\4\2\uffff\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff" +
      "\1\5\3\uffff\1\17\1\11\54\uffff\2\21\7\uffff\1\21",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\22",
      "",
      "",
      "\2\23",
      "",
      "\1\25\75\uffff\1\24",
      "\1\26\113\uffff\1\27",
      "",
      "",
      "",
      "")

    private val DFA43_eot = DFA.unpackEncodedString(DFA43_eotS)
    private val DFA43_eof = DFA.unpackEncodedString(DFA43_eofS)
    private val DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS)
    private val DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS)
    private val DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS)
    private val DFA43_special = DFA.unpackEncodedString(DFA43_specialS)
    private val DFA43_transition = new Array[Array[Short]](DFA43_transitionS.length)
    for (i <- DFA43_transition.indices) {
      DFA43_transition(i) = DFA.unpackEncodedString(DFA43_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 43
    this.eot = DFA43_eot
    this.eof = DFA43_eof
    this.min = DFA43_min
    this.max = DFA43_max
    this.accept = DFA43_accept
    this.special = DFA43_special
    this.transition = DFA43_transition

    val description = "453:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA43_3 = input.LA(1)


          val index43_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA43_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA43_3 == STRING_LITERAL || (LA43_3 >= BASIC_IDENTIFIER && LA43_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index43_3)
          if (s >= 0) return s
        case 1 =>
          val LA43_0 = input.LA(1)


          val index43_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA43_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA43_0 == IMPURE || LA43_0 == PURE)) {
            s = 2
          }

          else if ((LA43_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA43_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA43_0 == TYPE)) {
            s = 5
          }

          else if ((LA43_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA43_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA43_0 == SIGNAL)) {
            s = 8
          }

          else if ((LA43_0 == SHARED || LA43_0 == VARIABLE)) {
            s = 9
          }

          else if ((LA43_0 == FILE)) {
            s = 10
          }

          else if ((LA43_0 == ALIAS)) {
            s = 11
          }

          else if ((LA43_0 == COMPONENT)) {
            s = 12
          }

          else if ((LA43_0 == ATTRIBUTE)) {
            s = 13
          }

          else if ((LA43_0 == DISCONNECT)) {
            s = 14
          }

          else if ((LA43_0 == USE)) {
            s = 15
          }

          else if ((LA43_0 == GROUP)) {
            s = 16
          }

          else if (((LA43_0 >= NATURE && LA43_0 <= TERMINAL) || LA43_0 == SUBNATURE) && ((ams))) {
            s = 17
          }


          _input.seek(index43_0)
          if (s >= 0) return s
        case 2 =>
          val LA43_1 = input.LA(1)


          val index43_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA43_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA43_1 >= BASIC_IDENTIFIER && LA43_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index43_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 43, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA48(rec: BaseRecognizer) extends DFA {
    private val DFA48_eotS = "\24\uffff"
    private val DFA48_eofS = "\24\uffff"
    private val DFA48_minS = "\1\7\1\52\1\uffff\1\52\10\uffff\2\u00a2\1" +
      "\70\1\52\4\uffff"
    private val DFA48_maxS = "\1\137\1\u00a3\1\uffff\1\u00a3\10\uffff\2" +
      "\u00a3\2\166\4\uffff"
    private val DFA48_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\11\4\uffff\1\12\1\13\1\14\1\15"
    private val DFA48_specialS = "\1\2\1\3\1\uffff\1\0\12\uffff\1\1\5\uffff}>"
    private val DFA48_transitionS = Array("\1\12\5\uffff\1\14\10\uffff\1" +
      "\7\7\uffff\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff" +
      "\1\1\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\13\1\10",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\16",
      "\2\17",
      "\1\21\75\uffff\1\20",
      "\1\22\113\uffff\1\23",
      "",
      "",
      "",
      "")

    private val DFA48_eot = DFA.unpackEncodedString(DFA48_eotS)
    private val DFA48_eof = DFA.unpackEncodedString(DFA48_eofS)
    private val DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS)
    private val DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS)
    private val DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS)
    private val DFA48_special = DFA.unpackEncodedString(DFA48_specialS)
    private val DFA48_transition = new Array[Array[Short]](DFA48_transitionS.length)
    for (i <- DFA48_transition.indices) {
      DFA48_transition(i) = DFA.unpackEncodedString(DFA48_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 48
    this.eot = DFA48_eot
    this.eof = DFA48_eof
    this.min = DFA48_min
    this.max = DFA48_max
    this.accept = DFA48_accept
    this.special = DFA48_special
    this.transition = DFA48_transition

    val description = "489:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | {...}? => attribute_declaration | attribute_specification | group_template_declaration | group_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA48_3 = input.LA(1)


          val index48_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA48_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA48_3 == STRING_LITERAL || (LA48_3 >= BASIC_IDENTIFIER && LA48_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index48_3)
          if (s >= 0) return s
        case 1 =>
          val LA48_14 = input.LA(1)


          val index48_14 = _input.index()
          _input.rewind()
          s = -1
          if ((LA48_14 == COLON) && ((vhdl2008))) {
            s = 16
          }

          else if ((LA48_14 == OF)) {
            s = 17
          }


          _input.seek(index48_14)
          if (s >= 0) return s
        case 2 =>
          val LA48_0 = input.LA(1)


          val index48_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA48_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA48_0 == IMPURE || LA48_0 == PURE)) {
            s = 2
          }

          else if ((LA48_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA48_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA48_0 == TYPE)) {
            s = 5
          }

          else if ((LA48_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA48_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA48_0 == SHARED || LA48_0 == VARIABLE)) {
            s = 8
          }

          else if ((LA48_0 == FILE)) {
            s = 9
          }

          else if ((LA48_0 == ALIAS)) {
            s = 10
          }

          else if ((LA48_0 == USE)) {
            s = 11
          }

          else if ((LA48_0 == ATTRIBUTE)) {
            s = 12
          }

          else if ((LA48_0 == GROUP)) {
            s = 13
          }


          _input.seek(index48_0)
          if (s >= 0) return s
        case 3 =>
          val LA48_1 = input.LA(1)


          val index48_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA48_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA48_1 >= BASIC_IDENTIFIER && LA48_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index48_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 48, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA66(rec: BaseRecognizer) extends DFA {
    private val DFA66_eotS = "\24\uffff"
    private val DFA66_eofS = "\24\uffff"
    private val DFA66_minS = "\1\7\1\52\1\uffff\1\52\7\uffff\1\u00a2\1\uffff" +
      "\1\u00a2\1\70\1\52\4\uffff"
    private val DFA66_maxS = "\1\137\1\u00a3\1\uffff\1\u00a3\7\uffff\1\u00a3" +
      "\1\uffff\1\u00a3\2\166\4\uffff"
    private val DFA66_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\uffff\1\13\3\uffff\1\11\1\12\1\14\1\15"
    private val DFA66_specialS = "\1\0\1\2\1\uffff\1\1\20\uffff}>"
    private val DFA66_transitionS = Array("\1\12\5\uffff\1\13\10\uffff\1" +
      "\7\7\uffff\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff" +
      "\1\1\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\16",
      "",
      "\2\17",
      "\1\21\75\uffff\1\20",
      "\1\22\113\uffff\1\23",
      "",
      "",
      "",
      "")

    private val DFA66_eot = DFA.unpackEncodedString(DFA66_eotS)
    private val DFA66_eof = DFA.unpackEncodedString(DFA66_eofS)
    private val DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS)
    private val DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS)
    private val DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS)
    private val DFA66_special = DFA.unpackEncodedString(DFA66_specialS)
    private val DFA66_transition = new Array[Array[Short]](DFA66_transitionS.length)
    for (i <- DFA66_transition.indices) {
      DFA66_transition(i) = DFA.unpackEncodedString(DFA66_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 66
    this.eot = DFA66_eot
    this.eof = DFA66_eof
    this.min = DFA66_min
    this.max = DFA66_max
    this.accept = DFA66_accept
    this.special = DFA66_special
    this.transition = DFA66_transition

    val description = "553:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA66_0 = input.LA(1)


          val index66_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA66_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA66_0 == IMPURE || LA66_0 == PURE)) {
            s = 2
          }

          else if ((LA66_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA66_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA66_0 == TYPE)) {
            s = 5
          }

          else if ((LA66_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA66_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA66_0 == SHARED || LA66_0 == VARIABLE)) {
            s = 8
          }

          else if ((LA66_0 == FILE)) {
            s = 9
          }

          else if ((LA66_0 == ALIAS)) {
            s = 10
          }

          else if ((LA66_0 == ATTRIBUTE)) {
            s = 11
          }

          else if ((LA66_0 == USE)) {
            s = 12
          }

          else if ((LA66_0 == GROUP)) {
            s = 13
          }


          _input.seek(index66_0)
          if (s >= 0) return s
        case 1 =>
          val LA66_3 = input.LA(1)


          val index66_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA66_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA66_3 == STRING_LITERAL || (LA66_3 >= BASIC_IDENTIFIER && LA66_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index66_3)
          if (s >= 0) return s
        case 2 =>
          val LA66_1 = input.LA(1)


          val index66_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA66_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA66_1 >= BASIC_IDENTIFIER && LA66_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index66_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 66, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA70(rec: BaseRecognizer) extends DFA {
    private val DFA70_eotS = "\14\uffff"
    private val DFA70_eofS = "\14\uffff"
    private val DFA70_minS = "\1\5\1\uffff\1\0\4\uffff\1\0\4\uffff"
    private val DFA70_maxS = "\1\162\1\uffff\1\0\4\uffff\1\0\4\uffff"
    private val DFA70_acceptS = "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1" +
      "\uffff\1\2\1\3\1\10\1\11"
    private val DFA70_specialS = "\2\uffff\1\0\4\uffff\1\1\4\uffff}>"
    private val DFA70_transitionS = Array("\1\5\5\uffff\1\3\22\uffff\1\6" +
      "\44\uffff\1\7\1\uffff\1\2\1\4\53\uffff\1\1",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "")

    private val DFA70_eot = DFA.unpackEncodedString(DFA70_eotS)
    private val DFA70_eof = DFA.unpackEncodedString(DFA70_eofS)
    private val DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS)
    private val DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS)
    private val DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS)
    private val DFA70_special = DFA.unpackEncodedString(DFA70_specialS)
    private val DFA70_transition = new Array[Array[Short]](DFA70_transitionS.length)
    for (i <- DFA70_transition.indices) {
      DFA70_transition(i) = DFA.unpackEncodedString(DFA70_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 70
    this.eot = DFA70_eot
    this.eof = DFA70_eof
    this.min = DFA70_min
    this.max = DFA70_max
    this.accept = DFA70_accept
    this.special = DFA70_special
    this.transition = DFA70_transition

    val description = "584:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA70_2 = input.LA(1)


          val index70_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred3_VHDL())) {
            s = 8
          }

          else if ((true)) {
            s = 9
          }


          _input.seek(index70_2)
          if (s >= 0) return s
        case 1 =>
          val LA70_7 = input.LA(1)


          val index70_7 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred4_VHDL())) {
            s = 10
          }

          else if ((true)) {
            s = 11
          }


          _input.seek(index70_7)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 70, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA72(rec: BaseRecognizer) extends DFA {
    private val DFA72_eotS = "\7\uffff"
    private val DFA72_eofS = "\7\uffff"
    private val DFA72_minS = "\1\u008e\1\u008a\1\130\1\uffff\1\u00a2\1\uffff" +
      "\1\154"
    private val DFA72_maxS = "\1\u008e\1\u00b5\1\u009d\1\uffff\1\u00a3\1" +
      "\uffff\1\u0091"
    private val DFA72_acceptS = "\3\uffff\1\2\1\uffff\1\1\1\uffff"
    private val DFA72_specialS = "\2\uffff\1\1\3\uffff\1\0}>"
    private val DFA72_transitionS = Array("\1\1",
      "\1\3\27\uffff\2\2\21\uffff\1\3",
      "\1\3\23\uffff\1\3\2\uffff\1\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\5" +
        "\10\uffff\1\3\17\uffff\3\3\13\uffff\1\3",
      "",
      "\2\6",
      "",
      "\1\3\3\uffff\1\4\5\uffff\1\5\30\uffff\3\3")

    private val DFA72_eot = DFA.unpackEncodedString(DFA72_eotS)
    private val DFA72_eof = DFA.unpackEncodedString(DFA72_eofS)
    private val DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS)
    private val DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS)
    private val DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS)
    private val DFA72_special = DFA.unpackEncodedString(DFA72_specialS)
    private val DFA72_transition = new Array[Array[Short]](DFA72_transitionS.length)
    for (i <- DFA72_transition.indices) {
      DFA72_transition(i) = DFA.unpackEncodedString(DFA72_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 72
    this.eot = DFA72_eot
    this.eof = DFA72_eof
    this.min = DFA72_min
    this.max = DFA72_max
    this.accept = DFA72_accept
    this.special = DFA72_special
    this.transition = DFA72_transition

    val description = "608:1: ams_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : ( ( QUANTITY identifier_list COLON )=> ams_source_or_free_quantity_declaration | ams_branch_quantity_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA72_6 = input.LA(1)


          val index72_6 = _input.index()
          _input.rewind()
          s = -1
          if ((LA72_6 == COLON) && (synpred5_VHDL())) {
            s = 5
          }

          else if ((LA72_6 == COMMA)) {
            s = 4
          }

          else if ((LA72_6 == VAR_ASSIGN || (LA72_6 >= TOLERANCE && LA72_6 <= THROUGH))) {
            s = 3
          }


          _input.seek(index72_6)
          if (s >= 0) return s
        case 1 =>
          val LA72_2 = input.LA(1)


          val index72_2 = _input.index()
          _input.rewind()
          s = -1
          if ((LA72_2 == COMMA)) {
            s = 4
          }

          else if ((LA72_2 == COLON) && (synpred5_VHDL())) {
            s = 5
          }

          else if ((LA72_2 == TO || LA72_2 == VAR_ASSIGN || LA72_2 == SEMICOLON || LA72_2 == LPAREN || LA72_2 == LBRACKET || LA72_2 == DOT || (LA72_2 >= TOLERANCE && LA72_2 <= THROUGH) || LA72_2 == APOSTROPHE)) {
            s = 3
          }


          _input.seek(index72_2)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 72, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA102(rec: BaseRecognizer) extends DFA {
    private val DFA102_eotS = "\23\uffff"
    private val DFA102_eofS = "\23\uffff"
    private val DFA102_minS = "\1\12\22\uffff"
    private val DFA102_maxS = "\1\u0095\22\uffff"
    private val DFA102_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
    private val DFA102_specialS = "\1\0\22\uffff}>"
    private val DFA102_transitionS = Array("\1\2\11\uffff\1\15\1\3\1\11" +
      "\5\uffff\1\1\1\uffff\1\14\1\uffff\1\6\2\uffff\1\21\7\uffff\1\16\2\uffff" +
      "\1\17\17\uffff\1\4\2\uffff\1\5\17\uffff\1\12\4\uffff\1\10\3\uffff\1\7\1" +
      "\uffff\1\20\2\uffff\1\13\54\uffff\3\22\6\uffff\1\22",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA102_eot = DFA.unpackEncodedString(DFA102_eotS)
    private val DFA102_eof = DFA.unpackEncodedString(DFA102_eofS)
    private val DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS)
    private val DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS)
    private val DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS)
    private val DFA102_special = DFA.unpackEncodedString(DFA102_specialS)
    private val DFA102_transition = new Array[Array[Short]](DFA102_transitionS.length)
    for (i <- DFA102_transition.indices) {
      DFA102_transition(i) = DFA.unpackEncodedString(DFA102_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 102
    this.eot = DFA102_eot
    this.eof = DFA102_eof
    this.min = DFA102_min
    this.max = DFA102_max
    this.accept = DFA102_accept
    this.special = DFA102_special
    this.transition = DFA102_transition

    val description = "706:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA102_0 = input.LA(1)


          val index102_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA102_0 == ENTITY)) {
            s = 1
          }

          else if ((LA102_0 == ARCHITECTURE)) {
            s = 2
          }

          else if ((LA102_0 == CONFIGURATION)) {
            s = 3
          }

          else if ((LA102_0 == PACKAGE)) {
            s = 4
          }

          else if ((LA102_0 == PROCEDURE)) {
            s = 5
          }

          else if ((LA102_0 == FUNCTION)) {
            s = 6
          }

          else if ((LA102_0 == TYPE)) {
            s = 7
          }

          else if ((LA102_0 == SUBTYPE)) {
            s = 8
          }

          else if ((LA102_0 == CONSTANT)) {
            s = 9
          }

          else if ((LA102_0 == SIGNAL)) {
            s = 10
          }

          else if ((LA102_0 == VARIABLE)) {
            s = 11
          }

          else if ((LA102_0 == FILE)) {
            s = 12
          }

          else if ((LA102_0 == COMPONENT)) {
            s = 13
          }

          else if ((LA102_0 == LABEL)) {
            s = 14
          }

          else if ((LA102_0 == LITERAL)) {
            s = 15
          }

          else if ((LA102_0 == UNITS)) {
            s = 16
          }

          else if ((LA102_0 == GROUP)) {
            s = 17
          }

          else if (((LA102_0 >= NATURE && LA102_0 <= QUANTITY) || LA102_0 == SUBNATURE) && ((ams))) {
            s = 18
          }


          _input.seek(index102_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 102, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA121(rec: BaseRecognizer) extends DFA {
    private val DFA121_eotS = "\14\uffff"
    private val DFA121_eofS = "\14\uffff"
    private val DFA121_minS = "\1\162\1\4\2\30\1\uffff\1\10\1\4\4\30\1\uffff"
    private val DFA121_maxS = "\1\162\1\u00b5\2\u00a3\1\uffff\1\u00a3\1" +
      "\u00b5\4\u00a3\1\uffff"
    private val DFA121_acceptS = "\4\uffff\1\2\6\uffff\1\1"
    private val DFA121_specialS = "\14\uffff}>"
    private val DFA121_transitionS = Array("\1\1",
      "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4\14" +
        "\uffff\1\4\6\uffff\2\4\17\uffff\1\3\11\uffff\1\4\11\uffff\4\4\2\2\21\uffff" +
        "\1\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "",
      "\1\12\u0081\uffff\1\11\11\uffff\1\10\15\uffff\2\7",
      "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4\7\uffff" +
        "\1\13\4\uffff\1\4\6\uffff\2\4\17\uffff\1\4\11\uffff\1\4\11\uffff\6\4\21" +
        "\uffff\1\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "")

    private val DFA121_eot = DFA.unpackEncodedString(DFA121_eotS)
    private val DFA121_eof = DFA.unpackEncodedString(DFA121_eofS)
    private val DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS)
    private val DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS)
    private val DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS)
    private val DFA121_special = DFA.unpackEncodedString(DFA121_specialS)
    private val DFA121_transition = new Array[Array[Short]](DFA121_transitionS.length)
    for (i <- DFA121_transition.indices) {
      DFA121_transition(i) = DFA.unpackEncodedString(DFA121_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 121
    this.eot = DFA121_eot
    this.eof = DFA121_eof
    this.min = DFA121_min
    this.max = DFA121_max
    this.accept = DFA121_accept
    this.special = DFA121_special
    this.transition = DFA121_transition

    val description = "841:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"

  }

  final private class DFA125(rec: BaseRecognizer) extends DFA {
    private val DFA125_eotS = "\14\uffff"
    private val DFA125_eofS = "\14\uffff"
    private val DFA125_minS = "\1\162\1\4\2\30\1\uffff\1\10\1\4\4\30\1\uffff"
    private val DFA125_maxS = "\1\162\1\u00b5\2\u00a3\1\uffff\1\u00a3\1" +
      "\u00b5\4\u00a3\1\uffff"
    private val DFA125_acceptS = "\4\uffff\1\2\6\uffff\1\1"
    private val DFA125_specialS = "\14\uffff}>"
    private val DFA125_transitionS = Array("\1\1",
      "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4\14" +
        "\uffff\1\4\6\uffff\2\4\17\uffff\1\3\11\uffff\1\4\11\uffff\4\4\2\2\21\uffff" +
        "\1\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "",
      "\1\12\u0081\uffff\1\11\11\uffff\1\10\15\uffff\2\7",
      "\1\4\4\uffff\1\4\50\uffff\2\4\1\uffff\3\4\3\uffff\1\4\50\uffff\2\4\7\uffff" +
        "\1\13\4\uffff\1\4\6\uffff\2\4\17\uffff\1\4\11\uffff\1\4\11\uffff\6\4\21" +
        "\uffff\1\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "\1\4\30\uffff\1\4\23\uffff\1\6\3\uffff\1\4\16\uffff\1\4\15\uffff\1\4\11" +
        "\uffff\5\4\2\uffff\4\4\4\uffff\1\5\12\uffff\1\4\4\uffff\1\4\15\uffff\1\4" +
        "\4\uffff\2\4",
      "")

    private val DFA125_eot = DFA.unpackEncodedString(DFA125_eotS)
    private val DFA125_eof = DFA.unpackEncodedString(DFA125_eofS)
    private val DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS)
    private val DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS)
    private val DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS)
    private val DFA125_special = DFA.unpackEncodedString(DFA125_specialS)
    private val DFA125_transition = new Array[Array[Short]](DFA125_transitionS.length)
    for (i <- DFA125_transition.indices) {
      DFA125_transition(i) = DFA.unpackEncodedString(DFA125_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 125
    this.eot = DFA125_eot
    this.eof = DFA125_eof
    this.min = DFA125_min
    this.max = DFA125_max
    this.accept = DFA125_accept
    this.special = DFA125_special
    this.transition = DFA125_transition

    val description = "879:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"

  }

  final private class DFA136(rec: BaseRecognizer) extends DFA {
    private val DFA136_eotS = "\24\uffff"
    private val DFA136_eofS = "\24\uffff"
    private val DFA136_minS = "\1\7\1\52\1\uffff\1\52\7\uffff\1\u00a2\1" +
      "\uffff\1\u00a2\1\70\1\52\4\uffff"
    private val DFA136_maxS = "\1\137\1\u00a3\1\uffff\1\u00a3\7\uffff\1" +
      "\u00a3\1\uffff\1\u00a3\2\166\4\uffff"
    private val DFA136_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\uffff\1\13\3\uffff\1\11\1\12\1\14\1\15"
    private val DFA136_specialS = "\1\1\1\2\1\uffff\1\0\20\uffff}>"
    private val DFA136_transitionS = Array("\1\12\5\uffff\1\13\10\uffff" +
      "\1\7\7\uffff\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff" +
      "\1\1\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\16",
      "",
      "\2\17",
      "\1\21\75\uffff\1\20",
      "\1\22\113\uffff\1\23",
      "",
      "",
      "",
      "")

    private val DFA136_eot = DFA.unpackEncodedString(DFA136_eotS)
    private val DFA136_eof = DFA.unpackEncodedString(DFA136_eofS)
    private val DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS)
    private val DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS)
    private val DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS)
    private val DFA136_special = DFA.unpackEncodedString(DFA136_specialS)
    private val DFA136_transition = new Array[Array[Short]](DFA136_transitionS.length)
    for (i <- DFA136_transition.indices) {
      DFA136_transition(i) = DFA.unpackEncodedString(DFA136_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 136
    this.eot = DFA136_eot
    this.eof = DFA136_eof
    this.min = DFA136_min
    this.max = DFA136_max
    this.accept = DFA136_accept
    this.special = DFA136_special
    this.transition = DFA136_transition

    val description = "936:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA136_3 = input.LA(1)


          val index136_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA136_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA136_3 == STRING_LITERAL || (LA136_3 >= BASIC_IDENTIFIER && LA136_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index136_3)
          if (s >= 0) return s
        case 1 =>
          val LA136_0 = input.LA(1)


          val index136_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA136_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA136_0 == IMPURE || LA136_0 == PURE)) {
            s = 2
          }

          else if ((LA136_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA136_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA136_0 == TYPE)) {
            s = 5
          }

          else if ((LA136_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA136_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA136_0 == SHARED || LA136_0 == VARIABLE)) {
            s = 8
          }

          else if ((LA136_0 == FILE)) {
            s = 9
          }

          else if ((LA136_0 == ALIAS)) {
            s = 10
          }

          else if ((LA136_0 == ATTRIBUTE)) {
            s = 11
          }

          else if ((LA136_0 == USE)) {
            s = 12
          }

          else if ((LA136_0 == GROUP)) {
            s = 13
          }


          _input.seek(index136_0)
          if (s >= 0) return s
        case 2 =>
          val LA136_1 = input.LA(1)


          val index136_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA136_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA136_1 >= BASIC_IDENTIFIER && LA136_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index136_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 136, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA149(rec: BaseRecognizer) extends DFA {
    private val DFA149_eotS = "\27\uffff"
    private val DFA149_eofS = "\27\uffff"
    private val DFA149_minS = "\1\4\2\uffff\3\0\21\uffff"
    private val DFA149_maxS = "\1\u00b5\2\uffff\3\0\21\uffff"
    private val DFA149_acceptS = "\1\uffff\2\1\3\uffff\20\1\1\2"
    private val DFA149_specialS = "\1\0\2\uffff\1\1\1\2\1\3\21\uffff}>"
    private val DFA149_transitionS = Array("\1\16\4\uffff\1\22\50\uffff" +
      "\1\20\1\14\1\uffff\1\21\1\17\1\13\3\uffff\1\23\50\uffff\1\25\1\24\14\uffff" +
      "\1\15\6\uffff\1\1\1\2\17\uffff\1\4\11\uffff\1\11\11\uffff\1\6\1\7\1\10\1" +
      "\12\2\3\21\uffff\1\5",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA149_eot = DFA.unpackEncodedString(DFA149_eotS)
    private val DFA149_eof = DFA.unpackEncodedString(DFA149_eofS)
    private val DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS)
    private val DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS)
    private val DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS)
    private val DFA149_special = DFA.unpackEncodedString(DFA149_specialS)
    private val DFA149_transition = new Array[Array[Short]](DFA149_transitionS.length)
    for (i <- DFA149_transition.indices) {
      DFA149_transition(i) = DFA.unpackEncodedString(DFA149_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 149
    this.eot = DFA149_eot
    this.eof = DFA149_eof
    this.min = DFA149_min
    this.max = DFA149_max
    this.accept = DFA149_accept
    this.special = DFA149_special
    this.transition = DFA149_transition

    val description = "986:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA149_0 = input.LA(1)


          val index149_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA149_0 == PLUS) && (synpred8_VHDL())) {
            s = 1
          }

          else if ((LA149_0 == MINUS) && (synpred8_VHDL())) {
            s = 2
          }

          else if (((LA149_0 >= BASIC_IDENTIFIER && LA149_0 <= EXTENDED_IDENTIFIER))) {
            s = 3
          }

          else if ((LA149_0 == STRING_LITERAL)) {
            s = 4
          }

          else if ((LA149_0 == 181) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA149_0 == REAL_LITERAL) && (synpred8_VHDL())) {
            s = 6
          }

          else if ((LA149_0 == INTEGER_LITERAL) && (synpred8_VHDL())) {
            s = 7
          }

          else if ((LA149_0 == BASED_LITERAL) && (synpred8_VHDL())) {
            s = 8
          }

          else if ((LA149_0 == CHARACTER_LITERAL) && (synpred8_VHDL())) {
            s = 9
          }

          else if ((LA149_0 == BIT_STRING_LITERAL) && (synpred8_VHDL())) {
            s = 10
          }

          else if ((LA149_0 == NULL) && (synpred8_VHDL())) {
            s = 11
          }

          else if ((LA149_0 == NEW) && (synpred8_VHDL())) {
            s = 12
          }

          else if ((LA149_0 == LPAREN) && (synpred8_VHDL())) {
            s = 13
          }

          else if ((LA149_0 == ABS) && (synpred8_VHDL())) {
            s = 14
          }

          else if ((LA149_0 == NOT) && (synpred8_VHDL())) {
            s = 15
          }

          else if ((LA149_0 == NAND) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 16
          }

          else if ((LA149_0 == NOR) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 17
          }

          else if ((LA149_0 == AND) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 18
          }

          else if ((LA149_0 == OR) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 19
          }

          else if ((LA149_0 == XOR) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 20
          }

          else if ((LA149_0 == XNOR) && ((synpred8_VHDL() && (vhdl2008)))) {
            s = 21
          }


          _input.seek(index149_0)
          if (s >= 0) return s
        case 1 =>
          val LA149_3 = input.LA(1)


          val index149_3 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred8_VHDL())) {
            s = 21
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index149_3)
          if (s >= 0) return s
        case 2 =>
          val LA149_4 = input.LA(1)


          val index149_4 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred8_VHDL())) {
            s = 21
          }

          else if ((true)) {
            s = 22
          }


          _input.seek(index149_4)
          if (s >= 0) return s
        case 3 =>
          val LA149_5 = input.LA(1)


          val index149_5 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred8_VHDL() && (vhdl2008)))) {
            s = 21
          }

          else if (((vhdl2008))) {
            s = 22
          }


          _input.seek(index149_5)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 149, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA157(rec: BaseRecognizer) extends DFA {
    private val DFA157_eotS = "\27\uffff"
    private val DFA157_eofS = "\27\uffff"
    private val DFA157_minS = "\1\4\3\0\23\uffff"
    private val DFA157_maxS = "\1\u00b5\3\0\23\uffff"
    private val DFA157_acceptS = "\4\uffff\1\2\1\uffff\2\2\10\uffff\1\2" +
      "\5\uffff\1\1"
    private val DFA157_specialS = "\1\0\1\1\1\2\1\3\23\uffff}>"
    private val DFA157_transitionS = Array("\1\7\4\uffff\1\20\50\uffff\1" +
      "\20\1\7\1\uffff\1\20\2\7\3\uffff\1\20\50\uffff\2\20\14\uffff\1\3\6\uffff" +
      "\2\4\17\uffff\1\2\11\uffff\1\7\11\uffff\4\7\2\1\21\uffff\1\6",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA157_eot = DFA.unpackEncodedString(DFA157_eotS)
    private val DFA157_eof = DFA.unpackEncodedString(DFA157_eofS)
    private val DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS)
    private val DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS)
    private val DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS)
    private val DFA157_special = DFA.unpackEncodedString(DFA157_specialS)
    private val DFA157_transition = new Array[Array[Short]](DFA157_transitionS.length)
    for (i <- DFA157_transition.indices) {
      DFA157_transition(i) = DFA.unpackEncodedString(DFA157_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 157
    this.eot = DFA157_eot
    this.eof = DFA157_eof
    this.min = DFA157_min
    this.max = DFA157_max
    this.accept = DFA157_accept
    this.special = DFA157_special
    this.transition = DFA157_transition

    val description = "1006:1: discrete_range returns [DiscreteRange discreteRange] : ( ( subtype_indication ( RPAREN | COMMA | GENERATE | LOOP | BAR | ARROW | SEMICOLON ) )=> subtype_indication | range );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA157_0 = input.LA(1)


          val index157_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA157_0 >= BASIC_IDENTIFIER && LA157_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA157_0 == STRING_LITERAL)) {
            s = 2
          }

          else if ((LA157_0 == LPAREN)) {
            s = 3
          }

          else if (((LA157_0 >= PLUS && LA157_0 <= MINUS))) {
            s = 4
          }

          else if ((LA157_0 == 181) && ((vhdl2008))) {
            s = 6
          }

          else if ((LA157_0 == ABS || LA157_0 == NEW || (LA157_0 >= NOT && LA157_0 <= NULL) || LA157_0 == CHARACTER_LITERAL || (LA157_0 >= REAL_LITERAL && LA157_0 <= BIT_STRING_LITERAL))) {
            s = 7
          }

          else if ((LA157_0 == AND || LA157_0 == NAND || LA157_0 == NOR || LA157_0 == OR || (LA157_0 >= XNOR && LA157_0 <= XOR)) && ((vhdl2008))) {
            s = 16
          }


          _input.seek(index157_0)
          if (s >= 0) return s
        case 1 =>
          val LA157_1 = input.LA(1)


          val index157_1 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred9_VHDL() || (synpred9_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if ((true)) {
            s = 16
          }


          _input.seek(index157_1)
          if (s >= 0) return s
        case 2 =>
          val LA157_2 = input.LA(1)


          val index157_2 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred9_VHDL() || (synpred9_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if ((true)) {
            s = 16
          }


          _input.seek(index157_2)
          if (s >= 0) return s
        case 3 =>
          val LA157_3 = input.LA(1)


          val index157_3 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred9_VHDL() && (vhdl2008)))) {
            s = 22
          }

          else if ((true)) {
            s = 16
          }


          _input.seek(index157_3)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 157, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA159(rec: BaseRecognizer) extends DFA {
    private val DFA159_eotS = "\43\uffff"
    private val DFA159_eofS = "\43\uffff"
    private val DFA159_minS = "\1\4\1\uffff\2\0\4\uffff\2\0\31\uffff"
    private val DFA159_maxS = "\1\u00b5\1\uffff\2\0\4\uffff\2\0\31\uffff"
    private val DFA159_acceptS = "\1\uffff\1\1\2\uffff\4\1\2\uffff\2\2\1" +
      "\uffff\2\2\11\uffff\1\2\5\uffff\1\2\4\uffff"
    private val DFA159_specialS = "\1\0\1\uffff\1\1\1\2\4\uffff\1\3\1\4" +
      "\31\uffff}>"
    private val DFA159_transitionS = Array("\1\16\4\uffff\1\30\2\uffff\1" +
      "\36\2\uffff\1\6\3\uffff\1\11\1\1\1\5\6\uffff\1\4\2\uffff\1\7\5\uffff\1\10" +
      "\14\uffff\1\30\1\16\1\uffff\1\30\2\16\3\uffff\1\30\4\uffff\1\36\1\uffff" +
      "\1\36\40\uffff\1\36\2\30\14\uffff\1\16\6\uffff\2\13\17\uffff\1\3\11\uffff" +
      "\1\16\3\uffff\1\12\1\36\4\uffff\4\16\2\2\21\uffff\1\15",
      "",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA159_eot = DFA.unpackEncodedString(DFA159_eotS)
    private val DFA159_eof = DFA.unpackEncodedString(DFA159_eofS)
    private val DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS)
    private val DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS)
    private val DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS)
    private val DFA159_special = DFA.unpackEncodedString(DFA159_specialS)
    private val DFA159_transition = new Array[Array[Short]](DFA159_transitionS.length)
    for (i <- DFA159_transition.indices) {
      DFA159_transition(i) = DFA.unpackEncodedString(DFA159_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 159
    this.eot = DFA159_eot
    this.eof = DFA159_eof
    this.min = DFA159_min
    this.max = DFA159_max
    this.accept = DFA159_accept
    this.special = DFA159_special
    this.transition = DFA159_transition

    val description = "1023:22: ( ( COMPONENT | ( selected_name ( GENERIC | PORT ) MAP ) | ENTITY | CONFIGURATION | BLOCK | IF ({...}? => label_colon )? condition GENERATE | FOR | {...}? => CASE expression GENERATE )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA159_0 = input.LA(1)


          val index159_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA159_0 == COMPONENT) && (synpred10_VHDL())) {
            s = 1
          }

          else if (((LA159_0 >= BASIC_IDENTIFIER && LA159_0 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }

          else if ((LA159_0 == STRING_LITERAL)) {
            s = 3
          }

          else if ((LA159_0 == ENTITY) && (synpred10_VHDL())) {
            s = 4
          }

          else if ((LA159_0 == CONFIGURATION) && (synpred10_VHDL())) {
            s = 5
          }

          else if ((LA159_0 == BLOCK) && (synpred10_VHDL())) {
            s = 6
          }

          else if ((LA159_0 == FOR) && (synpred10_VHDL())) {
            s = 7
          }

          else if ((LA159_0 == IF)) {
            s = 8
          }

          else if ((LA159_0 == CASE)) {
            s = 9
          }

          else if ((LA159_0 == BREAK) && ((ams))) {
            s = 10
          }

          else if (((LA159_0 >= PLUS && LA159_0 <= MINUS))) {
            s = 11
          }

          else if ((LA159_0 == 181) && ((vhdl2008))) {
            s = 13
          }

          else if ((LA159_0 == ABS || LA159_0 == NEW || (LA159_0 >= NOT && LA159_0 <= NULL) || LA159_0 == LPAREN || LA159_0 == CHARACTER_LITERAL || (LA159_0 >= REAL_LITERAL && LA159_0 <= BIT_STRING_LITERAL))) {
            s = 14
          }

          else if ((LA159_0 == AND || LA159_0 == NAND || LA159_0 == NOR || LA159_0 == OR || (LA159_0 >= XNOR && LA159_0 <= XOR)) && ((vhdl2008))) {
            s = 24
          }

          else if ((LA159_0 == ASSERT || LA159_0 == POSTPONED || LA159_0 == PROCESS || LA159_0 == WITH || LA159_0 == PROCEDURAL)) {
            s = 30
          }


          _input.seek(index159_0)
          if (s >= 0) return s
        case 1 =>
          val LA159_2 = input.LA(1)


          val index159_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred10_VHDL())) {
            s = 7
          }

          else if ((true)) {
            s = 30
          }


          _input.seek(index159_2)
          if (s >= 0) return s
        case 2 =>
          val LA159_3 = input.LA(1)


          val index159_3 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred10_VHDL())) {
            s = 7
          }

          else if ((true)) {
            s = 30
          }


          _input.seek(index159_3)
          if (s >= 0) return s
        case 3 =>
          val LA159_8 = input.LA(1)


          val index159_8 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred10_VHDL())) {
            s = 7
          }

          else if ((true)) {
            s = 30
          }


          _input.seek(index159_8)
          if (s >= 0) return s
        case 4 =>
          val LA159_9 = input.LA(1)


          val index159_9 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred10_VHDL() && (vhdl2008)))) {
            s = 7
          }

          else if ((true)) {
            s = 30
          }


          _input.seek(index159_9)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 159, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA164(rec: BaseRecognizer) extends DFA {
    private val DFA164_eotS = "\36\uffff"
    private val DFA164_eofS = "\36\uffff"
    private val DFA164_minS = "\1\4\3\uffff\3\0\7\uffff\1\0\17\uffff"
    private val DFA164_maxS = "\1\u00b5\3\uffff\3\0\7\uffff\1\0\17\uffff"
    private val DFA164_acceptS = "\1\uffff\1\1\2\2\3\uffff\7\2\1\uffff\13" +
      "\2\1\3\3\uffff"
    private val DFA164_specialS = "\1\0\3\uffff\1\1\1\2\1\3\7\uffff\1\4" +
      "\17\uffff}>"
    private val DFA164_transitionS = Array("\1\17\4\uffff\1\23\2\uffff\1" +
      "\32\6\uffff\1\31\21\uffff\1\27\14\uffff\1\21\1\15\1\uffff\1\22\1\20\1\14" +
      "\3\uffff\1\24\4\uffff\1\32\1\uffff\1\32\40\uffff\1\32\1\26\1\25\14\uffff" +
      "\1\16\6\uffff\1\2\1\3\17\uffff\1\5\11\uffff\1\12\3\uffff\1\1\1\30\4\uffff" +
      "\1\7\1\10\1\11\1\13\2\4\21\uffff\1\6",
      "",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA164_eot = DFA.unpackEncodedString(DFA164_eotS)
    private val DFA164_eof = DFA.unpackEncodedString(DFA164_eofS)
    private val DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS)
    private val DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS)
    private val DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS)
    private val DFA164_special = DFA.unpackEncodedString(DFA164_specialS)
    private val DFA164_transition = new Array[Array[Short]](DFA164_transitionS.length)
    for (i <- DFA164_transition.indices) {
      DFA164_transition(i) = DFA.unpackEncodedString(DFA164_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 164
    this.eot = DFA164_eot
    this.eof = DFA164_eof
    this.min = DFA164_min
    this.max = DFA164_max
    this.accept = DFA164_accept
    this.special = DFA164_special
    this.transition = DFA164_transition

    val description = "1034:1: concurrent_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ({...}? => ams_concurrent_break_statement[$label] | ({...}? => ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL ) )=> ams_simultaneous_statement[$label] | (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA164_0 = input.LA(1)


          val index164_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA164_0 == BREAK) && ((ams))) {
            s = 1
          }

          else if ((LA164_0 == PLUS) && (synpred11_VHDL())) {
            s = 2
          }

          else if ((LA164_0 == MINUS) && (synpred11_VHDL())) {
            s = 3
          }

          else if (((LA164_0 >= BASIC_IDENTIFIER && LA164_0 <= EXTENDED_IDENTIFIER))) {
            s = 4
          }

          else if ((LA164_0 == STRING_LITERAL)) {
            s = 5
          }

          else if ((LA164_0 == 181) && ((vhdl2008))) {
            s = 6
          }

          else if ((LA164_0 == REAL_LITERAL) && (synpred11_VHDL())) {
            s = 7
          }

          else if ((LA164_0 == INTEGER_LITERAL) && (synpred11_VHDL())) {
            s = 8
          }

          else if ((LA164_0 == BASED_LITERAL) && (synpred11_VHDL())) {
            s = 9
          }

          else if ((LA164_0 == CHARACTER_LITERAL) && (synpred11_VHDL())) {
            s = 10
          }

          else if ((LA164_0 == BIT_STRING_LITERAL) && (synpred11_VHDL())) {
            s = 11
          }

          else if ((LA164_0 == NULL) && (synpred11_VHDL())) {
            s = 12
          }

          else if ((LA164_0 == NEW) && (synpred11_VHDL())) {
            s = 13
          }

          else if ((LA164_0 == LPAREN)) {
            s = 14
          }

          else if ((LA164_0 == ABS) && (synpred11_VHDL())) {
            s = 15
          }

          else if ((LA164_0 == NOT) && (synpred11_VHDL())) {
            s = 16
          }

          else if ((LA164_0 == NAND) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 17
          }

          else if ((LA164_0 == NOR) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 18
          }

          else if ((LA164_0 == AND) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 19
          }

          else if ((LA164_0 == OR) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 20
          }

          else if ((LA164_0 == XOR) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 21
          }

          else if ((LA164_0 == XNOR) && ((synpred11_VHDL() && (vhdl2008)))) {
            s = 22
          }

          else if ((LA164_0 == IF) && (synpred11_VHDL())) {
            s = 23
          }

          else if ((LA164_0 == PROCEDURAL) && (synpred11_VHDL())) {
            s = 24
          }

          else if ((LA164_0 == CASE) && (synpred11_VHDL())) {
            s = 25
          }

          else if ((LA164_0 == ASSERT || LA164_0 == POSTPONED || LA164_0 == PROCESS || LA164_0 == WITH)) {
            s = 26
          }


          _input.seek(index164_0)
          if (s >= 0) return s
        case 1 =>
          val LA164_4 = input.LA(1)


          val index164_4 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred11_VHDL())) {
            s = 25
          }

          else if ((true)) {
            s = 26
          }


          _input.seek(index164_4)
          if (s >= 0) return s
        case 2 =>
          val LA164_5 = input.LA(1)


          val index164_5 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred11_VHDL())) {
            s = 25
          }

          else if ((true)) {
            s = 26
          }


          _input.seek(index164_5)
          if (s >= 0) return s
        case 3 =>
          val LA164_6 = input.LA(1)


          val index164_6 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred11_VHDL() && (vhdl2008)))) {
            s = 25
          }

          else if (((vhdl2008))) {
            s = 26
          }


          _input.seek(index164_6)
          if (s >= 0) return s
        case 4 =>
          val LA164_14 = input.LA(1)


          val index164_14 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred11_VHDL())) {
            s = 25
          }

          else if ((true)) {
            s = 26
          }


          _input.seek(index164_14)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 164, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA175(rec: BaseRecognizer) extends DFA {
    private val DFA175_eotS = "\31\uffff"
    private val DFA175_eofS = "\31\uffff"
    private val DFA175_minS = "\1\7\1\52\1\uffff\1\52\11\uffff\1\u00a2\3" +
      "\uffff\1\u00a2\1\uffff\1\70\1\52\4\uffff"
    private val DFA175_maxS = "\1\u0096\1\u00a3\1\uffff\1\u00a3\11\uffff" +
      "\1\u00a3\3\uffff\1\u00a3\1\uffff\2\166\4\uffff"
    private val DFA175_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\11\1\12\1\uffff\1\15\1\16\1\17\1\uffff\1\22\2\uffff\1" +
      "\13\1\14\1\20\1\21"
    private val DFA175_specialS = "\1\0\1\1\1\uffff\1\2\25\uffff}>"
    private val DFA175_transitionS = Array("\1\13\5\uffff\1\15\6\uffff\1" +
      "\14\1\uffff\1\7\1\17\6\uffff\1\12\1\16\1\3\2\uffff\1\21\2\uffff\1\2\27\uffff" +
      "\1\4\2\uffff\1\1\2\uffff\1\2\13\uffff\1\11\1\10\4\uffff\1\6\3\uffff\1\5" +
      "\3\uffff\1\20\1\11\54\uffff\3\22\6\uffff\2\22",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\23",
      "",
      "",
      "",
      "\2\24",
      "",
      "\1\26\75\uffff\1\25",
      "\1\27\113\uffff\1\30",
      "",
      "",
      "",
      "")

    private val DFA175_eot = DFA.unpackEncodedString(DFA175_eotS)
    private val DFA175_eof = DFA.unpackEncodedString(DFA175_eofS)
    private val DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS)
    private val DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS)
    private val DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS)
    private val DFA175_special = DFA.unpackEncodedString(DFA175_specialS)
    private val DFA175_transition = new Array[Array[Short]](DFA175_transitionS.length)
    for (i <- DFA175_transition.indices) {
      DFA175_transition(i) = DFA.unpackEncodedString(DFA175_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 175
    this.eot = DFA175_eot
    this.eof = DFA175_eof
    this.min = DFA175_min
    this.max = DFA175_max
    this.accept = DFA175_accept
    this.special = DFA175_special
    this.transition = DFA175_transition

    val description = "1068:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA175_0 = input.LA(1)


          val index175_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA175_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA175_0 == IMPURE || LA175_0 == PURE)) {
            s = 2
          }

          else if ((LA175_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA175_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA175_0 == TYPE)) {
            s = 5
          }

          else if ((LA175_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA175_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA175_0 == SIGNAL)) {
            s = 8
          }

          else if ((LA175_0 == SHARED || LA175_0 == VARIABLE)) {
            s = 9
          }

          else if ((LA175_0 == FILE)) {
            s = 10
          }

          else if ((LA175_0 == ALIAS)) {
            s = 11
          }

          else if ((LA175_0 == COMPONENT)) {
            s = 12
          }

          else if ((LA175_0 == ATTRIBUTE)) {
            s = 13
          }

          else if ((LA175_0 == FOR)) {
            s = 14
          }

          else if ((LA175_0 == DISCONNECT)) {
            s = 15
          }

          else if ((LA175_0 == USE)) {
            s = 16
          }

          else if ((LA175_0 == GROUP)) {
            s = 17
          }

          else if (((LA175_0 >= NATURE && LA175_0 <= QUANTITY) || (LA175_0 >= SUBNATURE && LA175_0 <= LIMIT)) && ((ams))) {
            s = 18
          }


          _input.seek(index175_0)
          if (s >= 0) return s
        case 1 =>
          val LA175_1 = input.LA(1)


          val index175_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA175_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA175_1 >= BASIC_IDENTIFIER && LA175_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index175_1)
          if (s >= 0) return s
        case 2 =>
          val LA175_3 = input.LA(1)


          val index175_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA175_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA175_3 == STRING_LITERAL || (LA175_3 >= BASIC_IDENTIFIER && LA175_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index175_3)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 175, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA182(rec: BaseRecognizer) extends DFA {
    private val DFA182_eotS = "\24\uffff"
    private val DFA182_eofS = "\24\uffff"
    private val DFA182_minS = "\1\7\1\52\1\uffff\1\52\7\uffff\1\u00a2\1" +
      "\uffff\1\u00a2\1\70\1\52\4\uffff"
    private val DFA182_maxS = "\1\137\1\u00a3\1\uffff\1\u00a3\7\uffff\1" +
      "\u00a3\1\uffff\1\u00a3\2\166\4\uffff"
    private val DFA182_acceptS = "\2\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\6\1\7\1\10\1\uffff\1\13\3\uffff\1\11\1\12\1\14\1\15"
    private val DFA182_specialS = "\1\1\1\2\1\uffff\1\0\20\uffff}>"
    private val DFA182_transitionS = Array("\1\12\5\uffff\1\13\10\uffff" +
      "\1\7\7\uffff\1\11\1\uffff\1\3\2\uffff\1\15\2\uffff\1\2\27\uffff\1\4\2\uffff" +
      "\1\1\2\uffff\1\2\13\uffff\1\10\5\uffff\1\6\3\uffff\1\5\3\uffff\1\14\1\10",
      "\1\4\167\uffff\2\2",
      "",
      "\1\4\137\uffff\1\2\27\uffff\2\2",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\16",
      "",
      "\2\17",
      "\1\21\75\uffff\1\20",
      "\1\22\113\uffff\1\23",
      "",
      "",
      "",
      "")

    private val DFA182_eot = DFA.unpackEncodedString(DFA182_eotS)
    private val DFA182_eof = DFA.unpackEncodedString(DFA182_eofS)
    private val DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS)
    private val DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS)
    private val DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS)
    private val DFA182_special = DFA.unpackEncodedString(DFA182_specialS)
    private val DFA182_transition = new Array[Array[Short]](DFA182_transitionS.length)
    for (i <- DFA182_transition.indices) {
      DFA182_transition(i) = DFA.unpackEncodedString(DFA182_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 182
    this.eot = DFA182_eot
    this.eof = DFA182_eof
    this.min = DFA182_min
    this.max = DFA182_max
    this.accept = DFA182_accept
    this.special = DFA182_special
    this.transition = DFA182_transition

    val description = "1111:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | {...}? => ( v2008_subprogram_instantiation_declaration | package_declaration | package_body | v2008_package_instantiation_declaration ) | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA182_3 = input.LA(1)


          val index182_3 = _input.index()
          _input.rewind()
          s = -1
          if ((LA182_3 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA182_3 == STRING_LITERAL || (LA182_3 >= BASIC_IDENTIFIER && LA182_3 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index182_3)
          if (s >= 0) return s
        case 1 =>
          val LA182_0 = input.LA(1)


          val index182_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA182_0 == PROCEDURE)) {
            s = 1
          }

          else if ((LA182_0 == IMPURE || LA182_0 == PURE)) {
            s = 2
          }

          else if ((LA182_0 == FUNCTION)) {
            s = 3
          }

          else if ((LA182_0 == PACKAGE) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA182_0 == TYPE)) {
            s = 5
          }

          else if ((LA182_0 == SUBTYPE)) {
            s = 6
          }

          else if ((LA182_0 == CONSTANT)) {
            s = 7
          }

          else if ((LA182_0 == SHARED || LA182_0 == VARIABLE)) {
            s = 8
          }

          else if ((LA182_0 == FILE)) {
            s = 9
          }

          else if ((LA182_0 == ALIAS)) {
            s = 10
          }

          else if ((LA182_0 == ATTRIBUTE)) {
            s = 11
          }

          else if ((LA182_0 == USE)) {
            s = 12
          }

          else if ((LA182_0 == GROUP)) {
            s = 13
          }


          _input.seek(index182_0)
          if (s >= 0) return s
        case 2 =>
          val LA182_1 = input.LA(1)


          val index182_1 = _input.index()
          _input.rewind()
          s = -1
          if ((LA182_1 == IS) && ((vhdl2008))) {
            s = 4
          }

          else if (((LA182_1 >= BASIC_IDENTIFIER && LA182_1 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }


          _input.seek(index182_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 182, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA214(rec: BaseRecognizer) extends DFA {
    private val DFA214_eotS = "\15\uffff"
    private val DFA214_eofS = "\15\uffff"
    private val DFA214_minS = "\1\4\14\uffff"
    private val DFA214_maxS = "\1\u00b5\14\uffff"
    private val DFA214_acceptS = "\1\uffff\5\1\7\2"
    private val DFA214_specialS = "\1\0\14\uffff}>"
    private val DFA214_transitionS = Array("\1\12\2\uffff\1\3\1\uffff\1" +
      "\13\2\uffff\1\14\1\3\1\5\4\uffff\1\14\1\3\1\uffff\2\3\1\uffff\3\14\2\uffff" +
      "\2\3\1\1\2\uffff\1\3\1\uffff\1\14\1\1\13\uffff\1\13\1\12\1\uffff\1\13\2" +
      "\12\3\uffff\1\13\2\uffff\1\2\1\uffff\1\14\1\1\1\14\1\uffff\1\1\13\uffff" +
      "\2\3\4\uffff\1\3\3\uffff\1\3\3\uffff\2\3\1\uffff\1\14\1\uffff\1\14\2\13" +
      "\14\uffff\1\12\6\uffff\2\10\17\uffff\1\10\1\uffff\3\4\5\uffff\1\12\2\4\1" +
      "\uffff\1\7\1\14\4\uffff\4\12\2\6\21\uffff\1\11",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA214_eot = DFA.unpackEncodedString(DFA214_eotS)
    private val DFA214_eof = DFA.unpackEncodedString(DFA214_eofS)
    private val DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_minS)
    private val DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_maxS)
    private val DFA214_accept = DFA.unpackEncodedString(DFA214_acceptS)
    private val DFA214_special = DFA.unpackEncodedString(DFA214_specialS)
    private val DFA214_transition = new Array[Array[Short]](DFA214_transitionS.length)
    for (i <- DFA214_transition.indices) {
      DFA214_transition(i) = DFA.unpackEncodedString(DFA214_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 214
    this.eot = DFA214_eot
    this.eof = DFA214_eof
    this.min = DFA214_min
    this.max = DFA214_max
    this.accept = DFA214_accept
    this.special = DFA214_special
    this.transition = DFA214_transition

    val description = "1216:2: ( ( block_declarative_item )* BEGIN )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA214_0 = input.LA(1)


          val index214_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA214_0 == FUNCTION || LA214_0 == IMPURE || LA214_0 == PROCEDURE || LA214_0 == PURE)) {
            s = 1
          }

          else if ((LA214_0 == PACKAGE) && ((vhdl2008))) {
            s = 2
          }

          else if ((LA214_0 == ALIAS || LA214_0 == ATTRIBUTE || LA214_0 == COMPONENT || (LA214_0 >= CONSTANT && LA214_0 <= DISCONNECT) || (LA214_0 >= FILE && LA214_0 <= FOR) || LA214_0 == GROUP || (LA214_0 >= SHARED && LA214_0 <= SIGNAL) || LA214_0 == SUBTYPE || LA214_0 == TYPE || (LA214_0 >= USE && LA214_0 <= VARIABLE))) {
            s = 3
          }

          else if (((LA214_0 >= NATURE && LA214_0 <= QUANTITY) || (LA214_0 >= SUBNATURE && LA214_0 <= LIMIT)) && ((ams))) {
            s = 4
          }

          else if ((LA214_0 == BEGIN)) {
            s = 5
          }

          else if (((LA214_0 >= BASIC_IDENTIFIER && LA214_0 <= EXTENDED_IDENTIFIER))) {
            s = 6
          }

          else if ((LA214_0 == BREAK) && ((ams))) {
            s = 7
          }

          else if (((LA214_0 >= PLUS && LA214_0 <= MINUS) || LA214_0 == STRING_LITERAL)) {
            s = 8
          }

          else if ((LA214_0 == 181) && ((vhdl2008))) {
            s = 9
          }

          else if ((LA214_0 == ABS || LA214_0 == NEW || (LA214_0 >= NOT && LA214_0 <= NULL) || LA214_0 == LPAREN || LA214_0 == CHARACTER_LITERAL || (LA214_0 >= REAL_LITERAL && LA214_0 <= BIT_STRING_LITERAL))) {
            s = 10
          }

          else if ((LA214_0 == AND || LA214_0 == NAND || LA214_0 == NOR || LA214_0 == OR || (LA214_0 >= XNOR && LA214_0 <= XOR)) && ((vhdl2008))) {
            s = 11
          }

          else if ((LA214_0 == ASSERT || LA214_0 == CASE || (LA214_0 >= ELSE && LA214_0 <= END) || LA214_0 == IF || LA214_0 == POSTPONED || LA214_0 == PROCESS || LA214_0 == WHEN || LA214_0 == WITH || LA214_0 == PROCEDURAL)) {
            s = 12
          }


          _input.seek(index214_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 214, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA220(rec: BaseRecognizer) extends DFA {
    private val DFA220_eotS = "\13\uffff"
    private val DFA220_eofS = "\13\uffff"
    private val DFA220_minS = "\1\4\3\uffff\1\61\6\uffff"
    private val DFA220_maxS = "\1\u00b5\3\uffff\1\u00a3\6\uffff"
    private val DFA220_acceptS = "\1\uffff\3\1\1\uffff\1\1\1\2\1\3\1\4\1" +
      "\5\1\1"
    private val DFA220_specialS = "\1\0\12\uffff}>"
    private val DFA220_transitionS = Array("\1\3\4\uffff\1\5\11\uffff\1" +
      "\10\21\uffff\1\6\14\uffff\1\5\1\3\1\uffff\1\5\1\3\1\4\3\uffff\1\5\50\uffff" +
      "\2\5\14\uffff\1\3\6\uffff\2\1\17\uffff\1\1\11\uffff\1\3\4\uffff\1\7\4\uffff" +
      "\4\3\2\1\21\uffff\1\2",
      "",
      "",
      "",
      "\1\12\27\uffff\1\12\34\uffff\2\12\7\uffff\1\11\1\uffff\1\12\5\uffff\4" +
        "\12\17\uffff\1\12\27\uffff\2\12",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA220_eot = DFA.unpackEncodedString(DFA220_eotS)
    private val DFA220_eof = DFA.unpackEncodedString(DFA220_eofS)
    private val DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS)
    private val DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS)
    private val DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS)
    private val DFA220_special = DFA.unpackEncodedString(DFA220_specialS)
    private val DFA220_transition = new Array[Array[Short]](DFA220_transitionS.length)
    for (i <- DFA220_transition.indices) {
      DFA220_transition(i) = DFA.unpackEncodedString(DFA220_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 220
    this.eot = DFA220_eot
    this.eof = DFA220_eof
    this.min = DFA220_min
    this.max = DFA220_max
    this.accept = DFA220_accept
    this.special = DFA220_special
    this.transition = DFA220_transition

    val description = "1232:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA220_0 = input.LA(1)


          val index220_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA220_0 >= PLUS && LA220_0 <= MINUS) || LA220_0 == STRING_LITERAL || (LA220_0 >= BASIC_IDENTIFIER && LA220_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA220_0 == 181) && ((vhdl2008))) {
            s = 2
          }

          else if ((LA220_0 == ABS || LA220_0 == NEW || LA220_0 == NOT || LA220_0 == LPAREN || LA220_0 == CHARACTER_LITERAL || (LA220_0 >= REAL_LITERAL && LA220_0 <= BIT_STRING_LITERAL))) {
            s = 3
          }

          else if ((LA220_0 == NULL)) {
            s = 4
          }

          else if ((LA220_0 == AND || LA220_0 == NAND || LA220_0 == NOR || LA220_0 == OR || (LA220_0 >= XNOR && LA220_0 <= XOR)) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA220_0 == IF)) {
            s = 6
          }

          else if ((LA220_0 == PROCEDURAL)) {
            s = 7
          }

          else if ((LA220_0 == CASE)) {
            s = 8
          }


          _input.seek(index220_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 220, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA232(rec: BaseRecognizer) extends DFA {
    private val DFA232_eotS = "\20\uffff"
    private val DFA232_eofS = "\20\uffff"
    private val DFA232_minS = "\1\7\6\uffff\1\u00a2\1\uffff\1\u00a2\1\70" +
      "\1\52\4\uffff"
    private val DFA232_maxS = "\1\137\6\uffff\1\u00a3\1\uffff\1\u00a3\2" +
      "\166\4\uffff"
    private val DFA232_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff" +
      "\1\11\3\uffff\1\7\1\10\1\12\1\13"
    private val DFA232_specialS = "\20\uffff}>"
    private val DFA232_transitionS = Array("\1\6\5\uffff\1\7\10\uffff\1" +
      "\4\11\uffff\1\1\2\uffff\1\11\2\uffff\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff" +
      "\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\10\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "\2\12",
      "",
      "\2\13",
      "\1\15\75\uffff\1\14",
      "\1\16\113\uffff\1\17",
      "",
      "",
      "",
      "")

    private val DFA232_eot = DFA.unpackEncodedString(DFA232_eotS)
    private val DFA232_eof = DFA.unpackEncodedString(DFA232_eofS)
    private val DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS)
    private val DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS)
    private val DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS)
    private val DFA232_special = DFA.unpackEncodedString(DFA232_specialS)
    private val DFA232_transition = new Array[Array[Short]](DFA232_transitionS.length)
    for (i <- DFA232_transition.indices) {
      DFA232_transition(i) = DFA.unpackEncodedString(DFA232_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 232
    this.eot = DFA232_eot
    this.eof = DFA232_eof
    this.min = DFA232_min
    this.max = DFA232_max
    this.accept = DFA232_accept
    this.special = DFA232_special
    this.transition = DFA232_transition

    val description = "1285:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

  }

  final private class DFA234(rec: BaseRecognizer) extends DFA {
    private val DFA234_eotS = "\12\uffff"
    private val DFA234_eofS = "\12\uffff"
    private val DFA234_minS = "\1\14\1\150\10\uffff"
    private val DFA234_maxS = "\1\u00b5\1\u009d\10\uffff"
    private val DFA234_acceptS = "\2\uffff\6\2\1\1\1\2"
    private val DFA234_specialS = "\1\0\11\uffff}>"
    private val DFA234_transitionS = Array("\1\2\6\uffff\1\6\11\uffff\1" +
      "\6\1\uffff\1\6\5\uffff\1\6\11\uffff\1\6\4\uffff\1\6\2\uffff\1\6\22\uffff" +
      "\1\2\1\6\24\uffff\1\2\1\uffff\1\6\1\5\16\uffff\1\4\27\uffff\1\2\15\uffff" +
      "\1\7\11\uffff\2\1\21\uffff\1\3",
      "\1\11\3\uffff\1\11\2\uffff\1\11\2\uffff\1\11\1\uffff\1\11\1\uffff\1\10" +
        "\10\uffff\1\11\35\uffff\1\11",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA234_eot = DFA.unpackEncodedString(DFA234_eotS)
    private val DFA234_eof = DFA.unpackEncodedString(DFA234_eofS)
    private val DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS)
    private val DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS)
    private val DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS)
    private val DFA234_special = DFA.unpackEncodedString(DFA234_specialS)
    private val DFA234_transition = new Array[Array[Short]](DFA234_transitionS.length)
    for (i <- DFA234_transition.indices) {
      DFA234_transition(i) = DFA.unpackEncodedString(DFA234_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 234
    this.eot = DFA234_eot
    this.eof = DFA234_eof
    this.min = DFA234_min
    this.max = DFA234_max
    this.accept = DFA234_accept
    this.special = DFA234_special
    this.transition = DFA234_transition

    val description = "1311:7: (label= label_colon )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA234_0 = input.LA(1)


          val index234_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA234_0 >= BASIC_IDENTIFIER && LA234_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA234_0 == ASSERT || LA234_0 == REPORT || LA234_0 == WAIT || LA234_0 == STRING_LITERAL)) {
            s = 2
          }

          else if ((LA234_0 == 181) && ((vhdl2008))) {
            s = 3
          }

          else if ((LA234_0 == LPAREN)) {
            s = 4
          }

          else if ((LA234_0 == WITH) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA234_0 == CASE || LA234_0 == EXIT || LA234_0 == FOR || LA234_0 == IF || LA234_0 == LOOP || LA234_0 == NEXT || LA234_0 == NULL || LA234_0 == RETURN || LA234_0 == WHILE)) {
            s = 6
          }

          else if ((LA234_0 == BREAK) && ((ams))) {
            s = 7
          }


          _input.seek(index234_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 234, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA235(rec: BaseRecognizer) extends DFA {
    private val DFA235_eotS = "\26\uffff"
    private val DFA235_eofS = "\26\uffff"
    private val DFA235_minS = "\1\14\3\uffff\5\0\15\uffff"
    private val DFA235_maxS = "\1\u00b5\3\uffff\5\0\15\uffff"
    private val DFA235_acceptS = "\1\uffff\1\1\1\2\1\3\5\uffff\1\6\1\7\1" +
      "\10\2\uffff\1\11\1\12\1\13\1\14\1\16\1\4\1\5\1\15"
    private val DFA235_specialS = "\1\0\3\uffff\1\1\1\2\1\3\1\4\1\5\15\uffff}>"
    private val DFA235_transitionS = Array("\1\2\6\uffff\1\12\11\uffff\1" +
      "\17\1\uffff\1\13\5\uffff\1\11\11\uffff\1\13\4\uffff\1\16\2\uffff\1\21\22" +
      "\uffff\1\3\1\20\24\uffff\1\1\1\uffff\1\13\1\10\16\uffff\1\7\27\uffff\1\5" +
      "\15\uffff\1\22\11\uffff\2\4\21\uffff\1\6",
      "",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA235_eot = DFA.unpackEncodedString(DFA235_eotS)
    private val DFA235_eof = DFA.unpackEncodedString(DFA235_eofS)
    private val DFA235_min = DFA.unpackEncodedStringToUnsignedChars(DFA235_minS)
    private val DFA235_max = DFA.unpackEncodedStringToUnsignedChars(DFA235_maxS)
    private val DFA235_accept = DFA.unpackEncodedString(DFA235_acceptS)
    private val DFA235_special = DFA.unpackEncodedString(DFA235_specialS)
    private val DFA235_transition = new Array[Array[Short]](DFA235_transitionS.length)
    for (i <- DFA235_transition.indices) {
      DFA235_transition(i) = DFA.unpackEncodedString(DFA235_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 235
    this.eot = DFA235_eot
    this.eof = DFA235_eof
    this.min = DFA235_min
    this.max = DFA235_max
    this.accept = DFA235_accept
    this.special = DFA235_special
    this.transition = DFA235_transition

    val description = "1312:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ | WITH )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN | WITH )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA235_0 = input.LA(1)


          val index235_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA235_0 == WAIT)) {
            s = 1
          }

          else if ((LA235_0 == ASSERT)) {
            s = 2
          }

          else if ((LA235_0 == REPORT)) {
            s = 3
          }

          else if (((LA235_0 >= BASIC_IDENTIFIER && LA235_0 <= EXTENDED_IDENTIFIER))) {
            s = 4
          }

          else if ((LA235_0 == STRING_LITERAL)) {
            s = 5
          }

          else if ((LA235_0 == 181)) {
            s = 6
          }

          else if ((LA235_0 == LPAREN)) {
            s = 7
          }

          else if ((LA235_0 == WITH)) {
            s = 8
          }

          else if ((LA235_0 == IF)) {
            s = 9
          }

          else if ((LA235_0 == CASE)) {
            s = 10
          }

          else if ((LA235_0 == FOR || LA235_0 == LOOP || LA235_0 == WHILE)) {
            s = 11
          }

          else if ((LA235_0 == NEXT)) {
            s = 14
          }

          else if ((LA235_0 == EXIT)) {
            s = 15
          }

          else if ((LA235_0 == RETURN)) {
            s = 16
          }

          else if ((LA235_0 == NULL)) {
            s = 17
          }

          else if ((LA235_0 == BREAK) && ((ams))) {
            s = 18
          }


          _input.seek(index235_0)
          if (s >= 0) return s
        case 1 =>
          val LA235_4 = input.LA(1)


          val index235_4 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((((synpred14_VHDL() && (vhdl2008)) || synpred14_VHDL()))) {
            s = 20
          }

          else if ((true)) {
            s = 21
          }


          _input.seek(index235_4)
          if (s >= 0) return s
        case 2 =>
          val LA235_5 = input.LA(1)


          val index235_5 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((((synpred14_VHDL() && (vhdl2008)) || synpred14_VHDL()))) {
            s = 20
          }

          else if ((true)) {
            s = 21
          }


          _input.seek(index235_5)
          if (s >= 0) return s
        case 3 =>
          val LA235_6 = input.LA(1)


          val index235_6 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred13_VHDL() && (vhdl2008)))) {
            s = 19
          }

          else if (((((synpred14_VHDL() && (vhdl2008)) && (vhdl2008)) || (synpred14_VHDL() && (vhdl2008))))) {
            s = 20
          }


          _input.seek(index235_6)
          if (s >= 0) return s
        case 4 =>
          val LA235_7 = input.LA(1)


          val index235_7 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((((synpred14_VHDL() && (vhdl2008)) || synpred14_VHDL()))) {
            s = 20
          }


          _input.seek(index235_7)
          if (s >= 0) return s
        case 5 =>
          val LA235_8 = input.LA(1)


          val index235_8 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred13_VHDL() && (vhdl2008)))) {
            s = 19
          }

          else if (((synpred14_VHDL() && (vhdl2008)))) {
            s = 20
          }


          _input.seek(index235_8)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 235, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA248(rec: BaseRecognizer) extends DFA {
    private val DFA248_eotS = "\36\uffff"
    private val DFA248_eofS = "\36\uffff"
    private val DFA248_minS = "\1\4\2\uffff\32\0\1\uffff"
    private val DFA248_maxS = "\1\u00b5\2\uffff\32\0\1\uffff"
    private val DFA248_acceptS = "\1\uffff\1\1\33\uffff\1\2"
    private val DFA248_specialS = "\1\0\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6" +
      "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
      "\1\25\1\26\1\27\1\30\1\31\1\32\1\uffff}>"
    private val DFA248_transitionS = Array("\1\23\4\uffff\1\27\36\uffff" +
      "\1\5\11\uffff\1\25\1\21\1\uffff\1\26\1\24\1\20\3\uffff\1\30\14\uffff\1\4" +
      "\20\uffff\1\3\1\uffff\1\34\10\uffff\1\32\1\31\14\uffff\1\22\6\uffff\1\6" +
      "\1\7\15\uffff\1\33\1\uffff\1\11\11\uffff\1\16\5\uffff\2\1\2\uffff\1\13\1" +
      "\14\1\15\1\17\2\10\21\uffff\1\12",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "")

    private val DFA248_eot = DFA.unpackEncodedString(DFA248_eotS)
    private val DFA248_eof = DFA.unpackEncodedString(DFA248_eofS)
    private val DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS)
    private val DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS)
    private val DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS)
    private val DFA248_special = DFA.unpackEncodedString(DFA248_specialS)
    private val DFA248_transition = new Array[Array[Short]](DFA248_transitionS.length)
    for (i <- DFA248_transition.indices) {
      DFA248_transition(i) = DFA.unpackEncodedString(DFA248_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 248
    this.eot = DFA248_eot
    this.eof = DFA248_eof
    this.min = DFA248_min
    this.max = DFA248_max
    this.accept = DFA248_accept
    this.special = DFA248_special
    this.transition = DFA248_transition

    val description = "1349:3: ({...}? => ( RELEASE ( IN | OUT )? | FORCE ( IN | OUT )? v2008_conditional_expressions | ( delay_mechanism )? conditional_waveforms[elements] ) | (delay= delay_mechanism )? waveform )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA248_0 = input.LA(1)


          val index248_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA248_0 >= RELEASE && LA248_0 <= FORCE)) && ((vhdl2008))) {
            s = 1
          }

          else if ((LA248_0 == TRANSPORT)) {
            s = 3
          }

          else if ((LA248_0 == REJECT)) {
            s = 4
          }

          else if ((LA248_0 == INERTIAL)) {
            s = 5
          }

          else if ((LA248_0 == PLUS)) {
            s = 6
          }

          else if ((LA248_0 == MINUS)) {
            s = 7
          }

          else if (((LA248_0 >= BASIC_IDENTIFIER && LA248_0 <= EXTENDED_IDENTIFIER))) {
            s = 8
          }

          else if ((LA248_0 == STRING_LITERAL)) {
            s = 9
          }

          else if ((LA248_0 == 181) && ((vhdl2008))) {
            s = 10
          }

          else if ((LA248_0 == REAL_LITERAL)) {
            s = 11
          }

          else if ((LA248_0 == INTEGER_LITERAL)) {
            s = 12
          }

          else if ((LA248_0 == BASED_LITERAL)) {
            s = 13
          }

          else if ((LA248_0 == CHARACTER_LITERAL)) {
            s = 14
          }

          else if ((LA248_0 == BIT_STRING_LITERAL)) {
            s = 15
          }

          else if ((LA248_0 == NULL)) {
            s = 16
          }

          else if ((LA248_0 == NEW)) {
            s = 17
          }

          else if ((LA248_0 == LPAREN)) {
            s = 18
          }

          else if ((LA248_0 == ABS)) {
            s = 19
          }

          else if ((LA248_0 == NOT)) {
            s = 20
          }

          else if ((LA248_0 == NAND) && ((vhdl2008))) {
            s = 21
          }

          else if ((LA248_0 == NOR) && ((vhdl2008))) {
            s = 22
          }

          else if ((LA248_0 == AND) && ((vhdl2008))) {
            s = 23
          }

          else if ((LA248_0 == OR) && ((vhdl2008))) {
            s = 24
          }

          else if ((LA248_0 == XOR) && ((vhdl2008))) {
            s = 25
          }

          else if ((LA248_0 == XNOR) && ((vhdl2008))) {
            s = 26
          }

          else if ((LA248_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            s = 27
          }

          else if ((LA248_0 == UNAFFECTED)) {
            s = 28
          }


          _input.seek(index248_0)
          if (s >= 0) return s
        case 1 =>
          val LA248_3 = input.LA(1)


          val index248_3 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_3)
          if (s >= 0) return s
        case 2 =>
          val LA248_4 = input.LA(1)


          val index248_4 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_4)
          if (s >= 0) return s
        case 3 =>
          val LA248_5 = input.LA(1)


          val index248_5 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_5)
          if (s >= 0) return s
        case 4 =>
          val LA248_6 = input.LA(1)


          val index248_6 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_6)
          if (s >= 0) return s
        case 5 =>
          val LA248_7 = input.LA(1)


          val index248_7 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_7)
          if (s >= 0) return s
        case 6 =>
          val LA248_8 = input.LA(1)


          val index248_8 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_8)
          if (s >= 0) return s
        case 7 =>
          val LA248_9 = input.LA(1)


          val index248_9 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_9)
          if (s >= 0) return s
        case 8 =>
          val LA248_10 = input.LA(1)


          val index248_10 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_10)
          if (s >= 0) return s
        case 9 =>
          val LA248_11 = input.LA(1)


          val index248_11 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_11)
          if (s >= 0) return s
        case 10 =>
          val LA248_12 = input.LA(1)


          val index248_12 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_12)
          if (s >= 0) return s
        case 11 =>
          val LA248_13 = input.LA(1)


          val index248_13 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_13)
          if (s >= 0) return s
        case 12 =>
          val LA248_14 = input.LA(1)


          val index248_14 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_14)
          if (s >= 0) return s
        case 13 =>
          val LA248_15 = input.LA(1)


          val index248_15 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_15)
          if (s >= 0) return s
        case 14 =>
          val LA248_16 = input.LA(1)


          val index248_16 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_16)
          if (s >= 0) return s
        case 15 =>
          val LA248_17 = input.LA(1)


          val index248_17 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_17)
          if (s >= 0) return s
        case 16 =>
          val LA248_18 = input.LA(1)


          val index248_18 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_18)
          if (s >= 0) return s
        case 17 =>
          val LA248_19 = input.LA(1)


          val index248_19 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_19)
          if (s >= 0) return s
        case 18 =>
          val LA248_20 = input.LA(1)


          val index248_20 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_20)
          if (s >= 0) return s
        case 19 =>
          val LA248_21 = input.LA(1)


          val index248_21 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_21)
          if (s >= 0) return s
        case 20 =>
          val LA248_22 = input.LA(1)


          val index248_22 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_22)
          if (s >= 0) return s
        case 21 =>
          val LA248_23 = input.LA(1)


          val index248_23 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_23)
          if (s >= 0) return s
        case 22 =>
          val LA248_24 = input.LA(1)


          val index248_24 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_24)
          if (s >= 0) return s
        case 23 =>
          val LA248_25 = input.LA(1)


          val index248_25 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_25)
          if (s >= 0) return s
        case 24 =>
          val LA248_26 = input.LA(1)


          val index248_26 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_26)
          if (s >= 0) return s
        case 25 =>
          val LA248_27 = input.LA(1)


          val index248_27 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if (((vhdl2008))) {
            s = 29
          }


          _input.seek(index248_27)
          if (s >= 0) return s
        case 26 =>
          val LA248_28 = input.LA(1)


          val index248_28 = _input.index()
          _input.rewind()
          s = -1
          if (((vhdl2008))) {
            s = 1
          }

          else if ((true)) {
            s = 29
          }


          _input.seek(index248_28)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 248, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA287(rec: BaseRecognizer) extends DFA {
    private val DFA287_eotS = "\17\uffff"
    private val DFA287_eofS = "\17\uffff"
    private val DFA287_minS = "\1\26\1\uffff\1\0\14\uffff"
    private val DFA287_maxS = "\1\u00a3\1\uffff\1\0\14\uffff"
    private val DFA287_acceptS = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1" +
      "\uffff\1\6\6\uffff"
    private val DFA287_specialS = "\1\0\1\uffff\1\1\14\uffff}>"
    private val DFA287_transitionS = Array("\1\3\7\uffff\1\5\1\uffff\1\10" +
      "\5\uffff\1\10\27\uffff\1\10\2\uffff\1\10\2\uffff\1\10\14\uffff\1\4\10\uffff" +
      "\1\10\4\uffff\1\1\17\uffff\1\10\3\uffff\1\10\31\uffff\2\6\23\uffff\2\2",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA287_eot = DFA.unpackEncodedString(DFA287_eotS)
    private val DFA287_eof = DFA.unpackEncodedString(DFA287_eofS)
    private val DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS)
    private val DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS)
    private val DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS)
    private val DFA287_special = DFA.unpackEncodedString(DFA287_specialS)
    private val DFA287_transition = new Array[Array[Short]](DFA287_transitionS.length)
    for (i <- DFA287_transition.indices) {
      DFA287_transition(i) = DFA.unpackEncodedString(DFA287_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 287
    this.eot = DFA287_eot
    this.eof = DFA287_eof
    this.min = DFA287_min
    this.max = DFA287_max
    this.accept = DFA287_accept
    this.special = DFA287_special
    this.transition = DFA287_transition

    val description = "1503:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( VARIABLE | identifier_list COLON ( OUT | INOUT ) )=> interface_variable_declaration | interface_constant_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) | {...}? => ( | v2008_interface_type_declaration | v2008_interface_subprogram_declaration | v2008_interface_package_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA287_0 = input.LA(1)


          val index287_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA287_0 == VARIABLE) && (synpred15_VHDL())) {
            s = 1
          }

          else if (((LA287_0 >= BASIC_IDENTIFIER && LA287_0 <= EXTENDED_IDENTIFIER))) {
            s = 2
          }

          else if ((LA287_0 == CONSTANT)) {
            s = 3
          }

          else if ((LA287_0 == SIGNAL)) {
            s = 4
          }

          else if ((LA287_0 == FILE)) {
            s = 5
          }

          else if (((LA287_0 >= TERMINAL && LA287_0 <= QUANTITY)) && ((ams))) {
            s = 6
          }

          else if ((LA287_0 == FUNCTION || LA287_0 == IMPURE || LA287_0 == PACKAGE || LA287_0 == PROCEDURE || LA287_0 == PURE || LA287_0 == TYPE || LA287_0 == SEMICOLON || LA287_0 == RPAREN) && ((vhdl2008))) {
            s = 8
          }


          _input.seek(index287_0)
          if (s >= 0) return s
        case 1 =>
          val LA287_2 = input.LA(1)


          val index287_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred15_VHDL())) {
            s = 1
          }

          else if ((true)) {
            s = 3
          }


          _input.seek(index287_2)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 287, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA320(rec: BaseRecognizer) extends DFA {
    private val DFA320_eotS = "\12\uffff"
    private val DFA320_eofS = "\12\uffff"
    private val DFA320_minS = "\1\4\11\uffff"
    private val DFA320_maxS = "\1\u00b5\11\uffff"
    private val DFA320_acceptS = "\1\uffff\7\1\1\2\1\3"
    private val DFA320_specialS = "\1\0\11\uffff}>"
    private val DFA320_transitionS = Array("\1\5\4\uffff\1\6\36\uffff\1" +
      "\2\11\uffff\1\6\1\5\1\uffff\1\6\2\5\2\uffff\1\7\1\6\50\uffff\2\6\7\uffff" +
      "\1\10\4\uffff\1\5\6\uffff\2\3\15\uffff\1\6\1\uffff\1\1\11\uffff\1\5\7\uffff" +
      "\1\11\1\uffff\4\5\2\1\21\uffff\1\4",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA320_eot = DFA.unpackEncodedString(DFA320_eotS)
    private val DFA320_eof = DFA.unpackEncodedString(DFA320_eofS)
    private val DFA320_min = DFA.unpackEncodedStringToUnsignedChars(DFA320_minS)
    private val DFA320_max = DFA.unpackEncodedStringToUnsignedChars(DFA320_maxS)
    private val DFA320_accept = DFA.unpackEncodedString(DFA320_acceptS)
    private val DFA320_special = DFA.unpackEncodedString(DFA320_specialS)
    private val DFA320_transition = new Array[Array[Short]](DFA320_transitionS.length)
    for (i <- DFA320_transition.indices) {
      DFA320_transition(i) = DFA.unpackEncodedString(DFA320_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 320
    this.eot = DFA320_eot
    this.eof = DFA320_eof
    this.min = DFA320_min
    this.max = DFA320_max
    this.accept = DFA320_accept
    this.special = DFA320_special
    this.transition = DFA320_transition

    val description = "1600:22: (generic_association_list= association_list | BOX | DEFAULT )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA320_0 = input.LA(1)


          val index320_0 = _input.index()
          _input.rewind()
          s = -1
          if ((LA320_0 == STRING_LITERAL || (LA320_0 >= BASIC_IDENTIFIER && LA320_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA320_0 == INERTIAL) && ((vhdl2008))) {
            s = 2
          }

          else if (((LA320_0 >= PLUS && LA320_0 <= MINUS))) {
            s = 3
          }

          else if ((LA320_0 == 181) && ((vhdl2008))) {
            s = 4
          }

          else if ((LA320_0 == ABS || LA320_0 == NEW || (LA320_0 >= NOT && LA320_0 <= NULL) || LA320_0 == LPAREN || LA320_0 == CHARACTER_LITERAL || (LA320_0 >= REAL_LITERAL && LA320_0 <= BIT_STRING_LITERAL))) {
            s = 5
          }

          else if ((LA320_0 == AND || LA320_0 == NAND || LA320_0 == NOR || LA320_0 == OR || (LA320_0 >= XNOR && LA320_0 <= XOR) || LA320_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            s = 6
          }

          else if ((LA320_0 == OPEN)) {
            s = 7
          }

          else if ((LA320_0 == BOX)) {
            s = 8
          }

          else if ((LA320_0 == DEFAULT)) {
            s = 9
          }


          _input.seek(index320_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 320, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA321(rec: BaseRecognizer) extends DFA {
    private val DFA321_eotS = "\32\uffff"
    private val DFA321_eofS = "\32\uffff"
    private val DFA321_minS = "\1\4\2\0\27\uffff"
    private val DFA321_maxS = "\1\u00b5\2\0\27\uffff"
    private val DFA321_acceptS = "\3\uffff\2\2\1\uffff\2\2\11\uffff\1\2" +
      "\6\uffff\1\2\1\1"
    private val DFA321_specialS = "\1\0\1\1\1\2\27\uffff}>"
    private val DFA321_transitionS = Array("\1\7\4\uffff\1\21\36\uffff\1" +
      "\3\11\uffff\1\21\1\7\1\uffff\1\21\2\7\2\uffff\1\30\1\21\50\uffff\2\21\14" +
      "\uffff\1\7\6\uffff\2\4\15\uffff\1\21\1\uffff\1\2\11\uffff\1\7\11\uffff\4" +
      "\7\2\1\21\uffff\1\6",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA321_eot = DFA.unpackEncodedString(DFA321_eotS)
    private val DFA321_eof = DFA.unpackEncodedString(DFA321_eofS)
    private val DFA321_min = DFA.unpackEncodedStringToUnsignedChars(DFA321_minS)
    private val DFA321_max = DFA.unpackEncodedStringToUnsignedChars(DFA321_maxS)
    private val DFA321_accept = DFA.unpackEncodedString(DFA321_acceptS)
    private val DFA321_special = DFA.unpackEncodedString(DFA321_specialS)
    private val DFA321_transition = new Array[Array[Short]](DFA321_transitionS.length)
    for (i <- DFA321_transition.indices) {
      DFA321_transition(i) = DFA.unpackEncodedString(DFA321_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 321
    this.eot = DFA321_eot
    this.eof = DFA321_eof
    this.min = DFA321_min
    this.max = DFA321_max
    this.accept = DFA321_accept
    this.special = DFA321_special
    this.transition = DFA321_transition

    val description = "1603:2: ( ( formal_part ARROW )=> formal_part ARROW )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA321_0 = input.LA(1)


          val index321_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA321_0 >= BASIC_IDENTIFIER && LA321_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA321_0 == STRING_LITERAL)) {
            s = 2
          }

          else if ((LA321_0 == INERTIAL) && ((vhdl2008))) {
            s = 3
          }

          else if (((LA321_0 >= PLUS && LA321_0 <= MINUS))) {
            s = 4
          }

          else if ((LA321_0 == 181) && ((vhdl2008))) {
            s = 6
          }

          else if ((LA321_0 == ABS || LA321_0 == NEW || (LA321_0 >= NOT && LA321_0 <= NULL) || LA321_0 == LPAREN || LA321_0 == CHARACTER_LITERAL || (LA321_0 >= REAL_LITERAL && LA321_0 <= BIT_STRING_LITERAL))) {
            s = 7
          }

          else if ((LA321_0 == AND || LA321_0 == NAND || LA321_0 == NOR || LA321_0 == OR || (LA321_0 >= XNOR && LA321_0 <= XOR) || LA321_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            s = 17
          }

          else if ((LA321_0 == OPEN)) {
            s = 24
          }


          _input.seek(index321_0)
          if (s >= 0) return s
        case 1 =>
          val LA321_1 = input.LA(1)


          val index321_1 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred16_VHDL())) {
            s = 25
          }

          else if ((true)) {
            s = 24
          }


          _input.seek(index321_1)
          if (s >= 0) return s
        case 2 =>
          val LA321_2 = input.LA(1)


          val index321_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred16_VHDL())) {
            s = 25
          }

          else if ((true)) {
            s = 24
          }


          _input.seek(index321_2)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 321, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA345(rec: BaseRecognizer) extends DFA {
    private val DFA345_eotS = "\17\uffff"
    private val DFA345_eofS = "\1\uffff\2\11\7\uffff\4\11\1\uffff"
    private val DFA345_minS = "\1\63\2\6\4\uffff\1\10\1\105\1\uffff\4\6" +
      "\1\uffff"
    private val DFA345_maxS = "\1\u00b5\2\u00b6\4\uffff\2\u00a3\1\uffff" +
      "\4\u00b6\1\uffff"
    private val DFA345_acceptS = "\3\uffff\1\2\1\3\1\4\1\5\2\uffff\1\2\4" +
      "\uffff\1\1"
    private val DFA345_specialS = "\1\0\16\uffff}>"
    private val DFA345_transitionS = Array("\1\5\3\uffff\1\4\72\uffff\1" +
      "\6\27\uffff\1\2\11\uffff\1\4\11\uffff\4\4\2\1\21\uffff\1\3",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "",
      "",
      "",
      "",
      "\1\15\u0081\uffff\1\14\11\uffff\1\13\15\uffff\2\12",
      "\1\11\54\uffff\1\16\34\uffff\3\11\5\uffff\1\11\12\uffff\2\11",
      "",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "\1\11\2\uffff\1\11\10\uffff\1\11\5\uffff\2\11\5\uffff\1\11\1\uffff\1\11" +
        "\6\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\2\11\2\uffff\1\11\3\uffff" +
        "\3\11\13\uffff\1\11\1\uffff\2\11\1\uffff\4\11\2\uffff\4\11\1\uffff\2\11" +
        "\3\uffff\1\11\1\uffff\1\11\2\uffff\1\11\2\uffff\11\11\2\uffff\6\11\2\uffff" +
        "\10\11\1\7\6\11\11\uffff\5\11\11\uffff\1\10\30\uffff\1\11",
      "")

    private val DFA345_eot = DFA.unpackEncodedString(DFA345_eotS)
    private val DFA345_eof = DFA.unpackEncodedString(DFA345_eofS)
    private val DFA345_min = DFA.unpackEncodedStringToUnsignedChars(DFA345_minS)
    private val DFA345_max = DFA.unpackEncodedStringToUnsignedChars(DFA345_maxS)
    private val DFA345_accept = DFA.unpackEncodedString(DFA345_acceptS)
    private val DFA345_special = DFA.unpackEncodedString(DFA345_specialS)
    private val DFA345_transition = new Array[Array[Short]](DFA345_transitionS.length)
    for (i <- DFA345_transition.indices) {
      DFA345_transition(i) = DFA.unpackEncodedString(DFA345_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 345
    this.eot = DFA345_eot
    this.eof = DFA345_eof
    this.min = DFA345_min
    this.max = DFA345_max
    this.accept = DFA345_accept
    this.special = DFA345_special
    this.transition = DFA345_transition

    val description = "1731:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA345_0 = input.LA(1)


          val index345_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA345_0 >= BASIC_IDENTIFIER && LA345_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA345_0 == STRING_LITERAL)) {
            s = 2
          }

          else if ((LA345_0 == 181) && ((vhdl2008))) {
            s = 3
          }

          else if ((LA345_0 == NULL || LA345_0 == CHARACTER_LITERAL || (LA345_0 >= REAL_LITERAL && LA345_0 <= BIT_STRING_LITERAL))) {
            s = 4
          }

          else if ((LA345_0 == NEW)) {
            s = 5
          }

          else if ((LA345_0 == LPAREN)) {
            s = 6
          }


          _input.seek(index345_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 345, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA351(rec: BaseRecognizer) extends DFA {
    private val DFA351_eotS = "\34\uffff"
    private val DFA351_eofS = "\1\1\33\uffff"
    private val DFA351_minS = "\1\6\1\uffff\1\113\1\uffff\2\113\1\u008a" +
      "\1\157\1\10\1\u008a\2\165\6\113\2\10\4\165\4\113"
    private val DFA351_maxS = "\1\u00b6\1\uffff\1\u00a3\1\uffff\2\177\1" +
      "\u00a3\1\u009d\2\u00a3\10\177\2\u00a3\10\177"
    private val DFA351_acceptS = "\1\uffff\1\2\1\uffff\1\1\30\uffff"
    private val DFA351_specialS = "\34\uffff}>"
    private val DFA351_transitionS = Array("\1\1\2\uffff\1\1\10\uffff\1" +
      "\1\5\uffff\2\1\5\uffff\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1" +
      "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\3\1\13\uffff\1\1\1\uffff\2\1\1\uffff" +
      "\4\1\2\uffff\4\1\1\uffff\2\1\3\uffff\3\1\2\uffff\1\1\2\uffff\11\1\2\uffff" +
      "\3\1\1\3\1\1\1\2\2\uffff\10\1\1\3\6\1\11\uffff\5\1\11\uffff\1\3\30\uffff" +
      "\1\1",
      "",
      "\1\6\51\uffff\1\7\24\uffff\1\5\27\uffff\2\4",
      "",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\13\27\uffff\2\12",
      "\1\1\55\uffff\1\3",
      "\1\17\u0081\uffff\1\16\11\uffff\1\15\15\uffff\2\14",
      "\1\21\27\uffff\2\20",
      "\1\7\11\uffff\1\22",
      "\1\7\11\uffff\1\22",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\10",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23",
      "\1\27\u0081\uffff\1\26\11\uffff\1\25\15\uffff\2\24",
      "\1\33\u0081\uffff\1\32\11\uffff\1\31\15\uffff\2\30",
      "\1\7\11\uffff\1\22",
      "\1\7\11\uffff\1\22",
      "\1\7\11\uffff\1\22",
      "\1\7\11\uffff\1\22",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23",
      "\1\6\44\uffff\1\11\4\uffff\1\7\11\uffff\1\23")

    private val DFA351_eot = DFA.unpackEncodedString(DFA351_eotS)
    private val DFA351_eof = DFA.unpackEncodedString(DFA351_eofS)
    private val DFA351_min = DFA.unpackEncodedStringToUnsignedChars(DFA351_minS)
    private val DFA351_max = DFA.unpackEncodedStringToUnsignedChars(DFA351_maxS)
    private val DFA351_accept = DFA.unpackEncodedString(DFA351_acceptS)
    private val DFA351_special = DFA.unpackEncodedString(DFA351_specialS)
    private val DFA351_transition = new Array[Array[Short]](DFA351_transitionS.length)
    for (i <- DFA351_transition.indices) {
      DFA351_transition(i) = DFA.unpackEncodedString(DFA351_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 351
    this.eot = DFA351_eot
    this.eof = DFA351_eof
    this.min = DFA351_min
    this.max = DFA351_max
    this.accept = DFA351_accept
    this.special = DFA351_special
    this.transition = DFA351_transition

    val description = "()* loopback of 1774:14: ( name_part )*"

  }

  final private class DFA359(rec: BaseRecognizer) extends DFA {
    private val DFA359_eotS = "\104\uffff"
    private val DFA359_eofS = "\1\2\103\uffff"
    private val DFA359_minS = "\1\6\1\0\102\uffff"
    private val DFA359_maxS = "\1\u00b6\1\0\102\uffff"
    private val DFA359_acceptS = "\2\uffff\1\2\100\uffff\1\1"
    private val DFA359_specialS = "\1\uffff\1\0\102\uffff}>"
    private val DFA359_transitionS = Array("\1\2\2\uffff\1\2\10\uffff\1" +
      "\2\5\uffff\2\2\5\uffff\1\2\1\uffff\1\2\6\uffff\1\2\1\uffff\1\2\4\uffff\1" +
      "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\3\2\13\uffff\1\2\1\uffff\2\2\1\uffff" +
      "\4\2\2\uffff\4\2\1\uffff\2\2\3\uffff\3\2\2\uffff\1\2\2\uffff\11\2\2\uffff" +
      "\3\2\1\1\2\2\2\uffff\17\2\11\uffff\5\2\11\uffff\1\2\30\uffff\1\2",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA359_eot = DFA.unpackEncodedString(DFA359_eotS)
    private val DFA359_eof = DFA.unpackEncodedString(DFA359_eofS)
    private val DFA359_min = DFA.unpackEncodedStringToUnsignedChars(DFA359_minS)
    private val DFA359_max = DFA.unpackEncodedStringToUnsignedChars(DFA359_maxS)
    private val DFA359_accept = DFA.unpackEncodedString(DFA359_acceptS)
    private val DFA359_special = DFA.unpackEncodedString(DFA359_specialS)
    private val DFA359_transition = new Array[Array[Short]](DFA359_transitionS.length)
    for (i <- DFA359_transition.indices) {
      DFA359_transition(i) = DFA.unpackEncodedString(DFA359_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 359
    this.eot = DFA359_eot
    this.eof = DFA359_eof
    this.min = DFA359_min
    this.max = DFA359_max
    this.accept = DFA359_accept
    this.special = DFA359_special
    this.transition = DFA359_transition

    val description = "1805:2: ( ( LPAREN )=> LPAREN expr= expression ({...}? => COMMA expression )* RPAREN )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA359_1 = input.LA(1)


          val index359_1 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred19_VHDL())) {
            s = 67
          }

          else if ((true)) {
            s = 2
          }


          _input.seek(index359_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 359, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA372(rec: BaseRecognizer) extends DFA {
    private val DFA372_eotS = "\30\uffff"
    private val DFA372_eofS = "\30\uffff"
    private val DFA372_minS = "\1\4\25\0\2\uffff"
    private val DFA372_maxS = "\1\u00b5\25\0\2\uffff"
    private val DFA372_acceptS = "\26\uffff\1\1\1\2"
    private val DFA372_specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10" +
      "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2" +
      "\uffff}>"
    private val DFA372_transitionS = Array("\1\16\4\uffff\1\22\50\uffff" +
      "\1\20\1\14\1\uffff\1\21\1\17\1\13\3\uffff\1\23\1\26\47\uffff\1\25\1\24\14" +
      "\uffff\1\15\6\uffff\1\2\1\3\15\uffff\1\27\1\uffff\1\4\11\uffff\1\11\11\uffff" +
      "\1\6\1\7\1\10\1\12\2\1\21\uffff\1\5",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "")

    private val DFA372_eot = DFA.unpackEncodedString(DFA372_eotS)
    private val DFA372_eof = DFA.unpackEncodedString(DFA372_eofS)
    private val DFA372_min = DFA.unpackEncodedStringToUnsignedChars(DFA372_minS)
    private val DFA372_max = DFA.unpackEncodedStringToUnsignedChars(DFA372_maxS)
    private val DFA372_accept = DFA.unpackEncodedString(DFA372_acceptS)
    private val DFA372_special = DFA.unpackEncodedString(DFA372_specialS)
    private val DFA372_transition = new Array[Array[Short]](DFA372_transitionS.length)
    for (i <- DFA372_transition.indices) {
      DFA372_transition(i) = DFA.unpackEncodedString(DFA372_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 372
    this.eot = DFA372_eot
    this.eof = DFA372_eof
    this.min = DFA372_min
    this.max = DFA372_max
    this.accept = DFA372_accept
    this.special = DFA372_special
    this.transition = DFA372_transition

    val description = "1864:2: ( ( choices ARROW )=> choices ARROW )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA372_0 = input.LA(1)


          val index372_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA372_0 >= BASIC_IDENTIFIER && LA372_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA372_0 == PLUS)) {
            s = 2
          }

          else if ((LA372_0 == MINUS)) {
            s = 3
          }

          else if ((LA372_0 == STRING_LITERAL)) {
            s = 4
          }

          else if ((LA372_0 == 181) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA372_0 == REAL_LITERAL)) {
            s = 6
          }

          else if ((LA372_0 == INTEGER_LITERAL)) {
            s = 7
          }

          else if ((LA372_0 == BASED_LITERAL)) {
            s = 8
          }

          else if ((LA372_0 == CHARACTER_LITERAL)) {
            s = 9
          }

          else if ((LA372_0 == BIT_STRING_LITERAL)) {
            s = 10
          }

          else if ((LA372_0 == NULL)) {
            s = 11
          }

          else if ((LA372_0 == NEW)) {
            s = 12
          }

          else if ((LA372_0 == LPAREN)) {
            s = 13
          }

          else if ((LA372_0 == ABS)) {
            s = 14
          }

          else if ((LA372_0 == NOT)) {
            s = 15
          }

          else if ((LA372_0 == NAND) && ((vhdl2008))) {
            s = 16
          }

          else if ((LA372_0 == NOR) && ((vhdl2008))) {
            s = 17
          }

          else if ((LA372_0 == AND) && ((vhdl2008))) {
            s = 18
          }

          else if ((LA372_0 == OR) && ((vhdl2008))) {
            s = 19
          }

          else if ((LA372_0 == XOR) && ((vhdl2008))) {
            s = 20
          }

          else if ((LA372_0 == XNOR) && ((vhdl2008))) {
            s = 21
          }

          else if ((LA372_0 == OTHERS) && (synpred20_VHDL())) {
            s = 22
          }

          else if ((LA372_0 == CONDITION_OPERATOR) && ((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_0)
          if (s >= 0) return s
        case 1 =>
          val LA372_1 = input.LA(1)


          val index372_1 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || synpred20_VHDL()))) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_1)
          if (s >= 0) return s
        case 2 =>
          val LA372_2 = input.LA(1)


          val index372_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_2)
          if (s >= 0) return s
        case 3 =>
          val LA372_3 = input.LA(1)


          val index372_3 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_3)
          if (s >= 0) return s
        case 4 =>
          val LA372_4 = input.LA(1)


          val index372_4 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || synpred20_VHDL()))) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_4)
          if (s >= 0) return s
        case 5 =>
          val LA372_5 = input.LA(1)


          val index372_5 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_5)
          if (s >= 0) return s
        case 6 =>
          val LA372_6 = input.LA(1)


          val index372_6 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_6)
          if (s >= 0) return s
        case 7 =>
          val LA372_7 = input.LA(1)


          val index372_7 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_7)
          if (s >= 0) return s
        case 8 =>
          val LA372_8 = input.LA(1)


          val index372_8 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_8)
          if (s >= 0) return s
        case 9 =>
          val LA372_9 = input.LA(1)


          val index372_9 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_9)
          if (s >= 0) return s
        case 10 =>
          val LA372_10 = input.LA(1)


          val index372_10 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_10)
          if (s >= 0) return s
        case 11 =>
          val LA372_11 = input.LA(1)


          val index372_11 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_11)
          if (s >= 0) return s
        case 12 =>
          val LA372_12 = input.LA(1)


          val index372_12 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_12)
          if (s >= 0) return s
        case 13 =>
          val LA372_13 = input.LA(1)


          val index372_13 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || synpred20_VHDL()))) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_13)
          if (s >= 0) return s
        case 14 =>
          val LA372_14 = input.LA(1)


          val index372_14 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_14)
          if (s >= 0) return s
        case 15 =>
          val LA372_15 = input.LA(1)


          val index372_15 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 22
          }

          else if ((true)) {
            s = 23
          }


          _input.seek(index372_15)
          if (s >= 0) return s
        case 16 =>
          val LA372_16 = input.LA(1)


          val index372_16 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_16)
          if (s >= 0) return s
        case 17 =>
          val LA372_17 = input.LA(1)


          val index372_17 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_17)
          if (s >= 0) return s
        case 18 =>
          val LA372_18 = input.LA(1)


          val index372_18 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_18)
          if (s >= 0) return s
        case 19 =>
          val LA372_19 = input.LA(1)


          val index372_19 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_19)
          if (s >= 0) return s
        case 20 =>
          val LA372_20 = input.LA(1)


          val index372_20 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_20)
          if (s >= 0) return s
        case 21 =>
          val LA372_21 = input.LA(1)


          val index372_21 = _input.index()
          _input.rewind()
          s = -1
          if ((((synpred20_VHDL() && (vhdl2008)) || (synpred20_VHDL() && (vhdl2008))))) {
            s = 22
          }

          else if (((vhdl2008))) {
            s = 23
          }


          _input.seek(index372_21)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 372, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA374(rec: BaseRecognizer) extends DFA {
    private val DFA374_eotS = "\32\uffff"
    private val DFA374_eofS = "\32\uffff"
    private val DFA374_minS = "\1\4\25\0\4\uffff"
    private val DFA374_maxS = "\1\u00b5\25\0\4\uffff"
    private val DFA374_acceptS = "\26\uffff\1\4\1\1\1\2\1\3"
    private val DFA374_specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10" +
      "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\4" +
      "\uffff}>"
    private val DFA374_transitionS = Array("\1\16\4\uffff\1\22\50\uffff" +
      "\1\20\1\14\1\uffff\1\21\1\17\1\13\3\uffff\1\23\1\26\47\uffff\1\25\1\24\14" +
      "\uffff\1\15\6\uffff\1\2\1\3\17\uffff\1\4\11\uffff\1\11\11\uffff\1\6\1\7" +
      "\1\10\1\12\2\1\21\uffff\1\5",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "")

    private val DFA374_eot = DFA.unpackEncodedString(DFA374_eotS)
    private val DFA374_eof = DFA.unpackEncodedString(DFA374_eofS)
    private val DFA374_min = DFA.unpackEncodedStringToUnsignedChars(DFA374_minS)
    private val DFA374_max = DFA.unpackEncodedStringToUnsignedChars(DFA374_maxS)
    private val DFA374_accept = DFA.unpackEncodedString(DFA374_acceptS)
    private val DFA374_special = DFA.unpackEncodedString(DFA374_specialS)
    private val DFA374_transition = new Array[Array[Short]](DFA374_transitionS.length)
    for (i <- DFA374_transition.indices) {
      DFA374_transition(i) = DFA.unpackEncodedString(DFA374_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 374
    this.eot = DFA374_eot
    this.eof = DFA374_eof
    this.min = DFA374_min
    this.max = DFA374_max
    this.accept = DFA374_accept
    this.special = DFA374_special
    this.transition = DFA374_transition

    val description = "1874:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA374_0 = input.LA(1)


          val index374_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA374_0 >= BASIC_IDENTIFIER && LA374_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA374_0 == PLUS)) {
            s = 2
          }

          else if ((LA374_0 == MINUS)) {
            s = 3
          }

          else if ((LA374_0 == STRING_LITERAL)) {
            s = 4
          }

          else if ((LA374_0 == 181) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA374_0 == REAL_LITERAL)) {
            s = 6
          }

          else if ((LA374_0 == INTEGER_LITERAL)) {
            s = 7
          }

          else if ((LA374_0 == BASED_LITERAL)) {
            s = 8
          }

          else if ((LA374_0 == CHARACTER_LITERAL)) {
            s = 9
          }

          else if ((LA374_0 == BIT_STRING_LITERAL)) {
            s = 10
          }

          else if ((LA374_0 == NULL)) {
            s = 11
          }

          else if ((LA374_0 == NEW)) {
            s = 12
          }

          else if ((LA374_0 == LPAREN)) {
            s = 13
          }

          else if ((LA374_0 == ABS)) {
            s = 14
          }

          else if ((LA374_0 == NOT)) {
            s = 15
          }

          else if ((LA374_0 == NAND) && ((vhdl2008))) {
            s = 16
          }

          else if ((LA374_0 == NOR) && ((vhdl2008))) {
            s = 17
          }

          else if ((LA374_0 == AND) && ((vhdl2008))) {
            s = 18
          }

          else if ((LA374_0 == OR) && ((vhdl2008))) {
            s = 19
          }

          else if ((LA374_0 == XOR) && ((vhdl2008))) {
            s = 20
          }

          else if ((LA374_0 == XNOR) && ((vhdl2008))) {
            s = 21
          }

          else if ((LA374_0 == OTHERS)) {
            s = 22
          }


          _input.seek(index374_0)
          if (s >= 0) return s
        case 1 =>
          val LA374_1 = input.LA(1)


          val index374_1 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred21_VHDL())) {
            s = 23
          }

          else if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_1)
          if (s >= 0) return s
        case 2 =>
          val LA374_2 = input.LA(1)


          val index374_2 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_2)
          if (s >= 0) return s
        case 3 =>
          val LA374_3 = input.LA(1)


          val index374_3 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_3)
          if (s >= 0) return s
        case 4 =>
          val LA374_4 = input.LA(1)


          val index374_4 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_4)
          if (s >= 0) return s
        case 5 =>
          val LA374_5 = input.LA(1)


          val index374_5 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_5)
          if (s >= 0) return s
        case 6 =>
          val LA374_6 = input.LA(1)


          val index374_6 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_6)
          if (s >= 0) return s
        case 7 =>
          val LA374_7 = input.LA(1)


          val index374_7 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_7)
          if (s >= 0) return s
        case 8 =>
          val LA374_8 = input.LA(1)


          val index374_8 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_8)
          if (s >= 0) return s
        case 9 =>
          val LA374_9 = input.LA(1)


          val index374_9 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_9)
          if (s >= 0) return s
        case 10 =>
          val LA374_10 = input.LA(1)


          val index374_10 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_10)
          if (s >= 0) return s
        case 11 =>
          val LA374_11 = input.LA(1)


          val index374_11 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_11)
          if (s >= 0) return s
        case 12 =>
          val LA374_12 = input.LA(1)


          val index374_12 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_12)
          if (s >= 0) return s
        case 13 =>
          val LA374_13 = input.LA(1)


          val index374_13 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_13)
          if (s >= 0) return s
        case 14 =>
          val LA374_14 = input.LA(1)


          val index374_14 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_14)
          if (s >= 0) return s
        case 15 =>
          val LA374_15 = input.LA(1)


          val index374_15 = _input.index()
          _input.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 24
          }

          else if ((true)) {
            s = 25
          }


          _input.seek(index374_15)
          if (s >= 0) return s
        case 16 =>
          val LA374_16 = input.LA(1)


          val index374_16 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_16)
          if (s >= 0) return s
        case 17 =>
          val LA374_17 = input.LA(1)


          val index374_17 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_17)
          if (s >= 0) return s
        case 18 =>
          val LA374_18 = input.LA(1)


          val index374_18 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_18)
          if (s >= 0) return s
        case 19 =>
          val LA374_19 = input.LA(1)


          val index374_19 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_19)
          if (s >= 0) return s
        case 20 =>
          val LA374_20 = input.LA(1)


          val index374_20 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_20)
          if (s >= 0) return s
        case 21 =>
          val LA374_21 = input.LA(1)


          val index374_21 = _input.index()
          _input.rewind()
          s = -1
          if (((synpred22_VHDL() && (vhdl2008)))) {
            s = 24
          }

          else if (((vhdl2008))) {
            s = 25
          }


          _input.seek(index374_21)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 374, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA380(rec: BaseRecognizer) extends DFA {
    private val DFA380_eotS = "\13\uffff"
    private val DFA380_eofS = "\4\uffff\1\12\6\uffff"
    private val DFA380_minS = "\1\4\3\uffff\1\61\6\uffff"
    private val DFA380_maxS = "\1\u00b5\3\uffff\1\u00a3\6\uffff"
    private val DFA380_acceptS = "\1\uffff\3\1\1\uffff\1\1\1\2\1\3\1\4\1" +
      "\1\1\5"
    private val DFA380_specialS = "\1\0\12\uffff}>"
    private val DFA380_transitionS = Array("\1\3\4\uffff\1\5\11\uffff\1" +
      "\10\21\uffff\1\6\14\uffff\1\5\1\3\1\uffff\1\5\1\3\1\4\3\uffff\1\5\50\uffff" +
      "\2\5\14\uffff\1\3\6\uffff\2\1\17\uffff\1\1\11\uffff\1\3\4\uffff\1\7\4\uffff" +
      "\4\3\2\1\21\uffff\1\2",
      "",
      "",
      "",
      "\1\11\27\uffff\1\11\34\uffff\2\11\11\uffff\1\11\5\uffff\4\11\17\uffff" +
        "\1\11\27\uffff\2\11",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA380_eot = DFA.unpackEncodedString(DFA380_eotS)
    private val DFA380_eof = DFA.unpackEncodedString(DFA380_eofS)
    private val DFA380_min = DFA.unpackEncodedStringToUnsignedChars(DFA380_minS)
    private val DFA380_max = DFA.unpackEncodedStringToUnsignedChars(DFA380_maxS)
    private val DFA380_accept = DFA.unpackEncodedString(DFA380_acceptS)
    private val DFA380_special = DFA.unpackEncodedString(DFA380_specialS)
    private val DFA380_transition = new Array[Array[Short]](DFA380_transitionS.length)
    for (i <- DFA380_transition.indices) {
      DFA380_transition(i) = DFA.unpackEncodedString(DFA380_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 380
    this.eot = DFA380_eot
    this.eof = DFA380_eof
    this.min = DFA380_min
    this.max = DFA380_max
    this.accept = DFA380_accept
    this.special = DFA380_special
    this.transition = DFA380_transition

    val description = "1036:13: ( ( simple_expression AMS_ASSIGN ) | IF | PROCEDURAL | CASE | NULL )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA380_0 = input.LA(1)


          val index380_0 = _input.index()
          _input.rewind()
          s = -1
          if (((LA380_0 >= PLUS && LA380_0 <= MINUS) || LA380_0 == STRING_LITERAL || (LA380_0 >= BASIC_IDENTIFIER && LA380_0 <= EXTENDED_IDENTIFIER))) {
            s = 1
          }

          else if ((LA380_0 == 181) && ((vhdl2008))) {
            s = 2
          }

          else if ((LA380_0 == ABS || LA380_0 == NEW || LA380_0 == NOT || LA380_0 == LPAREN || LA380_0 == CHARACTER_LITERAL || (LA380_0 >= REAL_LITERAL && LA380_0 <= BIT_STRING_LITERAL))) {
            s = 3
          }

          else if ((LA380_0 == NULL)) {
            s = 4
          }

          else if ((LA380_0 == AND || LA380_0 == NAND || LA380_0 == NOR || LA380_0 == OR || (LA380_0 >= XNOR && LA380_0 <= XOR)) && ((vhdl2008))) {
            s = 5
          }

          else if ((LA380_0 == IF)) {
            s = 6
          }

          else if ((LA380_0 == PROCEDURAL)) {
            s = 7
          }

          else if ((LA380_0 == CASE)) {
            s = 8
          }


          _input.seek(index380_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 380, __s, input)
      error(nvae)
      throw nvae
    }
  }

  private val dfa3 = new DFA3(this)
  private val dfa18 = new DFA18(this)
  private val dfa26 = new DFA26(this)
  private val dfa43 = new DFA43(this)
  private val dfa48 = new DFA48(this)
  private val dfa66 = new DFA66(this)
  private val dfa70 = new DFA70(this)
  private val dfa72 = new DFA72(this)
  private val dfa102 = new DFA102(this)
  private val dfa121 = new DFA121(this)
  private val dfa125 = new DFA125(this)
  private val dfa136 = new DFA136(this)
  private val dfa149 = new DFA149(this)
  private val dfa157 = new DFA157(this)
  private val dfa159 = new DFA159(this)
  private val dfa164 = new DFA164(this)
  private val dfa175 = new DFA175(this)
  private val dfa182 = new DFA182(this)
  private val dfa214 = new DFA214(this)
  private val dfa220 = new DFA220(this)
  private val dfa232 = new DFA232(this)
  private val dfa234 = new DFA234(this)
  private val dfa235 = new DFA235(this)
  private val dfa248 = new DFA248(this)
  private val dfa287 = new DFA287(this)
  private val dfa320 = new DFA320(this)
  private val dfa321 = new DFA321(this)
  private val dfa345 = new DFA345(this)
  private val dfa351 = new DFA351(this)
  private val dfa359 = new DFA359(this)
  private val dfa372 = new DFA372(this)
  private val dfa374 = new DFA374(this)
  private val dfa380 = new DFA380(this)
}