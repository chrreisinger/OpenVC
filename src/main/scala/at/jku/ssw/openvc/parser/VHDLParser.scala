// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g 2010-12-05 16:32:05

/*
 *     OpenVC, an open source VHDL compiler/simulator
 *     Copyright (C) 2010  Christian Reisinger
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package at.jku.ssw.openvc.parser

import at.jku.ssw.openvc._
import at.jku.ssw.openvc.ast._
import at.jku.ssw.openvc.ast.concurrentStatements._
import at.jku.ssw.openvc.ast.declarations._
import at.jku.ssw.openvc.ast.expressions._
import at.jku.ssw.openvc.ast.sequentialStatements._
import at.jku.ssw.openvc.ast.ams._
import at.jku.ssw.openvc.util._


import org.antlr.runtime._

import scala.collection.mutable.Stack

object VHDLParser {
  val tokenNames = Array("<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESS", "AFTER", "ALIAS", "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BUFFER", "BUS", "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", "DISCONNECT", "DOWNTO", "ELSE", "ELSIF", "END", "ENTITY", "EXIT", "FILE", "FOR", "FUNCTION", "GENERATE", "GENERIC", "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", "INOUT", "IS", "LABEL", "LIBRARY", "LINKAGE", "LITERAL", "LOOP", "MAP", "MOD", "NAND", "NEW", "NEXT", "NOR", "NOT", "NULL", "OF", "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", "POSTPONED", "PROCEDURE", "PROCESS", "PROTECTED", "PURE", "RANGE", "RECORD", "REGISTER", "REJECT", "REM", "REPORT", "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", "SIGNAL", "SLA", "SLL", "SRA", "SRL", "SUBTYPE", "THEN", "TO", "TRANSPORT", "TYPE", "UNAFFECTED", "UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WHEN", "WHILE", "WITH", "XNOR", "XOR", "NATURE", "TERMINAL", "QUANTITY", "ACROSS", "THROUGH", "SPECTRUM", "NOISE", "SUBNATURE", "LIMIT", "REFERENCE", "PROCEDURAL", "DOUBLESTAR", "AMS_ASSIGN", "LEQ", "GEQ", "ARROW", "NEQ", "VAR_ASSIGN", "BOX", "DBLQUOTE", "SEMICOLON", "COMMA", "AMPERSAND", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "MUL", "DIV", "PLUS", "MINUS", "LT", "GT", "EQ", "BAR", "DOT", "STRING_LITERAL", "TOLERANCE", "CHARACTER_LITERAL", "BREAK", "APOSTROPHE", "REAL_LITERAL", "INTEGER_LITERAL", "BASED_LITERAL", "BIT_STRING_LITERAL", "BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "WS", "NESTED_ML_COMMENT", "LINECOMMENT", "LETTER", "LETTER_OR_DIGIT", "GRAPHIC_CHARACTER", "INTEGER", "BASED_INTEGER", "EXPONENT", "BASE_SPECIFIER", "EXTENDED_DIGIT", "DIGIT", "UPPER_CASE_LETTER", "LOWER_CASE_LETTER", "SPECIAL_CHARACTER", "SPACE_CHARACTER", "OTHER_SPECIAL_CHARACTER")
  val BASIC_IDENTIFIER = 148
  val FUNCTION = 32
  val PACKAGE = 62
  val EXPONENT = 158
  val LT = 134
  val NAND = 50
  val INERTIAL = 40
  val SPACE_CHARACTER = 165
  val SEVERITY = 79
  val WHILE = 98
  val ROR = 77
  val GENERIC = 34
  val LETTER = 153
  val MOD = 49
  val CASE = 19
  val NEW = 51
  val NOR = 53
  val NOT = 54
  val POSTPONED = 64
  val LINECOMMENT = 152
  val SUBTYPE = 86
  val EOF = -1
  val BREAK = 142
  val ROL = 76
  val BASED_LITERAL = 146
  val QUANTITY = 104
  val TYPE = 90
  val LBRACKET = 127
  val UNITS = 92
  val RPAREN = 126
  val OTHER_SPECIAL_CHARACTER = 166
  val STRING_LITERAL = 139
  val DOWNTO = 24
  val BASED_INTEGER = 157
  val REAL_LITERAL = 144
  val BEGIN = 14
  val LOOP = 47
  val RETURN = 75
  val TRANSPORT = 89
  val IMPURE = 38
  val BODY = 16
  val APOSTROPHE = 143
  val GEQ = 116
  val GENERATE = 33
  val EQ = 136
  val LINKAGE = 45
  val SPECTRUM = 107
  val REGISTER = 71
  val SELECT = 78
  val ARRAY = 11
  val LOWER_CASE_LETTER = 163
  val TOLERANCE = 140
  val EXIT = 29
  val SHARED = 80
  val RECORD = 70
  val GUARDED = 36
  val SRL = 85
  val SRA = 84
  val LETTER_OR_DIGIT = 154
  val NESTED_ML_COMMENT = 151
  val AMS_ASSIGN = 114
  val NULL = 55
  val XNOR = 100
  val ELSE = 25
  val CHARACTER_LITERAL = 141
  val ON = 57
  val BUS = 18
  val SEMICOLON = 122
  val WAIT = 96
  val VAR_ASSIGN = 119
  val FILE = 30
  val OF = 56
  val MUL = 130
  val ASSERT = 12
  val PROCEDURAL = 112
  val ABS = 4
  val GROUP = 35
  val WS = 150
  val UPPER_CASE_LETTER = 162
  val VARIABLE = 95
  val OUT = 61
  val UNTIL = 93
  val GRAPHIC_CHARACTER = 155
  val EXTENDED_IDENTIFIER = 149
  val INTEGER_LITERAL = 145
  val EXTENDED_DIGIT = 160
  val DBLQUOTE = 121
  val OR = 59
  val ALIAS = 7
  val CONSTANT = 22
  val GT = 135
  val USE = 94
  val ELSIF = 26
  val END = 27
  val OTHERS = 60
  val PROTECTED = 67
  val REPORT = 74
  val DOUBLESTAR = 113
  val LIMIT = 110
  val ATTRIBUTE = 13
  val SLA = 82
  val FOR = 31
  val CONFIGURATION = 21
  val LIBRARY = 44
  val SLL = 83
  val ARCHITECTURE = 10
  val AND = 9
  val BIT_STRING_LITERAL = 147
  val LPAREN = 125
  val IF = 37
  val INOUT = 41
  val ENTITY = 28
  val BOX = 120
  val PURE = 68
  val IN = 39
  val THEN = 87
  val COMMA = 123
  val IS = 42
  val REJECT = 72
  val ALL = 8
  val SIGNAL = 81
  val ACCESS = 5
  val PLUS = 132
  val NEXT = 52
  val DIGIT = 161
  val RBRACKET = 128
  val DOT = 138
  val COMPONENT = 20
  val WITH = 99
  val INTEGER = 156
  val NATURE = 102
  val XOR = 101
  val TO = 88
  val TERMINAL = 103
  val SPECIAL_CHARACTER = 164
  val DISCONNECT = 23
  val AMPERSAND = 124
  val REFERENCE = 111
  val BUFFER = 17
  val PORT = 63
  val RANGE = 69
  val LITERAL = 46
  val MINUS = 133
  val AFTER = 6
  val REM = 73
  val PROCEDURE = 65
  val SUBNATURE = 109
  val COLON = 129
  val OPEN = 58
  val BASE_SPECIFIER = 159
  val NEQ = 118
  val LABEL = 43
  val WHEN = 97
  val ACROSS = 105
  val BLOCK = 15
  val MAP = 48
  val THROUGH = 106
  val ARROW = 117
  val DIV = 131
  val NOISE = 108
  val PROCESS = 66
  val UNAFFECTED = 91
  val BAR = 137
  val LEQ = 115

  private def createBitSet(v1: Long): BitSet = new BitSet(Array(v1))

  private def createBitSet(v1: Long, v2: Long): BitSet = new BitSet(Array(v1, v2))

  private def createBitSet(v1: Long, v2: Long, v3: Long): BitSet = new BitSet(Array(v1, v2, v3))

  private def createBitSet(v1: Long, v2: Long, v3: Long, v4: Long): BitSet = new BitSet(Array(v1, v2, v3, v4))

  private def createBitSet(v1: Long, v2: Long, v3: Long, v4: Long, v5: Long): BitSet = new BitSet(Array(v1, v2, v3, v4, v5))

  private val FOLLOW_design_unit_in_design_file1280 = createBitSet(0x4000100010200400L, 0x0000000040000000L)
  private val FOLLOW_EOF_in_design_file1285 = createBitSet(0x0000000000000002L)
  private val FOLLOW_library_clause_in_design_unit1311 = createBitSet(0x4000100010200400L, 0x0000000040000000L)
  private val FOLLOW_use_clause_in_design_unit1319 = createBitSet(0x4000100010200400L, 0x0000000040000000L)
  private val FOLLOW_library_unit_in_design_unit1330 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_declaration_in_library_unit1348 = createBitSet(0x0000000000000002L)
  private val FOLLOW_architecture_body_in_library_unit1355 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_declaration_in_library_unit1362 = createBitSet(0x0000000000000002L)
  private val FOLLOW_package_body_in_library_unit1369 = createBitSet(0x0000000000000002L)
  private val FOLLOW_configuration_declaration_in_library_unit1378 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LIBRARY_in_library_clause1401 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_library_clause1403 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_library_clause1405 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GENERIC_in_generic_clause1427 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_generic_clause1429 = createBitSet(0x0000000000400000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_generic_interface_list_in_generic_clause1431 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_generic_clause1433 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_generic_clause1435 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_generic_interface_list1457 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_generic_interface_list1463 = createBitSet(0x0000000000400000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_interface_constant_declaration_in_generic_interface_list1467 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_PORT_in_port_clause1495 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_port_clause1497 = createBitSet(0x0000000000000000L, 0x0000000000020000L, 0x0000000000300000L)
  private val FOLLOW_port_interface_list_in_port_clause1499 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_port_clause1501 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_port_clause1503 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1525 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_port_interface_list1531 = createBitSet(0x0000000000000000L, 0x0000000000020000L, 0x0000000000300000L)
  private val FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1535 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_ENTITY_in_entity_declaration1569 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_entity_declaration1573 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_entity_declaration1575 = createBitSet(0x8000104D48C06080L, 0x000061C0C4430012L)
  private val FOLLOW_generic_clause_in_entity_declaration1579 = createBitSet(0x8000104948C06080L, 0x000061C0C4430012L)
  private val FOLLOW_port_clause_in_entity_declaration1584 = createBitSet(0x0000104948C06080L, 0x000061C0C4430012L)
  private val FOLLOW_entity_declarative_item_in_entity_declaration1590 = createBitSet(0x0000104948C06080L, 0x000061C0C4430012L)
  private val FOLLOW_BEGIN_in_entity_declaration1598 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_label_colon_in_entity_declaration1605 = createBitSet(0x0000000000001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_POSTPONED_in_entity_declaration1610 = createBitSet(0x0000000000001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_concurrent_assertion_statement_in_entity_declaration1618 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1628 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_process_statement_in_entity_declaration1637 = createBitSet(0x0000000008001000L, 0x0000000000000005L, 0x0000000000300800L)
  private val FOLLOW_END_in_entity_declaration1662 = createBitSet(0x0000000010000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_ENTITY_in_entity_declaration1664 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_entity_declaration1669 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_entity_declaration1672 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1690 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_entity_declarative_item1700 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_entity_declarative_item1707 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_entity_declarative_item1714 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_entity_declarative_item1721 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_entity_declarative_item1728 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_entity_declarative_item1735 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_entity_declarative_item1742 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_entity_declarative_item1749 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_entity_declarative_item1756 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_entity_declarative_item1763 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_entity_declarative_item1770 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_entity_declarative_item1777 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_entity_declarative_item1784 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_step_limit_specification_in_entity_declarative_item1804 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_entity_declarative_item1812 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_entity_declarative_item1820 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_quantity_declaration_in_entity_declarative_item1828 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_entity_declarative_item1836 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARCHITECTURE_in_architecture_body1861 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_architecture_body1865 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_architecture_body1867 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_architecture_body1869 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_architecture_body1871 = createBitSet(0x00001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_block_declarative_item_in_architecture_body1876 = createBitSet(0x00001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_BEGIN_in_architecture_body1882 = createBitSet(0x0000000008001000L, 0x2000000800000005L, 0x0000000000304800L)
  private val FOLLOW_concurrent_statement_list_in_architecture_body1886 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_architecture_body1889 = createBitSet(0x0000000000000400L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_ARCHITECTURE_in_architecture_body1891 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_architecture_body1896 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_architecture_body1899 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_configuration_declarative_item1917 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_configuration_declarative_item1924 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_configuration_declarative_item1931 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_configuration_declaration1952 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_configuration_declaration1956 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_configuration_declaration1958 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_configuration_declaration1960 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_configuration_declaration1962 = createBitSet(0x0000100880002000L, 0x0000000040000000L)
  private val FOLLOW_configuration_declarative_item_in_configuration_declaration1967 = createBitSet(0x0000100880002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_configuration_declaration1977 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_configuration_declaration1980 = createBitSet(0x0000000000200000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_CONFIGURATION_in_configuration_declaration1982 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_configuration_declaration1987 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_configuration_declaration1990 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_block_configuration_index2012 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_block_configuration_index2021 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_block_specification2051 = createBitSet(0x0000000000000002L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_block_specification2054 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_block_configuration_index_in_block_specification2056 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_block_specification2058 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_block_specification2067 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_block_configuration2091 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_block_specification_in_block_configuration2093 = createBitSet(0x0000100888002000L, 0x0000000040000000L)
  private val FOLLOW_use_clause_in_block_configuration2098 = createBitSet(0x0000100888002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_block_configuration2113 = createBitSet(0x0000100888002000L, 0x0000000040000000L)
  private val FOLLOW_component_configuration_in_block_configuration2122 = createBitSet(0x0000100888002000L, 0x0000000040000000L)
  private val FOLLOW_END_in_block_configuration2132 = createBitSet(0x0000000080000000L)
  private val FOLLOW_FOR_in_block_configuration2134 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_block_configuration2136 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_component_configuration2155 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_component_specification_in_component_configuration2157 = createBitSet(0x8000100C88002000L, 0x0400000040000000L)
  private val FOLLOW_binding_indication_in_component_configuration2162 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_component_configuration2164 = createBitSet(0x0000100888002000L, 0x0000000040000000L)
  private val FOLLOW_block_configuration_in_component_configuration2173 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_component_configuration2177 = createBitSet(0x0000000080000000L)
  private val FOLLOW_FOR_in_component_configuration2179 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_component_configuration2181 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_package_declaration2209 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_package_declaration2213 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_package_declaration2215 = createBitSet(0x0000104948D02080L, 0x000061C0C4430012L)
  private val FOLLOW_package_declarative_item_in_package_declaration2224 = createBitSet(0x0000104948D02080L, 0x000061C0C4430012L)
  private val FOLLOW_END_in_package_declaration2230 = createBitSet(0x4000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_PACKAGE_in_package_declaration2232 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_package_declaration2237 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_package_declaration2240 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declaration_in_package_declarative_item2258 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_package_declarative_item2268 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_package_declarative_item2275 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_package_declarative_item2282 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_package_declarative_item2289 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_package_declarative_item2296 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_package_declarative_item2303 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_package_declarative_item2310 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_declaration_in_package_declarative_item2317 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_package_declarative_item2324 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_package_declarative_item2331 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_package_declarative_item2338 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_package_declarative_item2345 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_package_declarative_item2352 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_package_declarative_item2359 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_package_declarative_item2375 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_package_declarative_item2383 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_package_declarative_item2391 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_package_body2413 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_package_body2415 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_package_body2419 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_package_body2421 = createBitSet(0x0000104948402080L, 0x00000000C4410012L)
  private val FOLLOW_package_body_declarative_item_in_package_body2426 = createBitSet(0x0000104948402080L, 0x00000000C4410012L)
  private val FOLLOW_END_in_package_body2432 = createBitSet(0x4000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_PACKAGE_in_package_body2435 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_package_body2437 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_package_body2443 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_package_body2446 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2466 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_package_body_declarative_item2476 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_package_body_declarative_item2483 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_package_body_declarative_item2490 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_package_body_declarative_item2497 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_package_body_declarative_item2504 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_package_body_declarative_item2511 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_package_body_declarative_item2520 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_package_body_declarative_item2527 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_package_body_declarative_item2535 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_package_body_declarative_item2542 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_designator2560 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_designator2567 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURE_in_subprogram_specification2588 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_subprogram_specification2590 = createBitSet(0x0000000000000002L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_subprogram_specification2599 = createBitSet(0x0000000040400000L, 0x0000018080020000L, 0x0000000000300000L)
  private val FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2601 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_subprogram_specification2603 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PURE_in_subprogram_specification2616 = createBitSet(0x0000000100000000L)
  private val FOLLOW_IMPURE_in_subprogram_specification2622 = createBitSet(0x0000000100000000L)
  private val FOLLOW_FUNCTION_in_subprogram_specification2626 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_designator_in_subprogram_specification2628 = createBitSet(0x0000000000000000L, 0x2000000000000800L)
  private val FOLLOW_LPAREN_in_subprogram_specification2637 = createBitSet(0x0000000040400000L, 0x0000018080020000L, 0x0000000000300000L)
  private val FOLLOW_parameter_interface_list_function_in_subprogram_specification2639 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_subprogram_specification2641 = createBitSet(0x0000000000000000L, 0x0000000000000800L)
  private val FOLLOW_RETURN_in_subprogram_specification2646 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_subprogram_specification2648 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2667 = createBitSet(0x0000040000000000L, 0x0400000000000000L)
  private val FOLLOW_subprogram_body_in_subprogram_declartion_or_body2670 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2675 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_specification_in_subprogram_declaration2694 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_subprogram_declaration2696 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IS_in_subprogram_body2718 = createBitSet(0x0000104940406080L, 0x00000000C4410012L)
  private val FOLLOW_subprogram_declarative_item_in_subprogram_body2723 = createBitSet(0x0000104940406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_subprogram_body2730 = createBitSet(0x00908020A8081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_subprogram_body2734 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_subprogram_body2737 = createBitSet(0x0000000100000002L, 0x0000000000000002L, 0x0000000000300800L)
  private val FOLLOW_PROCEDURE_in_subprogram_body2742 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_FUNCTION_in_subprogram_body2748 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_designator_in_subprogram_body2754 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item2776 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_subprogram_declarative_item2786 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_subprogram_declarative_item2793 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_subprogram_declarative_item2800 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_subprogram_declarative_item2807 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_subprogram_declarative_item2814 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_subprogram_declarative_item2821 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_subprogram_declarative_item2828 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_subprogram_declarative_item2835 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_subprogram_declarative_item2842 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_subprogram_declarative_item2849 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_subprogram_declarative_item2856 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TYPE_in_type_declaration2874 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_type_declaration2876 = createBitSet(0x0000040000000000L, 0x0400000000000000L)
  private val FOLLOW_IS_in_type_declaration2879 = createBitSet(0x0000000040000820L, 0x2000000000000068L)
  private val FOLLOW_type_definition_in_type_declaration2881 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_type_declaration2886 = createBitSet(0x0000000000000002L)
  private val FOLLOW_enumeration_type_definition_in_type_definition2904 = createBitSet(0x0000000000000002L)
  private val FOLLOW_physical_type_definition_in_type_definition2922 = createBitSet(0x0000000000000002L)
  private val FOLLOW_integer_or_floating_point_type_definition_in_type_definition2930 = createBitSet(0x0000000000000002L)
  private val FOLLOW_array_type_definition_in_type_definition2938 = createBitSet(0x0000000000000002L)
  private val FOLLOW_record_type_definition_in_type_definition2946 = createBitSet(0x0000000000000002L)
  private val FOLLOW_access_type_definition_in_type_definition2954 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_type_definition_in_type_definition2962 = createBitSet(0x0000000000000002L)
  private val FOLLOW_protected_type_body_in_type_definition2976 = createBitSet(0x0000000000000002L)
  private val FOLLOW_protected_type_declaration_in_type_definition2984 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NATURE_in_ams_nature_declaration3002 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_nature_declaration3004 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_ams_nature_declaration3006 = createBitSet(0x0000000000000800L, 0x0000000000000040L, 0x0000000000300800L)
  private val FOLLOW_ams_nature_definition_in_ams_nature_declaration3008 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_nature_declaration3011 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_ams_terminal_declaration3027 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_terminal_declaration3029 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_terminal_declaration3031 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3033 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_terminal_declaration3035 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3053 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_array_nature_definition_in_ams_nature_definition3061 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_record_nature_definition_in_ams_nature_definition3069 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_free_quantity_declaration_in_ams_quantity_declaration3090 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3102 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_source_quantity_declaration_in_ams_quantity_declaration3109 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_free_quantity_declaration3127 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_free_quantity_declaration3129 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_free_quantity_declaration3131 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_ams_free_quantity_declaration3133 = createBitSet(0x0000000000000000L, 0x0480000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_free_quantity_declaration3136 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_free_quantity_declaration3138 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_free_quantity_declaration3142 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3160 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3171 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3177 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3182 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3184 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_source_quantity_declaration3202 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_source_quantity_declaration3204 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_source_quantity_declaration3206 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_ams_source_quantity_declaration3208 = createBitSet(0x0000000000000000L, 0x0000180000000000L)
  private val FOLLOW_ams_source_aspect_in_ams_source_quantity_declaration3212 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_source_quantity_declaration3214 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_ams_across_aspect3232 = createBitSet(0x0000000000000000L, 0x0080020000000000L, 0x0000000000001000L)
  private val FOLLOW_TOLERANCE_in_ams_across_aspect3235 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_across_aspect3239 = createBitSet(0x0000000000000000L, 0x0080020000000000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_across_aspect3244 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_across_aspect3248 = createBitSet(0x0000000000000000L, 0x0000020000000000L)
  private val FOLLOW_ACROSS_in_ams_across_aspect3252 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_ams_through_aspect3269 = createBitSet(0x0000000000000000L, 0x0080040000000000L, 0x0000000000001000L)
  private val FOLLOW_TOLERANCE_in_ams_through_aspect3272 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_through_aspect3276 = createBitSet(0x0000000000000000L, 0x0080040000000000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_through_aspect3281 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_through_aspect3285 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_THROUGH_in_ams_through_aspect3289 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_ams_terminal_aspect3308 = createBitSet(0x0000000000000002L, 0x0000000001000000L)
  private val FOLLOW_TO_in_ams_terminal_aspect3311 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_in_ams_terminal_aspect3315 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SPECTRUM_in_ams_source_aspect3334 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3338 = createBitSet(0x0000000000000000L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_ams_source_aspect3340 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3344 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NOISE_in_ams_source_aspect3350 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_ams_source_aspect3354 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONSTANT_in_constant_declaration3372 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_constant_declaration3374 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_constant_declaration3376 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_constant_declaration3378 = createBitSet(0x0000000000000000L, 0x0480000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_constant_declaration3381 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_constant_declaration3383 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_constant_declaration3387 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_signal_declaration3406 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_signal_declaration3408 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_signal_declaration3410 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_signal_declaration3412 = createBitSet(0x0000000000040000L, 0x0480000000000080L)
  private val FOLLOW_REGISTER_in_signal_declaration3417 = createBitSet(0x0000000000000000L, 0x0480000000000000L)
  private val FOLLOW_BUS_in_signal_declaration3421 = createBitSet(0x0000000000000000L, 0x0480000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_signal_declaration3426 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_signal_declaration3428 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_signal_declaration3432 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SHARED_in_variable_declaration3449 = createBitSet(0x0000000000000000L, 0x0000000080000000L)
  private val FOLLOW_VARIABLE_in_variable_declaration3452 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_variable_declaration3454 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_variable_declaration3456 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_variable_declaration3458 = createBitSet(0x0000000000000000L, 0x0480000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_variable_declaration3461 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_variable_declaration3463 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_variable_declaration3467 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_file_declaration3484 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_file_declaration3486 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_file_declaration3488 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_file_declaration3490 = createBitSet(0x0400040000000000L, 0x0400000000000000L)
  private val FOLLOW_OPEN_in_file_declaration3494 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_file_declaration3498 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_file_declaration3502 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_file_declaration3506 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_file_declaration3510 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALIAS_in_alias_declaration3527 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_alias_designator_in_alias_declaration3529 = createBitSet(0x0000040000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_alias_declaration3532 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_alias_declaration3534 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_alias_declaration3538 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_in_alias_declaration3540 = createBitSet(0x0000000000000000L, 0x8400000000000000L)
  private val FOLLOW_signature_in_alias_declaration3542 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_alias_declaration3545 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_alias_designator3562 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_alias_designator3569 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_alias_designator3575 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_component_declaration3593 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_component_declaration3597 = createBitSet(0x8000040408000000L)
  private val FOLLOW_IS_in_component_declaration3599 = createBitSet(0x8000000408000000L)
  private val FOLLOW_generic_clause_in_component_declaration3604 = createBitSet(0x8000000008000000L)
  private val FOLLOW_port_clause_in_component_declaration3609 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_component_declaration3613 = createBitSet(0x0000000000100000L)
  private val FOLLOW_COMPONENT_in_component_declaration3615 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_component_declaration3619 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_component_declaration3622 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ATTRIBUTE_in_attribute_declaration3638 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_attribute_declaration3640 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_attribute_declaration3642 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_attribute_declaration3644 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_attribute_declaration3646 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ATTRIBUTE_in_attribute_specification3664 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_attribute_specification3666 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_attribute_specification3668 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_entity_name_list_in_attribute_specification3670 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_attribute_specification3672 = createBitSet(0x4000480950700400L, 0x000021C094420002L)
  private val FOLLOW_entity_class_in_attribute_specification3674 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_attribute_specification3676 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_attribute_specification3678 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_attribute_specification3680 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_entity_designator3707 = createBitSet(0x0000000000000002L, 0x8000000000000000L)
  private val FOLLOW_CHARACTER_LITERAL_in_entity_designator3714 = createBitSet(0x0000000000000002L, 0x8000000000000000L)
  private val FOLLOW_STRING_LITERAL_in_entity_designator3720 = createBitSet(0x0000000000000002L, 0x8000000000000000L)
  private val FOLLOW_signature_in_entity_designator3726 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_designator_in_entity_name_list3750 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_entity_name_list3754 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_entity_designator_in_entity_name_list3758 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_OTHERS_in_entity_name_list3769 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_entity_name_list3776 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_entity_class3791 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARCHITECTURE_in_entity_class3798 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_entity_class3805 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PACKAGE_in_entity_class3812 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURE_in_entity_class3819 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FUNCTION_in_entity_class3826 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TYPE_in_entity_class3833 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBTYPE_in_entity_class3840 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONSTANT_in_entity_class3847 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_entity_class3854 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_entity_class3861 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_entity_class3868 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_entity_class3875 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LABEL_in_entity_class3882 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LITERAL_in_entity_class3889 = createBitSet(0x0000000000000002L)
  private val FOLLOW_UNITS_in_entity_class3896 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_entity_class3903 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NATURE_in_entity_class3923 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBNATURE_in_entity_class3931 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_entity_class3939 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_entity_class3947 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_configuration_specification3966 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_component_specification_in_configuration_specification3968 = createBitSet(0x8000000400000000L, 0x0400000040000000L)
  private val FOLLOW_binding_indication_in_configuration_specification3972 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_configuration_specification3974 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_list_in_instantiation_list3999 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OTHERS_in_instantiation_list4006 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_instantiation_list4013 = createBitSet(0x0000000000000002L)
  private val FOLLOW_instantiation_list_in_component_specification4030 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_component_specification4032 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_component_specification4034 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_entity_aspect4050 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_entity_aspect4054 = createBitSet(0x0000000000000002L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_entity_aspect4057 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_entity_aspect4061 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_entity_aspect4063 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_entity_aspect4072 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_entity_aspect4077 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OPEN_in_entity_aspect4084 = createBitSet(0x0000000000000002L)
  private val FOLLOW_USE_in_binding_indication4102 = createBitSet(0x0400000010200000L)
  private val FOLLOW_entity_aspect_in_binding_indication4104 = createBitSet(0x8000000400000002L)
  private val FOLLOW_generic_map_aspect_in_binding_indication4109 = createBitSet(0x8000000000000002L)
  private val FOLLOW_port_map_aspect_in_binding_indication4113 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DISCONNECT_in_disconnection_specification4130 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_list_in_disconnection_specification4133 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_OTHERS_in_disconnection_specification4139 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_ALL_in_disconnection_specification4145 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_disconnection_specification4148 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_disconnection_specification4150 = createBitSet(0x0000000000000040L)
  private val FOLLOW_AFTER_in_disconnection_specification4152 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_disconnection_specification4154 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_disconnection_specification4156 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LIMIT_in_ams_step_limit_specification4172 = createBitSet(0x1000000000000100L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_list_in_ams_step_limit_specification4175 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_OTHERS_in_ams_step_limit_specification4181 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_ALL_in_ams_step_limit_specification4187 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_step_limit_specification4191 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_ams_step_limit_specification4193 = createBitSet(0x0000000000000000L, 0x0000000800000000L)
  private val FOLLOW_WITH_in_ams_step_limit_specification4195 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_step_limit_specification4197 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_step_limit_specification4199 = createBitSet(0x0000000000000002L)
  private val FOLLOW_entity_class_in_entity_class_entry4216 = createBitSet(0x0000000000000002L, 0x0100000000000000L)
  private val FOLLOW_BOX_in_entity_class_entry4218 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_group_template_declaration4240 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_group_template_declaration4242 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_group_template_declaration4244 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_group_template_declaration4246 = createBitSet(0x4000480950700400L, 0x000021C094420002L)
  private val FOLLOW_entity_class_entry_in_group_template_declaration4250 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_group_template_declaration4254 = createBitSet(0x4000480950700400L, 0x000021C094420002L)
  private val FOLLOW_entity_class_entry_in_group_template_declaration4258 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_group_template_declaration4265 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_group_template_declaration4267 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GROUP_in_group_declaration4287 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_group_declaration4289 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_group_declaration4291 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_group_declaration4293 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_group_declaration4295 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_group_constituent_list_in_group_declaration4297 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_group_declaration4299 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_group_declaration4301 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_group_constituent4318 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_group_constituent4325 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_constituent_in_group_constituent_list4346 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_group_constituent_list4351 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_group_constituent_in_group_constituent_list4355 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_USE_in_use_clause4383 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_list_in_use_clause4385 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_use_clause4387 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_enumeration_literal4406 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4413 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_enumeration_type_definition4434 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302000L)
  private val FOLLOW_enumeration_literal_in_enumeration_type_definition4438 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_enumeration_type_definition4442 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000302000L)
  private val FOLLOW_enumeration_literal_in_enumeration_type_definition4446 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_enumeration_type_definition4452 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_integer_or_floating_point_type_definition4470 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_range_in_integer_or_floating_point_type_definition4472 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_physical_type_definition4497 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_range_in_physical_type_definition4499 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_physical_type_definition4502 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_physical_type_definition4508 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_physical_type_definition4510 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_physical_type_definition4521 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000100L)
  private val FOLLOW_EQ_in_physical_type_definition4523 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000030000L)
  private val FOLLOW_physical_literal_in_physical_type_definition4525 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_physical_type_definition4527 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_END_in_physical_type_definition4541 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_physical_type_definition4543 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_physical_type_definition4547 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_mark_in_index_subtype_definition4566 = createBitSet(0x0000000000000000L, 0x0000000000000020L)
  private val FOLLOW_RANGE_in_index_subtype_definition4568 = createBitSet(0x0000000000000000L, 0x0100000000000000L)
  private val FOLLOW_BOX_in_index_subtype_definition4570 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARRAY_in_array_type_definition4594 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_array_type_definition4600 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_index_subtype_definition_in_array_type_definition4604 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_array_type_definition4609 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_index_subtype_definition_in_array_type_definition4613 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_array_type_definition4619 = createBitSet(0x0100000000000000L)
  private val FOLLOW_index_constraint_in_array_type_definition4625 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_array_type_definition4631 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_array_type_definition4633 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RECORD_in_record_type_definition4656 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_record_type_definition4664 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_record_type_definition4666 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_record_type_definition4668 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_record_type_definition4670 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_END_in_record_type_definition4681 = createBitSet(0x0000000000000000L, 0x0000000000000040L)
  private val FOLLOW_RECORD_in_record_type_definition4683 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_record_type_definition4685 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ACCESS_in_access_type_definition4703 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_access_type_definition4705 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_file_type_definition4724 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_file_type_definition4726 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_file_type_definition4728 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_mark_in_ams_scalar_nature_definition4748 = createBitSet(0x0000000000000000L, 0x0000020000000000L)
  private val FOLLOW_ACROSS_in_ams_scalar_nature_definition4750 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_ams_scalar_nature_definition4754 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_THROUGH_in_ams_scalar_nature_definition4756 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_scalar_nature_definition4758 = createBitSet(0x0000000000000000L, 0x0000800000000000L)
  private val FOLLOW_REFERENCE_in_ams_scalar_nature_definition4760 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ARRAY_in_ams_array_nature_definition4781 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_ams_array_nature_definition4787 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition4791 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_ams_array_nature_definition4796 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition4800 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_ams_array_nature_definition4806 = createBitSet(0x0100000000000000L)
  private val FOLLOW_index_constraint_in_ams_array_nature_definition4812 = createBitSet(0x0100000000000000L)
  private val FOLLOW_OF_in_ams_array_nature_definition4817 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_subnature_indication_in_ams_array_nature_definition4819 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RECORD_in_ams_record_nature_definition4840 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_record_nature_definition4847 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_record_nature_definition4849 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_subnature_indication_in_ams_record_nature_definition4851 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_record_nature_definition4853 = createBitSet(0x0000000008000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_END_in_ams_record_nature_definition4864 = createBitSet(0x0000000000000000L, 0x0000000000000040L)
  private val FOLLOW_RECORD_in_ams_record_nature_definition4866 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_record_nature_definition4868 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBNATURE_in_ams_subnature_declaration4885 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_subnature_declaration4887 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_ams_subnature_declaration4889 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_subnature_indication_in_ams_subnature_declaration4891 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_subnature_declaration4893 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_mark_in_ams_subnature_indication4910 = createBitSet(0x0000000000000002L, 0x2000000000000000L, 0x0000000000001000L)
  private val FOLLOW_index_constraint_in_ams_subnature_indication4912 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000001000L)
  private val FOLLOW_TOLERANCE_in_ams_subnature_indication4916 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_subnature_indication4920 = createBitSet(0x0000000000000000L, 0x0000020000000000L)
  private val FOLLOW_ACROSS_in_ams_subnature_indication4922 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_subnature_indication4926 = createBitSet(0x0000000000000000L, 0x0000040000000000L)
  private val FOLLOW_THROUGH_in_ams_subnature_indication4928 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_ams_nature_mark4948 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_protected_type_declaration4970 = createBitSet(0x0000104108002000L, 0x0000000040000012L)
  private val FOLLOW_protected_type_declarative_item_in_protected_type_declaration4975 = createBitSet(0x0000104108002000L, 0x0000000040000012L)
  private val FOLLOW_END_in_protected_type_declaration4981 = createBitSet(0x0000000000000000L, 0x0000000000000008L)
  private val FOLLOW_PROTECTED_in_protected_type_declaration4983 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_protected_type_declaration4985 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declaration_in_protected_type_declarative_item5004 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_protected_type_declarative_item5013 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_protected_type_declarative_item5020 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_protected_type_body5040 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_protected_type_body5042 = createBitSet(0x0000104948402080L, 0x00000000C4410012L)
  private val FOLLOW_protected_type_body_declarative_item_in_protected_type_body5047 = createBitSet(0x0000104948402080L, 0x00000000C4410012L)
  private val FOLLOW_END_in_protected_type_body5053 = createBitSet(0x0000000000000000L, 0x0000000000000008L)
  private val FOLLOW_PROTECTED_in_protected_type_body5055 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_protected_type_body5057 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_protected_type_body5059 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5078 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_protected_type_body_declarative_item5091 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5098 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_protected_type_body_declarative_item5105 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_protected_type_body_declarative_item5112 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_protected_type_body_declarative_item5118 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_protected_type_body_declarative_item5125 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5132 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_protected_type_body_declarative_item5139 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_protected_type_body_declarative_item5146 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5153 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_protected_type_body_declarative_item5160 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SUBTYPE_in_subtype_declaration5177 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_subtype_declaration5179 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_subtype_declaration5181 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_subtype_declaration5183 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_subtype_declaration5185 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_subtype_indication5205 = createBitSet(0x0000000000000002L, 0x2000000000000020L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_subtype_indication5209 = createBitSet(0x0000000000000002L, 0x2000000000000020L)
  private val FOLLOW_constraint_in_subtype_indication5212 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TO_in_direction5232 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DOWNTO_in_direction5239 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_range_constraint5254 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_range_in_range_constraint5256 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_index_constraint5275 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_discrete_range_in_index_constraint5279 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_index_constraint5283 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_discrete_range_in_index_constraint5288 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_index_constraint5294 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_range5321 = createBitSet(0x0000000001000000L, 0x0000000001000000L)
  private val FOLLOW_direction_in_range5323 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_range5327 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_range5334 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_constraint_in_constraint5349 = createBitSet(0x0000000000000002L)
  private val FOLLOW_index_constraint_in_constraint5356 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_in_discrete_range5382 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_indication_in_discrete_range5389 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_type_mark5406 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_in_concurrent_statement_list5433 = createBitSet(0x0000000000001002L, 0x2000000800000005L, 0x0000000000304800L)
  private val FOLLOW_label_colon_in_concurrent_statement5458 = createBitSet(0x0000002090309000L, 0x2000000800000005L, 0x0000000000304800L)
  private val FOLLOW_concurrent_statement_with_label_in_concurrent_statement5494 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement5504 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_statement_optional_label_in_concurrent_statement5518 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label5535 = createBitSet(0x0000000000000002L)
  private val FOLLOW_block_statement_in_concurrent_statement_with_label5543 = createBitSet(0x0000000000000002L)
  private val FOLLOW_generate_statement_in_concurrent_statement_with_label5551 = createBitSet(0x0000000000000002L)
  private val FOLLOW_POSTPONED_in_concurrent_statement_optional_label5575 = createBitSet(0x0000000000001000L, 0x2000000800000005L, 0x0000000000300800L)
  private val FOLLOW_process_statement_in_concurrent_statement_optional_label5585 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label5594 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label5613 = createBitSet(0x0000000000000002L)
  private val FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label5622 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label5644 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GENERIC_in_generic_map_aspect5673 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_generic_map_aspect5675 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_generic_map_aspect5677 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_list_in_generic_map_aspect5679 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_generic_map_aspect5681 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PORT_in_port_map_aspect5698 = createBitSet(0x0001000000000000L)
  private val FOLLOW_MAP_in_port_map_aspect5700 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_port_map_aspect5702 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_list_in_port_map_aspect5704 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_port_map_aspect5706 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BLOCK_in_block_statement5733 = createBitSet(0x8000144DC0D06080L, 0x200061C0C4430012L)
  private val FOLLOW_LPAREN_in_block_statement5736 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_block_statement5740 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_block_statement5742 = createBitSet(0x8000144DC0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_IS_in_block_statement5746 = createBitSet(0x8000104DC0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_generic_clause_in_block_statement5752 = createBitSet(0x8000104DC0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_generic_map_aspect_in_block_statement5755 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement5757 = createBitSet(0x80001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_port_clause_in_block_statement5766 = createBitSet(0x80001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_port_map_aspect_in_block_statement5769 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement5771 = createBitSet(0x00001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_block_declarative_item_in_block_statement5780 = createBitSet(0x00001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_BEGIN_in_block_statement5786 = createBitSet(0x0000000008001000L, 0x2000000800000005L, 0x0000000000304800L)
  private val FOLLOW_concurrent_statement_list_in_block_statement5790 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_block_statement5793 = createBitSet(0x0000000000008000L)
  private val FOLLOW_BLOCK_in_block_statement5795 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_block_statement5799 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_block_statement5802 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_block_declarative_item5823 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_block_declarative_item5836 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_block_declarative_item5843 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_block_declarative_item5850 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_declaration_in_block_declarative_item5857 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_block_declarative_item5864 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_block_declarative_item5871 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_block_declarative_item5878 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_declaration_in_block_declarative_item5885 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_block_declarative_item5892 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_block_declarative_item5899 = createBitSet(0x0000000000000002L)
  private val FOLLOW_configuration_specification_in_block_declarative_item5906 = createBitSet(0x0000000000000002L)
  private val FOLLOW_disconnection_specification_in_block_declarative_item5913 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_block_declarative_item5920 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_block_declarative_item5927 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_block_declarative_item5934 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_step_limit_specification_in_block_declarative_item5951 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_nature_declaration_in_block_declarative_item5959 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_subnature_declaration_in_block_declarative_item5967 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_quantity_declaration_in_block_declarative_item5975 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_terminal_declaration_in_block_declarative_item5983 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCESS_in_process_statement6010 = createBitSet(0x0000144940406080L, 0x20000000C4410012L)
  private val FOLLOW_LPAREN_in_process_statement6013 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_list_in_process_statement6015 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_process_statement6017 = createBitSet(0x0000144940406080L, 0x00000000C4410012L)
  private val FOLLOW_IS_in_process_statement6021 = createBitSet(0x0000104940406080L, 0x00000000C4410012L)
  private val FOLLOW_process_declarative_item_in_process_statement6027 = createBitSet(0x0000104940406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_process_statement6034 = createBitSet(0x00908020A8081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_process_statement6038 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_process_statement6041 = createBitSet(0x0000000000000000L, 0x0000000000000005L)
  private val FOLLOW_POSTPONED_in_process_statement6043 = createBitSet(0x0000000000000000L, 0x0000000000000004L)
  private val FOLLOW_PROCESS_in_process_statement6046 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_process_statement6050 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_process_statement6053 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6074 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_process_declarative_item6087 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_process_declarative_item6094 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_process_declarative_item6101 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_process_declarative_item6108 = createBitSet(0x0000000000000002L)
  private val FOLLOW_file_declaration_in_process_declarative_item6115 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_process_declarative_item6122 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_process_declarative_item6129 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_process_declarative_item6136 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_process_declarative_item6143 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_process_declarative_item6150 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_process_declarative_item6157 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_concurrent_procedure_call_statement6177 = createBitSet(0x0000000000000000L, 0x2400000000000000L)
  private val FOLLOW_LPAREN_in_concurrent_procedure_call_statement6180 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_list_in_concurrent_procedure_call_statement6182 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_concurrent_procedure_call_statement6184 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6188 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ASSERT_in_concurrent_assertion_statement6207 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_concurrent_assertion_statement6209 = createBitSet(0x0000000000000000L, 0x0400000000008400L)
  private val FOLLOW_REPORT_in_concurrent_assertion_statement6213 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_concurrent_assertion_statement6217 = createBitSet(0x0000000000000000L, 0x0400000000008000L)
  private val FOLLOW_SEVERITY_in_concurrent_assertion_statement6222 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_concurrent_assertion_statement6226 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_concurrent_assertion_statement6230 = createBitSet(0x0000000000000002L)
  private val FOLLOW_conditional_signal_assignment_in_concurrent_signal_assignment_statement6254 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_signal_assignment_in_concurrent_signal_assignment_statement6261 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_conditional_signal_assignment6281 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_LEQ_in_conditional_signal_assignment6283 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_GUARDED_in_conditional_signal_assignment6285 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_delay_mechanism_in_conditional_signal_assignment6288 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_conditional_waveforms_in_conditional_signal_assignment6295 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_conditional_signal_assignment6298 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_in_conditional_waveforms6311 = createBitSet(0x0000000000000002L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_conditional_waveforms6315 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_conditional_waveforms6317 = createBitSet(0x0000000002000002L)
  private val FOLLOW_ELSE_in_conditional_waveforms6321 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_conditional_waveforms_in_conditional_waveforms6323 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_selected_signal_assignment6353 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_selected_signal_assignment6355 = createBitSet(0x0000000000000000L, 0x0000000000004000L)
  private val FOLLOW_SELECT_in_selected_signal_assignment6357 = createBitSet(0x0000000000000000L, 0x2000000000000000L, 0x0000000000300800L)
  private val FOLLOW_target_in_selected_signal_assignment6363 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_LEQ_in_selected_signal_assignment6365 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_GUARDED_in_selected_signal_assignment6367 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_delay_mechanism_in_selected_signal_assignment6370 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_selected_waveform_in_selected_signal_assignment6378 = createBitSet(0x0000000000000000L, 0x0C00000000000000L)
  private val FOLLOW_COMMA_in_selected_signal_assignment6382 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_selected_waveform_in_selected_signal_assignment6386 = createBitSet(0x0000000000000000L, 0x0C00000000000000L)
  private val FOLLOW_SEMICOLON_in_selected_signal_assignment6391 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_in_selected_waveform6408 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_selected_waveform6410 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_choices_in_selected_waveform6412 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_target6431 = createBitSet(0x0000000000000002L)
  private val FOLLOW_aggregate_in_target6438 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_component_instantiation_statement6467 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_component_instantiation_statement6472 = createBitSet(0x8000000400000000L, 0x0400000000000000L)
  private val FOLLOW_ENTITY_in_component_instantiation_statement6480 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_component_instantiation_statement6484 = createBitSet(0x8000000400000000L, 0x2400000000000000L)
  private val FOLLOW_LPAREN_in_component_instantiation_statement6487 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_component_instantiation_statement6491 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_component_instantiation_statement6493 = createBitSet(0x8000000400000000L, 0x0400000000000000L)
  private val FOLLOW_CONFIGURATION_in_component_instantiation_statement6503 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_component_instantiation_statement6507 = createBitSet(0x8000000400000000L, 0x0400000000000000L)
  private val FOLLOW_generic_map_aspect_in_component_instantiation_statement6515 = createBitSet(0x8000000000000000L, 0x0400000000000000L)
  private val FOLLOW_port_map_aspect_in_component_instantiation_statement6519 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_component_instantiation_statement6522 = createBitSet(0x0000000000000002L)
  private val FOLLOW_for_generate_statement_in_generate_statement6541 = createBitSet(0x0000000000000002L)
  private val FOLLOW_if_generate_statement_in_generate_statement6549 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_for_generate_statement6571 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_for_generate_statement6575 = createBitSet(0x0000008000000000L)
  private val FOLLOW_IN_in_for_generate_statement6577 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_discrete_range_in_for_generate_statement6579 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_for_generate_statement6581 = createBitSet(0x00001049C0D07080L, 0x200061C8C4430017L, 0x0000000000304800L)
  private val FOLLOW_generate_statement_body_in_for_generate_statement6587 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_for_generate_statement6590 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_for_generate_statement6592 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_for_generate_statement6596 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_for_generate_statement6599 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_if_generate_statement6618 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_if_generate_statement6622 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement6624 = createBitSet(0x00001049C0D07080L, 0x200061C8C4430017L, 0x0000000000304800L)
  private val FOLLOW_generate_statement_body_in_if_generate_statement6630 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_if_generate_statement6636 = createBitSet(0x0000000200000000L)
  private val FOLLOW_GENERATE_in_if_generate_statement6638 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_if_generate_statement6642 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_if_generate_statement6645 = createBitSet(0x0000000000000002L)
  private val FOLLOW_block_declarative_item_in_generate_statement_body6677 = createBitSet(0x00001049C0D06080L, 0x000061C0C4430012L)
  private val FOLLOW_BEGIN_in_generate_statement_body6684 = createBitSet(0x0000000000001000L, 0x2000000800000005L, 0x0000000000304800L)
  private val FOLLOW_concurrent_statement_list_in_generate_statement_body6691 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BREAK_in_ams_concurrent_break_statement6712 = createBitSet(0x0200000080000000L, 0x0400000200000000L, 0x0000000000300800L)
  private val FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement6714 = createBitSet(0x0200000000000000L, 0x0400000200000000L)
  private val FOLLOW_ON_in_ams_concurrent_break_statement6718 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_list_in_ams_concurrent_break_statement6720 = createBitSet(0x0000000000000000L, 0x0400000200000000L)
  private val FOLLOW_WHEN_in_ams_concurrent_break_statement6725 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_concurrent_break_statement6727 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_concurrent_break_statement6731 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement6749 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement6757 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement6765 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement6773 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement6781 = createBitSet(0x0000000000000002L)
  private val FOLLOW_label_colon_in_ams_simultaneous_statement_list6802 = createBitSet(0x00C8002000080010L, 0x2001000000000000L, 0x00000000003F2830L)
  private val FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list6805 = createBitSet(0x00C8002000080012L, 0x2001000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6831 = createBitSet(0x0000000000000000L, 0x0004000000000000L)
  private val FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement6833 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6837 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000001000L)
  private val FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement6840 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_simple_simultaneous_statement6844 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement6848 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_ams_simultaneous_if_statement6876 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_ams_simultaneous_if_statement6880 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement6882 = createBitSet(0x00C800200E080010L, 0x2001000000000000L, 0x00000000003F2830L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6888 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSIF_in_ams_simultaneous_if_statement6894 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_ams_simultaneous_if_statement6898 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement6900 = createBitSet(0x00C800200E080010L, 0x2001000000000000L, 0x00000000003F2830L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6906 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSE_in_ams_simultaneous_if_statement6918 = createBitSet(0x00C8002008080010L, 0x2001000000000000L, 0x00000000003F2830L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6924 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_ams_simultaneous_if_statement6929 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_if_statement6931 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_simultaneous_if_statement6935 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement6938 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_ams_simultaneous_case_statement6967 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_simultaneous_case_statement6969 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_simultaneous_case_statement6971 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_ams_simultaneous_case_statement6976 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_choices_in_ams_simultaneous_case_statement6978 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_ams_simultaneous_case_statement6980 = createBitSet(0x00C8002008080010L, 0x2001000200000000L, 0x00000000003F2830L)
  private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement6982 = createBitSet(0x0000000008000000L, 0x0000000200000000L)
  private val FOLLOW_END_in_ams_simultaneous_case_statement6989 = createBitSet(0x0000000000080000L)
  private val FOLLOW_CASE_in_ams_simultaneous_case_statement6991 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_simultaneous_case_statement6995 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement6998 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7023 = createBitSet(0x0000144900406080L, 0x00000000C4410012L)
  private val FOLLOW_IS_in_ams_simultaneous_procedural_statement7025 = createBitSet(0x0000104900406080L, 0x00000000C4410012L)
  private val FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7031 = createBitSet(0x0000104900406080L, 0x00000000C4410012L)
  private val FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7037 = createBitSet(0x00908020A8081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7041 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_ams_simultaneous_procedural_statement7044 = createBitSet(0x0000000000000000L, 0x0001000000000000L)
  private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7046 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_ams_simultaneous_procedural_statement7050 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7053 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7071 = createBitSet(0x0000000000000002L)
  private val FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7078 = createBitSet(0x0000000000000002L)
  private val FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7085 = createBitSet(0x0000000000000002L)
  private val FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7092 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7099 = createBitSet(0x0000000000000002L)
  private val FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7106 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7113 = createBitSet(0x0000000000000002L)
  private val FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7120 = createBitSet(0x0000000000000002L)
  private val FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7127 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7134 = createBitSet(0x0000000000000002L)
  private val FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7141 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NULL_in_ams_simultaneous_null_statement7158 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7160 = createBitSet(0x0000000000000002L)
  private val FOLLOW_sequential_statement_in_sequence_of_statements7182 = createBitSet(0x00908020A0081002L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_label_colon_in_sequential_statement7203 = createBitSet(0x00908020A0081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_wait_statement_in_sequential_statement7209 = createBitSet(0x0000000000000002L)
  private val FOLLOW_assertion_statement_in_sequential_statement7217 = createBitSet(0x0000000000000002L)
  private val FOLLOW_report_statement_in_sequential_statement7225 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signal_assignment_statement_in_sequential_statement7239 = createBitSet(0x0000000000000002L)
  private val FOLLOW_variable_assignment_statement_in_sequential_statement7253 = createBitSet(0x0000000000000002L)
  private val FOLLOW_if_statement_in_sequential_statement7261 = createBitSet(0x0000000000000002L)
  private val FOLLOW_case_statement_in_sequential_statement7269 = createBitSet(0x0000000000000002L)
  private val FOLLOW_loop_statement_in_sequential_statement7277 = createBitSet(0x0000000000000002L)
  private val FOLLOW_next_statement_in_sequential_statement7285 = createBitSet(0x0000000000000002L)
  private val FOLLOW_exit_statement_in_sequential_statement7293 = createBitSet(0x0000000000000002L)
  private val FOLLOW_return_statement_in_sequential_statement7301 = createBitSet(0x0000000000000002L)
  private val FOLLOW_null_statement_in_sequential_statement7309 = createBitSet(0x0000000000000002L)
  private val FOLLOW_procedure_call_statement_in_sequential_statement7317 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_break_statement_in_sequential_statement7327 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WAIT_in_wait_statement7348 = createBitSet(0x0200000080000000L, 0x0400000020000000L)
  private val FOLLOW_ON_in_wait_statement7351 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_list_in_wait_statement7353 = createBitSet(0x0000000080000000L, 0x0400000020000000L)
  private val FOLLOW_UNTIL_in_wait_statement7358 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_wait_statement7360 = createBitSet(0x0000000080000000L, 0x0400000000000000L)
  private val FOLLOW_FOR_in_wait_statement7365 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_wait_statement7367 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_wait_statement7371 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ASSERT_in_assertion_statement7392 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_assertion_statement7394 = createBitSet(0x0000000000000000L, 0x0400000000008400L)
  private val FOLLOW_REPORT_in_assertion_statement7397 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_assertion_statement7401 = createBitSet(0x0000000000000000L, 0x0400000000008000L)
  private val FOLLOW_SEVERITY_in_assertion_statement7406 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_assertion_statement7410 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_assertion_statement7414 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REPORT_in_report_statement7439 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_report_statement7443 = createBitSet(0x0000000000000000L, 0x0400000000008000L)
  private val FOLLOW_SEVERITY_in_report_statement7446 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_report_statement7450 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_report_statement7454 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_signal_assignment_in_signal_assignment_statement7482 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_simple_signal_assignment7508 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_LEQ_in_simple_signal_assignment7510 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_delay_mechanism_in_simple_signal_assignment7512 = createBitSet(0x00C8011000000010L, 0x200000000A000100L, 0x00000000003F2830L)
  private val FOLLOW_waveform_in_simple_signal_assignment7515 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_simple_signal_assignment7517 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TRANSPORT_in_delay_mechanism7551 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REJECT_in_delay_mechanism7558 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_delay_mechanism7562 = createBitSet(0x0000010000000000L)
  private val FOLLOW_INERTIAL_in_delay_mechanism7566 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_waveform_element7581 = createBitSet(0x0000000000000042L)
  private val FOLLOW_AFTER_in_waveform_element7584 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_waveform_element7588 = createBitSet(0x0000000000000002L)
  private val FOLLOW_waveform_element_in_waveform7620 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_waveform7624 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_waveform_element_in_waveform7628 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_UNAFFECTED_in_waveform7637 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_variable_assignment_in_variable_assignment_statement7663 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_simple_variable_assignment7689 = createBitSet(0x0000000000000000L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_simple_variable_assignment7691 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_simple_variable_assignment7693 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_simple_variable_assignment7695 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_procedure_call_statement7719 = createBitSet(0x0000000000000000L, 0x2400000000000000L)
  private val FOLLOW_LPAREN_in_procedure_call_statement7722 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_list_in_procedure_call_statement7724 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_procedure_call_statement7726 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_procedure_call_statement7730 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_if_statement7754 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_if_statement7758 = createBitSet(0x0000000000000000L, 0x0000000000800000L)
  private val FOLLOW_THEN_in_if_statement7760 = createBitSet(0x00908020AE081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_if_statement7766 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSIF_in_if_statement7772 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_if_statement7776 = createBitSet(0x0000000000000000L, 0x0000000000800000L)
  private val FOLLOW_THEN_in_if_statement7778 = createBitSet(0x00908020AE081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_if_statement7785 = createBitSet(0x000000000E000000L)
  private val FOLLOW_ELSE_in_if_statement7798 = createBitSet(0x00908020A8081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_if_statement7805 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_if_statement7810 = createBitSet(0x0000002000000000L)
  private val FOLLOW_IF_in_if_statement7812 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_if_statement7816 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_if_statement7819 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CASE_in_case_statement7843 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_case_statement7847 = createBitSet(0x0000040000000000L)
  private val FOLLOW_IS_in_case_statement7849 = createBitSet(0x0000000000000000L, 0x0000000200000000L)
  private val FOLLOW_WHEN_in_case_statement7854 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_choices_in_case_statement7856 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_case_statement7858 = createBitSet(0x00908020A8081000L, 0x2000000700000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_case_statement7860 = createBitSet(0x0000000008000000L, 0x0000000200000000L)
  private val FOLLOW_END_in_case_statement7867 = createBitSet(0x0000000000080000L)
  private val FOLLOW_CASE_in_case_statement7869 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_case_statement7875 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_case_statement7878 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WHILE_in_iteration_scheme7894 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_iteration_scheme7896 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_iteration_scheme7903 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_iteration_scheme7905 = createBitSet(0x0000008000000000L)
  private val FOLLOW_IN_in_iteration_scheme7907 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_discrete_range_in_iteration_scheme7909 = createBitSet(0x0000000000000002L)
  private val FOLLOW_iteration_scheme_in_loop_statement7935 = createBitSet(0x0000800000000000L)
  private val FOLLOW_LOOP_in_loop_statement7938 = createBitSet(0x00908020A8081000L, 0x2000000500000C00L, 0x0000000000304800L)
  private val FOLLOW_sequence_of_statements_in_loop_statement7942 = createBitSet(0x0000000008000000L)
  private val FOLLOW_END_in_loop_statement7945 = createBitSet(0x0000800000000000L)
  private val FOLLOW_LOOP_in_loop_statement7947 = createBitSet(0x0000000000000000L, 0x0400000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_loop_statement7951 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_loop_statement7954 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEXT_in_next_statement7971 = createBitSet(0x0000000000000000L, 0x0400000200000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_next_statement7973 = createBitSet(0x0000000000000000L, 0x0400000200000000L)
  private val FOLLOW_WHEN_in_next_statement7977 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_next_statement7979 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_next_statement7983 = createBitSet(0x0000000000000002L)
  private val FOLLOW_EXIT_in_exit_statement8001 = createBitSet(0x0000000000000000L, 0x0400000200000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_exit_statement8003 = createBitSet(0x0000000000000000L, 0x0400000200000000L)
  private val FOLLOW_WHEN_in_exit_statement8007 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_condition_in_exit_statement8009 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_exit_statement8013 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RETURN_in_return_statement8031 = createBitSet(0x00C8000000000010L, 0x2400000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_return_statement8033 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_return_statement8036 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NULL_in_null_statement8055 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_null_statement8057 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BREAK_in_ams_break_statement8074 = createBitSet(0x0000000080000000L, 0x0400000200000000L, 0x0000000000300800L)
  private val FOLLOW_ams_break_element_list_in_ams_break_statement8076 = createBitSet(0x0000000000000000L, 0x0400000200000000L)
  private val FOLLOW_WHEN_in_ams_break_statement8080 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_break_statement8082 = createBitSet(0x0000000000000000L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_ams_break_statement8086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_break_element_in_ams_break_element_list8108 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_ams_break_element_list8112 = createBitSet(0x0000000080000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_break_element_in_ams_break_element_list8116 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_FOR_in_ams_break_element8140 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_in_ams_break_element8144 = createBitSet(0x0000000000000000L, 0x0000000040000000L)
  private val FOLLOW_USE_in_ams_break_element8146 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_in_ams_break_element8152 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_ams_break_element8154 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_break_element8158 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_interface_element_procedure8188 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_variable_declaration_in_interface_element_procedure8212 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure8220 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_file_declaration_in_interface_element_procedure8227 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure8242 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure8250 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_constant_declaration_in_interface_element_function8278 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_signal_declaration_function_in_interface_element_function8286 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_file_declaration_in_interface_element_function8293 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_function8308 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_function8316 = createBitSet(0x0000000000000002L)
  private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8351 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_parameter_interface_list_procedure8355 = createBitSet(0x0000000040400000L, 0x0000018080020000L, 0x0000000000300000L)
  private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8359 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_interface_element_function_in_parameter_interface_list_function8388 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_SEMICOLON_in_parameter_interface_list_function8393 = createBitSet(0x0000000040400000L, 0x0000018080020000L, 0x0000000000300000L)
  private val FOLLOW_interface_element_function_in_parameter_interface_list_function8397 = createBitSet(0x0000000000000002L, 0x0400000000000000L)
  private val FOLLOW_CONSTANT_in_interface_constant_declaration8420 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_interface_constant_declaration8423 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_interface_constant_declaration8425 = createBitSet(0x00C8008000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_IN_in_interface_constant_declaration8427 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_interface_constant_declaration8430 = createBitSet(0x0000000000000002L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_constant_declaration8433 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_interface_constant_declaration8435 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_interface_signal_declaration_procedure8454 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_interface_signal_declaration_procedure8457 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_interface_signal_declaration_procedure8459 = createBitSet(0x20C8228000020010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_interface_mode_in_interface_signal_declaration_procedure8461 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_interface_signal_declaration_procedure8464 = createBitSet(0x0000000000040002L, 0x0080000000000000L)
  private val FOLLOW_BUS_in_interface_signal_declaration_procedure8466 = createBitSet(0x0000000000000002L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure8470 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_interface_signal_declaration_procedure8472 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SIGNAL_in_interface_signal_declaration_function8492 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_interface_signal_declaration_function8494 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_interface_signal_declaration_function8496 = createBitSet(0x00C8008000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_IN_in_interface_signal_declaration_function8498 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_interface_signal_declaration_function8501 = createBitSet(0x0000000000040002L, 0x0080000000000000L)
  private val FOLLOW_BUS_in_interface_signal_declaration_function8503 = createBitSet(0x0000000000000002L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function8507 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_interface_signal_declaration_function8509 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_interface_variable_declaration8528 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_interface_variable_declaration8531 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_interface_variable_declaration8533 = createBitSet(0x20C8228000020010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_interface_mode_in_interface_variable_declaration8535 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_interface_variable_declaration8538 = createBitSet(0x0000000000000002L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_interface_variable_declaration8541 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_interface_variable_declaration8543 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IN_in_interface_mode8562 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OUT_in_interface_mode8569 = createBitSet(0x0000000000000002L)
  private val FOLLOW_INOUT_in_interface_mode8576 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BUFFER_in_interface_mode8583 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LINKAGE_in_interface_mode8590 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FILE_in_interface_file_declaration8605 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_interface_file_declaration8607 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_interface_file_declaration8609 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_interface_file_declaration8611 = createBitSet(0x0000000000000002L)
  private val FOLLOW_TERMINAL_in_ams_interface_terminal_declaration8629 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_interface_terminal_declaration8631 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_interface_terminal_declaration8633 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration8635 = createBitSet(0x0000000000000002L)
  private val FOLLOW_QUANTITY_in_ams_interface_quantity_declaration8651 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_ams_interface_quantity_declaration8653 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_ams_interface_quantity_declaration8655 = createBitSet(0x20C8008000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_IN_in_ams_interface_quantity_declaration8658 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_OUT_in_ams_interface_quantity_declaration8662 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_subtype_indication_in_ams_interface_quantity_declaration8666 = createBitSet(0x0000000000000002L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration8669 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_ams_interface_quantity_declaration8671 = createBitSet(0x0000000000000002L)
  private val FOLLOW_formal_part_in_association_element8700 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_association_element8702 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_actual_part_in_association_element8706 = createBitSet(0x0000000000000002L)
  private val FOLLOW_association_element_in_association_list8733 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_association_list8738 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_element_in_association_list8742 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_identifier_in_formal_part8764 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_formal_part8771 = createBitSet(0x0000000000000000L, 0x2000000000000000L)
  private val FOLLOW_name_association_list_part_in_formal_part8778 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_slice_part_in_formal_part8782 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_actual_part8806 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OPEN_in_actual_part8815 = createBitSet(0x0000000000000002L)
  private val FOLLOW_expression_in_condition8834 = createBitSet(0x0000000000000002L)
  private val FOLLOW_relation_in_expression8855 = createBitSet(0x0824000000000202L, 0x0000003000000000L)
  private val FOLLOW_NAND_in_expression8866 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_NOR_in_expression8870 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_relation_in_expression8875 = createBitSet(0x0000000000000002L)
  private val FOLLOW_logical_operator_in_expression8888 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_relation_in_expression8892 = createBitSet(0x0800000000000202L, 0x0000003000000000L)
  private val FOLLOW_AND_in_logical_operator8916 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OR_in_logical_operator8923 = createBitSet(0x0000000000000002L)
  private val FOLLOW_XOR_in_logical_operator8930 = createBitSet(0x0000000000000002L)
  private val FOLLOW_XNOR_in_logical_operator8937 = createBitSet(0x0000000000000002L)
  private val FOLLOW_shift_expression_in_relation8958 = createBitSet(0x0000000000000002L, 0x0058000000000000L, 0x00000000000001C0L)
  private val FOLLOW_relational_operator_in_relation8966 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_shift_expression_in_relation8970 = createBitSet(0x0000000000000002L)
  private val FOLLOW_EQ_in_relational_operator8991 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEQ_in_relational_operator8998 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LT_in_relational_operator9005 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LEQ_in_relational_operator9012 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GT_in_relational_operator9019 = createBitSet(0x0000000000000002L)
  private val FOLLOW_GEQ_in_relational_operator9026 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_shift_expression9045 = createBitSet(0x0000000000000002L, 0x00000000003C3000L)
  private val FOLLOW_shift_operator_in_shift_expression9053 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_simple_expression_in_shift_expression9057 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SLL_in_shift_operator9078 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SRL_in_shift_operator9085 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SLA_in_shift_operator9092 = createBitSet(0x0000000000000002L)
  private val FOLLOW_SRA_in_shift_operator9099 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ROL_in_shift_operator9106 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ROR_in_shift_operator9113 = createBitSet(0x0000000000000002L)
  private val FOLLOW_sign_in_simple_expression9132 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_term_in_simple_expression9137 = createBitSet(0x0000000000000002L, 0x1000000000000000L, 0x0000000000000030L)
  private val FOLLOW_adding_operator_in_simple_expression9148 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_term_in_simple_expression9152 = createBitSet(0x0000000000000002L, 0x1000000000000000L, 0x0000000000000030L)
  private val FOLLOW_PLUS_in_sign9173 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MINUS_in_sign9180 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PLUS_in_adding_operator9203 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MINUS_in_adding_operator9210 = createBitSet(0x0000000000000002L)
  private val FOLLOW_AMPERSAND_in_adding_operator9217 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MUL_in_multiplying_operator9236 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DIV_in_multiplying_operator9243 = createBitSet(0x0000000000000002L)
  private val FOLLOW_MOD_in_multiplying_operator9250 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REM_in_multiplying_operator9257 = createBitSet(0x0000000000000002L)
  private val FOLLOW_factor_in_term9274 = createBitSet(0x0002000000000002L, 0x0000000000000200L, 0x000000000000000CL)
  private val FOLLOW_multiplying_operator_in_term9282 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_factor_in_term9286 = createBitSet(0x0002000000000002L, 0x0000000000000200L, 0x000000000000000CL)
  private val FOLLOW_primary_in_factor9306 = createBitSet(0x0000000000000002L, 0x0002000000000000L)
  private val FOLLOW_DOUBLESTAR_in_factor9309 = createBitSet(0x0088000000000000L, 0x2000000000000000L, 0x00000000003F2800L)
  private val FOLLOW_primary_in_factor9313 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ABS_in_factor9322 = createBitSet(0x0088000000000000L, 0x2000000000000000L, 0x00000000003F2800L)
  private val FOLLOW_primary_in_factor9324 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NOT_in_factor9331 = createBitSet(0x0088000000000000L, 0x2000000000000000L, 0x00000000003F2800L)
  private val FOLLOW_primary_in_factor9333 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_primary9353 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000008000L)
  private val FOLLOW_qualified_expression_in_primary9355 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_in_primary9363 = createBitSet(0x0000000000000002L)
  private val FOLLOW_literal_in_primary9370 = createBitSet(0x0000000000000002L)
  private val FOLLOW_allocator_in_primary9378 = createBitSet(0x0000000000000002L)
  private val FOLLOW_aggregate_in_primary9385 = createBitSet(0x0000000000000002L)
  private val FOLLOW_NEW_in_allocator9401 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_allocator9403 = createBitSet(0x0000000000000002L, 0x2000000000000000L, 0x0000000000008000L)
  private val FOLLOW_qualified_expression_in_allocator9410 = createBitSet(0x0000000000000002L)
  private val FOLLOW_index_constraint_in_allocator9420 = createBitSet(0x0000000000000002L)
  private val FOLLOW_APOSTROPHE_in_qualified_expression9443 = createBitSet(0x0000000000000000L, 0x2000000000000000L, 0x0000000000300800L)
  private val FOLLOW_aggregate_in_qualified_expression9445 = createBitSet(0x0000000000000002L)
  private val FOLLOW_selected_name_in_selected_name_list9467 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_selected_name_list9472 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_selected_name_list9476 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_name_prefix_in_selected_name9503 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000000400L)
  private val FOLLOW_name_selected_part_in_selected_name9507 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000000400L)
  private val FOLLOW_name_in_name_list9533 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_name_list9538 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_name_in_name_list9542 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_name_prefix_in_name9570 = createBitSet(0x0000000000000002L, 0xA000000000000000L, 0x0000000000008400L)
  private val FOLLOW_name_part_in_name9573 = createBitSet(0x0000000000000002L, 0xA000000000000000L, 0x0000000000008400L)
  private val FOLLOW_identifier_in_name_prefix9593 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_name_prefix9601 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_selected_part_in_name_part9617 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_attribute_part_in_name_part9624 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_name_part9635 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_slice_part_in_name_part9642 = createBitSet(0x0000000000000002L)
  private val FOLLOW_DOT_in_name_selected_part9662 = createBitSet(0x0000000000000100L, 0x0000000000000000L, 0x0000000000302800L)
  private val FOLLOW_identifier_in_name_selected_part9667 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CHARACTER_LITERAL_in_name_selected_part9673 = createBitSet(0x0000000000000002L)
  private val FOLLOW_STRING_LITERAL_in_name_selected_part9680 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ALL_in_name_selected_part9686 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_name_association_list_part9703 = createBitSet(0x04C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_association_list_in_name_association_list_part9705 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_name_association_list_part9707 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_name_slice_part9726 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_discrete_range_in_name_slice_part9728 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_name_slice_part9730 = createBitSet(0x0000000000000002L)
  private val FOLLOW_signature_in_name_attribute_part9746 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000008000L)
  private val FOLLOW_APOSTROPHE_in_name_attribute_part9749 = createBitSet(0x0000000000000000L, 0x0000000000000020L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_name_attribute_part9754 = createBitSet(0x0000000000000002L, 0x2000000000000000L)
  private val FOLLOW_RANGE_in_name_attribute_part9756 = createBitSet(0x0000000000000002L, 0x2000000000000000L)
  private val FOLLOW_LPAREN_in_name_attribute_part9769 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_name_attribute_part9771 = createBitSet(0x0000000000000000L, 0x4000000000000000L)
  private val FOLLOW_RPAREN_in_name_attribute_part9773 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LBRACKET_in_signature9792 = createBitSet(0x0000000000000000L, 0x0000000000000800L, 0x0000000000300801L)
  private val FOLLOW_selected_name_list_in_signature9794 = createBitSet(0x0000000000000000L, 0x0000000000000800L, 0x0000000000000001L)
  private val FOLLOW_RETURN_in_signature9798 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_type_mark_in_signature9800 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000001L)
  private val FOLLOW_RBRACKET_in_signature9804 = createBitSet(0x0000000000000002L)
  private val FOLLOW_REAL_LITERAL_in_literal9832 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_INTEGER_LITERAL_in_literal9840 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_BASED_LITERAL_in_literal9848 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_CHARACTER_LITERAL_in_literal9856 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_BIT_STRING_LITERAL_in_literal9867 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_NULL_in_literal9875 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_literal9890 = createBitSet(0x0000000000000002L)
  private val FOLLOW_INTEGER_LITERAL_in_physical_literal9916 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_REAL_LITERAL_in_physical_literal9924 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300800L)
  private val FOLLOW_selected_name_in_physical_literal9934 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choices_in_element_association9960 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_element_association9962 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_expression_in_element_association9967 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_aggregate9988 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_element_association_in_aggregate9992 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_COMMA_in_aggregate9996 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_element_association_in_aggregate10000 = createBitSet(0x0000000000000000L, 0x4800000000000000L)
  private val FOLLOW_RPAREN_in_aggregate10006 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_choice10047 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_choice10074 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_choice10081 = createBitSet(0x0000000000000002L)
  private val FOLLOW_OTHERS_in_choice10088 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choice_in_choices10109 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000000200L)
  private val FOLLOW_BAR_in_choices10114 = createBitSet(0x10C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_choice_in_choices10118 = createBitSet(0x0000000000000002L, 0x0000000000000000L, 0x0000000000000200L)
  private val FOLLOW_identifier_in_identifier_list10149 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_COMMA_in_identifier_list10154 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_in_identifier_list10158 = createBitSet(0x0000000000000002L, 0x0800000000000000L)
  private val FOLLOW_BASIC_IDENTIFIER_in_identifier10183 = createBitSet(0x0000000000000002L)
  private val FOLLOW_EXTENDED_IDENTIFIER_in_identifier10190 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_label_colon10210 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_label_colon10212 = createBitSet(0x0000000000000002L)
  private val FOLLOW_discrete_range_in_synpred1_VHDL2009 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_synpred2_VHDL2048 = createBitSet(0x0000000000000002L)
  private val FOLLOW_RANGE_in_synpred3_VHDL2913 = createBitSet(0x00C8000000000010L, 0x2000000000000000L, 0x00000000003F2830L)
  private val FOLLOW_range_in_synpred3_VHDL2915 = createBitSet(0x0000000000000000L, 0x0000000010000000L)
  private val FOLLOW_UNITS_in_synpred3_VHDL2917 = createBitSet(0x0000000000000002L)
  private val FOLLOW_PROTECTED_in_synpred4_VHDL2971 = createBitSet(0x0000000000010000L)
  private val FOLLOW_BODY_in_synpred4_VHDL2973 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_free_quantity_declaration_in_synpred5_VHDL3086 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_branch_quantity_declaration_in_synpred6_VHDL3098 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ams_across_aspect_in_synpred7_VHDL3165 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_synpred8_VHDL5313 = createBitSet(0x0000000001000000L, 0x0000000001000000L)
  private val FOLLOW_direction_in_synpred8_VHDL5315 = createBitSet(0x0000000000000002L)
  private val FOLLOW_range_in_synpred9_VHDL5379 = createBitSet(0x0000000000000002L)
  private val FOLLOW_COMPONENT_in_synpred10_VHDL5466 = createBitSet(0x0000000000000002L)
  private val FOLLOW_ENTITY_in_synpred10_VHDL5470 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONFIGURATION_in_synpred10_VHDL5474 = createBitSet(0x0000000000000002L)
  private val FOLLOW_BLOCK_in_synpred10_VHDL5478 = createBitSet(0x0000000000000002L)
  private val FOLLOW_IF_in_synpred10_VHDL5482 = createBitSet(0x0000000000000002L)
  private val FOLLOW_FOR_in_synpred10_VHDL5486 = createBitSet(0x0000000000000002L)
  private val FOLLOW_component_instantiation_statement_in_synpred10_VHDL5490 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred11_VHDL5604 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_LEQ_in_synpred11_VHDL5606 = createBitSet(0x0000000000000002L)
  private val FOLLOW_WITH_in_synpred11_VHDL5610 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred12_VHDL7234 = createBitSet(0x0000000000000000L, 0x0008000000000000L)
  private val FOLLOW_LEQ_in_synpred12_VHDL7236 = createBitSet(0x0000000000000002L)
  private val FOLLOW_target_in_synpred13_VHDL7248 = createBitSet(0x0000000000000000L, 0x0080000000000000L)
  private val FOLLOW_VAR_ASSIGN_in_synpred13_VHDL7250 = createBitSet(0x0000000000000002L)
  private val FOLLOW_CONSTANT_in_synpred14_VHDL8176 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_synpred14_VHDL8179 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_synpred14_VHDL8181 = createBitSet(0x0000008000000002L)
  private val FOLLOW_IN_in_synpred14_VHDL8183 = createBitSet(0x0000000000000002L)
  private val FOLLOW_VARIABLE_in_synpred15_VHDL8197 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000300000L)
  private val FOLLOW_identifier_list_in_synpred15_VHDL8200 = createBitSet(0x0000000000000000L, 0x0000000000000000L, 0x0000000000000002L)
  private val FOLLOW_COLON_in_synpred15_VHDL8202 = createBitSet(0x2000020000000002L)
  private val FOLLOW_set_in_synpred15_VHDL8204 = createBitSet(0x0000000000000002L)
  private val FOLLOW_formal_part_in_synpred16_VHDL8695 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_synpred16_VHDL8697 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_synpred17_VHDL8775 = createBitSet(0x0000000000000002L)
  private val FOLLOW_name_association_list_part_in_synpred18_VHDL9632 = createBitSet(0x0000000000000002L)
  private val FOLLOW_LPAREN_in_synpred19_VHDL9765 = createBitSet(0x0000000000000002L)
  private val FOLLOW_choices_in_synpred20_VHDL9954 = createBitSet(0x0000000000000000L, 0x0020000000000000L)
  private val FOLLOW_ARROW_in_synpred20_VHDL9956 = createBitSet(0x0000000000000002L)
  private val FOLLOW_identifier_in_synpred21_VHDL10028 = createBitSet(0x0000000000000000L, 0x0C20000000000000L, 0x0000000000000200L)
  private val FOLLOW_set_in_synpred21_VHDL10030 = createBitSet(0x0000000000000002L)
  private val FOLLOW_simple_expression_in_synpred22_VHDL10055 = createBitSet(0x0000000000000000L, 0x0C20000000000000L, 0x0000000000000200L)
  private val FOLLOW_set_in_synpred22_VHDL10057 = createBitSet(0x0000000000000002L)

  final class generate_statement_body_return extends ParserRuleReturnScope {
    var blockItems: Seq[DeclarativeItem] = null
    var statementList: Seq[ConcurrentStatement] = null
  }

  final class logical_operator_return extends ParserRuleReturnScope {
    var logOp: LogicalExpression.Operator.Value = null
    var pos: Position = null
  }

  final class relational_operator_return extends ParserRuleReturnScope {
    var relOp: Relation.Operator.Value = null
    var pos: Position = null
  }

  final class shift_operator_return extends ParserRuleReturnScope {
    var shiftOp: ShiftExpression.Operator.Value = null
    var pos: Position = null
  }

  final class sign_return extends ParserRuleReturnScope {
    var signOp: SimpleExpression.SignOperator.Value = null
    var pos: Position = null
  }

  final class adding_operator_return extends ParserRuleReturnScope {
    var addOp: SimpleExpression.AddOperator.Value = null
    var pos: Position = null
  }

  final class multiplying_operator_return extends ParserRuleReturnScope {
    var mulOp: Term.Operator.Value = null
    var pos: Position = null
  }

}

final class VHDLParser(input: TokenStream, state: RecognizerSharedState) extends Parser(input, state) {

  import VHDLParser._
  import org.antlr.runtime.BaseRecognizer._

  // delegates
  // delegators

  def this(input: TokenStream) = this (input, new RecognizerSharedState())


  this.state.ruleMemo = new Array[java.util.Map[_, _]](223 + 1)


  override val getTokenNames = VHDLParser.tokenNames
  override val getGrammarFileName = "C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g"


  var ams = false

  type Buffer[A] = scala.collection.immutable.VectorBuilder[A]
  //scala.collection.mutable.ListBuffer[A]

  private val syntaxErrorList = new Buffer[CompilerMessage]()

  def syntaxErrors: Seq[CompilerMessage] = this.syntaxErrorList.result

  private def toPosition(token: Token): Position = new Position(line = token.getLine(), charPosition = token.getCharPositionInLine())

  private def toIdentifier(token: Token, toLowerCase: Boolean = true): Identifier =
    if (token.getType() != STRING_LITERAL && token.getType() != CHARACTER_LITERAL)
      new Identifier(toPosition(token), if (toLowerCase) token.getText().toLowerCase() else token.getText().replace("""\\""", "\\"))
    else new Identifier(toPosition(token), token.getText())

  override def displayRecognitionError(tokenNames: Array[String], e: RecognitionException) =
    syntaxErrorList += new CompilerMessage(position = toPosition(e.token), message = super.getErrorMessage(e, tokenNames))

  private implicit def anyToOption[A](value: A): Option[A] = Option(value)


  // $ANTLR start "design_file"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:266:1: design_file returns [DesignFile designFile] : ( design_unit )+ EOF ;
  @throws(classOf[RecognitionException])
  def design_file(): DesignFile = {
    var designFile: DesignFile = null;
    val design_file_StartIndex = input.index()
    var design_unit1: DesignUnit = null



    val units = new Buffer[DesignUnit]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
        return designFile
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:269:3: ( ( design_unit )+ EOF )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:270:2: ( design_unit )+ EOF
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:270:2: ( design_unit )+
      var cnt1 = 0
      var loop1 = true
      do {
        var alt1 = 2
        val LA1_0 = input.LA(1)

        if ((LA1_0 == ARCHITECTURE || LA1_0 == CONFIGURATION || LA1_0 == ENTITY || LA1_0 == LIBRARY || LA1_0 == PACKAGE || LA1_0 == USE)) {
          alt1 = 1
        }


        alt1 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:270:3: design_unit
            pushFollow(FOLLOW_design_unit_in_design_file1280)
            design_unit1 = design_unit();

            state._fsp -= 1
            if (state.failed) return designFile
            if (state.backtracking == 0) {
              units += design_unit1
            }


          case _ =>
            if (cnt1 >= 1) loop1 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return designFile
              }
              val eee = new EarlyExitException(1, input)
              throw eee
            }
        }
        cnt1 += 1
      } while (loop1);

      `match`(input, EOF, FOLLOW_EOF_in_design_file1285);
      if (state.failed) return designFile
      if (state.backtracking == 0) {
        designFile = new DesignFile(units.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 1, design_file_StartIndex)
      }
    }
    return designFile
  }

  // $ANTLR end "design_file"

  // $ANTLR start "design_unit"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:274:1: design_unit returns [DesignUnit designUnit] : ( library_clause | use_clause )* library_unit ;
  @throws(classOf[RecognitionException])
  def design_unit(): DesignUnit = {
    var designUnit: DesignUnit = null;
    val design_unit_StartIndex = input.index()
    var library_clause2: Seq[Identifier] = null

    var use_clause3: UseClause = null

    var library_unit4: LibraryUnit = null



    val libraries = new Buffer[Identifier]()
    val useClauses = new Buffer[UseClause]()
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
        return designUnit
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:279:3: ( ( library_clause | use_clause )* library_unit )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:280:2: ( library_clause | use_clause )* library_unit
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:280:2: ( library_clause | use_clause )*
      var loop2 = true
      do {
        var alt2 = 3
        val LA2_0 = input.LA(1)

        if ((LA2_0 == LIBRARY)) {
          alt2 = 1
        }
        else if ((LA2_0 == USE)) {
          alt2 = 2
        }


        alt2 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:281:3: library_clause
            pushFollow(FOLLOW_library_clause_in_design_unit1311)
            library_clause2 = library_clause();

            state._fsp -= 1
            if (state.failed) return designUnit
            if (state.backtracking == 0) {
              libraries ++= library_clause2
            }

          case 2 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:282:5: use_clause
            pushFollow(FOLLOW_use_clause_in_design_unit1319)
            use_clause3 = use_clause();

            state._fsp -= 1
            if (state.failed) return designUnit
            if (state.backtracking == 0) {
              useClauses += use_clause3
            }


          case _ => loop2 = false
        }
      } while (loop2);

      pushFollow(FOLLOW_library_unit_in_design_unit1330)
      library_unit4 = library_unit();

      state._fsp -= 1
      if (state.failed) return designUnit
      if (state.backtracking == 0) {
        designUnit = new DesignUnit(position, libraries.result, useClauses.result, library_unit4)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 2, design_unit_StartIndex)
      }
    }
    return designUnit
  }

  // $ANTLR end "design_unit"

  // $ANTLR start "library_unit"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:287:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | configuration_declaration );
  @throws(classOf[RecognitionException])
  def library_unit(): LibraryUnit = {
    var libraryUnit: LibraryUnit = null;
    val library_unit_StartIndex = input.index()
    var entity_declaration5: EntityDeclaration = null

    var architecture_body6: ArchitectureDeclaration = null

    var package_declaration7: PackageDeclaration = null

    var package_body8: PackageBodyDeclaration = null

    var configuration_declaration9: ConfigurationDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return libraryUnit
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:287:48: ( entity_declaration | architecture_body | package_declaration | package_body | configuration_declaration )
      var alt3 = 5
      input.LA(1) match {
        case ENTITY =>
          alt3 = 1
        case ARCHITECTURE =>
          alt3 = 2
        case PACKAGE =>
          val LA3_3 = input.LA(2)

          if ((LA3_3 == BODY)) {
            alt3 = 4
          }
          else if (((LA3_3 >= BASIC_IDENTIFIER && LA3_3 <= EXTENDED_IDENTIFIER))) {
            alt3 = 3
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return libraryUnit
            }
            val nvae = new NoViableAltException("", 3, 3, input)

            throw nvae
          }
        case CONFIGURATION =>
          alt3 = 5
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return libraryUnit
          }
          val nvae = new NoViableAltException("", 3, 0, input)

          throw nvae
      }

      alt3 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:288:2: entity_declaration
          pushFollow(FOLLOW_entity_declaration_in_library_unit1348)
          entity_declaration5 = entity_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = entity_declaration5
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:289:4: architecture_body
          pushFollow(FOLLOW_architecture_body_in_library_unit1355)
          architecture_body6 = architecture_body();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = architecture_body6
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:290:4: package_declaration
          pushFollow(FOLLOW_package_declaration_in_library_unit1362)
          package_declaration7 = package_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = package_declaration7
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:291:4: package_body
          pushFollow(FOLLOW_package_body_in_library_unit1369)
          package_body8 = package_body();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = package_body8
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:293:4: configuration_declaration
          pushFollow(FOLLOW_configuration_declaration_in_library_unit1378)
          configuration_declaration9 = configuration_declaration();

          state._fsp -= 1
          if (state.failed) return libraryUnit
          if (state.backtracking == 0) {
            libraryUnit = configuration_declaration9
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 3, library_unit_StartIndex)
      }
    }
    return libraryUnit
  }

  // $ANTLR end "library_unit"

  // $ANTLR start "library_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:298:1: library_clause returns [Seq[Identifier] identifierList] : LIBRARY identifier_list SEMICOLON ;
  @throws(classOf[RecognitionException])
  def library_clause(): Seq[Identifier] = {
    var identifierList: Seq[Identifier] = null;
    val library_clause_StartIndex = input.index()
    var identifier_list10: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 4)) {
        return identifierList
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:298:58: ( LIBRARY identifier_list SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:299:2: LIBRARY identifier_list SEMICOLON
      `match`(input, LIBRARY, FOLLOW_LIBRARY_in_library_clause1401);
      if (state.failed) return identifierList
      pushFollow(FOLLOW_identifier_list_in_library_clause1403)
      identifier_list10 = identifier_list();

      state._fsp -= 1
      if (state.failed) return identifierList
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_library_clause1405);
      if (state.failed) return identifierList
      if (state.backtracking == 0) {
        identifierList = identifier_list10
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 4, library_clause_StartIndex)
      }
    }
    return identifierList
  }

  // $ANTLR end "library_clause"

  // $ANTLR start "generic_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:308:1: generic_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : GENERIC LPAREN generic_interface_list RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def generic_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val generic_clause_StartIndex = input.index()
    var generic_interface_list11: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 5)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:308:76: ( GENERIC LPAREN generic_interface_list RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:309:2: GENERIC LPAREN generic_interface_list RPAREN SEMICOLON
      `match`(input, GENERIC, FOLLOW_GENERIC_in_generic_clause1427);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_generic_clause1429);
      if (state.failed) return list
      pushFollow(FOLLOW_generic_interface_list_in_generic_clause1431)
      generic_interface_list11 = generic_interface_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_generic_clause1433);
      if (state.failed) return list
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_generic_clause1435);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = generic_interface_list11
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 5, generic_clause_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_clause"

  // $ANTLR start "generic_interface_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:312:1: generic_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* ;
  @throws(classOf[RecognitionException])
  def generic_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val generic_interface_list_StartIndex = input.index()
    var decl1: InterfaceList.InterfaceConstantDeclaration = null

    var decl2: InterfaceList.InterfaceConstantDeclaration = null



    val elements = new Buffer[InterfaceList.InterfaceConstantDeclaration]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 6)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:315:3: (decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:316:2: decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )*
      pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1457)
      decl1 = interface_constant_declaration();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += decl1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:316:73: ( SEMICOLON decl2= interface_constant_declaration )*
      var loop4 = true
      do {
        var alt4 = 2
        val LA4_0 = input.LA(1)

        if ((LA4_0 == SEMICOLON)) {
          alt4 = 1
        }


        alt4 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:316:75: SEMICOLON decl2= interface_constant_declaration
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_generic_interface_list1463);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1467)
            decl2 = interface_constant_declaration();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += decl2
            }


          case _ => loop4 = false
        }
      } while (loop4);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 6, generic_interface_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_interface_list"

  // $ANTLR start "port_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:319:1: port_clause returns [Seq[InterfaceList.AbstractInterfaceElement] list] : PORT LPAREN port_interface_list RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def port_clause(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val port_clause_StartIndex = input.index()
    var port_interface_list12: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:319:73: ( PORT LPAREN port_interface_list RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:320:2: PORT LPAREN port_interface_list RPAREN SEMICOLON
      `match`(input, PORT, FOLLOW_PORT_in_port_clause1495);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_port_clause1497);
      if (state.failed) return list
      pushFollow(FOLLOW_port_interface_list_in_port_clause1499)
      port_interface_list12 = port_interface_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_port_clause1501);
      if (state.failed) return list
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_port_clause1503);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = port_interface_list12
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 7, port_clause_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_clause"

  // $ANTLR start "port_interface_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:323:1: port_interface_list returns [Seq[InterfaceList.AbstractInterfaceElement] list] : decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )* ;
  @throws(classOf[RecognitionException])
  def port_interface_list(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val port_interface_list_StartIndex = input.index()
    var decl1: InterfaceList.InterfaceSignalDeclaration = null

    var decl2: InterfaceList.InterfaceSignalDeclaration = null



    val elements = new Buffer[InterfaceList.InterfaceSignalDeclaration]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:326:3: (decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:327:2: decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )*
      pushFollow(FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1525)
      decl1 = interface_signal_declaration_procedure();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += decl1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:327:82: ( SEMICOLON decl2= interface_signal_declaration_procedure )*
      var loop5 = true
      do {
        var alt5 = 2
        val LA5_0 = input.LA(1)

        if ((LA5_0 == SEMICOLON)) {
          alt5 = 1
        }


        alt5 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:327:84: SEMICOLON decl2= interface_signal_declaration_procedure
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_port_interface_list1531);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1535)
            decl2 = interface_signal_declaration_procedure();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += decl2
            }


          case _ => loop5 = false
        }
      } while (loop5);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 8, port_interface_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_interface_list"

  // $ANTLR start "entity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:330:1: entity_declaration returns [EntityDeclaration entityDecl] : ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def entity_declaration(): EntityDeclaration = {
    var entityDecl: EntityDeclaration = null;
    val entity_declaration_StartIndex = input.index()
    var postponed: Token = null
    var start_identifier: Identifier = null

    var label: Identifier = null

    var end_identifier: Identifier = null

    var entity_declarative_item13: DeclarativeItem = null

    var concurrent_assertion_statement14: ConcurrentAssertionStatement = null

    var concurrent_procedure_call_statement15: ConcurrentProcedureCallStatement = null

    var process_statement16: ProcessStatement = null

    var generic_clause17: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_clause18: Seq[InterfaceList.AbstractInterfaceElement] = null



    val declarativeItems = new Buffer[DeclarativeItem]()
    val concurrentStmt = new Buffer[ConcurrentStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
        return entityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:334:3: ( ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:335:2: ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON
      `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_declaration1569);
      if (state.failed) return entityDecl
      pushFollow(FOLLOW_identifier_in_entity_declaration1573)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return entityDecl
      `match`(input, IS, FOLLOW_IS_in_entity_declaration1575);
      if (state.failed) return entityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:336:3: ( generic_clause )?
      var alt6 = 2
      val LA6_0 = input.LA(1)

      if ((LA6_0 == GENERIC)) {
        alt6 = 1
      }
      alt6 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:336:3: generic_clause
          pushFollow(FOLLOW_generic_clause_in_entity_declaration1579)
          generic_clause17 = generic_clause();

          state._fsp -= 1
          if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:337:3: ( port_clause )?
      var alt7 = 2
      val LA7_0 = input.LA(1)

      if ((LA7_0 == PORT)) {
        alt7 = 1
      }
      alt7 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:337:3: port_clause
          pushFollow(FOLLOW_port_clause_in_entity_declaration1584)
          port_clause18 = port_clause();

          state._fsp -= 1
          if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:338:3: ( entity_declarative_item )*
      var loop8 = true
      do {
        var alt8 = 2
        val LA8_0 = input.LA(1)

        if ((LA8_0 == ALIAS || LA8_0 == ATTRIBUTE || (LA8_0 >= CONSTANT && LA8_0 <= DISCONNECT) || LA8_0 == FILE || LA8_0 == FUNCTION || LA8_0 == GROUP || LA8_0 == IMPURE || LA8_0 == PROCEDURE || LA8_0 == PURE || (LA8_0 >= SHARED && LA8_0 <= SIGNAL) || LA8_0 == SUBTYPE || LA8_0 == TYPE || (LA8_0 >= USE && LA8_0 <= VARIABLE))) {
          alt8 = 1
        }
        else if (((LA8_0 >= NATURE && LA8_0 <= QUANTITY) || (LA8_0 >= SUBNATURE && LA8_0 <= LIMIT)) && ((ams))) {
          alt8 = 1
        }


        alt8 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:338:4: entity_declarative_item
            pushFollow(FOLLOW_entity_declarative_item_in_entity_declaration1590)
            entity_declarative_item13 = entity_declarative_item();

            state._fsp -= 1
            if (state.failed) return entityDecl
            if (state.backtracking == 0) {
              declarativeItems += entity_declarative_item13
            }


          case _ => loop8 = false
        }
      } while (loop8);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:339:2: ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )?
      var alt13 = 2
      val LA13_0 = input.LA(1)

      if ((LA13_0 == BEGIN)) {
        alt13 = 1
      }
      alt13 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:339:3: BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
          `match`(input, BEGIN, FOLLOW_BEGIN_in_entity_declaration1598);
          if (state.failed) return entityDecl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:3: ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
          var loop12 = true
          do {
            var alt12 = 2
            val LA12_0 = input.LA(1)

            if ((LA12_0 == ASSERT || LA12_0 == POSTPONED || LA12_0 == PROCESS || LA12_0 == STRING_LITERAL || (LA12_0 >= BASIC_IDENTIFIER && LA12_0 <= EXTENDED_IDENTIFIER))) {
              alt12 = 1
            }


            alt12 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:4: (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:9: (label= label_colon )?
                var alt9 = 2
                val LA9_0 = input.LA(1)

                if ((LA9_0 == BASIC_IDENTIFIER)) {
                  val LA9_1 = input.LA(2)

                  if ((LA9_1 == COLON)) {
                    alt9 = 1
                  }
                }
                else if ((LA9_0 == EXTENDED_IDENTIFIER)) {
                  val LA9_2 = input.LA(2)

                  if ((LA9_2 == COLON)) {
                    alt9 = 1
                  }
                }
                alt9 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:9: label= label_colon
                    pushFollow(FOLLOW_label_colon_in_entity_declaration1605)
                    label = label_colon();

                    state._fsp -= 1
                    if (state.failed) return entityDecl


                  case _ =>
                }

                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:32: (postponed= POSTPONED )?
                var alt10 = 2
                val LA10_0 = input.LA(1)

                if ((LA10_0 == POSTPONED)) {
                  alt10 = 1
                }
                alt10 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:32: postponed= POSTPONED
                    postponed = `match`(input, POSTPONED, FOLLOW_POSTPONED_in_entity_declaration1610).asInstanceOf[Token]; if (state.failed) return entityDecl


                  case _ =>
                }

                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:340:44: ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
                var alt11 = 3
                input.LA(1) match {
                  case ASSERT =>
                    alt11 = 1
                  case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
                    alt11 = 2
                  case PROCESS =>
                    alt11 = 3
                  case _ =>
                    if (state.backtracking > 0) {
                      state.failed = true; return entityDecl
                    }
                    val nvae = new NoViableAltException("", 11, 0, input)

                    throw nvae
                }

                alt11 match {
                  case 1 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:341:4: concurrent_assertion_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_concurrent_assertion_statement_in_entity_declaration1618)
                    concurrent_assertion_statement14 = concurrent_assertion_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += concurrent_assertion_statement14
                    }

                  case 2 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:342:6: concurrent_procedure_call_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1628)
                    concurrent_procedure_call_statement15 = concurrent_procedure_call_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += concurrent_procedure_call_statement15
                    }

                  case 3 =>
                  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:343:6: process_statement[$label.label,postponed!=null]
                    pushFollow(FOLLOW_process_statement_in_entity_declaration1637)
                    process_statement16 = process_statement(label, postponed != null);

                    state._fsp -= 1
                    if (state.failed) return entityDecl
                    if (state.backtracking == 0) {
                      concurrentStmt += process_statement16
                    }


                  case _ =>
                }


              case _ => loop12 = false
            }
          } while (loop12);


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_entity_declaration1662);
      if (state.failed) return entityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:348:6: ( ENTITY )?
      var alt14 = 2
      val LA14_0 = input.LA(1)

      if ((LA14_0 == ENTITY)) {
        alt14 = 1
      }
      alt14 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:348:6: ENTITY
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_declaration1664); if (state.failed) return entityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:348:28: (end_identifier= identifier )?
      var alt15 = 2
      val LA15_0 = input.LA(1)

      if (((LA15_0 >= BASIC_IDENTIFIER && LA15_0 <= EXTENDED_IDENTIFIER))) {
        alt15 = 1
      }
      alt15 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:348:28: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_entity_declaration1669)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return entityDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_entity_declaration1672);
      if (state.failed) return entityDecl
      if (state.backtracking == 0) {
        entityDecl = new EntityDeclaration(start_identifier, generic_clause17, port_clause18, declarativeItems.result, concurrentStmt.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 9, entity_declaration_StartIndex)
      }
    }
    return entityDecl
  }

  // $ANTLR end "entity_declaration"

  // $ANTLR start "entity_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:351:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def entity_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val entity_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body19: DeclarativeItem = null

    var type_declaration20: AbstractTypeDeclaration = null

    var subtype_declaration21: SubTypeDeclaration = null

    var constant_declaration22: ConstantDeclaration = null

    var signal_declaration23: SignalDeclaration = null

    var variable_declaration24: VariableDeclaration = null

    var file_declaration25: FileDeclaration = null

    var alias_declaration26: AliasDeclaration = null

    var attribute_declaration27: AttributeDeclaration = null

    var attribute_specification28: AttributeSpecification = null

    var disconnection_specification29: DisconnectionSpecification = null

    var use_clause30: UseClause = null

    var group_template_declaration31: GroupTemplateDeclaration = null

    var group_declaration32: GroupDeclaration = null

    var ams_step_limit_specification33: StepLimitSpecification = null

    var ams_nature_declaration34: AbstractTypeDeclaration = null

    var ams_subnature_declaration35: SubNatureDeclaration = null

    var ams_quantity_declaration36: AbstractQuantityDeclaration = null

    var ams_terminal_declaration37: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:351:56: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
      var alt17 = 15
      alt17 = dfa17.predict(input)
      alt17 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:352:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1690)
          subprogram_declartion_or_body19 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body19
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:356:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_entity_declarative_item1700)
          type_declaration20 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration20
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:357:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_entity_declarative_item1707)
          subtype_declaration21 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration21
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:358:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_entity_declarative_item1714)
          constant_declaration22 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration22
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:359:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_entity_declarative_item1721)
          signal_declaration23 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration23
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:360:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_entity_declarative_item1728)
          variable_declaration24 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration24
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:361:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_entity_declarative_item1735)
          file_declaration25 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration25
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:362:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_entity_declarative_item1742)
          alias_declaration26 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration26
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:363:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_entity_declarative_item1749)
          attribute_declaration27 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration27
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:364:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_entity_declarative_item1756)
          attribute_specification28 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification28
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:365:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_entity_declarative_item1763)
          disconnection_specification29 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification29
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:366:4: use_clause
          pushFollow(FOLLOW_use_clause_in_entity_declarative_item1770)
          use_clause30 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause30
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:367:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_entity_declarative_item1777)
          group_template_declaration31 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration31
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:368:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_entity_declarative_item1784)
          group_declaration32 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration32
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:371:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "entity_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:372:3: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          var alt16 = 5
          input.LA(1) match {
            case LIMIT =>
              alt16 = 1
            case NATURE =>
              alt16 = 2
            case SUBNATURE =>
              alt16 = 3
            case QUANTITY =>
              alt16 = 4
            case TERMINAL =>
              alt16 = 5
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 16, 0, input)

              throw nvae
          }

          alt16 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:373:3: ams_step_limit_specification
              pushFollow(FOLLOW_ams_step_limit_specification_in_entity_declarative_item1804)
              ams_step_limit_specification33 = ams_step_limit_specification();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_step_limit_specification33
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:374:5: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_entity_declarative_item1812)
              ams_nature_declaration34 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration34
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:375:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_entity_declarative_item1820)
              ams_subnature_declaration35 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration35
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:376:5: ams_quantity_declaration
              pushFollow(FOLLOW_ams_quantity_declaration_in_entity_declarative_item1828)
              ams_quantity_declaration36 = ams_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_quantity_declaration36
              }

            case 5 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:377:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_entity_declarative_item1836)
              ams_terminal_declaration37 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration37
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 10, entity_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "entity_declarative_item"

  // $ANTLR start "architecture_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:380:1: architecture_body returns [ArchitectureDeclaration archDecl] : ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def architecture_body(): ArchitectureDeclaration = {
    var archDecl: ArchitectureDeclaration = null;
    val architecture_body_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var block_declarative_item38: DeclarativeItem = null

    var selected_name39: SelectedName = null

    var concurrent_statement_list40: Seq[ConcurrentStatement] = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
        return archDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:383:3: ( ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:384:2: ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN concurrent_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON
      `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_architecture_body1861);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_identifier_in_architecture_body1865)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, OF, FOLLOW_OF_in_architecture_body1867);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_selected_name_in_architecture_body1869)
      selected_name39 = selected_name();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, IS, FOLLOW_IS_in_architecture_body1871);
      if (state.failed) return archDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:385:3: ( block_declarative_item )*
      var loop18 = true
      do {
        var alt18 = 2
        val LA18_0 = input.LA(1)

        if ((LA18_0 == ALIAS || LA18_0 == ATTRIBUTE || LA18_0 == COMPONENT || (LA18_0 >= CONSTANT && LA18_0 <= DISCONNECT) || (LA18_0 >= FILE && LA18_0 <= FUNCTION) || LA18_0 == GROUP || LA18_0 == IMPURE || LA18_0 == PROCEDURE || LA18_0 == PURE || (LA18_0 >= SHARED && LA18_0 <= SIGNAL) || LA18_0 == SUBTYPE || LA18_0 == TYPE || (LA18_0 >= USE && LA18_0 <= VARIABLE))) {
          alt18 = 1
        }
        else if (((LA18_0 >= NATURE && LA18_0 <= QUANTITY) || (LA18_0 >= SUBNATURE && LA18_0 <= LIMIT)) && ((ams))) {
          alt18 = 1
        }


        alt18 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:385:4: block_declarative_item
            pushFollow(FOLLOW_block_declarative_item_in_architecture_body1876)
            block_declarative_item38 = block_declarative_item();

            state._fsp -= 1
            if (state.failed) return archDecl
            if (state.backtracking == 0) {
              declarativeItems += block_declarative_item38
            }


          case _ => loop18 = false
        }
      } while (loop18);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_architecture_body1882);
      if (state.failed) return archDecl
      pushFollow(FOLLOW_concurrent_statement_list_in_architecture_body1886)
      concurrent_statement_list40 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return archDecl
      `match`(input, END, FOLLOW_END_in_architecture_body1889);
      if (state.failed) return archDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:388:6: ( ARCHITECTURE )?
      var alt19 = 2
      val LA19_0 = input.LA(1)

      if ((LA19_0 == ARCHITECTURE)) {
        alt19 = 1
      }
      alt19 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:388:6: ARCHITECTURE
          `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_architecture_body1891); if (state.failed) return archDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:388:34: (end_identifier= identifier )?
      var alt20 = 2
      val LA20_0 = input.LA(1)

      if (((LA20_0 >= BASIC_IDENTIFIER && LA20_0 <= EXTENDED_IDENTIFIER))) {
        alt20 = 1
      }
      alt20 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:388:34: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_architecture_body1896)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return archDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_architecture_body1899);
      if (state.failed) return archDecl
      if (state.backtracking == 0) {
        archDecl = new ArchitectureDeclaration(start_identifier, declarativeItems.result, selected_name39, concurrent_statement_list40, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 11, architecture_body_StartIndex)
      }
    }
    return archDecl
  }

  // $ANTLR end "architecture_body"

  // $ANTLR start "configuration_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:391:1: configuration_declarative_item returns [DeclarativeItem item] : ( use_clause | attribute_specification | group_declaration );
  @throws(classOf[RecognitionException])
  def configuration_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val configuration_declarative_item_StartIndex = input.index()
    var use_clause41: UseClause = null

    var attribute_specification42: AttributeSpecification = null

    var group_declaration43: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:391:63: ( use_clause | attribute_specification | group_declaration )
      var alt21 = 3
      input.LA(1) match {
        case USE =>
          alt21 = 1
        case ATTRIBUTE =>
          alt21 = 2
        case GROUP =>
          alt21 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return item
          }
          val nvae = new NoViableAltException("", 21, 0, input)

          throw nvae
      }

      alt21 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:392:2: use_clause
          pushFollow(FOLLOW_use_clause_in_configuration_declarative_item1917)
          use_clause41 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause41
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:393:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_configuration_declarative_item1924)
          attribute_specification42 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification42
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:394:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_configuration_declarative_item1931)
          group_declaration43 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration43
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 12, configuration_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "configuration_declarative_item"

  // $ANTLR start "configuration_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:396:1: configuration_declaration returns [ConfigurationDeclaration configDecl] : CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def configuration_declaration(): ConfigurationDeclaration = {
    var configDecl: ConfigurationDeclaration = null;
    val configuration_declaration_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var configuration_declarative_item44: DeclarativeItem = null

    var selected_name45: SelectedName = null

    var block_configuration46: BlockConfiguration = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
        return configDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:399:3: ( CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:400:2: CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON
      `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_configuration_declaration1952);
      if (state.failed) return configDecl
      pushFollow(FOLLOW_identifier_in_configuration_declaration1956)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, OF, FOLLOW_OF_in_configuration_declaration1958);
      if (state.failed) return configDecl
      pushFollow(FOLLOW_selected_name_in_configuration_declaration1960)
      selected_name45 = selected_name();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, IS, FOLLOW_IS_in_configuration_declaration1962);
      if (state.failed) return configDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:401:3: ( configuration_declarative_item )*
      var loop22 = true
      do {
        var alt22 = 2
        val LA22_0 = input.LA(1)

        if ((LA22_0 == ATTRIBUTE || LA22_0 == GROUP || LA22_0 == USE)) {
          alt22 = 1
        }


        alt22 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:401:4: configuration_declarative_item
            pushFollow(FOLLOW_configuration_declarative_item_in_configuration_declaration1967)
            configuration_declarative_item44 = configuration_declarative_item();

            state._fsp -= 1
            if (state.failed) return configDecl
            if (state.backtracking == 0) {
              declarativeItems += configuration_declarative_item44
            }


          case _ => loop22 = false
        }
      } while (loop22);

      pushFollow(FOLLOW_block_configuration_in_configuration_declaration1977)
      block_configuration46 = block_configuration();

      state._fsp -= 1
      if (state.failed) return configDecl
      `match`(input, END, FOLLOW_END_in_configuration_declaration1980);
      if (state.failed) return configDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:6: ( CONFIGURATION )?
      var alt23 = 2
      val LA23_0 = input.LA(1)

      if ((LA23_0 == CONFIGURATION)) {
        alt23 = 1
      }
      alt23 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:6: CONFIGURATION
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_configuration_declaration1982); if (state.failed) return configDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:35: (end_identifier= identifier )?
      var alt24 = 2
      val LA24_0 = input.LA(1)

      if (((LA24_0 >= BASIC_IDENTIFIER && LA24_0 <= EXTENDED_IDENTIFIER))) {
        alt24 = 1
      }
      alt24 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:404:35: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_configuration_declaration1987)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return configDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_configuration_declaration1990);
      if (state.failed) return configDecl
      if (state.backtracking == 0) {
        configDecl = new ConfigurationDeclaration(start_identifier, declarativeItems.result, selected_name45, block_configuration46, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 13, configuration_declaration_StartIndex)
      }
    }
    return configDecl
  }

  // $ANTLR end "configuration_declaration"

  // $ANTLR start "block_configuration_index"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:407:1: block_configuration_index returns [Either[DiscreteRange,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | expression );
  @throws(classOf[RecognitionException])
  def block_configuration_index(): Either[DiscreteRange, Expression] = {
    var blockIndex: Either[DiscreteRange, Expression] = null;
    val block_configuration_index_StartIndex = input.index()
    var discrete_range47: DiscreteRange = null

    var expression48: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
        return blockIndex
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:407:82: ( ( discrete_range )=> discrete_range | expression )
      var alt25 = 2
      alt25 = dfa25.predict(input)
      alt25 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:408:4: ( discrete_range )=> discrete_range
          pushFollow(FOLLOW_discrete_range_in_block_configuration_index2012)
          discrete_range47 = discrete_range();

          state._fsp -= 1
          if (state.failed) return blockIndex
          if (state.backtracking == 0) {
            blockIndex = Left(discrete_range47)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:409:6: expression
          pushFollow(FOLLOW_expression_in_block_configuration_index2021)
          expression48 = expression();

          state._fsp -= 1
          if (state.failed) return blockIndex
          if (state.backtracking == 0) {
            blockIndex = Right(expression48)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 14, block_configuration_index_StartIndex)
      }
    }
    return blockIndex
  }

  // $ANTLR end "block_configuration_index"

  // $ANTLR start "block_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:413:1: block_specification returns [BlockConfigurationSpecification blockConfig] : ( ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name );
  @throws(classOf[RecognitionException])
  def block_specification(): BlockConfigurationSpecification = {
    var blockConfig: BlockConfigurationSpecification = null;
    val block_specification_StartIndex = input.index()
    var identifier49: Identifier = null

    var block_configuration_index50: Either[DiscreteRange, Expression] = null

    var selected_name51: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 15)) {
        return blockConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:413:75: ( ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name )
      var alt27 = 2
      input.LA(1) match {
        case BASIC_IDENTIFIER =>
          val LA27_1 = input.LA(2)

          if ((synpred2_VHDL())) {
            alt27 = 1
          }
          else if ((true)) {
            alt27 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return blockConfig
            }
            val nvae = new NoViableAltException("", 27, 1, input)

            throw nvae
          }
        case EXTENDED_IDENTIFIER =>
          val LA27_2 = input.LA(2)

          if ((synpred2_VHDL())) {
            alt27 = 1
          }
          else if ((true)) {
            alt27 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return blockConfig
            }
            val nvae = new NoViableAltException("", 27, 2, input)

            throw nvae
          }
        case STRING_LITERAL =>
          alt27 = 2
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return blockConfig
          }
          val nvae = new NoViableAltException("", 27, 0, input)

          throw nvae
      }

      alt27 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:414:2: ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )?
          pushFollow(FOLLOW_identifier_in_block_specification2051)
          identifier49 = identifier();

          state._fsp -= 1
          if (state.failed) return blockConfig
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:414:27: ( LPAREN block_configuration_index RPAREN )?
          var alt26 = 2
          val LA26_0 = input.LA(1)

          if ((LA26_0 == LPAREN)) {
            alt26 = 1
          }
          alt26 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:414:28: LPAREN block_configuration_index RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_block_specification2054);
              if (state.failed) return blockConfig
              pushFollow(FOLLOW_block_configuration_index_in_block_specification2056)
              block_configuration_index50 = block_configuration_index();

              state._fsp -= 1
              if (state.failed) return blockConfig
              `match`(input, RPAREN, FOLLOW_RPAREN_in_block_specification2058);
              if (state.failed) return blockConfig


            case _ =>
          }

          if (state.backtracking == 0) {
            new BlockConfigurationSpecification(Right((identifier49, block_configuration_index50)))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:415:4: selected_name
          pushFollow(FOLLOW_selected_name_in_block_specification2067)
          selected_name51 = selected_name();

          state._fsp -= 1
          if (state.failed) return blockConfig
          if (state.backtracking == 0) {
            blockConfig = new BlockConfigurationSpecification(Left(selected_name51))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 15, block_specification_StartIndex)
      }
    }
    return blockConfig
  }

  // $ANTLR end "block_specification"

  // $ANTLR start "block_configuration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:417:1: block_configuration returns [BlockConfiguration blockConfig] : FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON ;
  @throws(classOf[RecognitionException])
  def block_configuration(): BlockConfiguration = {
    var blockConfig: BlockConfiguration = null;
    val block_configuration_StartIndex = input.index()
    var config: BlockConfiguration = null

    var use_clause52: UseClause = null

    var component_configuration53: ComponentConfiguration = null

    var block_specification54: BlockConfigurationSpecification = null



    val useClauses = new Buffer[UseClause]()
    val configurations = new Buffer[Either[BlockConfiguration, ComponentConfiguration]]

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return blockConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:421:3: ( FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:422:2: FOR block_specification ( use_clause )* (config= block_configuration | component_configuration )* END FOR SEMICOLON
      `match`(input, FOR, FOLLOW_FOR_in_block_configuration2091);
      if (state.failed) return blockConfig
      pushFollow(FOLLOW_block_specification_in_block_configuration2093)
      block_specification54 = block_specification();

      state._fsp -= 1
      if (state.failed) return blockConfig
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:423:3: ( use_clause )*
      var loop28 = true
      do {
        var alt28 = 2
        val LA28_0 = input.LA(1)

        if ((LA28_0 == USE)) {
          alt28 = 1
        }


        alt28 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:423:4: use_clause
            pushFollow(FOLLOW_use_clause_in_block_configuration2098)
            use_clause52 = use_clause();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              useClauses += use_clause52
            }


          case _ => loop28 = false
        }
      } while (loop28);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:424:3: (config= block_configuration | component_configuration )*
      var loop29 = true
      do {
        var alt29 = 3
        val LA29_0 = input.LA(1)

        if ((LA29_0 == FOR)) {
          input.LA(2) match {
            case BASIC_IDENTIFIER =>
              val LA29_3 = input.LA(3)

              if ((LA29_3 == END || LA29_3 == FOR || LA29_3 == USE || LA29_3 == LPAREN || LA29_3 == DOT)) {
                alt29 = 1
              }
              else if ((LA29_3 == COMMA || LA29_3 == COLON)) {
                alt29 = 2
              }


            case EXTENDED_IDENTIFIER =>
              val LA29_4 = input.LA(3)

              if ((LA29_4 == END || LA29_4 == FOR || LA29_4 == USE || LA29_4 == LPAREN || LA29_4 == DOT)) {
                alt29 = 1
              }
              else if ((LA29_4 == COMMA || LA29_4 == COLON)) {
                alt29 = 2
              }


            case ALL | OTHERS =>
              alt29 = 2
            case STRING_LITERAL =>
              alt29 = 1

            case _ =>
          }

        }


        alt29 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:425:4: config= block_configuration
            pushFollow(FOLLOW_block_configuration_in_block_configuration2113)
            config = block_configuration();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              configurations += Left(config)
            }

          case 2 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:426:6: component_configuration
            pushFollow(FOLLOW_component_configuration_in_block_configuration2122)
            component_configuration53 = component_configuration();

            state._fsp -= 1
            if (state.failed) return blockConfig
            if (state.backtracking == 0) {
              configurations += Right(component_configuration53)
            }


          case _ => loop29 = false
        }
      } while (loop29);

      `match`(input, END, FOLLOW_END_in_block_configuration2132);
      if (state.failed) return blockConfig
      `match`(input, FOR, FOLLOW_FOR_in_block_configuration2134);
      if (state.failed) return blockConfig
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_configuration2136);
      if (state.failed) return blockConfig
      if (state.backtracking == 0) {
        blockConfig = new BlockConfiguration(block_specification54, useClauses.result, configurations.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 16, block_configuration_StartIndex)
      }
    }
    return blockConfig
  }

  // $ANTLR end "block_configuration"

  // $ANTLR start "component_configuration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:431:1: component_configuration returns [ComponentConfiguration componentConfig] : FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_configuration(): ComponentConfiguration = {
    var componentConfig: ComponentConfiguration = null;
    val component_configuration_StartIndex = input.index()
    var component_specification55: ComponentSpecification = null

    var binding_indication56: BindingIndication = null

    var block_configuration57: BlockConfiguration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 17)) {
        return componentConfig
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:431:74: ( FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:432:2: FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON
      `match`(input, FOR, FOLLOW_FOR_in_component_configuration2155);
      if (state.failed) return componentConfig
      pushFollow(FOLLOW_component_specification_in_component_configuration2157)
      component_specification55 = component_specification();

      state._fsp -= 1
      if (state.failed) return componentConfig
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:433:3: ( binding_indication SEMICOLON )?
      var alt30 = 2
      val LA30_0 = input.LA(1)

      if ((LA30_0 == GENERIC || LA30_0 == PORT || LA30_0 == USE || LA30_0 == SEMICOLON)) {
        alt30 = 1
      }
      alt30 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:433:4: binding_indication SEMICOLON
          pushFollow(FOLLOW_binding_indication_in_component_configuration2162)
          binding_indication56 = binding_indication();

          state._fsp -= 1
          if (state.failed) return componentConfig
          `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_configuration2164);
          if (state.failed) return componentConfig


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:435:3: ( block_configuration )?
      var alt31 = 2
      val LA31_0 = input.LA(1)

      if ((LA31_0 == FOR)) {
        alt31 = 1
      }
      alt31 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:435:3: block_configuration
          pushFollow(FOLLOW_block_configuration_in_component_configuration2173)
          block_configuration57 = block_configuration();

          state._fsp -= 1
          if (state.failed) return componentConfig


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_component_configuration2177);
      if (state.failed) return componentConfig
      `match`(input, FOR, FOLLOW_FOR_in_component_configuration2179);
      if (state.failed) return componentConfig
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_configuration2181);
      if (state.failed) return componentConfig
      if (state.backtracking == 0) {
        componentConfig = new ComponentConfiguration(component_specification55, binding_indication56, block_configuration57)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 17, component_configuration_StartIndex)
      }
    }
    return componentConfig
  }

  // $ANTLR end "component_configuration"

  // $ANTLR start "package_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:449:1: package_declaration returns [PackageDeclaration packageDecl] : PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def package_declaration(): PackageDeclaration = {
    var packageDecl: PackageDeclaration = null;
    val package_declaration_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var package_declarative_item58: DeclarativeItem = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
        return packageDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:452:3: ( PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:453:2: PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_declaration2209);
      if (state.failed) return packageDecl
      pushFollow(FOLLOW_identifier_in_package_declaration2213)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return packageDecl
      `match`(input, IS, FOLLOW_IS_in_package_declaration2215);
      if (state.failed) return packageDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:456:3: ( package_declarative_item )*
      var loop32 = true
      do {
        var alt32 = 2
        val LA32_0 = input.LA(1)

        if ((LA32_0 == ALIAS || LA32_0 == ATTRIBUTE || LA32_0 == COMPONENT || (LA32_0 >= CONSTANT && LA32_0 <= DISCONNECT) || LA32_0 == FILE || LA32_0 == FUNCTION || LA32_0 == GROUP || LA32_0 == IMPURE || LA32_0 == PROCEDURE || LA32_0 == PURE || (LA32_0 >= SHARED && LA32_0 <= SIGNAL) || LA32_0 == SUBTYPE || LA32_0 == TYPE || (LA32_0 >= USE && LA32_0 <= VARIABLE))) {
          alt32 = 1
        }
        else if (((LA32_0 >= NATURE && LA32_0 <= TERMINAL) || LA32_0 == SUBNATURE) && ((ams))) {
          alt32 = 1
        }


        alt32 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:456:4: package_declarative_item
            pushFollow(FOLLOW_package_declarative_item_in_package_declaration2224)
            package_declarative_item58 = package_declarative_item();

            state._fsp -= 1
            if (state.failed) return packageDecl
            if (state.backtracking == 0) {
              declarativeItems += package_declarative_item58
            }


          case _ => loop32 = false
        }
      } while (loop32);

      `match`(input, END, FOLLOW_END_in_package_declaration2230);
      if (state.failed) return packageDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:457:6: ( PACKAGE )?
      var alt33 = 2
      val LA33_0 = input.LA(1)

      if ((LA33_0 == PACKAGE)) {
        alt33 = 1
      }
      alt33 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:457:6: PACKAGE
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_declaration2232); if (state.failed) return packageDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:457:29: (end_identifier= identifier )?
      var alt34 = 2
      val LA34_0 = input.LA(1)

      if (((LA34_0 >= BASIC_IDENTIFIER && LA34_0 <= EXTENDED_IDENTIFIER))) {
        alt34 = 1
      }
      alt34 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:457:29: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_package_declaration2237)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return packageDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_declaration2240);
      if (state.failed) return packageDecl
      if (state.backtracking == 0) {
        packageDecl = new PackageDeclaration(start_identifier, declarativeItems.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 18, package_declaration_StartIndex)
      }
    }
    return packageDecl
  }

  // $ANTLR end "package_declaration"

  // $ANTLR start "package_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:460:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def package_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val package_declarative_item_StartIndex = input.index()
    var subprogram_declaration59: DeclarativeItem = null

    var type_declaration60: AbstractTypeDeclaration = null

    var subtype_declaration61: SubTypeDeclaration = null

    var constant_declaration62: ConstantDeclaration = null

    var signal_declaration63: SignalDeclaration = null

    var variable_declaration64: VariableDeclaration = null

    var file_declaration65: FileDeclaration = null

    var alias_declaration66: AliasDeclaration = null

    var component_declaration67: ComponentDeclaration = null

    var attribute_declaration68: AttributeDeclaration = null

    var attribute_specification69: AttributeSpecification = null

    var disconnection_specification70: DisconnectionSpecification = null

    var use_clause71: UseClause = null

    var group_template_declaration72: GroupTemplateDeclaration = null

    var group_declaration73: GroupDeclaration = null

    var ams_nature_declaration74: AbstractTypeDeclaration = null

    var ams_subnature_declaration75: SubNatureDeclaration = null

    var ams_terminal_declaration76: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:460:57: ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) )
      var alt36 = 16
      alt36 = dfa36.predict(input)
      alt36 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:461:2: subprogram_declaration
          pushFollow(FOLLOW_subprogram_declaration_in_package_declarative_item2258)
          subprogram_declaration59 = subprogram_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declaration59
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:465:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_package_declarative_item2268)
          type_declaration60 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration60
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:466:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_package_declarative_item2275)
          subtype_declaration61 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration61
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:467:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_package_declarative_item2282)
          constant_declaration62 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration62
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:468:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_package_declarative_item2289)
          signal_declaration63 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration63
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:469:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_package_declarative_item2296)
          variable_declaration64 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration64
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:470:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_package_declarative_item2303)
          file_declaration65 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration65
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:471:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_package_declarative_item2310)
          alias_declaration66 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration66
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:472:4: component_declaration
          pushFollow(FOLLOW_component_declaration_in_package_declarative_item2317)
          component_declaration67 = component_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = component_declaration67
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:473:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_package_declarative_item2324)
          attribute_declaration68 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration68
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:474:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_package_declarative_item2331)
          attribute_specification69 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification69
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:475:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_package_declarative_item2338)
          disconnection_specification70 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification70
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:476:4: use_clause
          pushFollow(FOLLOW_use_clause_in_package_declarative_item2345)
          use_clause71 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause71
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:477:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_package_declarative_item2352)
          group_template_declaration72 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration72
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:478:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_package_declarative_item2359)
          group_declaration73 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration73
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:480:4: {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "package_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:480:13: ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
          var alt35 = 3
          input.LA(1) match {
            case NATURE =>
              alt35 = 1
            case SUBNATURE =>
              alt35 = 2
            case TERMINAL =>
              alt35 = 3
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 35, 0, input)

              throw nvae
          }

          alt35 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:481:3: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_package_declarative_item2375)
              ams_nature_declaration74 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration74
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:482:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_package_declarative_item2383)
              ams_subnature_declaration75 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration75
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:483:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_package_declarative_item2391)
              ams_terminal_declaration76 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration76
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 19, package_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "package_declarative_item"

  // $ANTLR start "package_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:486:1: package_body returns [PackageBodyDeclaration packageBody] : PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def package_body(): PackageBodyDeclaration = {
    var packageBody: PackageBodyDeclaration = null;
    val package_body_StartIndex = input.index()
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var package_body_declarative_item77: DeclarativeItem = null



    val declarativeItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 20)) {
        return packageBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:489:3: ( PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:490:2: PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON
      `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_body2413);
      if (state.failed) return packageBody
      `match`(input, BODY, FOLLOW_BODY_in_package_body2415);
      if (state.failed) return packageBody
      pushFollow(FOLLOW_identifier_in_package_body2419)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return packageBody
      `match`(input, IS, FOLLOW_IS_in_package_body2421);
      if (state.failed) return packageBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:491:3: ( package_body_declarative_item )*
      var loop37 = true
      do {
        var alt37 = 2
        val LA37_0 = input.LA(1)

        if ((LA37_0 == ALIAS || LA37_0 == ATTRIBUTE || LA37_0 == CONSTANT || LA37_0 == FILE || LA37_0 == FUNCTION || LA37_0 == GROUP || LA37_0 == IMPURE || LA37_0 == PROCEDURE || LA37_0 == PURE || LA37_0 == SHARED || LA37_0 == SUBTYPE || LA37_0 == TYPE || (LA37_0 >= USE && LA37_0 <= VARIABLE))) {
          alt37 = 1
        }


        alt37 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:491:4: package_body_declarative_item
            pushFollow(FOLLOW_package_body_declarative_item_in_package_body2426)
            package_body_declarative_item77 = package_body_declarative_item();

            state._fsp -= 1
            if (state.failed) return packageBody
            if (state.backtracking == 0) {
              declarativeItems += package_body_declarative_item77
            }


          case _ => loop37 = false
        }
      } while (loop37);

      `match`(input, END, FOLLOW_END_in_package_body2432);
      if (state.failed) return packageBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:492:6: ( PACKAGE BODY )?
      var alt38 = 2
      val LA38_0 = input.LA(1)

      if ((LA38_0 == PACKAGE)) {
        alt38 = 1
      }
      alt38 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:492:7: PACKAGE BODY
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_package_body2435);
          if (state.failed) return packageBody
          `match`(input, BODY, FOLLOW_BODY_in_package_body2437);
          if (state.failed) return packageBody


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:492:36: (end_identifier= identifier )?
      var alt39 = 2
      val LA39_0 = input.LA(1)

      if (((LA39_0 >= BASIC_IDENTIFIER && LA39_0 <= EXTENDED_IDENTIFIER))) {
        alt39 = 1
      }
      alt39 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:492:36: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_package_body2443)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return packageBody


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_package_body2446);
      if (state.failed) return packageBody
      if (state.backtracking == 0) {
        packageBody = new PackageBodyDeclaration(start_identifier, declarativeItems.result, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 20, package_body_StartIndex)
      }
    }
    return packageBody
  }

  // $ANTLR end "package_body"

  // $ANTLR start "package_body_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:495:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def package_body_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val package_body_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body78: DeclarativeItem = null

    var type_declaration79: AbstractTypeDeclaration = null

    var subtype_declaration80: SubTypeDeclaration = null

    var constant_declaration81: ConstantDeclaration = null

    var variable_declaration82: VariableDeclaration = null

    var file_declaration83: FileDeclaration = null

    var alias_declaration84: AliasDeclaration = null

    var use_clause85: UseClause = null

    var attribute_specification86: AttributeSpecification = null

    var group_template_declaration87: GroupTemplateDeclaration = null

    var group_declaration88: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:495:62: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration )
      var alt40 = 11
      alt40 = dfa40.predict(input)
      alt40 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:496:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2466)
          subprogram_declartion_or_body78 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body78
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:500:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_package_body_declarative_item2476)
          type_declaration79 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration79
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:501:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_package_body_declarative_item2483)
          subtype_declaration80 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration80
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:502:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_package_body_declarative_item2490)
          constant_declaration81 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration81
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:503:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_package_body_declarative_item2497)
          variable_declaration82 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration82
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:504:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_package_body_declarative_item2504)
          file_declaration83 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration83
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:505:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_package_body_declarative_item2511)
          alias_declaration84 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration84
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:507:4: use_clause
          pushFollow(FOLLOW_use_clause_in_package_body_declarative_item2520)
          use_clause85 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause85
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:508:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_package_body_declarative_item2527)
          attribute_specification86 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification86
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:509:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_package_body_declarative_item2535)
          group_template_declaration87 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration87
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:510:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_package_body_declarative_item2542)
          group_declaration88 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration88
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 21, package_body_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "package_body_declarative_item"

  // $ANTLR start "designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:518:1: designator returns [Identifier id] : ( identifier | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def designator(): Identifier = {
    var id: Identifier = null;
    val designator_StartIndex = input.index()
    var STRING_LITERAL90: Token = null
    var identifier89: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:518:36: ( identifier | STRING_LITERAL )
      var alt41 = 2
      val LA41_0 = input.LA(1)

      if (((LA41_0 >= BASIC_IDENTIFIER && LA41_0 <= EXTENDED_IDENTIFIER))) {
        alt41 = 1
      }
      else if ((LA41_0 == STRING_LITERAL)) {
        alt41 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 41, 0, input)

        throw nvae
      }
      alt41 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:519:2: identifier
          pushFollow(FOLLOW_identifier_in_designator2560)
          identifier89 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier89
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:520:4: STRING_LITERAL
          STRING_LITERAL90 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_designator2567).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL90)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 22, designator_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "designator"

  // $ANTLR start "subprogram_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:1: subprogram_specification returns [SubProgramDeclaration decl] : ( PROCEDURE identifier ( LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark );
  @throws(classOf[RecognitionException])
  def subprogram_specification(): SubProgramDeclaration = {
    var decl: SubProgramDeclaration = null;
    val subprogram_specification_StartIndex = input.index()
    var i: Token = null
    var PROCEDURE91: Token = null
    var FUNCTION94: Token = null
    var identifier92: Identifier = null

    var parameter_interface_list_procedure93: Seq[InterfaceList.AbstractInterfaceElement] = null

    var designator95: Identifier = null

    var parameter_interface_list_function96: Seq[InterfaceList.AbstractInterfaceElement] = null

    var type_mark97: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
        return decl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:523:63: ( PROCEDURE identifier ( LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark )
      var alt45 = 2
      val LA45_0 = input.LA(1)

      if ((LA45_0 == PROCEDURE)) {
        alt45 = 1
      }
      else if ((LA45_0 == FUNCTION || LA45_0 == IMPURE || LA45_0 == PURE)) {
        alt45 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return decl
        }
        val nvae = new NoViableAltException("", 45, 0, input)

        throw nvae
      }
      alt45 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:524:2: PROCEDURE identifier ( LPAREN parameter_interface_list_procedure RPAREN )?
          PROCEDURE91 = `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_subprogram_specification2588).asInstanceOf[Token];
          if (state.failed) return decl
          pushFollow(FOLLOW_identifier_in_subprogram_specification2590)
          identifier92 = identifier();

          state._fsp -= 1
          if (state.failed) return decl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:527:2: ( LPAREN parameter_interface_list_procedure RPAREN )?
          var alt42 = 2
          val LA42_0 = input.LA(1)

          if ((LA42_0 == LPAREN)) {
            alt42 = 1
          }
          alt42 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:527:31: LPAREN parameter_interface_list_procedure RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_subprogram_specification2599);
              if (state.failed) return decl
              pushFollow(FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2601)
              parameter_interface_list_procedure93 = parameter_interface_list_procedure();

              state._fsp -= 1
              if (state.failed) return decl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_subprogram_specification2603);
              if (state.failed) return decl


            case _ =>
          }

          if (state.backtracking == 0) {
            decl = new ProcedureDeclaration(toPosition(PROCEDURE91), identifier92, parameter_interface_list_procedure93)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:529:4: ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:529:4: ( PURE | i= IMPURE )?
          var alt43 = 3
          val LA43_0 = input.LA(1)

          if ((LA43_0 == PURE)) {
            alt43 = 1
          }
          else if ((LA43_0 == IMPURE)) {
            alt43 = 2
          }
          alt43 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:529:5: PURE
              `match`(input, PURE, FOLLOW_PURE_in_subprogram_specification2616); if (state.failed) return decl

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:529:12: i= IMPURE
              i = `match`(input, IMPURE, FOLLOW_IMPURE_in_subprogram_specification2622).asInstanceOf[Token]; if (state.failed) return decl


            case _ =>
          }

          FUNCTION94 = `match`(input, FUNCTION, FOLLOW_FUNCTION_in_subprogram_specification2626).asInstanceOf[Token];
          if (state.failed) return decl
          pushFollow(FOLLOW_designator_in_subprogram_specification2628)
          designator95 = designator();

          state._fsp -= 1
          if (state.failed) return decl
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:532:2: ( LPAREN parameter_interface_list_function RPAREN )?
          var alt44 = 2
          val LA44_0 = input.LA(1)

          if ((LA44_0 == LPAREN)) {
            alt44 = 1
          }
          alt44 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:532:31: LPAREN parameter_interface_list_function RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_subprogram_specification2637);
              if (state.failed) return decl
              pushFollow(FOLLOW_parameter_interface_list_function_in_subprogram_specification2639)
              parameter_interface_list_function96 = parameter_interface_list_function();

              state._fsp -= 1
              if (state.failed) return decl
              `match`(input, RPAREN, FOLLOW_RPAREN_in_subprogram_specification2641);
              if (state.failed) return decl


            case _ =>
          }

          `match`(input, RETURN, FOLLOW_RETURN_in_subprogram_specification2646);
          if (state.failed) return decl
          pushFollow(FOLLOW_type_mark_in_subprogram_specification2648)
          type_mark97 = type_mark();

          state._fsp -= 1
          if (state.failed) return decl
          if (state.backtracking == 0) {
            decl = new FunctionDeclaration(toPosition(FUNCTION94), i == null, designator95, parameter_interface_list_function96, type_mark97)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 23, subprogram_specification_StartIndex)
      }
    }
    return decl
  }

  // $ANTLR end "subprogram_specification"

  // $ANTLR start "subprogram_declartion_or_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:536:1: subprogram_declartion_or_body returns [DeclarativeItem declOrBody] : subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subprogram_declartion_or_body(): DeclarativeItem = {
    var declOrBody: DeclarativeItem = null;
    val subprogram_declartion_or_body_StartIndex = input.index()
    var subprogram_specification98: SubProgramDeclaration = null

    var subprogram_body99: SubProgramDefinition = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
        return declOrBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:536:68: ( subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:537:2: subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON
      pushFollow(FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2667)
      subprogram_specification98 = subprogram_specification();

      state._fsp -= 1
      if (state.failed) return declOrBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:537:27: ( subprogram_body[$subprogram_specification.decl] )?
      var alt46 = 2
      val LA46_0 = input.LA(1)

      if ((LA46_0 == IS)) {
        alt46 = 1
      }
      alt46 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:537:28: subprogram_body[$subprogram_specification.decl]
          pushFollow(FOLLOW_subprogram_body_in_subprogram_declartion_or_body2670)
          subprogram_body99 = subprogram_body(subprogram_specification98);

          state._fsp -= 1
          if (state.failed) return declOrBody


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2675);
      if (state.failed) return declOrBody
      if (state.backtracking == 0) {
        declOrBody = if (subprogram_body99 != null) subprogram_body99 else subprogram_specification98
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 24, subprogram_declartion_or_body_StartIndex)
      }
    }
    return declOrBody
  }

  // $ANTLR end "subprogram_declartion_or_body"

  // $ANTLR start "subprogram_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:540:1: subprogram_declaration returns [DeclarativeItem subprogramDecl] : subprogram_specification SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subprogram_declaration(): DeclarativeItem = {
    var subprogramDecl: DeclarativeItem = null;
    val subprogram_declaration_StartIndex = input.index()
    var subprogram_specification100: SubProgramDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
        return subprogramDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:540:65: ( subprogram_specification SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:541:2: subprogram_specification SEMICOLON
      pushFollow(FOLLOW_subprogram_specification_in_subprogram_declaration2694)
      subprogram_specification100 = subprogram_specification();

      state._fsp -= 1
      if (state.failed) return subprogramDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subprogram_declaration2696);
      if (state.failed) return subprogramDecl
      if (state.backtracking == 0) {
        subprogramDecl = subprogram_specification100
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 25, subprogram_declaration_StartIndex)
      }
    }
    return subprogramDecl
  }

  // $ANTLR end "subprogram_declaration"

  // $ANTLR start "subprogram_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:544:1: subprogram_body[SubProgramDeclaration subprogramDecl] returns [SubProgramDefinition subProgramDef] : IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? ;
  @throws(classOf[RecognitionException])
  def subprogram_body(subprogramDecl: SubProgramDeclaration): SubProgramDefinition = {
    var subProgramDef: SubProgramDefinition = null;
    val subprogram_body_StartIndex = input.index()
    var endIdent: Identifier = null

    var subprogram_declarative_item101: DeclarativeItem = null

    var sequence_of_statements102: Seq[SequentialStatement] = null



    val declItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
        return subProgramDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:547:3: ( IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:548:2: IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )?
      `match`(input, IS, FOLLOW_IS_in_subprogram_body2718);
      if (state.failed) return subProgramDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:549:3: ( subprogram_declarative_item )*
      var loop47 = true
      do {
        var alt47 = 2
        val LA47_0 = input.LA(1)

        if ((LA47_0 == ALIAS || LA47_0 == ATTRIBUTE || LA47_0 == CONSTANT || LA47_0 == FILE || LA47_0 == FUNCTION || LA47_0 == GROUP || LA47_0 == IMPURE || LA47_0 == PROCEDURE || LA47_0 == PURE || LA47_0 == SHARED || LA47_0 == SUBTYPE || LA47_0 == TYPE || (LA47_0 >= USE && LA47_0 <= VARIABLE))) {
          alt47 = 1
        }


        alt47 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:549:4: subprogram_declarative_item
            pushFollow(FOLLOW_subprogram_declarative_item_in_subprogram_body2723)
            subprogram_declarative_item101 = subprogram_declarative_item();

            state._fsp -= 1
            if (state.failed) return subProgramDef
            if (state.backtracking == 0) {
              declItems += subprogram_declarative_item101
            }


          case _ => loop47 = false
        }
      } while (loop47);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_subprogram_body2730);
      if (state.failed) return subProgramDef
      pushFollow(FOLLOW_sequence_of_statements_in_subprogram_body2734)
      sequence_of_statements102 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return subProgramDef
      `match`(input, END, FOLLOW_END_in_subprogram_body2737);
      if (state.failed) return subProgramDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:552:6: ({...}? => PROCEDURE | {...}? => FUNCTION )?
      var alt48 = 3
      val LA48_0 = input.LA(1)

      if ((LA48_0 == PROCEDURE) && ((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) {
        alt48 = 1
      }
      else if ((LA48_0 == FUNCTION) && ((subprogramDecl.isInstanceOf[FunctionDeclaration]))) {
        alt48 = 2
      }
      alt48 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:552:7: {...}? => PROCEDURE
          if (!((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) {
            if (state.backtracking > 0) {
              state.failed = true; return subProgramDef
            }
            throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[ProcedureDeclaration]")
          }
          `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_subprogram_body2742);
          if (state.failed) return subProgramDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:552:74: {...}? => FUNCTION
          if (!((subprogramDecl.isInstanceOf[FunctionDeclaration]))) {
            if (state.backtracking > 0) {
              state.failed = true; return subProgramDef
            }
            throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[FunctionDeclaration]")
          }
          `match`(input, FUNCTION, FOLLOW_FUNCTION_in_subprogram_body2748);
          if (state.failed) return subProgramDef


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:552:147: (endIdent= designator )?
      var alt49 = 2
      val LA49_0 = input.LA(1)

      if ((LA49_0 == STRING_LITERAL || (LA49_0 >= BASIC_IDENTIFIER && LA49_0 <= EXTENDED_IDENTIFIER))) {
        alt49 = 1
      }
      alt49 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:552:147: endIdent= designator
          pushFollow(FOLLOW_designator_in_subprogram_body2754)
          endIdent = designator();

          state._fsp -= 1
          if (state.failed) return subProgramDef


        case _ =>
      }

      if (state.backtracking == 0) {

        subProgramDef = subprogramDecl match {
          case procDecl: ProcedureDeclaration =>
            new ProcedureDefinition(subprogramDecl.position, procDecl.identifier, procDecl.parameterInterfaceList, declItems.result, sequence_of_statements102, endIdent)
          case funcDecl: FunctionDeclaration =>
            new FunctionDefinition(subprogramDecl.position, funcDecl.isPure, funcDecl.identifier, funcDecl.parameterInterfaceList, funcDecl.returnType, declItems.result, sequence_of_statements102, endIdent)
        }

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 26, subprogram_body_StartIndex)
      }
    }
    return subProgramDef
  }

  // $ANTLR end "subprogram_body"

  // $ANTLR start "subprogram_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:562:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def subprogram_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val subprogram_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body103: DeclarativeItem = null

    var type_declaration104: AbstractTypeDeclaration = null

    var subtype_declaration105: SubTypeDeclaration = null

    var constant_declaration106: ConstantDeclaration = null

    var variable_declaration107: VariableDeclaration = null

    var file_declaration108: FileDeclaration = null

    var alias_declaration109: AliasDeclaration = null

    var attribute_declaration110: AttributeDeclaration = null

    var attribute_specification111: AttributeSpecification = null

    var use_clause112: UseClause = null

    var group_template_declaration113: GroupTemplateDeclaration = null

    var group_declaration114: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:562:60: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt50 = 12
      alt50 = dfa50.predict(input)
      alt50 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:563:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item2776)
          subprogram_declartion_or_body103 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body103
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:567:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_subprogram_declarative_item2786)
          type_declaration104 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration104
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:568:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_subprogram_declarative_item2793)
          subtype_declaration105 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration105
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:569:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_subprogram_declarative_item2800)
          constant_declaration106 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration106
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:570:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_subprogram_declarative_item2807)
          variable_declaration107 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration107
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:571:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_subprogram_declarative_item2814)
          file_declaration108 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration108
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:572:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_subprogram_declarative_item2821)
          alias_declaration109 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration109
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:573:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_subprogram_declarative_item2828)
          attribute_declaration110 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration110
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:574:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_subprogram_declarative_item2835)
          attribute_specification111 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification111
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:575:4: use_clause
          pushFollow(FOLLOW_use_clause_in_subprogram_declarative_item2842)
          use_clause112 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause112
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:576:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_subprogram_declarative_item2849)
          group_template_declaration113 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration113
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:577:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_subprogram_declarative_item2856)
          group_declaration114 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration114
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 27, subprogram_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "subprogram_declarative_item"

  // $ANTLR start "type_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:586:1: type_declaration returns [AbstractTypeDeclaration typeDecl] : TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def type_declaration(): AbstractTypeDeclaration = {
    var typeDecl: AbstractTypeDeclaration = null;
    val type_declaration_StartIndex = input.index()
    var TYPE116: Token = null
    var identifier115: Identifier = null

    var type_definition117: AbstractTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 28)) {
        return typeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:586:61: ( TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:587:2: TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] )? SEMICOLON
      TYPE116 = `match`(input, TYPE, FOLLOW_TYPE_in_type_declaration2874).asInstanceOf[Token];
      if (state.failed) return typeDecl
      pushFollow(FOLLOW_identifier_in_type_declaration2876)
      identifier115 = identifier();

      state._fsp -= 1
      if (state.failed) return typeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:587:18: ( IS type_definition[$identifier.id,toPosition($TYPE)] )?
      var alt51 = 2
      val LA51_0 = input.LA(1)

      if ((LA51_0 == IS)) {
        alt51 = 1
      }
      alt51 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:587:19: IS type_definition[$identifier.id,toPosition($TYPE)]
          `match`(input, IS, FOLLOW_IS_in_type_declaration2879);
          if (state.failed) return typeDecl
          pushFollow(FOLLOW_type_definition_in_type_declaration2881)
          type_definition117 = type_definition(identifier115, toPosition(TYPE116));

          state._fsp -= 1
          if (state.failed) return typeDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_type_declaration2886);
      if (state.failed) return typeDecl
      if (state.backtracking == 0) {

        typeDecl = if (type_definition117 != null) type_definition117
        else new IncompleteTypeDeclaration(toPosition(TYPE116), identifier115)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 28, type_declaration_StartIndex)
      }
    }
    return typeDecl
  }

  // $ANTLR end "type_declaration"

  // $ANTLR start "type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:593:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );
  @throws(classOf[RecognitionException])
  def type_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
    var typeDef: AbstractTypeDeclaration = null;
    val type_definition_StartIndex = input.index()
    var enumeration_type_definition118: EnumerationTypeDefinition = null

    var physical_type_definition119: PhysicalTypeDefinition = null

    var integer_or_floating_point_type_definition120: IntegerOrFloatingPointTypeDefinition = null

    var array_type_definition121: ArrayTypeDefinition = null

    var record_type_definition122: RecordTypeDefinition = null

    var access_type_definition123: AccessTypeDefinition = null

    var file_type_definition124: FileTypeDefinition = null

    var protected_type_body125: ProtectedTypeBodyDeclaration = null

    var protected_type_declaration126: ProtectedTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return typeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:593:87: ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] )
      var alt52 = 9
      alt52 = dfa52.predict(input)
      alt52 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:594:2: enumeration_type_definition[$id,$pos]
          pushFollow(FOLLOW_enumeration_type_definition_in_type_definition2904)
          enumeration_type_definition118 = enumeration_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = enumeration_type_definition118
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:595:4: ( RANGE range UNITS )=> physical_type_definition[$id,$pos]
          pushFollow(FOLLOW_physical_type_definition_in_type_definition2922)
          physical_type_definition119 = physical_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = physical_type_definition119
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:596:4: integer_or_floating_point_type_definition[$id,$pos]
          pushFollow(FOLLOW_integer_or_floating_point_type_definition_in_type_definition2930)
          integer_or_floating_point_type_definition120 = integer_or_floating_point_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = integer_or_floating_point_type_definition120
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:597:4: array_type_definition[$id,$pos]
          pushFollow(FOLLOW_array_type_definition_in_type_definition2938)
          array_type_definition121 = array_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = array_type_definition121
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:598:4: record_type_definition[$id,$pos]
          pushFollow(FOLLOW_record_type_definition_in_type_definition2946)
          record_type_definition122 = record_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = record_type_definition122
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:599:4: access_type_definition[$id,$pos]
          pushFollow(FOLLOW_access_type_definition_in_type_definition2954)
          access_type_definition123 = access_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = access_type_definition123
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:600:4: file_type_definition[$id,$pos]
          pushFollow(FOLLOW_file_type_definition_in_type_definition2962)
          file_type_definition124 = file_type_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = file_type_definition124
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:601:4: ( PROTECTED BODY )=> protected_type_body[$id,$pos]
          pushFollow(FOLLOW_protected_type_body_in_type_definition2976)
          protected_type_body125 = protected_type_body(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = protected_type_body125
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:602:4: protected_type_declaration[$id,$pos]
          pushFollow(FOLLOW_protected_type_declaration_in_type_definition2984)
          protected_type_declaration126 = protected_type_declaration(id, pos);

          state._fsp -= 1
          if (state.failed) return typeDef
          if (state.backtracking == 0) {
            typeDef = protected_type_declaration126
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 29, type_definition_StartIndex)
      }
    }
    return typeDef
  }

  // $ANTLR end "type_definition"

  // $ANTLR start "ams_nature_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:604:1: ams_nature_declaration returns [AbstractTypeDeclaration natureDecl] : NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_nature_declaration(): AbstractTypeDeclaration = {
    var natureDecl: AbstractTypeDeclaration = null;
    val ams_nature_declaration_StartIndex = input.index()
    var NATURE128: Token = null
    var identifier127: Identifier = null

    var ams_nature_definition129: AbstractTypeDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
        return natureDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:604:69: ( NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:605:2: NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON
      NATURE128 = `match`(input, NATURE, FOLLOW_NATURE_in_ams_nature_declaration3002).asInstanceOf[Token];
      if (state.failed) return natureDecl
      pushFollow(FOLLOW_identifier_in_ams_nature_declaration3004)
      identifier127 = identifier();

      state._fsp -= 1
      if (state.failed) return natureDecl
      `match`(input, IS, FOLLOW_IS_in_ams_nature_declaration3006);
      if (state.failed) return natureDecl
      pushFollow(FOLLOW_ams_nature_definition_in_ams_nature_declaration3008)
      ams_nature_definition129 = ams_nature_definition(identifier127, toPosition(NATURE128));

      state._fsp -= 1
      if (state.failed) return natureDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_nature_declaration3011);
      if (state.failed) return natureDecl
      if (state.backtracking == 0) {
        natureDecl = ams_nature_definition129
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 30, ams_nature_declaration_StartIndex)
      }
    }
    return natureDecl
  }

  // $ANTLR end "ams_nature_declaration"

  // $ANTLR start "ams_terminal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:608:1: ams_terminal_declaration returns [TerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_terminal_declaration(): TerminalDeclaration = {
    var terminalDecl: TerminalDeclaration = null;
    val ams_terminal_declaration_StartIndex = input.index()
    var TERMINAL130: Token = null
    var identifier_list131: Seq[Identifier] = null

    var ams_subnature_indication132: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 31)) {
        return terminalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:608:69: ( TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:609:2: TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON
      TERMINAL130 = `match`(input, TERMINAL, FOLLOW_TERMINAL_in_ams_terminal_declaration3027).asInstanceOf[Token];
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_identifier_list_in_ams_terminal_declaration3029)
      identifier_list131 = identifier_list();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_terminal_declaration3031);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3033)
      ams_subnature_indication132 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_terminal_declaration3035);
      if (state.failed) return terminalDecl
      if (state.backtracking == 0) {
        terminalDecl = new TerminalDeclaration(toPosition(TERMINAL130), identifier_list131, ams_subnature_indication132)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 31, ams_terminal_declaration_StartIndex)
      }
    }
    return terminalDecl
  }

  // $ANTLR end "ams_terminal_declaration"

  // $ANTLR start "ams_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:612:1: ams_nature_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration natureDef] : ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] );
  @throws(classOf[RecognitionException])
  def ams_nature_definition(id: Identifier, pos: Position): AbstractTypeDeclaration = {
    var natureDef: AbstractTypeDeclaration = null;
    val ams_nature_definition_StartIndex = input.index()
    var ams_scalar_nature_definition133: ScalarNatureDefinition = null

    var ams_array_nature_definition134: ArrayNatureTypeDefinition = null

    var ams_record_nature_definition135: RecordNatureDefinition = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:612:95: ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] )
      var alt53 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt53 = 1
        case ARRAY =>
          alt53 = 2
        case RECORD =>
          alt53 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return natureDef
          }
          val nvae = new NoViableAltException("", 53, 0, input)

          throw nvae
      }

      alt53 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:613:2: ams_scalar_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3053)
          ams_scalar_nature_definition133 = ams_scalar_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_scalar_nature_definition133
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:614:4: ams_array_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_array_nature_definition_in_ams_nature_definition3061)
          ams_array_nature_definition134 = ams_array_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_array_nature_definition134
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:615:4: ams_record_nature_definition[$id,pos]
          pushFollow(FOLLOW_ams_record_nature_definition_in_ams_nature_definition3069)
          ams_record_nature_definition135 = ams_record_nature_definition(id, pos);

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            natureDef = ams_record_nature_definition135
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 32, ams_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_nature_definition"

  // $ANTLR start "ams_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:617:1: ams_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : ( ( ams_free_quantity_declaration )=> ams_free_quantity_declaration | ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration | ams_source_quantity_declaration );
  @throws(classOf[RecognitionException])
  def ams_quantity_declaration(): AbstractQuantityDeclaration = {
    var quantityDecl: AbstractQuantityDeclaration = null;
    val ams_quantity_declaration_StartIndex = input.index()
    var ams_free_quantity_declaration136: FreeQuantityDeclaration = null

    var ams_branch_quantity_declaration137: BranchQuantityDeclaration = null

    var ams_source_quantity_declaration138: SourceQuantityDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:617:77: ( ( ams_free_quantity_declaration )=> ams_free_quantity_declaration | ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration | ams_source_quantity_declaration )
      var alt54 = 3
      val LA54_0 = input.LA(1)

      if ((LA54_0 == QUANTITY)) {
        val LA54_1 = input.LA(2)

        if ((synpred5_VHDL())) {
          alt54 = 1
        }
        else if ((synpred6_VHDL())) {
          alt54 = 2
        }
        else if ((true)) {
          alt54 = 3
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return quantityDecl
          }
          val nvae = new NoViableAltException("", 54, 1, input)

          throw nvae
        }
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return quantityDecl
        }
        val nvae = new NoViableAltException("", 54, 0, input)

        throw nvae
      }
      alt54 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:618:2: ( ams_free_quantity_declaration )=> ams_free_quantity_declaration
          pushFollow(FOLLOW_ams_free_quantity_declaration_in_ams_quantity_declaration3090)
          ams_free_quantity_declaration136 = ams_free_quantity_declaration();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = ams_free_quantity_declaration136
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:619:4: ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration
          pushFollow(FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3102)
          ams_branch_quantity_declaration137 = ams_branch_quantity_declaration();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = ams_branch_quantity_declaration137
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:620:4: ams_source_quantity_declaration
          pushFollow(FOLLOW_ams_source_quantity_declaration_in_ams_quantity_declaration3109)
          ams_source_quantity_declaration138 = ams_source_quantity_declaration();

          state._fsp -= 1
          if (state.failed) return quantityDecl
          if (state.backtracking == 0) {
            quantityDecl = ams_source_quantity_declaration138
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 33, ams_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_quantity_declaration"

  // $ANTLR start "ams_free_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:2: ams_free_quantity_declaration returns [FreeQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_free_quantity_declaration(): FreeQuantityDeclaration = {
    var quantityDecl: FreeQuantityDeclaration = null;
    val ams_free_quantity_declaration_StartIndex = input.index()
    var QUANTITY139: Token = null
    var identifier_list140: Seq[Identifier] = null

    var subtype_indication141: SubTypeIndication = null

    var expression142: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:622:79: ( QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:623:3: QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
      QUANTITY139 = `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_free_quantity_declaration3127).asInstanceOf[Token];
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_identifier_list_in_ams_free_quantity_declaration3129)
      identifier_list140 = identifier_list();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_free_quantity_declaration3131);
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_subtype_indication_in_ams_free_quantity_declaration3133)
      subtype_indication141 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:623:53: ( VAR_ASSIGN expression )?
      var alt55 = 2
      val LA55_0 = input.LA(1)

      if ((LA55_0 == VAR_ASSIGN)) {
        alt55 = 1
      }
      alt55 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:623:54: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_free_quantity_declaration3136);
          if (state.failed) return quantityDecl
          pushFollow(FOLLOW_expression_in_ams_free_quantity_declaration3138)
          expression142 = expression();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_free_quantity_declaration3142);
      if (state.failed) return quantityDecl
      if (state.backtracking == 0) {
        quantityDecl = new FreeQuantityDeclaration(toPosition(QUANTITY139), identifier_list140, subtype_indication141, expression142)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 34, ams_free_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_free_quantity_declaration"

  // $ANTLR start "ams_branch_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:1: ams_branch_quantity_declaration returns [BranchQuantityDeclaration quantityDecl] : QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_branch_quantity_declaration(): BranchQuantityDeclaration = {
    var quantityDecl: BranchQuantityDeclaration = null;
    val ams_branch_quantity_declaration_StartIndex = input.index()
    var QUANTITY143: Token = null
    var across_aspect: (Seq[Identifier], Expression, Expression) = null

    var through_aspect: (Seq[Identifier], Expression, Expression) = null

    var terminal_aspect: (Name, Name) = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:626:82: ( QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:2: QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON
      QUANTITY143 = `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3160).asInstanceOf[Token];
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:11: ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )?
      var alt56 = 2
      val LA56_0 = input.LA(1)

      if ((LA56_0 == BASIC_IDENTIFIER)) {
        val LA56_1 = input.LA(2)

        if ((synpred7_VHDL())) {
          alt56 = 1
        }
      }
      else if ((LA56_0 == EXTENDED_IDENTIFIER)) {
        val LA56_2 = input.LA(2)

        if ((synpred7_VHDL())) {
          alt56 = 1
        }
      }
      alt56 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:13: ( ams_across_aspect )=>across_aspect= ams_across_aspect
          pushFollow(FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3171)
          across_aspect = ams_across_aspect();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:83: (through_aspect= ams_through_aspect )?
      var alt57 = 2
      val LA57_0 = input.LA(1)

      if ((LA57_0 == BASIC_IDENTIFIER)) {
        val LA57_1 = input.LA(2)

        if ((LA57_1 == THROUGH || LA57_1 == VAR_ASSIGN || LA57_1 == COMMA || LA57_1 == TOLERANCE)) {
          alt57 = 1
        }
      }
      else if ((LA57_0 == EXTENDED_IDENTIFIER)) {
        val LA57_2 = input.LA(2)

        if ((LA57_2 == THROUGH || LA57_2 == VAR_ASSIGN || LA57_2 == COMMA || LA57_2 == TOLERANCE)) {
          alt57 = 1
        }
      }
      alt57 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:83: through_aspect= ams_through_aspect
          pushFollow(FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3177)
          through_aspect = ams_through_aspect();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      pushFollow(FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3182)
      terminal_aspect = ams_terminal_aspect();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3184);
      if (state.failed) return quantityDecl
      if (state.backtracking == 0) {

        quantityDecl = new BranchQuantityDeclaration(toPosition(QUANTITY143), across_aspect._1, across_aspect._2, across_aspect._3,
          through_aspect._1, through_aspect._2, through_aspect._3,
          terminal_aspect._1, terminal_aspect._2)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 35, ams_branch_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_branch_quantity_declaration"

  // $ANTLR start "ams_source_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:634:1: ams_source_quantity_declaration returns [SourceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_source_quantity_declaration(): SourceQuantityDeclaration = {
    var quantityDecl: SourceQuantityDeclaration = null;
    val ams_source_quantity_declaration_StartIndex = input.index()
    var QUANTITY144: Token = null
    var source_aspect: (Expression, Expression, Expression) = null

    var identifier_list145: Seq[Identifier] = null

    var subtype_indication146: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 36)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:634:82: ( QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:635:2: QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON
      QUANTITY144 = `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_source_quantity_declaration3202).asInstanceOf[Token];
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_identifier_list_in_ams_source_quantity_declaration3204)
      identifier_list145 = identifier_list();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_source_quantity_declaration3206);
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_subtype_indication_in_ams_source_quantity_declaration3208)
      subtype_indication146 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_ams_source_aspect_in_ams_source_quantity_declaration3212)
      source_aspect = ams_source_aspect();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_source_quantity_declaration3214);
      if (state.failed) return quantityDecl
      if (state.backtracking == 0) {
        quantityDecl = new SourceQuantityDeclaration(toPosition(QUANTITY144), identifier_list145, subtype_indication146, source_aspect._1, source_aspect._2, source_aspect._3)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 36, ams_source_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_source_quantity_declaration"

  // $ANTLR start "ams_across_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:638:1: ams_across_aspect returns [(Seq[Identifier],Expression,Expression) across_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS ;
  @throws(classOf[RecognitionException])
  def ams_across_aspect(): (Seq[Identifier], Expression, Expression) = {
    var across_aspect: (Seq[Identifier], Expression, Expression) = null;
    val ams_across_aspect_StartIndex = input.index()
    var toleranceExpression: Expression = null

    var defaultExpression: Expression = null

    var identifier_list147: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
        return across_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:638:84: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:2: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS
      pushFollow(FOLLOW_identifier_list_in_ams_across_aspect3232)
      identifier_list147 = identifier_list();

      state._fsp -= 1
      if (state.failed) return across_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:18: ( TOLERANCE toleranceExpression= expression )?
      var alt58 = 2
      val LA58_0 = input.LA(1)

      if ((LA58_0 == TOLERANCE)) {
        alt58 = 1
      }
      alt58 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:19: TOLERANCE toleranceExpression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_across_aspect3235);
          if (state.failed) return across_aspect
          pushFollow(FOLLOW_expression_in_ams_across_aspect3239)
          toleranceExpression = expression();

          state._fsp -= 1
          if (state.failed) return across_aspect


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:62: ( VAR_ASSIGN defaultExpression= expression )?
      var alt59 = 2
      val LA59_0 = input.LA(1)

      if ((LA59_0 == VAR_ASSIGN)) {
        alt59 = 1
      }
      alt59 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:639:63: VAR_ASSIGN defaultExpression= expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_across_aspect3244);
          if (state.failed) return across_aspect
          pushFollow(FOLLOW_expression_in_ams_across_aspect3248)
          defaultExpression = expression();

          state._fsp -= 1
          if (state.failed) return across_aspect


        case _ =>
      }

      `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_across_aspect3252);
      if (state.failed) return across_aspect
      if (state.backtracking == 0) {
        across_aspect = (identifier_list147, toleranceExpression, defaultExpression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 37, ams_across_aspect_StartIndex)
      }
    }
    return across_aspect
  }

  // $ANTLR end "ams_across_aspect"

  // $ANTLR start "ams_through_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:642:1: ams_through_aspect returns [(Seq[Identifier],Expression,Expression) through_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH ;
  @throws(classOf[RecognitionException])
  def ams_through_aspect(): (Seq[Identifier], Expression, Expression) = {
    var through_aspect: (Seq[Identifier], Expression, Expression) = null;
    val ams_through_aspect_StartIndex = input.index()
    var toleranceExpression: Expression = null

    var defaultExpression: Expression = null

    var identifier_list148: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 38)) {
        return through_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:642:86: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:643:2: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH
      pushFollow(FOLLOW_identifier_list_in_ams_through_aspect3269)
      identifier_list148 = identifier_list();

      state._fsp -= 1
      if (state.failed) return through_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:643:18: ( TOLERANCE toleranceExpression= expression )?
      var alt60 = 2
      val LA60_0 = input.LA(1)

      if ((LA60_0 == TOLERANCE)) {
        alt60 = 1
      }
      alt60 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:643:19: TOLERANCE toleranceExpression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_through_aspect3272);
          if (state.failed) return through_aspect
          pushFollow(FOLLOW_expression_in_ams_through_aspect3276)
          toleranceExpression = expression();

          state._fsp -= 1
          if (state.failed) return through_aspect


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:643:62: ( VAR_ASSIGN defaultExpression= expression )?
      var alt61 = 2
      val LA61_0 = input.LA(1)

      if ((LA61_0 == VAR_ASSIGN)) {
        alt61 = 1
      }
      alt61 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:643:63: VAR_ASSIGN defaultExpression= expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_through_aspect3281);
          if (state.failed) return through_aspect
          pushFollow(FOLLOW_expression_in_ams_through_aspect3285)
          defaultExpression = expression();

          state._fsp -= 1
          if (state.failed) return through_aspect


        case _ =>
      }

      `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_through_aspect3289);
      if (state.failed) return through_aspect
      if (state.backtracking == 0) {
        through_aspect = (identifier_list148, toleranceExpression, defaultExpression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 38, ams_through_aspect_StartIndex)
      }
    }
    return through_aspect
  }

  // $ANTLR end "ams_through_aspect"

  // $ANTLR start "ams_terminal_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:1: ams_terminal_aspect returns [(Name,Name) terminal_aspect] : plus_terminal_name= name ( TO minus_terminal_name= name )? ;
  @throws(classOf[RecognitionException])
  def ams_terminal_aspect(): (Name, Name) = {
    var terminal_aspect: (Name, Name) = null;
    val ams_terminal_aspect_StartIndex = input.index()
    var plus_terminal_name: Name = null

    var minus_terminal_name: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
        return terminal_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:646:59: (plus_terminal_name= name ( TO minus_terminal_name= name )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:647:2: plus_terminal_name= name ( TO minus_terminal_name= name )?
      pushFollow(FOLLOW_name_in_ams_terminal_aspect3308)
      plus_terminal_name = name();

      state._fsp -= 1
      if (state.failed) return terminal_aspect
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:647:26: ( TO minus_terminal_name= name )?
      var alt62 = 2
      val LA62_0 = input.LA(1)

      if ((LA62_0 == TO)) {
        alt62 = 1
      }
      alt62 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:647:27: TO minus_terminal_name= name
          `match`(input, TO, FOLLOW_TO_in_ams_terminal_aspect3311);
          if (state.failed) return terminal_aspect
          pushFollow(FOLLOW_name_in_ams_terminal_aspect3315)
          minus_terminal_name = name();

          state._fsp -= 1
          if (state.failed) return terminal_aspect


        case _ =>
      }

      if (state.backtracking == 0) {
        terminal_aspect = (plus_terminal_name, minus_terminal_name)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 39, ams_terminal_aspect_StartIndex)
      }
    }
    return terminal_aspect
  }

  // $ANTLR end "ams_terminal_aspect"

  // $ANTLR start "ams_source_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:650:1: ams_source_aspect returns [(Expression,Expression,Expression) source_aspect] : ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression );
  @throws(classOf[RecognitionException])
  def ams_source_aspect(): (Expression, Expression, Expression) = {
    var source_aspect: (Expression, Expression, Expression) = null;
    val ams_source_aspect_StartIndex = input.index()
    var magnitude_simple_expression: Expression = null

    var phase_simple_expression: Expression = null

    var power_simple_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 40)) {
        return source_aspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:650:78: ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression )
      var alt63 = 2
      val LA63_0 = input.LA(1)

      if ((LA63_0 == SPECTRUM)) {
        alt63 = 1
      }
      else if ((LA63_0 == NOISE)) {
        alt63 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return source_aspect
        }
        val nvae = new NoViableAltException("", 63, 0, input)

        throw nvae
      }
      alt63 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:651:2: SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression
          `match`(input, SPECTRUM, FOLLOW_SPECTRUM_in_ams_source_aspect3334);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3338)
          magnitude_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect
          `match`(input, COMMA, FOLLOW_COMMA_in_ams_source_aspect3340);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3344)
          phase_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:652:4: NOISE power_simple_expression= simple_expression
          `match`(input, NOISE, FOLLOW_NOISE_in_ams_source_aspect3350);
          if (state.failed) return source_aspect
          pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3354)
          power_simple_expression = simple_expression();

          state._fsp -= 1
          if (state.failed) return source_aspect
          if (state.backtracking == 0) {
            source_aspect = (magnitude_simple_expression, phase_simple_expression, power_simple_expression)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 40, ams_source_aspect_StartIndex)
      }
    }
    return source_aspect
  }

  // $ANTLR end "ams_source_aspect"

  // $ANTLR start "constant_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:1: constant_declaration returns [ConstantDeclaration constantDecl] : CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def constant_declaration(): ConstantDeclaration = {
    var constantDecl: ConstantDeclaration = null;
    val constant_declaration_StartIndex = input.index()
    var CONSTANT149: Token = null
    var identifier_list150: Seq[Identifier] = null

    var subtype_indication151: SubTypeIndication = null

    var expression152: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 41)) {
        return constantDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:656:65: ( CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:657:2: CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
      CONSTANT149 = `match`(input, CONSTANT, FOLLOW_CONSTANT_in_constant_declaration3372).asInstanceOf[Token];
      if (state.failed) return constantDecl
      pushFollow(FOLLOW_identifier_list_in_constant_declaration3374)
      identifier_list150 = identifier_list();

      state._fsp -= 1
      if (state.failed) return constantDecl
      `match`(input, COLON, FOLLOW_COLON_in_constant_declaration3376);
      if (state.failed) return constantDecl
      pushFollow(FOLLOW_subtype_indication_in_constant_declaration3378)
      subtype_indication151 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return constantDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:657:52: ( VAR_ASSIGN expression )?
      var alt64 = 2
      val LA64_0 = input.LA(1)

      if ((LA64_0 == VAR_ASSIGN)) {
        alt64 = 1
      }
      alt64 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:657:53: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_constant_declaration3381);
          if (state.failed) return constantDecl
          pushFollow(FOLLOW_expression_in_constant_declaration3383)
          expression152 = expression();

          state._fsp -= 1
          if (state.failed) return constantDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_constant_declaration3387);
      if (state.failed) return constantDecl
      if (state.backtracking == 0) {
        constantDecl = new ConstantDeclaration(toPosition(CONSTANT149), identifier_list150, subtype_indication151, expression152)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 41, constant_declaration_StartIndex)
      }
    }
    return constantDecl
  }

  // $ANTLR end "constant_declaration"

  // $ANTLR start "signal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:1: signal_declaration returns [SignalDeclaration signalDecl] : SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def signal_declaration(): SignalDeclaration = {
    var signalDecl: SignalDeclaration = null;
    val signal_declaration_StartIndex = input.index()
    var reg: Token = null
    var bus: Token = null
    var SIGNAL153: Token = null
    var identifier_list154: Seq[Identifier] = null

    var subtype_indication155: SubTypeIndication = null

    var expression156: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
        return signalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:660:59: ( SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:2: SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON
      SIGNAL153 = `match`(input, SIGNAL, FOLLOW_SIGNAL_in_signal_declaration3406).asInstanceOf[Token];
      if (state.failed) return signalDecl
      pushFollow(FOLLOW_identifier_list_in_signal_declaration3408)
      identifier_list154 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalDecl
      `match`(input, COLON, FOLLOW_COLON_in_signal_declaration3410);
      if (state.failed) return signalDecl
      pushFollow(FOLLOW_subtype_indication_in_signal_declaration3412)
      subtype_indication155 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:50: (reg= REGISTER | bus= BUS )?
      var alt65 = 3
      val LA65_0 = input.LA(1)

      if ((LA65_0 == REGISTER)) {
        alt65 = 1
      }
      else if ((LA65_0 == BUS)) {
        alt65 = 2
      }
      alt65 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:51: reg= REGISTER
          reg = `match`(input, REGISTER, FOLLOW_REGISTER_in_signal_declaration3417).asInstanceOf[Token]; if (state.failed) return signalDecl

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:64: bus= BUS
          bus = `match`(input, BUS, FOLLOW_BUS_in_signal_declaration3421).asInstanceOf[Token]; if (state.failed) return signalDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:74: ( VAR_ASSIGN expression )?
      var alt66 = 2
      val LA66_0 = input.LA(1)

      if ((LA66_0 == VAR_ASSIGN)) {
        alt66 = 1
      }
      alt66 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:661:75: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_signal_declaration3426);
          if (state.failed) return signalDecl
          pushFollow(FOLLOW_expression_in_signal_declaration3428)
          expression156 = expression();

          state._fsp -= 1
          if (state.failed) return signalDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_signal_declaration3432);
      if (state.failed) return signalDecl
      if (state.backtracking == 0) {

        val signalType =
          if (reg != null) Some(SignalDeclaration.Type.REGISTER)
          else if (bus != null) Some(SignalDeclaration.Type.BUS)
          else None
        signalDecl = new SignalDeclaration(toPosition(SIGNAL153), identifier_list154, subtype_indication155, signalType, expression156)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 42, signal_declaration_StartIndex)
      }
    }
    return signalDecl
  }

  // $ANTLR end "signal_declaration"

  // $ANTLR start "variable_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:670:1: variable_declaration returns [VariableDeclaration varDecl] : ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def variable_declaration(): VariableDeclaration = {
    var varDecl: VariableDeclaration = null;
    val variable_declaration_StartIndex = input.index()
    var VARIABLE157: Token = null
    var SHARED158: Token = null
    var identifier_list159: Seq[Identifier] = null

    var subtype_indication160: SubTypeIndication = null

    var expression161: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
        return varDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:670:60: ( ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:671:2: ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:671:2: ( SHARED )?
      var alt67 = 2
      val LA67_0 = input.LA(1)

      if ((LA67_0 == SHARED)) {
        alt67 = 1
      }
      alt67 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:671:2: SHARED
          SHARED158 = `match`(input, SHARED, FOLLOW_SHARED_in_variable_declaration3449).asInstanceOf[Token]; if (state.failed) return varDecl


        case _ =>
      }

      VARIABLE157 = `match`(input, VARIABLE, FOLLOW_VARIABLE_in_variable_declaration3452).asInstanceOf[Token];
      if (state.failed) return varDecl
      pushFollow(FOLLOW_identifier_list_in_variable_declaration3454)
      identifier_list159 = identifier_list();

      state._fsp -= 1
      if (state.failed) return varDecl
      `match`(input, COLON, FOLLOW_COLON_in_variable_declaration3456);
      if (state.failed) return varDecl
      pushFollow(FOLLOW_subtype_indication_in_variable_declaration3458)
      subtype_indication160 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return varDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:671:60: ( VAR_ASSIGN expression )?
      var alt68 = 2
      val LA68_0 = input.LA(1)

      if ((LA68_0 == VAR_ASSIGN)) {
        alt68 = 1
      }
      alt68 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:671:61: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_variable_declaration3461);
          if (state.failed) return varDecl
          pushFollow(FOLLOW_expression_in_variable_declaration3463)
          expression161 = expression();

          state._fsp -= 1
          if (state.failed) return varDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_variable_declaration3467);
      if (state.failed) return varDecl
      if (state.backtracking == 0) {
        varDecl = new VariableDeclaration(toPosition(VARIABLE157), SHARED158 != null, identifier_list159, subtype_indication160, expression161)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 43, variable_declaration_StartIndex)
      }
    }
    return varDecl
  }

  // $ANTLR end "variable_declaration"

  // $ANTLR start "file_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:674:1: file_declaration returns [FileDeclaration fileDecl] : FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def file_declaration(): FileDeclaration = {
    var fileDecl: FileDeclaration = null;
    val file_declaration_StartIndex = input.index()
    var FILE162: Token = null
    var file_open_kind_expression: Expression = null

    var file_logical_name: Expression = null

    var identifier_list163: Seq[Identifier] = null

    var subtype_indication164: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
        return fileDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:674:53: ( FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:2: FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON
      FILE162 = `match`(input, FILE, FOLLOW_FILE_in_file_declaration3484).asInstanceOf[Token];
      if (state.failed) return fileDecl
      pushFollow(FOLLOW_identifier_list_in_file_declaration3486)
      identifier_list163 = identifier_list();

      state._fsp -= 1
      if (state.failed) return fileDecl
      `match`(input, COLON, FOLLOW_COLON_in_file_declaration3488);
      if (state.failed) return fileDecl
      pushFollow(FOLLOW_subtype_indication_in_file_declaration3490)
      subtype_indication164 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return fileDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:48: ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )?
      var alt70 = 2
      val LA70_0 = input.LA(1)

      if ((LA70_0 == IS || LA70_0 == OPEN)) {
        alt70 = 1
      }
      alt70 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:49: ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:49: ( OPEN file_open_kind_expression= expression )?
          var alt69 = 2
          val LA69_0 = input.LA(1)

          if ((LA69_0 == OPEN)) {
            alt69 = 1
          }
          alt69 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:675:50: OPEN file_open_kind_expression= expression
              `match`(input, OPEN, FOLLOW_OPEN_in_file_declaration3494);
              if (state.failed) return fileDecl
              pushFollow(FOLLOW_expression_in_file_declaration3498)
              file_open_kind_expression = expression();

              state._fsp -= 1
              if (state.failed) return fileDecl


            case _ =>
          }

          `match`(input, IS, FOLLOW_IS_in_file_declaration3502);
          if (state.failed) return fileDecl
          pushFollow(FOLLOW_expression_in_file_declaration3506)
          file_logical_name = expression();

          state._fsp -= 1
          if (state.failed) return fileDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_file_declaration3510);
      if (state.failed) return fileDecl
      if (state.backtracking == 0) {
        fileDecl = new FileDeclaration(toPosition(FILE162), identifier_list163, subtype_indication164, file_open_kind_expression, file_logical_name)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 44, file_declaration_StartIndex)
      }
    }
    return fileDecl
  }

  // $ANTLR end "file_declaration"

  // $ANTLR start "alias_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:678:1: alias_declaration returns [AliasDeclaration aliasDecl] : ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def alias_declaration(): AliasDeclaration = {
    var aliasDecl: AliasDeclaration = null;
    val alias_declaration_StartIndex = input.index()
    var ALIAS165: Token = null
    var alias_designator166: Identifier = null

    var subtype_indication167: SubTypeIndication = null

    var name168: Name = null

    var signature169: Signature = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
        return aliasDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:678:56: ( ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:2: ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON
      ALIAS165 = `match`(input, ALIAS, FOLLOW_ALIAS_in_alias_declaration3527).asInstanceOf[Token];
      if (state.failed) return aliasDecl
      pushFollow(FOLLOW_alias_designator_in_alias_declaration3529)
      alias_designator166 = alias_designator();

      state._fsp -= 1
      if (state.failed) return aliasDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:25: ( COLON subtype_indication )?
      var alt71 = 2
      val LA71_0 = input.LA(1)

      if ((LA71_0 == COLON)) {
        alt71 = 1
      }
      alt71 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:26: COLON subtype_indication
          `match`(input, COLON, FOLLOW_COLON_in_alias_declaration3532);
          if (state.failed) return aliasDecl
          pushFollow(FOLLOW_subtype_indication_in_alias_declaration3534)
          subtype_indication167 = subtype_indication();

          state._fsp -= 1
          if (state.failed) return aliasDecl


        case _ =>
      }

      `match`(input, IS, FOLLOW_IS_in_alias_declaration3538);
      if (state.failed) return aliasDecl
      pushFollow(FOLLOW_name_in_alias_declaration3540)
      name168 = name();

      state._fsp -= 1
      if (state.failed) return aliasDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:61: ( signature )?
      var alt72 = 2
      val LA72_0 = input.LA(1)

      if ((LA72_0 == LBRACKET)) {
        alt72 = 1
      }
      alt72 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:679:61: signature
          pushFollow(FOLLOW_signature_in_alias_declaration3542)
          signature169 = signature();

          state._fsp -= 1
          if (state.failed) return aliasDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_alias_declaration3545);
      if (state.failed) return aliasDecl
      if (state.backtracking == 0) {
        aliasDecl = new AliasDeclaration(toPosition(ALIAS165), alias_designator166, subtype_indication167, name168, signature169)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 45, alias_declaration_StartIndex)
      }
    }
    return aliasDecl
  }

  // $ANTLR end "alias_declaration"

  // $ANTLR start "alias_designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:682:1: alias_designator returns [Identifier id] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def alias_designator(): Identifier = {
    var id: Identifier = null;
    val alias_designator_StartIndex = input.index()
    var CHARACTER_LITERAL171: Token = null
    var STRING_LITERAL172: Token = null
    var identifier170: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:682:42: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
      var alt73 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt73 = 1
        case CHARACTER_LITERAL =>
          alt73 = 2
        case STRING_LITERAL =>
          alt73 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return id
          }
          val nvae = new NoViableAltException("", 73, 0, input)

          throw nvae
      }

      alt73 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:683:2: identifier
          pushFollow(FOLLOW_identifier_in_alias_designator3562)
          identifier170 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier170
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:684:4: CHARACTER_LITERAL
          CHARACTER_LITERAL171 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_alias_designator3569).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL171)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:685:4: STRING_LITERAL
          STRING_LITERAL172 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_alias_designator3575).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL172)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 46, alias_designator_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "alias_designator"

  // $ANTLR start "component_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:687:1: component_declaration returns [ComponentDeclaration componentDecl] : component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_declaration(): ComponentDeclaration = {
    var componentDecl: ComponentDeclaration = null;
    val component_declaration_StartIndex = input.index()
    var component: Token = null
    var start_identifier: Identifier = null

    var end_identifier: Identifier = null

    var generic_clause173: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_clause174: Seq[InterfaceList.AbstractInterfaceElement] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
        return componentDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:687:68: (component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:688:2: component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON
      component = `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_declaration3593).asInstanceOf[Token];
      if (state.failed) return componentDecl
      pushFollow(FOLLOW_identifier_in_component_declaration3597)
      start_identifier = identifier();

      state._fsp -= 1
      if (state.failed) return componentDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:688:50: ( IS )?
      var alt74 = 2
      val LA74_0 = input.LA(1)

      if ((LA74_0 == IS)) {
        alt74 = 1
      }
      alt74 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:688:50: IS
          `match`(input, IS, FOLLOW_IS_in_component_declaration3599); if (state.failed) return componentDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:689:3: ( generic_clause )?
      var alt75 = 2
      val LA75_0 = input.LA(1)

      if ((LA75_0 == GENERIC)) {
        alt75 = 1
      }
      alt75 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:689:3: generic_clause
          pushFollow(FOLLOW_generic_clause_in_component_declaration3604)
          generic_clause173 = generic_clause();

          state._fsp -= 1
          if (state.failed) return componentDecl


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:690:3: ( port_clause )?
      var alt76 = 2
      val LA76_0 = input.LA(1)

      if ((LA76_0 == PORT)) {
        alt76 = 1
      }
      alt76 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:690:3: port_clause
          pushFollow(FOLLOW_port_clause_in_component_declaration3609)
          port_clause174 = port_clause();

          state._fsp -= 1
          if (state.failed) return componentDecl


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_component_declaration3613);
      if (state.failed) return componentDecl
      `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_declaration3615);
      if (state.failed) return componentDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:691:30: (end_identifier= identifier )?
      var alt77 = 2
      val LA77_0 = input.LA(1)

      if (((LA77_0 >= BASIC_IDENTIFIER && LA77_0 <= EXTENDED_IDENTIFIER))) {
        alt77 = 1
      }
      alt77 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:691:30: end_identifier= identifier
          pushFollow(FOLLOW_identifier_in_component_declaration3619)
          end_identifier = identifier();

          state._fsp -= 1
          if (state.failed) return componentDecl


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_declaration3622);
      if (state.failed) return componentDecl
      if (state.backtracking == 0) {
        componentDecl = new ComponentDeclaration(toPosition(component), start_identifier, generic_clause173, port_clause174, end_identifier)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 47, component_declaration_StartIndex)
      }
    }
    return componentDecl
  }

  // $ANTLR end "component_declaration"

  // $ANTLR start "attribute_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:694:1: attribute_declaration returns [AttributeDeclaration attributeDecl] : ATTRIBUTE identifier COLON type_mark SEMICOLON ;
  @throws(classOf[RecognitionException])
  def attribute_declaration(): AttributeDeclaration = {
    var attributeDecl: AttributeDeclaration = null;
    val attribute_declaration_StartIndex = input.index()
    var ATTRIBUTE175: Token = null
    var identifier176: Identifier = null

    var type_mark177: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
        return attributeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:694:68: ( ATTRIBUTE identifier COLON type_mark SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:695:2: ATTRIBUTE identifier COLON type_mark SEMICOLON
      ATTRIBUTE175 = `match`(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_attribute_declaration3638).asInstanceOf[Token];
      if (state.failed) return attributeDecl
      pushFollow(FOLLOW_identifier_in_attribute_declaration3640)
      identifier176 = identifier();

      state._fsp -= 1
      if (state.failed) return attributeDecl
      `match`(input, COLON, FOLLOW_COLON_in_attribute_declaration3642);
      if (state.failed) return attributeDecl
      pushFollow(FOLLOW_type_mark_in_attribute_declaration3644)
      type_mark177 = type_mark();

      state._fsp -= 1
      if (state.failed) return attributeDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_attribute_declaration3646);
      if (state.failed) return attributeDecl
      if (state.backtracking == 0) {
        attributeDecl = new AttributeDeclaration(toPosition(ATTRIBUTE175), identifier176, type_mark177)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 48, attribute_declaration_StartIndex)
      }
    }
    return attributeDecl
  }

  // $ANTLR end "attribute_declaration"

  // $ANTLR start "attribute_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:698:1: attribute_specification returns [AttributeSpecification attributeSpec] : ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def attribute_specification(): AttributeSpecification = {
    var attributeSpec: AttributeSpecification = null;
    val attribute_specification_StartIndex = input.index()
    var ATTRIBUTE178: Token = null
    var identifier179: Identifier = null

    var entity_name_list180: Either[Seq[(Identifier, Option[Signature])], Identifier] = null

    var entity_class181: EntityClass.Value = null

    var expression182: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 49)) {
        return attributeSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:698:72: ( ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:699:2: ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON
      ATTRIBUTE178 = `match`(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_attribute_specification3664).asInstanceOf[Token];
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_identifier_in_attribute_specification3666)
      identifier179 = identifier();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, OF, FOLLOW_OF_in_attribute_specification3668);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_entity_name_list_in_attribute_specification3670)
      entity_name_list180 = entity_name_list();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, COLON, FOLLOW_COLON_in_attribute_specification3672);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_entity_class_in_attribute_specification3674)
      entity_class181 = entity_class();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, IS, FOLLOW_IS_in_attribute_specification3676);
      if (state.failed) return attributeSpec
      pushFollow(FOLLOW_expression_in_attribute_specification3678)
      expression182 = expression();

      state._fsp -= 1
      if (state.failed) return attributeSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_attribute_specification3680);
      if (state.failed) return attributeSpec
      if (state.backtracking == 0) {
        attributeSpec = new AttributeSpecification(toPosition(ATTRIBUTE178), identifier179, entity_name_list180, entity_class181, expression182)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 49, attribute_specification_StartIndex)
      }
    }
    return attributeSpec
  }

  // $ANTLR end "attribute_specification"

  // $ANTLR start "entity_designator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:702:1: entity_designator returns [(Identifier,Option[Signature]) designator] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? ;
  @throws(classOf[RecognitionException])
  def entity_designator(): (Identifier, Option[Signature]) = {
    var designator: (Identifier, Option[Signature]) = null;
    val entity_designator_StartIndex = input.index()
    var CHARACTER_LITERAL184: Token = null
    var STRING_LITERAL185: Token = null
    var identifier183: Identifier = null

    var signature186: Signature = null



    var id: Identifier = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
        return designator
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:705:3: ( ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:706:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:706:2: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
      var alt78 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt78 = 1
        case CHARACTER_LITERAL =>
          alt78 = 2
        case STRING_LITERAL =>
          alt78 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return designator
          }
          val nvae = new NoViableAltException("", 78, 0, input)

          throw nvae
      }

      alt78 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:707:2: identifier
          pushFollow(FOLLOW_identifier_in_entity_designator3707)
          identifier183 = identifier();

          state._fsp -= 1
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = identifier183
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:708:4: CHARACTER_LITERAL
          CHARACTER_LITERAL184 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_entity_designator3714).asInstanceOf[Token];
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL184)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:709:4: STRING_LITERAL
          STRING_LITERAL185 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_entity_designator3720).asInstanceOf[Token];
          if (state.failed) return designator
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL185)
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:710:4: ( signature )?
      var alt79 = 2
      val LA79_0 = input.LA(1)

      if ((LA79_0 == LBRACKET)) {
        alt79 = 1
      }
      alt79 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:710:4: signature
          pushFollow(FOLLOW_signature_in_entity_designator3726)
          signature186 = signature();

          state._fsp -= 1
          if (state.failed) return designator


        case _ =>
      }

      if (state.backtracking == 0) {
        designator = (id, Option(signature186))
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 50, entity_designator_StartIndex)
      }
    }
    return designator
  }

  // $ANTLR end "entity_designator"

  // $ANTLR start "entity_name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:713:1: entity_name_list returns [Either[Seq[(Identifier,Option[Signature])],Identifier] list] : (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL );
  @throws(classOf[RecognitionException])
  def entity_name_list(): Either[Seq[(Identifier, Option[Signature])], Identifier] = {
    var list: Either[Seq[(Identifier, Option[Signature])], Identifier] = null;
    val entity_name_list_StartIndex = input.index()
    var OTHERS187: Token = null
    var ALL188: Token = null
    var e1: (Identifier, Option[Signature]) = null

    var e2: (Identifier, Option[Signature]) = null



    val elements = new Buffer[(Identifier, Option[Signature])]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:716:3: (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL )
      var alt81 = 3
      input.LA(1) match {
        case STRING_LITERAL | CHARACTER_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt81 = 1
        case OTHERS =>
          alt81 = 2
        case ALL =>
          alt81 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return list
          }
          val nvae = new NoViableAltException("", 81, 0, input)

          throw nvae
      }

      alt81 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:717:2: e1= entity_designator ( COMMA e2= entity_designator )*
          pushFollow(FOLLOW_entity_designator_in_entity_name_list3750)
          e1 = entity_designator();

          state._fsp -= 1
          if (state.failed) return list
          if (state.backtracking == 0) {
            elements += e1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:717:51: ( COMMA e2= entity_designator )*
          var loop80 = true
          do {
            var alt80 = 2
            val LA80_0 = input.LA(1)

            if ((LA80_0 == COMMA)) {
              alt80 = 1
            }


            alt80 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:717:52: COMMA e2= entity_designator
                `match`(input, COMMA, FOLLOW_COMMA_in_entity_name_list3754);
                if (state.failed) return list
                pushFollow(FOLLOW_entity_designator_in_entity_name_list3758)
                e2 = entity_designator();

                state._fsp -= 1
                if (state.failed) return list
                if (state.backtracking == 0) {
                  elements += e2
                }


              case _ => loop80 = false
            }
          } while (loop80);

          if (state.backtracking == 0) {
            list = Left(elements.result)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:718:4: OTHERS
          OTHERS187 = `match`(input, OTHERS, FOLLOW_OTHERS_in_entity_name_list3769).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(OTHERS187))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:719:4: ALL
          ALL188 = `match`(input, ALL, FOLLOW_ALL_in_entity_name_list3776).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(ALL188))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 51, entity_name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "entity_name_list"

  // $ANTLR start "entity_class"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:721:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );
  @throws(classOf[RecognitionException])
  def entity_class(): EntityClass.Value = {
    var entityClass: EntityClass.Value = null;
    val entity_class_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 52)) {
        return entityClass
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:721:54: ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) )
      var alt83 = 18
      alt83 = dfa83.predict(input)
      alt83 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:722:2: ENTITY
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_class3791);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.ENTITY
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:723:4: ARCHITECTURE
          `match`(input, ARCHITECTURE, FOLLOW_ARCHITECTURE_in_entity_class3798);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.ARCHITECTURE
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:724:4: CONFIGURATION
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_entity_class3805);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.CONFIGURATION
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:725:4: PACKAGE
          `match`(input, PACKAGE, FOLLOW_PACKAGE_in_entity_class3812);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.PACKAGE
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:726:4: PROCEDURE
          `match`(input, PROCEDURE, FOLLOW_PROCEDURE_in_entity_class3819);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.PROCEDURE
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:727:4: FUNCTION
          `match`(input, FUNCTION, FOLLOW_FUNCTION_in_entity_class3826);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.FUNCTION
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:728:4: TYPE
          `match`(input, TYPE, FOLLOW_TYPE_in_entity_class3833);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.TYPE
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:729:4: SUBTYPE
          `match`(input, SUBTYPE, FOLLOW_SUBTYPE_in_entity_class3840);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.SUBTYPE
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:730:4: CONSTANT
          `match`(input, CONSTANT, FOLLOW_CONSTANT_in_entity_class3847);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.CONSTANT
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:731:4: SIGNAL
          `match`(input, SIGNAL, FOLLOW_SIGNAL_in_entity_class3854);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.SIGNAL
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:732:4: VARIABLE
          `match`(input, VARIABLE, FOLLOW_VARIABLE_in_entity_class3861);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.VARIABLE
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:733:4: FILE
          `match`(input, FILE, FOLLOW_FILE_in_entity_class3868);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.FILE
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:734:4: COMPONENT
          `match`(input, COMPONENT, FOLLOW_COMPONENT_in_entity_class3875);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.COMPONENT
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:735:4: LABEL
          `match`(input, LABEL, FOLLOW_LABEL_in_entity_class3882);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.LABEL
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:736:4: LITERAL
          `match`(input, LITERAL, FOLLOW_LITERAL_in_entity_class3889);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.LITERAL
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:737:4: UNITS
          `match`(input, UNITS, FOLLOW_UNITS_in_entity_class3896);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.UNITS
          }

        case 17 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:738:4: GROUP
          `match`(input, GROUP, FOLLOW_GROUP_in_entity_class3903);
          if (state.failed) return entityClass
          if (state.backtracking == 0) {
            entityClass = EntityClass.GROUP
          }

        case 18 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:741:4: {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return entityClass
            }
            throw new FailedPredicateException(input, "entity_class", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:741:12: ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
          var alt82 = 4
          input.LA(1) match {
            case NATURE =>
              alt82 = 1
            case SUBNATURE =>
              alt82 = 2
            case QUANTITY =>
              alt82 = 3
            case TERMINAL =>
              alt82 = 4
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return entityClass
              }
              val nvae = new NoViableAltException("", 82, 0, input)

              throw nvae
          }

          alt82 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:742:5: NATURE
              `match`(input, NATURE, FOLLOW_NATURE_in_entity_class3923);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.NATURE
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:743:5: SUBNATURE
              `match`(input, SUBNATURE, FOLLOW_SUBNATURE_in_entity_class3931);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.SUBNATURE
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:744:5: QUANTITY
              `match`(input, QUANTITY, FOLLOW_QUANTITY_in_entity_class3939);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.QUANTITY
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:745:5: TERMINAL
              `match`(input, TERMINAL, FOLLOW_TERMINAL_in_entity_class3947);
              if (state.failed) return entityClass
              if (state.backtracking == 0) {
                entityClass = EntityClass.TERMINAL
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 52, entity_class_StartIndex)
      }
    }
    return entityClass
  }

  // $ANTLR end "entity_class"

  // $ANTLR start "configuration_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:748:1: configuration_specification returns [ConfigurationSpecification configSpec] : FOR component_specification binding_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def configuration_specification(): ConfigurationSpecification = {
    var configSpec: ConfigurationSpecification = null;
    val configuration_specification_StartIndex = input.index()
    var FOR189: Token = null
    var component_specification190: ComponentSpecification = null

    var binding_indication191: BindingIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
        return configSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:748:77: ( FOR component_specification binding_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:749:2: FOR component_specification binding_indication SEMICOLON
      FOR189 = `match`(input, FOR, FOLLOW_FOR_in_configuration_specification3966).asInstanceOf[Token];
      if (state.failed) return configSpec
      pushFollow(FOLLOW_component_specification_in_configuration_specification3968)
      component_specification190 = component_specification();

      state._fsp -= 1
      if (state.failed) return configSpec
      pushFollow(FOLLOW_binding_indication_in_configuration_specification3972)
      binding_indication191 = binding_indication();

      state._fsp -= 1
      if (state.failed) return configSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_configuration_specification3974);
      if (state.failed) return configSpec
      if (state.backtracking == 0) {
        configSpec = new ConfigurationSpecification(toPosition(FOR189), component_specification190, binding_indication191)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 53, configuration_specification_StartIndex)
      }
    }
    return configSpec
  }

  // $ANTLR end "configuration_specification"

  // $ANTLR start "instantiation_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:755:1: instantiation_list returns [Either[Seq[Identifier],Identifier] list] : ( identifier_list | OTHERS | ALL );
  @throws(classOf[RecognitionException])
  def instantiation_list(): Either[Seq[Identifier], Identifier] = {
    var list: Either[Seq[Identifier], Identifier] = null;
    val instantiation_list_StartIndex = input.index()
    var OTHERS193: Token = null
    var ALL194: Token = null
    var identifier_list192: Seq[Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 54)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:755:72: ( identifier_list | OTHERS | ALL )
      var alt84 = 3
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt84 = 1
        case OTHERS =>
          alt84 = 2
        case ALL =>
          alt84 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return list
          }
          val nvae = new NoViableAltException("", 84, 0, input)

          throw nvae
      }

      alt84 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:756:2: identifier_list
          pushFollow(FOLLOW_identifier_list_in_instantiation_list3999)
          identifier_list192 = identifier_list();

          state._fsp -= 1
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Left(identifier_list192)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:757:4: OTHERS
          OTHERS193 = `match`(input, OTHERS, FOLLOW_OTHERS_in_instantiation_list4006).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(OTHERS193))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:758:4: ALL
          ALL194 = `match`(input, ALL, FOLLOW_ALL_in_instantiation_list4013).asInstanceOf[Token];
          if (state.failed) return list
          if (state.backtracking == 0) {
            list = Right(toIdentifier(ALL194))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 54, instantiation_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "instantiation_list"

  // $ANTLR start "component_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:760:1: component_specification returns [ComponentSpecification spec] : instantiation_list COLON selected_name ;
  @throws(classOf[RecognitionException])
  def component_specification(): ComponentSpecification = {
    var spec: ComponentSpecification = null;
    val component_specification_StartIndex = input.index()
    var instantiation_list195: Either[Seq[Identifier], Identifier] = null

    var selected_name196: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 55)) {
        return spec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:760:63: ( instantiation_list COLON selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:761:2: instantiation_list COLON selected_name
      pushFollow(FOLLOW_instantiation_list_in_component_specification4030)
      instantiation_list195 = instantiation_list();

      state._fsp -= 1
      if (state.failed) return spec
      `match`(input, COLON, FOLLOW_COLON_in_component_specification4032);
      if (state.failed) return spec
      pushFollow(FOLLOW_selected_name_in_component_specification4034)
      selected_name196 = selected_name();

      state._fsp -= 1
      if (state.failed) return spec
      if (state.backtracking == 0) {
        spec = new ComponentSpecification(instantiation_list195, selected_name196)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 55, component_specification_StartIndex)
      }
    }
    return spec
  }

  // $ANTLR end "component_specification"

  // $ANTLR start "entity_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:764:1: entity_aspect returns [Option[Either[(SelectedName,Option[Identifier]),SelectedName]] entityAspect] : ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN );
  @throws(classOf[RecognitionException])
  def entity_aspect(): Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = {
    var entityAspect: Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = null;
    val entity_aspect_StartIndex = input.index()
    var entity_name: SelectedName = null

    var architecture_identifier: Identifier = null

    var configuration_name: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return entityAspect
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:764:104: ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN )
      var alt86 = 3
      input.LA(1) match {
        case ENTITY =>
          alt86 = 1
        case CONFIGURATION =>
          alt86 = 2
        case OPEN =>
          alt86 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return entityAspect
          }
          val nvae = new NoViableAltException("", 86, 0, input)

          throw nvae
      }

      alt86 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:765:2: ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
          `match`(input, ENTITY, FOLLOW_ENTITY_in_entity_aspect4050);
          if (state.failed) return entityAspect
          pushFollow(FOLLOW_selected_name_in_entity_aspect4054)
          entity_name = selected_name();

          state._fsp -= 1
          if (state.failed) return entityAspect
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:765:35: ( LPAREN architecture_identifier= identifier RPAREN )?
          var alt85 = 2
          val LA85_0 = input.LA(1)

          if ((LA85_0 == LPAREN)) {
            alt85 = 1
          }
          alt85 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:765:36: LPAREN architecture_identifier= identifier RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_entity_aspect4057);
              if (state.failed) return entityAspect
              pushFollow(FOLLOW_identifier_in_entity_aspect4061)
              architecture_identifier = identifier();

              state._fsp -= 1
              if (state.failed) return entityAspect
              `match`(input, RPAREN, FOLLOW_RPAREN_in_entity_aspect4063);
              if (state.failed) return entityAspect


            case _ =>
          }

          if (state.backtracking == 0) {
            entityAspect = Option(Left((entity_name, Option(architecture_identifier))))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:766:4: CONFIGURATION configuration_name= selected_name
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_entity_aspect4072);
          if (state.failed) return entityAspect
          pushFollow(FOLLOW_selected_name_in_entity_aspect4077)
          configuration_name = selected_name();

          state._fsp -= 1
          if (state.failed) return entityAspect
          if (state.backtracking == 0) {
            entityAspect = Option(Right(configuration_name))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:767:4: OPEN
          `match`(input, OPEN, FOLLOW_OPEN_in_entity_aspect4084);
          if (state.failed) return entityAspect
          if (state.backtracking == 0) {
            entityAspect = None
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 56, entity_aspect_StartIndex)
      }
    }
    return entityAspect
  }

  // $ANTLR end "entity_aspect"

  // $ANTLR start "binding_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:769:1: binding_indication returns [BindingIndication indication] : ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? ;
  @throws(classOf[RecognitionException])
  def binding_indication(): BindingIndication = {
    var indication: BindingIndication = null;
    val binding_indication_StartIndex = input.index()
    var entity_aspect197: Option[Either[(SelectedName, Option[Identifier]), SelectedName]] = null

    var generic_map_aspect198: AssociationList = null

    var port_map_aspect199: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 57)) {
        return indication
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:769:59: ( ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:770:2: ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:770:2: ( USE entity_aspect )?
      var alt87 = 2
      val LA87_0 = input.LA(1)

      if ((LA87_0 == USE)) {
        alt87 = 1
      }
      alt87 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:770:3: USE entity_aspect
          `match`(input, USE, FOLLOW_USE_in_binding_indication4102);
          if (state.failed) return indication
          pushFollow(FOLLOW_entity_aspect_in_binding_indication4104)
          entity_aspect197 = entity_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:771:2: ( generic_map_aspect )?
      var alt88 = 2
      val LA88_0 = input.LA(1)

      if ((LA88_0 == GENERIC)) {
        alt88 = 1
      }
      alt88 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:771:2: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_binding_indication4109)
          generic_map_aspect198 = generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:772:2: ( port_map_aspect )?
      var alt89 = 2
      val LA89_0 = input.LA(1)

      if ((LA89_0 == PORT)) {
        alt89 = 1
      }
      alt89 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:772:2: port_map_aspect
          pushFollow(FOLLOW_port_map_aspect_in_binding_indication4113)
          port_map_aspect199 = port_map_aspect();

          state._fsp -= 1
          if (state.failed) return indication


        case _ =>
      }

      if (state.backtracking == 0) {
        indication = new BindingIndication(entity_aspect197, generic_map_aspect198, port_map_aspect199)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 57, binding_indication_StartIndex)
      }
    }
    return indication
  }

  // $ANTLR end "binding_indication"

  // $ANTLR start "disconnection_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:775:1: disconnection_specification returns [DisconnectionSpecification disconnectSpec] : DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def disconnection_specification(): DisconnectionSpecification = {
    var disconnectSpec: DisconnectionSpecification = null;
    val disconnection_specification_StartIndex = input.index()
    var id: Token = null
    var DISCONNECT201: Token = null
    var selected_name_list200: Seq[SelectedName] = null

    var type_mark202: SelectedName = null

    var expression203: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
        return disconnectSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:775:81: ( DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:776:2: DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON
      DISCONNECT201 = `match`(input, DISCONNECT, FOLLOW_DISCONNECT_in_disconnection_specification4130).asInstanceOf[Token];
      if (state.failed) return disconnectSpec
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:776:13: ( selected_name_list | id= OTHERS | id= ALL )
      var alt90 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt90 = 1
        case OTHERS =>
          alt90 = 2
        case ALL =>
          alt90 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return disconnectSpec
          }
          val nvae = new NoViableAltException("", 90, 0, input)

          throw nvae
      }

      alt90 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:776:14: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_disconnection_specification4133)
          selected_name_list200 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return disconnectSpec

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:776:35: id= OTHERS
          id = `match`(input, OTHERS, FOLLOW_OTHERS_in_disconnection_specification4139).asInstanceOf[Token]; if (state.failed) return disconnectSpec

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:776:47: id= ALL
          id = `match`(input, ALL, FOLLOW_ALL_in_disconnection_specification4145).asInstanceOf[Token]; if (state.failed) return disconnectSpec


        case _ =>
      }

      `match`(input, COLON, FOLLOW_COLON_in_disconnection_specification4148);
      if (state.failed) return disconnectSpec
      pushFollow(FOLLOW_type_mark_in_disconnection_specification4150)
      type_mark202 = type_mark();

      state._fsp -= 1
      if (state.failed) return disconnectSpec
      `match`(input, AFTER, FOLLOW_AFTER_in_disconnection_specification4152);
      if (state.failed) return disconnectSpec
      pushFollow(FOLLOW_expression_in_disconnection_specification4154)
      expression203 = expression();

      state._fsp -= 1
      if (state.failed) return disconnectSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_disconnection_specification4156);
      if (state.failed) return disconnectSpec
      if (state.backtracking == 0) {

        val signal_list = if (id == null) Left(selected_name_list200) else Right(toIdentifier(id))
        disconnectSpec = new DisconnectionSpecification(toPosition(DISCONNECT201), signal_list, type_mark202, expression203)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 58, disconnection_specification_StartIndex)
      }
    }
    return disconnectSpec
  }

  // $ANTLR end "disconnection_specification"

  // $ANTLR start "ams_step_limit_specification"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:782:1: ams_step_limit_specification returns [StepLimitSpecification stepLimitSpec] : LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_step_limit_specification(): StepLimitSpecification = {
    var stepLimitSpec: StepLimitSpecification = null;
    val ams_step_limit_specification_StartIndex = input.index()
    var id: Token = null
    var LIMIT205: Token = null
    var selected_name_list204: Seq[SelectedName] = null

    var type_mark206: SelectedName = null

    var expression207: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
        return stepLimitSpec
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:782:77: ( LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:783:2: LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON
      LIMIT205 = `match`(input, LIMIT, FOLLOW_LIMIT_in_ams_step_limit_specification4172).asInstanceOf[Token];
      if (state.failed) return stepLimitSpec
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:783:8: ( selected_name_list | id= OTHERS | id= ALL )
      var alt91 = 3
      input.LA(1) match {
        case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt91 = 1
        case OTHERS =>
          alt91 = 2
        case ALL =>
          alt91 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stepLimitSpec
          }
          val nvae = new NoViableAltException("", 91, 0, input)

          throw nvae
      }

      alt91 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:783:9: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_ams_step_limit_specification4175)
          selected_name_list204 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return stepLimitSpec

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:783:30: id= OTHERS
          id = `match`(input, OTHERS, FOLLOW_OTHERS_in_ams_step_limit_specification4181).asInstanceOf[Token]; if (state.failed) return stepLimitSpec

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:783:42: id= ALL
          id = `match`(input, ALL, FOLLOW_ALL_in_ams_step_limit_specification4187).asInstanceOf[Token]; if (state.failed) return stepLimitSpec


        case _ =>
      }

      `match`(input, COLON, FOLLOW_COLON_in_ams_step_limit_specification4191);
      if (state.failed) return stepLimitSpec
      pushFollow(FOLLOW_type_mark_in_ams_step_limit_specification4193)
      type_mark206 = type_mark();

      state._fsp -= 1
      if (state.failed) return stepLimitSpec
      `match`(input, WITH, FOLLOW_WITH_in_ams_step_limit_specification4195);
      if (state.failed) return stepLimitSpec
      pushFollow(FOLLOW_expression_in_ams_step_limit_specification4197)
      expression207 = expression();

      state._fsp -= 1
      if (state.failed) return stepLimitSpec
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_step_limit_specification4199);
      if (state.failed) return stepLimitSpec
      if (state.backtracking == 0) {

        val signal_list = if (id == null) Left(selected_name_list204) else Right(toIdentifier(id))
        stepLimitSpec = new StepLimitSpecification(toPosition(LIMIT205), signal_list, type_mark206, expression207)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 59, ams_step_limit_specification_StartIndex)
      }
    }
    return stepLimitSpec
  }

  // $ANTLR end "ams_step_limit_specification"

  // $ANTLR start "entity_class_entry"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:789:1: entity_class_entry returns [GroupTemplateDeclaration.EntityClassEntry entry] : entity_class ( BOX )? ;
  @throws(classOf[RecognitionException])
  def entity_class_entry(): GroupTemplateDeclaration.EntityClassEntry = {
    var entry: GroupTemplateDeclaration.EntityClassEntry = null;
    val entity_class_entry_StartIndex = input.index()
    var BOX209: Token = null
    var entity_class208: EntityClass.Value = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
        return entry
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:789:78: ( entity_class ( BOX )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:790:2: entity_class ( BOX )?
      pushFollow(FOLLOW_entity_class_in_entity_class_entry4216)
      entity_class208 = entity_class();

      state._fsp -= 1
      if (state.failed) return entry
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:790:15: ( BOX )?
      var alt92 = 2
      val LA92_0 = input.LA(1)

      if ((LA92_0 == BOX)) {
        alt92 = 1
      }
      alt92 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:790:15: BOX
          BOX209 = `match`(input, BOX, FOLLOW_BOX_in_entity_class_entry4218).asInstanceOf[Token]; if (state.failed) return entry


        case _ =>
      }

      if (state.backtracking == 0) {
        entry = new GroupTemplateDeclaration.EntityClassEntry(entity_class208, BOX209 != null)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 60, entity_class_entry_StartIndex)
      }
    }
    return entry
  }

  // $ANTLR end "entity_class_entry"

  // $ANTLR start "group_template_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:793:1: group_template_declaration returns [GroupTemplateDeclaration groupTemplateDecl] : GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def group_template_declaration(): GroupTemplateDeclaration = {
    var groupTemplateDecl: GroupTemplateDeclaration = null;
    val group_template_declaration_StartIndex = input.index()
    var GROUP210: Token = null
    var e1: GroupTemplateDeclaration.EntityClassEntry = null

    var e2: GroupTemplateDeclaration.EntityClassEntry = null

    var identifier211: Identifier = null



    val elements = new Buffer[GroupTemplateDeclaration.EntityClassEntry]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 61)) {
        return groupTemplateDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:796:2: ( GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:2: GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON
      GROUP210 = `match`(input, GROUP, FOLLOW_GROUP_in_group_template_declaration4240).asInstanceOf[Token];
      if (state.failed) return groupTemplateDecl
      pushFollow(FOLLOW_identifier_in_group_template_declaration4242)
      identifier211 = identifier();

      state._fsp -= 1
      if (state.failed) return groupTemplateDecl
      `match`(input, IS, FOLLOW_IS_in_group_template_declaration4244);
      if (state.failed) return groupTemplateDecl
      `match`(input, LPAREN, FOLLOW_LPAREN_in_group_template_declaration4246);
      if (state.failed) return groupTemplateDecl
      pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4250)
      e1 = entity_class_entry();

      state._fsp -= 1
      if (state.failed) return groupTemplateDecl
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:74: ( COMMA e2= entity_class_entry )*
      var loop93 = true
      do {
        var alt93 = 2
        val LA93_0 = input.LA(1)

        if ((LA93_0 == COMMA)) {
          alt93 = 1
        }


        alt93 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:797:75: COMMA e2= entity_class_entry
            `match`(input, COMMA, FOLLOW_COMMA_in_group_template_declaration4254);
            if (state.failed) return groupTemplateDecl
            pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4258)
            e2 = entity_class_entry();

            state._fsp -= 1
            if (state.failed) return groupTemplateDecl
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop93 = false
        }
      } while (loop93);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_group_template_declaration4265);
      if (state.failed) return groupTemplateDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_group_template_declaration4267);
      if (state.failed) return groupTemplateDecl
      if (state.backtracking == 0) {
        groupTemplateDecl = new GroupTemplateDeclaration(toPosition(GROUP210), identifier211, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 61, group_template_declaration_StartIndex)
      }
    }
    return groupTemplateDecl
  }

  // $ANTLR end "group_template_declaration"

  // $ANTLR start "group_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:800:1: group_declaration returns [GroupDeclaration groupDecl] : GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON ;
  @throws(classOf[RecognitionException])
  def group_declaration(): GroupDeclaration = {
    var groupDecl: GroupDeclaration = null;
    val group_declaration_StartIndex = input.index()
    var GROUP212: Token = null
    var identifier213: Identifier = null

    var selected_name214: SelectedName = null

    var group_constituent_list215: Seq[Either[Name, Identifier]] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
        return groupDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:800:56: ( GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:801:2: GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON
      GROUP212 = `match`(input, GROUP, FOLLOW_GROUP_in_group_declaration4287).asInstanceOf[Token];
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_identifier_in_group_declaration4289)
      identifier213 = identifier();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, COLON, FOLLOW_COLON_in_group_declaration4291);
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_selected_name_in_group_declaration4293)
      selected_name214 = selected_name();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, LPAREN, FOLLOW_LPAREN_in_group_declaration4295);
      if (state.failed) return groupDecl
      pushFollow(FOLLOW_group_constituent_list_in_group_declaration4297)
      group_constituent_list215 = group_constituent_list();

      state._fsp -= 1
      if (state.failed) return groupDecl
      `match`(input, RPAREN, FOLLOW_RPAREN_in_group_declaration4299);
      if (state.failed) return groupDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_group_declaration4301);
      if (state.failed) return groupDecl
      if (state.backtracking == 0) {
        groupDecl = new GroupDeclaration(toPosition(GROUP212), identifier213, selected_name214, group_constituent_list215)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 62, group_declaration_StartIndex)
      }
    }
    return groupDecl
  }

  // $ANTLR end "group_declaration"

  // $ANTLR start "group_constituent"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:804:1: group_constituent returns [Either[Name,Identifier] constituent] : ( name | CHARACTER_LITERAL );
  @throws(classOf[RecognitionException])
  def group_constituent(): Either[Name, Identifier] = {
    var constituent: Either[Name, Identifier] = null;
    val group_constituent_StartIndex = input.index()
    var CHARACTER_LITERAL217: Token = null
    var name216: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return constituent
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:804:66: ( name | CHARACTER_LITERAL )
      var alt94 = 2
      val LA94_0 = input.LA(1)

      if ((LA94_0 == STRING_LITERAL || (LA94_0 >= BASIC_IDENTIFIER && LA94_0 <= EXTENDED_IDENTIFIER))) {
        alt94 = 1
      }
      else if ((LA94_0 == CHARACTER_LITERAL)) {
        alt94 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return constituent
        }
        val nvae = new NoViableAltException("", 94, 0, input)

        throw nvae
      }
      alt94 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:805:2: name
          pushFollow(FOLLOW_name_in_group_constituent4318)
          name216 = name();

          state._fsp -= 1
          if (state.failed) return constituent
          if (state.backtracking == 0) {
            constituent = Left(name216)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:806:4: CHARACTER_LITERAL
          CHARACTER_LITERAL217 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_group_constituent4325).asInstanceOf[Token];
          if (state.failed) return constituent
          if (state.backtracking == 0) {
            constituent = Right(toIdentifier(CHARACTER_LITERAL217))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 63, group_constituent_StartIndex)
      }
    }
    return constituent
  }

  // $ANTLR end "group_constituent"

  // $ANTLR start "group_constituent_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:808:1: group_constituent_list returns [Seq[Either[Name,Identifier]] list] : c1= group_constituent ( COMMA c2= group_constituent )* ;
  @throws(classOf[RecognitionException])
  def group_constituent_list(): Seq[Either[Name, Identifier]] = {
    var list: Seq[Either[Name, Identifier]] = null;
    val group_constituent_list_StartIndex = input.index()
    var c1: Either[Name, Identifier] = null

    var c2: Either[Name, Identifier] = null



    val elements = new Buffer[Either[Name, Identifier]]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 64)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:811:3: (c1= group_constituent ( COMMA c2= group_constituent )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:812:2: c1= group_constituent ( COMMA c2= group_constituent )*
      pushFollow(FOLLOW_group_constituent_in_group_constituent_list4346)
      c1 = group_constituent();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += c1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:812:52: ( COMMA c2= group_constituent )*
      var loop95 = true
      do {
        var alt95 = 2
        val LA95_0 = input.LA(1)

        if ((LA95_0 == COMMA)) {
          alt95 = 1
        }


        alt95 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:812:54: COMMA c2= group_constituent
            `match`(input, COMMA, FOLLOW_COMMA_in_group_constituent_list4351);
            if (state.failed) return list
            pushFollow(FOLLOW_group_constituent_in_group_constituent_list4355)
            c2 = group_constituent();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += c2
            }


          case _ => loop95 = false
        }
      } while (loop95);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 64, group_constituent_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "group_constituent_list"

  // $ANTLR start "use_clause"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:815:1: use_clause returns [UseClause useClause] : USE selected_name_list SEMICOLON ;
  @throws(classOf[RecognitionException])
  def use_clause(): UseClause = {
    var useClause: UseClause = null;
    val use_clause_StartIndex = input.index()
    var USE218: Token = null
    var selected_name_list219: Seq[SelectedName] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
        return useClause
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:815:42: ( USE selected_name_list SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:816:2: USE selected_name_list SEMICOLON
      USE218 = `match`(input, USE, FOLLOW_USE_in_use_clause4383).asInstanceOf[Token];
      if (state.failed) return useClause
      pushFollow(FOLLOW_selected_name_list_in_use_clause4385)
      selected_name_list219 = selected_name_list();

      state._fsp -= 1
      if (state.failed) return useClause
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_use_clause4387);
      if (state.failed) return useClause
      if (state.backtracking == 0) {
        useClause = new UseClause(toPosition(USE218), selected_name_list219)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 65, use_clause_StartIndex)
      }
    }
    return useClause
  }

  // $ANTLR end "use_clause"

  // $ANTLR start "enumeration_literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:820:1: enumeration_literal returns [Identifier id] : ( identifier | CHARACTER_LITERAL );
  @throws(classOf[RecognitionException])
  def enumeration_literal(): Identifier = {
    var id: Identifier = null;
    val enumeration_literal_StartIndex = input.index()
    var CHARACTER_LITERAL221: Token = null
    var identifier220: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:820:45: ( identifier | CHARACTER_LITERAL )
      var alt96 = 2
      val LA96_0 = input.LA(1)

      if (((LA96_0 >= BASIC_IDENTIFIER && LA96_0 <= EXTENDED_IDENTIFIER))) {
        alt96 = 1
      }
      else if ((LA96_0 == CHARACTER_LITERAL)) {
        alt96 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 96, 0, input)

        throw nvae
      }
      alt96 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:821:2: identifier
          pushFollow(FOLLOW_identifier_in_enumeration_literal4406)
          identifier220 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier220
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:822:4: CHARACTER_LITERAL
          CHARACTER_LITERAL221 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4413).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(CHARACTER_LITERAL221)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 66, enumeration_literal_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "enumeration_literal"

  // $ANTLR start "enumeration_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:824:1: enumeration_type_definition[Identifier id,Position pos] returns [EnumerationTypeDefinition enumTypeDef] : LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN ;
  @throws(classOf[RecognitionException])
  def enumeration_type_definition(id: Identifier, pos: Position): EnumerationTypeDefinition = {
    var enumTypeDef: EnumerationTypeDefinition = null;
    val enumeration_type_definition_StartIndex = input.index()
    var e1: Identifier = null

    var e2: Identifier = null



    val elements = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
        return enumTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:827:3: ( LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:828:2: LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_enumeration_type_definition4434);
      if (state.failed) return enumTypeDef
      pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4438)
      e1 = enumeration_literal();

      state._fsp -= 1
      if (state.failed) return enumTypeDef
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:828:52: ( COMMA e2= enumeration_literal )*
      var loop97 = true
      do {
        var alt97 = 2
        val LA97_0 = input.LA(1)

        if ((LA97_0 == COMMA)) {
          alt97 = 1
        }


        alt97 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:828:53: COMMA e2= enumeration_literal
            `match`(input, COMMA, FOLLOW_COMMA_in_enumeration_type_definition4442);
            if (state.failed) return enumTypeDef
            pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4446)
            e2 = enumeration_literal();

            state._fsp -= 1
            if (state.failed) return enumTypeDef
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop97 = false
        }
      } while (loop97);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_enumeration_type_definition4452);
      if (state.failed) return enumTypeDef
      if (state.backtracking == 0) {
        enumTypeDef = new EnumerationTypeDefinition(pos, id, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 67, enumeration_type_definition_StartIndex)
      }
    }
    return enumTypeDef
  }

  // $ANTLR end "enumeration_type_definition"

  // $ANTLR start "integer_or_floating_point_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:831:1: integer_or_floating_point_type_definition[Identifier id,Position pos] returns [IntegerOrFloatingPointTypeDefinition scalarTypeDef] : RANGE range ;
  @throws(classOf[RecognitionException])
  def integer_or_floating_point_type_definition(id: Identifier, pos: Position): IntegerOrFloatingPointTypeDefinition = {
    var scalarTypeDef: IntegerOrFloatingPointTypeDefinition = null;
    val integer_or_floating_point_type_definition_StartIndex = input.index()
    var range222: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
        return scalarTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:831:132: ( RANGE range )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:832:2: RANGE range
      `match`(input, RANGE, FOLLOW_RANGE_in_integer_or_floating_point_type_definition4470);
      if (state.failed) return scalarTypeDef
      pushFollow(FOLLOW_range_in_integer_or_floating_point_type_definition4472)
      range222 = range();

      state._fsp -= 1
      if (state.failed) return scalarTypeDef
      if (state.backtracking == 0) {
        scalarTypeDef = new IntegerOrFloatingPointTypeDefinition(pos, id, range222)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 68, integer_or_floating_point_type_definition_StartIndex)
      }
    }
    return scalarTypeDef
  }

  // $ANTLR end "integer_or_floating_point_type_definition"

  // $ANTLR start "physical_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:835:1: physical_type_definition[Identifier id,Position pos] returns [PhysicalTypeDefinition physicalTypeDef] : RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? ;
  @throws(classOf[RecognitionException])
  def physical_type_definition(id: Identifier, pos: Position): PhysicalTypeDefinition = {
    var physicalTypeDef: PhysicalTypeDefinition = null;
    val physical_type_definition_StartIndex = input.index()
    var baseIdent: Identifier = null

    var idx: Identifier = null

    var endIdent: Identifier = null

    var physical_literal223: PhysicalLiteral = null

    var range224: Range = null



    val elements = new Buffer[PhysicalTypeDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
        return physicalTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:838:3: ( RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:839:2: RANGE range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )?
      `match`(input, RANGE, FOLLOW_RANGE_in_physical_type_definition4497);
      if (state.failed) return physicalTypeDef
      pushFollow(FOLLOW_range_in_physical_type_definition4499)
      range224 = range();

      state._fsp -= 1
      if (state.failed) return physicalTypeDef
      `match`(input, UNITS, FOLLOW_UNITS_in_physical_type_definition4502);
      if (state.failed) return physicalTypeDef
      pushFollow(FOLLOW_identifier_in_physical_type_definition4508)
      baseIdent = identifier();

      state._fsp -= 1
      if (state.failed) return physicalTypeDef
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_physical_type_definition4510);
      if (state.failed) return physicalTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:842:3: (idx= identifier EQ physical_literal SEMICOLON )*
      var loop98 = true
      do {
        var alt98 = 2
        val LA98_0 = input.LA(1)

        if (((LA98_0 >= BASIC_IDENTIFIER && LA98_0 <= EXTENDED_IDENTIFIER))) {
          alt98 = 1
        }


        alt98 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:843:4: idx= identifier EQ physical_literal SEMICOLON
            pushFollow(FOLLOW_identifier_in_physical_type_definition4521)
            idx = identifier();

            state._fsp -= 1
            if (state.failed) return physicalTypeDef
            `match`(input, EQ, FOLLOW_EQ_in_physical_type_definition4523);
            if (state.failed) return physicalTypeDef
            pushFollow(FOLLOW_physical_literal_in_physical_type_definition4525)
            physical_literal223 = physical_literal();

            state._fsp -= 1
            if (state.failed) return physicalTypeDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_physical_type_definition4527);
            if (state.failed) return physicalTypeDef
            if (state.backtracking == 0) {
              elements += new PhysicalTypeDefinition.Element(idx, physical_literal223)
            }


          case _ => loop98 = false
        }
      } while (loop98);

      `match`(input, END, FOLLOW_END_in_physical_type_definition4541);
      if (state.failed) return physicalTypeDef
      `match`(input, UNITS, FOLLOW_UNITS_in_physical_type_definition4543);
      if (state.failed) return physicalTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:846:20: (endIdent= identifier )?
      var alt99 = 2
      val LA99_0 = input.LA(1)

      if (((LA99_0 >= BASIC_IDENTIFIER && LA99_0 <= EXTENDED_IDENTIFIER))) {
        alt99 = 1
      }
      alt99 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:846:20: endIdent= identifier
          pushFollow(FOLLOW_identifier_in_physical_type_definition4547)
          endIdent = identifier();

          state._fsp -= 1
          if (state.failed) return physicalTypeDef


        case _ =>
      }

      if (state.backtracking == 0) {
        physicalTypeDef = new PhysicalTypeDefinition(pos, id, range224, baseIdent, elements.result, endIdent)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 69, physical_type_definition_StartIndex)
      }
    }
    return physicalTypeDef
  }

  // $ANTLR end "physical_type_definition"

  // $ANTLR start "index_subtype_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:849:1: index_subtype_definition returns [SelectedName typeMark] : type_mark RANGE BOX ;
  @throws(classOf[RecognitionException])
  def index_subtype_definition(): SelectedName = {
    var typeMark: SelectedName = null;
    val index_subtype_definition_StartIndex = input.index()
    var type_mark225: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
        return typeMark
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:849:58: ( type_mark RANGE BOX )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:850:2: type_mark RANGE BOX
      pushFollow(FOLLOW_type_mark_in_index_subtype_definition4566)
      type_mark225 = type_mark();

      state._fsp -= 1
      if (state.failed) return typeMark
      `match`(input, RANGE, FOLLOW_RANGE_in_index_subtype_definition4568);
      if (state.failed) return typeMark
      `match`(input, BOX, FOLLOW_BOX_in_index_subtype_definition4570);
      if (state.failed) return typeMark
      if (state.backtracking == 0) {
        typeMark = type_mark225
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 70, index_subtype_definition_StartIndex)
      }
    }
    return typeMark
  }

  // $ANTLR end "index_subtype_definition"

  // $ANTLR start "array_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:852:1: array_type_definition[Identifier id,Position pos] returns [ArrayTypeDefinition arrayTypeDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication ;
  @throws(classOf[RecognitionException])
  def array_type_definition(id: Identifier, pos: Position): ArrayTypeDefinition = {
    var arrayTypeDef: ArrayTypeDefinition = null;
    val array_type_definition_StartIndex = input.index()
    var type1: SelectedName = null

    var type2: SelectedName = null

    var subtype_indication226: SubTypeIndication = null

    var index_constraint227: Seq[DiscreteRange] = null



    val unConstraintList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 71)) {
        return arrayTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:855:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:856:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF subtype_indication
      `match`(input, ARRAY, FOLLOW_ARRAY_in_array_type_definition4594);
      if (state.failed) return arrayTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:856:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
      var alt101 = 2
      alt101 = dfa101.predict(input)
      alt101 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:857:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_array_type_definition4600);
          if (state.failed) return arrayTypeDef
          pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition4604)
          type1 = index_subtype_definition();

          state._fsp -= 1
          if (state.failed) return arrayTypeDef
          if (state.backtracking == 0) {
            unConstraintList += type1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:857:79: ( COMMA type2= index_subtype_definition )*
          var loop100 = true
          do {
            var alt100 = 2
            val LA100_0 = input.LA(1)

            if ((LA100_0 == COMMA)) {
              alt100 = 1
            }


            alt100 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:857:80: COMMA type2= index_subtype_definition
                `match`(input, COMMA, FOLLOW_COMMA_in_array_type_definition4609);
                if (state.failed) return arrayTypeDef
                pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition4613)
                type2 = index_subtype_definition();

                state._fsp -= 1
                if (state.failed) return arrayTypeDef
                if (state.backtracking == 0) {
                  unConstraintList += type2
                }


              case _ => loop100 = false
            }
          } while (loop100);

          `match`(input, RPAREN, FOLLOW_RPAREN_in_array_type_definition4619);
          if (state.failed) return arrayTypeDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:858:5: index_constraint
          pushFollow(FOLLOW_index_constraint_in_array_type_definition4625)
          index_constraint227 = index_constraint();

          state._fsp -= 1
          if (state.failed) return arrayTypeDef


        case _ =>
      }

      `match`(input, OF, FOLLOW_OF_in_array_type_definition4631);
      if (state.failed) return arrayTypeDef
      pushFollow(FOLLOW_subtype_indication_in_array_type_definition4633)
      subtype_indication226 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return arrayTypeDef
      if (state.backtracking == 0) {

        val result = unConstraintList.result
        arrayTypeDef = if (result.nonEmpty) new ArrayTypeDefinition(pos, id, Left(result), subtype_indication226)
        else new ArrayTypeDefinition(pos, id, Right(index_constraint227), subtype_indication226)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 71, array_type_definition_StartIndex)
      }
    }
    return arrayTypeDef
  }

  // $ANTLR end "array_type_definition"

  // $ANTLR start "record_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:866:1: record_type_definition[Identifier id,Position pos] returns [RecordTypeDefinition recordTypeDef] : RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? ;
  @throws(classOf[RecognitionException])
  def record_type_definition(id: Identifier, pos: Position): RecordTypeDefinition = {
    var recordTypeDef: RecordTypeDefinition = null;
    val record_type_definition_StartIndex = input.index()
    var identifier_list228: Seq[Identifier] = null

    var subtype_indication229: SubTypeIndication = null

    var identifier230: Identifier = null



    val elements = new Buffer[RecordTypeDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
        return recordTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:869:3: ( RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:870:2: RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )?
      `match`(input, RECORD, FOLLOW_RECORD_in_record_type_definition4656);
      if (state.failed) return recordTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:871:2: ( identifier_list COLON subtype_indication SEMICOLON )+
      var cnt102 = 0
      var loop102 = true
      do {
        var alt102 = 2
        val LA102_0 = input.LA(1)

        if (((LA102_0 >= BASIC_IDENTIFIER && LA102_0 <= EXTENDED_IDENTIFIER))) {
          alt102 = 1
        }


        alt102 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:872:3: identifier_list COLON subtype_indication SEMICOLON
            pushFollow(FOLLOW_identifier_list_in_record_type_definition4664)
            identifier_list228 = identifier_list();

            state._fsp -= 1
            if (state.failed) return recordTypeDef
            `match`(input, COLON, FOLLOW_COLON_in_record_type_definition4666);
            if (state.failed) return recordTypeDef
            pushFollow(FOLLOW_subtype_indication_in_record_type_definition4668)
            subtype_indication229 = subtype_indication();

            state._fsp -= 1
            if (state.failed) return recordTypeDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_record_type_definition4670);
            if (state.failed) return recordTypeDef
            if (state.backtracking == 0) {
              elements += new RecordTypeDefinition.Element(identifier_list228, subtype_indication229)
            }


          case _ =>
            if (cnt102 >= 1) loop102 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return recordTypeDef
              }
              val eee = new EarlyExitException(102, input)
              throw eee
            }
        }
        cnt102 += 1
      } while (loop102);

      `match`(input, END, FOLLOW_END_in_record_type_definition4681);
      if (state.failed) return recordTypeDef
      `match`(input, RECORD, FOLLOW_RECORD_in_record_type_definition4683);
      if (state.failed) return recordTypeDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:875:13: ( identifier )?
      var alt103 = 2
      val LA103_0 = input.LA(1)

      if (((LA103_0 >= BASIC_IDENTIFIER && LA103_0 <= EXTENDED_IDENTIFIER))) {
        alt103 = 1
      }
      alt103 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:875:13: identifier
          pushFollow(FOLLOW_identifier_in_record_type_definition4685)
          identifier230 = identifier();

          state._fsp -= 1
          if (state.failed) return recordTypeDef


        case _ =>
      }

      if (state.backtracking == 0) {
        recordTypeDef = new RecordTypeDefinition(pos, id, elements.result, identifier230)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 72, record_type_definition_StartIndex)
      }
    }
    return recordTypeDef
  }

  // $ANTLR end "record_type_definition"

  // $ANTLR start "access_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:878:1: access_type_definition[Identifier id,Position pos] returns [AccessTypeDefinition accessTypeDef] : ACCESS subtype_indication ;
  @throws(classOf[RecognitionException])
  def access_type_definition(id: Identifier, pos: Position): AccessTypeDefinition = {
    var accessTypeDef: AccessTypeDefinition = null;
    val access_type_definition_StartIndex = input.index()
    var subtype_indication231: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 73)) {
        return accessTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:878:97: ( ACCESS subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:879:2: ACCESS subtype_indication
      `match`(input, ACCESS, FOLLOW_ACCESS_in_access_type_definition4703);
      if (state.failed) return accessTypeDef
      pushFollow(FOLLOW_subtype_indication_in_access_type_definition4705)
      subtype_indication231 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return accessTypeDef
      if (state.backtracking == 0) {
        accessTypeDef = new AccessTypeDefinition(pos, id, subtype_indication231)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 73, access_type_definition_StartIndex)
      }
    }
    return accessTypeDef
  }

  // $ANTLR end "access_type_definition"

  // $ANTLR start "file_type_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:882:1: file_type_definition[Identifier id,Position pos] returns [FileTypeDefinition fileTypeDef] : FILE OF type_mark ;
  @throws(classOf[RecognitionException])
  def file_type_definition(id: Identifier, pos: Position): FileTypeDefinition = {
    var fileTypeDef: FileTypeDefinition = null;
    val file_type_definition_StartIndex = input.index()
    var type_mark232: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
        return fileTypeDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:882:91: ( FILE OF type_mark )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:883:2: FILE OF type_mark
      `match`(input, FILE, FOLLOW_FILE_in_file_type_definition4724);
      if (state.failed) return fileTypeDef
      `match`(input, OF, FOLLOW_OF_in_file_type_definition4726);
      if (state.failed) return fileTypeDef
      pushFollow(FOLLOW_type_mark_in_file_type_definition4728)
      type_mark232 = type_mark();

      state._fsp -= 1
      if (state.failed) return fileTypeDef
      if (state.backtracking == 0) {
        fileTypeDef = new FileTypeDefinition(pos, id, type_mark232)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 74, file_type_definition_StartIndex)
      }
    }
    return fileTypeDef
  }

  // $ANTLR end "file_type_definition"

  // $ANTLR start "ams_scalar_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:886:1: ams_scalar_nature_definition[Identifier id,Position pos] returns [ScalarNatureDefinition natureDef] : t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE ;
  @throws(classOf[RecognitionException])
  def ams_scalar_nature_definition(id: Identifier, pos: Position): ScalarNatureDefinition = {
    var natureDef: ScalarNatureDefinition = null;
    val ams_scalar_nature_definition_StartIndex = input.index()
    var t1: SelectedName = null

    var t2: SelectedName = null

    var identifier233: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:886:101: (t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:887:2: t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE
      pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition4748)
      t1 = type_mark();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_scalar_nature_definition4750);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition4754)
      t2 = type_mark();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_scalar_nature_definition4756);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_identifier_in_ams_scalar_nature_definition4758)
      identifier233 = identifier();

      state._fsp -= 1
      if (state.failed) return natureDef
      `match`(input, REFERENCE, FOLLOW_REFERENCE_in_ams_scalar_nature_definition4760);
      if (state.failed) return natureDef
      if (state.backtracking == 0) {
        natureDef = new ScalarNatureDefinition(pos, id, t1, t2, identifier233)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 75, ams_scalar_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_scalar_nature_definition"

  // $ANTLR start "ams_array_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:890:1: ams_array_nature_definition[Identifier id,Position pos] returns [ArrayNatureTypeDefinition natureDef] : ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication ;
  @throws(classOf[RecognitionException])
  def ams_array_nature_definition(id: Identifier, pos: Position): ArrayNatureTypeDefinition = {
    var natureDef: ArrayNatureTypeDefinition = null;
    val ams_array_nature_definition_StartIndex = input.index()
    var type1: SelectedName = null

    var type2: SelectedName = null

    var ams_subnature_indication234: SubNatureIndication = null

    var index_constraint235: Seq[DiscreteRange] = null



    val unConstraintList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:893:3: ( ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:894:2: ARRAY ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint ) OF ams_subnature_indication
      `match`(input, ARRAY, FOLLOW_ARRAY_in_ams_array_nature_definition4781);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:894:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )
      var alt105 = 2
      alt105 = dfa105.predict(input)
      alt105 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:895:3: LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_ams_array_nature_definition4787);
          if (state.failed) return natureDef
          pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition4791)
          type1 = index_subtype_definition();

          state._fsp -= 1
          if (state.failed) return natureDef
          if (state.backtracking == 0) {
            unConstraintList += type1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:895:79: ( COMMA type2= index_subtype_definition )*
          var loop104 = true
          do {
            var alt104 = 2
            val LA104_0 = input.LA(1)

            if ((LA104_0 == COMMA)) {
              alt104 = 1
            }


            alt104 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:895:80: COMMA type2= index_subtype_definition
                `match`(input, COMMA, FOLLOW_COMMA_in_ams_array_nature_definition4796);
                if (state.failed) return natureDef
                pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition4800)
                type2 = index_subtype_definition();

                state._fsp -= 1
                if (state.failed) return natureDef
                if (state.backtracking == 0) {
                  unConstraintList += type2
                }


              case _ => loop104 = false
            }
          } while (loop104);

          `match`(input, RPAREN, FOLLOW_RPAREN_in_ams_array_nature_definition4806);
          if (state.failed) return natureDef

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:896:5: index_constraint
          pushFollow(FOLLOW_index_constraint_in_ams_array_nature_definition4812)
          index_constraint235 = index_constraint();

          state._fsp -= 1
          if (state.failed) return natureDef


        case _ =>
      }

      `match`(input, OF, FOLLOW_OF_in_ams_array_nature_definition4817);
      if (state.failed) return natureDef
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_array_nature_definition4819)
      ams_subnature_indication234 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return natureDef
      if (state.backtracking == 0) {

        val result = unConstraintList.result
        natureDef = if (result.nonEmpty) new ArrayNatureTypeDefinition(pos, id, Left(result), ams_subnature_indication234)
        else new ArrayNatureTypeDefinition(pos, id, Right(index_constraint235), ams_subnature_indication234)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 76, ams_array_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_array_nature_definition"

  // $ANTLR start "ams_record_nature_definition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:904:1: ams_record_nature_definition[Identifier id,Position pos] returns [RecordNatureDefinition natureDef] : RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? ;
  @throws(classOf[RecognitionException])
  def ams_record_nature_definition(id: Identifier, pos: Position): RecordNatureDefinition = {
    var natureDef: RecordNatureDefinition = null;
    val ams_record_nature_definition_StartIndex = input.index()
    var identifier_list236: Seq[Identifier] = null

    var ams_subnature_indication237: SubNatureIndication = null

    var identifier238: Identifier = null



    val elements = new Buffer[RecordNatureDefinition.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 77)) {
        return natureDef
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:907:3: ( RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:908:2: RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )?
      `match`(input, RECORD, FOLLOW_RECORD_in_ams_record_nature_definition4840);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:909:2: ( identifier_list COLON ams_subnature_indication SEMICOLON )+
      var cnt106 = 0
      var loop106 = true
      do {
        var alt106 = 2
        val LA106_0 = input.LA(1)

        if (((LA106_0 >= BASIC_IDENTIFIER && LA106_0 <= EXTENDED_IDENTIFIER))) {
          alt106 = 1
        }


        alt106 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:910:3: identifier_list COLON ams_subnature_indication SEMICOLON
            pushFollow(FOLLOW_identifier_list_in_ams_record_nature_definition4847)
            identifier_list236 = identifier_list();

            state._fsp -= 1
            if (state.failed) return natureDef
            `match`(input, COLON, FOLLOW_COLON_in_ams_record_nature_definition4849);
            if (state.failed) return natureDef
            pushFollow(FOLLOW_ams_subnature_indication_in_ams_record_nature_definition4851)
            ams_subnature_indication237 = ams_subnature_indication();

            state._fsp -= 1
            if (state.failed) return natureDef
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_record_nature_definition4853);
            if (state.failed) return natureDef
            if (state.backtracking == 0) {
              elements += new RecordNatureDefinition.Element(identifier_list236, ams_subnature_indication237)
            }


          case _ =>
            if (cnt106 >= 1) loop106 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return natureDef
              }
              val eee = new EarlyExitException(106, input)
              throw eee
            }
        }
        cnt106 += 1
      } while (loop106);

      `match`(input, END, FOLLOW_END_in_ams_record_nature_definition4864);
      if (state.failed) return natureDef
      `match`(input, RECORD, FOLLOW_RECORD_in_ams_record_nature_definition4866);
      if (state.failed) return natureDef
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:913:13: ( identifier )?
      var alt107 = 2
      val LA107_0 = input.LA(1)

      if (((LA107_0 >= BASIC_IDENTIFIER && LA107_0 <= EXTENDED_IDENTIFIER))) {
        alt107 = 1
      }
      alt107 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:913:13: identifier
          pushFollow(FOLLOW_identifier_in_ams_record_nature_definition4868)
          identifier238 = identifier();

          state._fsp -= 1
          if (state.failed) return natureDef


        case _ =>
      }

      if (state.backtracking == 0) {
        natureDef = new RecordNatureDefinition(pos, id, elements.result, identifier238)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 77, ams_record_nature_definition_StartIndex)
      }
    }
    return natureDef
  }

  // $ANTLR end "ams_record_nature_definition"

  // $ANTLR start "ams_subnature_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:916:1: ams_subnature_declaration returns [SubNatureDeclaration subnatureDecl] : SUBNATURE identifier IS ams_subnature_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_subnature_declaration(): SubNatureDeclaration = {
    var subnatureDecl: SubNatureDeclaration = null;
    val ams_subnature_declaration_StartIndex = input.index()
    var SUBNATURE239: Token = null
    var identifier240: Identifier = null

    var ams_subnature_indication241: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
        return subnatureDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:916:72: ( SUBNATURE identifier IS ams_subnature_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:917:2: SUBNATURE identifier IS ams_subnature_indication SEMICOLON
      SUBNATURE239 = `match`(input, SUBNATURE, FOLLOW_SUBNATURE_in_ams_subnature_declaration4885).asInstanceOf[Token];
      if (state.failed) return subnatureDecl
      pushFollow(FOLLOW_identifier_in_ams_subnature_declaration4887)
      identifier240 = identifier();

      state._fsp -= 1
      if (state.failed) return subnatureDecl
      `match`(input, IS, FOLLOW_IS_in_ams_subnature_declaration4889);
      if (state.failed) return subnatureDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_subnature_declaration4891)
      ams_subnature_indication241 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return subnatureDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_subnature_declaration4893);
      if (state.failed) return subnatureDecl
      if (state.backtracking == 0) {
        subnatureDecl = new SubNatureDeclaration(toPosition(SUBNATURE239), identifier240, ams_subnature_indication241)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 78, ams_subnature_declaration_StartIndex)
      }
    }
    return subnatureDecl
  }

  // $ANTLR end "ams_subnature_declaration"

  // $ANTLR start "ams_subnature_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:920:1: ams_subnature_indication returns [SubNatureIndication subNature] : ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? ;
  @throws(classOf[RecognitionException])
  def ams_subnature_indication(): SubNatureIndication = {
    var subNature: SubNatureIndication = null;
    val ams_subnature_indication_StartIndex = input.index()
    var e1: Expression = null

    var e2: Expression = null

    var ams_nature_mark242: SelectedName = null

    var index_constraint243: Seq[DiscreteRange] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
        return subNature
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:920:66: ( ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:2: ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
      pushFollow(FOLLOW_ams_nature_mark_in_ams_subnature_indication4910)
      ams_nature_mark242 = ams_nature_mark();

      state._fsp -= 1
      if (state.failed) return subNature
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:18: ( index_constraint )?
      var alt108 = 2
      val LA108_0 = input.LA(1)

      if ((LA108_0 == LPAREN)) {
        alt108 = 1
      }
      alt108 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:18: index_constraint
          pushFollow(FOLLOW_index_constraint_in_ams_subnature_indication4912)
          index_constraint243 = index_constraint();

          state._fsp -= 1
          if (state.failed) return subNature


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:36: ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
      var alt109 = 2
      val LA109_0 = input.LA(1)

      if ((LA109_0 == TOLERANCE)) {
        alt109 = 1
      }
      alt109 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:921:37: TOLERANCE e1= expression ACROSS e2= expression THROUGH
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_subnature_indication4916);
          if (state.failed) return subNature
          pushFollow(FOLLOW_expression_in_ams_subnature_indication4920)
          e1 = expression();

          state._fsp -= 1
          if (state.failed) return subNature
          `match`(input, ACROSS, FOLLOW_ACROSS_in_ams_subnature_indication4922);
          if (state.failed) return subNature
          pushFollow(FOLLOW_expression_in_ams_subnature_indication4926)
          e2 = expression();

          state._fsp -= 1
          if (state.failed) return subNature
          `match`(input, THROUGH, FOLLOW_THROUGH_in_ams_subnature_indication4928);
          if (state.failed) return subNature


        case _ =>
      }

      if (state.backtracking == 0) {
        subNature = new SubNatureIndication(ams_nature_mark242, index_constraint243, e1, e2)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 79, ams_subnature_indication_StartIndex)
      }
    }
    return subNature
  }

  // $ANTLR end "ams_subnature_indication"

  // $ANTLR start "ams_nature_mark"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:924:1: ams_nature_mark returns [SelectedName typeName] : selected_name ;
  @throws(classOf[RecognitionException])
  def ams_nature_mark(): SelectedName = {
    var typeName: SelectedName = null;
    val ams_nature_mark_StartIndex = input.index()
    var selected_name244: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 80)) {
        return typeName
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:924:49: ( selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:925:3: selected_name
      pushFollow(FOLLOW_selected_name_in_ams_nature_mark4948)
      selected_name244 = selected_name();

      state._fsp -= 1
      if (state.failed) return typeName
      if (state.backtracking == 0) {
        typeName = selected_name244
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 80, ams_nature_mark_StartIndex)
      }
    }
    return typeName
  }

  // $ANTLR end "ams_nature_mark"

  // $ANTLR start "protected_type_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:927:1: protected_type_declaration[Identifier id,Position pos] returns [ProtectedTypeDeclaration protectedTypeDecl] : PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? ;
  @throws(classOf[RecognitionException])
  def protected_type_declaration(id: Identifier, pos: Position): ProtectedTypeDeclaration = {
    var protectedTypeDecl: ProtectedTypeDeclaration = null;
    val protected_type_declaration_StartIndex = input.index()
    var protected_type_declarative_item245: DeclarativeItem = null

    var identifier246: Identifier = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
        return protectedTypeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:930:3: ( PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:931:2: PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )?
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_declaration4970);
      if (state.failed) return protectedTypeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:932:3: ( protected_type_declarative_item )*
      var loop110 = true
      do {
        var alt110 = 2
        val LA110_0 = input.LA(1)

        if ((LA110_0 == ATTRIBUTE || LA110_0 == FUNCTION || LA110_0 == IMPURE || LA110_0 == PROCEDURE || LA110_0 == PURE || LA110_0 == USE)) {
          alt110 = 1
        }


        alt110 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:932:4: protected_type_declarative_item
            pushFollow(FOLLOW_protected_type_declarative_item_in_protected_type_declaration4975)
            protected_type_declarative_item245 = protected_type_declarative_item();

            state._fsp -= 1
            if (state.failed) return protectedTypeDecl
            if (state.backtracking == 0) {
              items += protected_type_declarative_item245
            }


          case _ => loop110 = false
        }
      } while (loop110);

      `match`(input, END, FOLLOW_END_in_protected_type_declaration4981);
      if (state.failed) return protectedTypeDecl
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_declaration4983);
      if (state.failed) return protectedTypeDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:933:16: ( identifier )?
      var alt111 = 2
      val LA111_0 = input.LA(1)

      if (((LA111_0 >= BASIC_IDENTIFIER && LA111_0 <= EXTENDED_IDENTIFIER))) {
        alt111 = 1
      }
      alt111 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:933:16: identifier
          pushFollow(FOLLOW_identifier_in_protected_type_declaration4985)
          identifier246 = identifier();

          state._fsp -= 1
          if (state.failed) return protectedTypeDecl


        case _ =>
      }

      if (state.backtracking == 0) {
        protectedTypeDecl = new ProtectedTypeDeclaration(pos, id, items.result, identifier246)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 81, protected_type_declaration_StartIndex)
      }
    }
    return protectedTypeDecl
  }

  // $ANTLR end "protected_type_declaration"

  // $ANTLR start "protected_type_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:936:1: protected_type_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | attribute_specification | use_clause );
  @throws(classOf[RecognitionException])
  def protected_type_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val protected_type_declarative_item_StartIndex = input.index()
    var subprogram_declaration247: DeclarativeItem = null

    var attribute_specification248: AttributeSpecification = null

    var use_clause249: UseClause = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:936:64: ( subprogram_declaration | attribute_specification | use_clause )
      var alt112 = 3
      input.LA(1) match {
        case FUNCTION | IMPURE | PROCEDURE | PURE =>
          alt112 = 1
        case ATTRIBUTE =>
          alt112 = 2
        case USE =>
          alt112 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return item
          }
          val nvae = new NoViableAltException("", 112, 0, input)

          throw nvae
      }

      alt112 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:937:2: subprogram_declaration
          pushFollow(FOLLOW_subprogram_declaration_in_protected_type_declarative_item5004)
          subprogram_declaration247 = subprogram_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declaration247
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:939:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_protected_type_declarative_item5013)
          attribute_specification248 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification248
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:940:4: use_clause
          pushFollow(FOLLOW_use_clause_in_protected_type_declarative_item5020)
          use_clause249 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause249
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 82, protected_type_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "protected_type_declarative_item"

  // $ANTLR start "protected_type_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:942:1: protected_type_body[Identifier id,Position pos] returns [ProtectedTypeBodyDeclaration protectedTypeBody] : PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? ;
  @throws(classOf[RecognitionException])
  def protected_type_body(id: Identifier, pos: Position): ProtectedTypeBodyDeclaration = {
    var protectedTypeBody: ProtectedTypeBodyDeclaration = null;
    val protected_type_body_StartIndex = input.index()
    var protected_type_body_declarative_item250: DeclarativeItem = null

    var identifier251: Identifier = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 83)) {
        return protectedTypeBody
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:945:3: ( PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:946:2: PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )?
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_body5040);
      if (state.failed) return protectedTypeBody
      `match`(input, BODY, FOLLOW_BODY_in_protected_type_body5042);
      if (state.failed) return protectedTypeBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:947:3: ( protected_type_body_declarative_item )*
      var loop113 = true
      do {
        var alt113 = 2
        val LA113_0 = input.LA(1)

        if ((LA113_0 == ALIAS || LA113_0 == ATTRIBUTE || LA113_0 == CONSTANT || LA113_0 == FILE || LA113_0 == FUNCTION || LA113_0 == GROUP || LA113_0 == IMPURE || LA113_0 == PROCEDURE || LA113_0 == PURE || LA113_0 == SHARED || LA113_0 == SUBTYPE || LA113_0 == TYPE || (LA113_0 >= USE && LA113_0 <= VARIABLE))) {
          alt113 = 1
        }


        alt113 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:947:4: protected_type_body_declarative_item
            pushFollow(FOLLOW_protected_type_body_declarative_item_in_protected_type_body5047)
            protected_type_body_declarative_item250 = protected_type_body_declarative_item();

            state._fsp -= 1
            if (state.failed) return protectedTypeBody
            if (state.backtracking == 0) {
              items += protected_type_body_declarative_item250
            }


          case _ => loop113 = false
        }
      } while (loop113);

      `match`(input, END, FOLLOW_END_in_protected_type_body5053);
      if (state.failed) return protectedTypeBody
      `match`(input, PROTECTED, FOLLOW_PROTECTED_in_protected_type_body5055);
      if (state.failed) return protectedTypeBody
      `match`(input, BODY, FOLLOW_BODY_in_protected_type_body5057);
      if (state.failed) return protectedTypeBody
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:948:21: ( identifier )?
      var alt114 = 2
      val LA114_0 = input.LA(1)

      if (((LA114_0 >= BASIC_IDENTIFIER && LA114_0 <= EXTENDED_IDENTIFIER))) {
        alt114 = 1
      }
      alt114 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:948:21: identifier
          pushFollow(FOLLOW_identifier_in_protected_type_body5059)
          identifier251 = identifier();

          state._fsp -= 1
          if (state.failed) return protectedTypeBody


        case _ =>
      }

      if (state.backtracking == 0) {
        protectedTypeBody = new ProtectedTypeBodyDeclaration(pos, id, items.result, identifier251)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 83, protected_type_body_StartIndex)
      }
    }
    return protectedTypeBody
  }

  // $ANTLR end "protected_type_body"

  // $ANTLR start "protected_type_body_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:951:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def protected_type_body_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val protected_type_body_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body252: DeclarativeItem = null

    var type_declaration253: AbstractTypeDeclaration = null

    var subtype_declaration254: SubTypeDeclaration = null

    var constant_declaration255: ConstantDeclaration = null

    var variable_declaration256: VariableDeclaration = null

    var file_declaration257: FileDeclaration = null

    var alias_declaration258: AliasDeclaration = null

    var attribute_declaration259: AttributeDeclaration = null

    var attribute_specification260: AttributeSpecification = null

    var use_clause261: UseClause = null

    var group_template_declaration262: GroupTemplateDeclaration = null

    var group_declaration263: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:951:69: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt115 = 12
      alt115 = dfa115.predict(input)
      alt115 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:952:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5078)
          subprogram_declartion_or_body252 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body252
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:956:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_protected_type_body_declarative_item5091)
          type_declaration253 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration253
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:957:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5098)
          subtype_declaration254 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration254
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:958:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_protected_type_body_declarative_item5105)
          constant_declaration255 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration255
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:959:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_protected_type_body_declarative_item5112)
          variable_declaration256 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration256
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:960:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_protected_type_body_declarative_item5118)
          file_declaration257 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration257
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:961:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_protected_type_body_declarative_item5125)
          alias_declaration258 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration258
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:962:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5132)
          attribute_declaration259 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration259
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:963:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_protected_type_body_declarative_item5139)
          attribute_specification260 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification260
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:964:4: use_clause
          pushFollow(FOLLOW_use_clause_in_protected_type_body_declarative_item5146)
          use_clause261 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause261
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:965:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5153)
          group_template_declaration262 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration262
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:966:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_protected_type_body_declarative_item5160)
          group_declaration263 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration263
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 84, protected_type_body_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "protected_type_body_declarative_item"

  // $ANTLR start "subtype_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:968:1: subtype_declaration returns [SubTypeDeclaration subTypeDecl] : SUBTYPE identifier IS subtype_indication SEMICOLON ;
  @throws(classOf[RecognitionException])
  def subtype_declaration(): SubTypeDeclaration = {
    var subTypeDecl: SubTypeDeclaration = null;
    val subtype_declaration_StartIndex = input.index()
    var SUBTYPE264: Token = null
    var identifier265: Identifier = null

    var subtype_indication266: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
        return subTypeDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:968:62: ( SUBTYPE identifier IS subtype_indication SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:969:2: SUBTYPE identifier IS subtype_indication SEMICOLON
      SUBTYPE264 = `match`(input, SUBTYPE, FOLLOW_SUBTYPE_in_subtype_declaration5177).asInstanceOf[Token];
      if (state.failed) return subTypeDecl
      pushFollow(FOLLOW_identifier_in_subtype_declaration5179)
      identifier265 = identifier();

      state._fsp -= 1
      if (state.failed) return subTypeDecl
      `match`(input, IS, FOLLOW_IS_in_subtype_declaration5181);
      if (state.failed) return subTypeDecl
      pushFollow(FOLLOW_subtype_indication_in_subtype_declaration5183)
      subtype_indication266 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return subTypeDecl
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_subtype_declaration5185);
      if (state.failed) return subTypeDecl
      if (state.backtracking == 0) {
        subTypeDecl = new SubTypeDeclaration(toPosition(SUBTYPE264), identifier265, subtype_indication266)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 85, subtype_declaration_StartIndex)
      }
    }
    return subTypeDecl
  }

  // $ANTLR end "subtype_declaration"

  // $ANTLR start "subtype_indication"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:972:1: subtype_indication returns [SubTypeIndication subType] : n1= selected_name (n2= selected_name )? ( constraint )? ;
  @throws(classOf[RecognitionException])
  def subtype_indication(): SubTypeIndication = {
    var subType: SubTypeIndication = null;
    val subtype_indication_StartIndex = input.index()
    var n1: SelectedName = null

    var n2: SelectedName = null

    var constraint267: Either[Range, Seq[DiscreteRange]] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
        return subType
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:972:56: (n1= selected_name (n2= selected_name )? ( constraint )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:2: n1= selected_name (n2= selected_name )? ( constraint )?
      pushFollow(FOLLOW_selected_name_in_subtype_indication5205)
      n1 = selected_name();

      state._fsp -= 1
      if (state.failed) return subType
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:21: (n2= selected_name )?
      var alt116 = 2
      val LA116_0 = input.LA(1)

      if ((LA116_0 == STRING_LITERAL || (LA116_0 >= BASIC_IDENTIFIER && LA116_0 <= EXTENDED_IDENTIFIER))) {
        alt116 = 1
      }
      alt116 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:21: n2= selected_name
          pushFollow(FOLLOW_selected_name_in_subtype_indication5209)
          n2 = selected_name();

          state._fsp -= 1
          if (state.failed) return subType


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:37: ( constraint )?
      var alt117 = 2
      val LA117_0 = input.LA(1)

      if ((LA117_0 == RANGE || LA117_0 == LPAREN)) {
        alt117 = 1
      }
      alt117 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:973:37: constraint
          pushFollow(FOLLOW_constraint_in_subtype_indication5212)
          constraint267 = constraint();

          state._fsp -= 1
          if (state.failed) return subType


        case _ =>
      }

      if (state.backtracking == 0) {

        subType = if (n2 != null) new SubTypeIndication(n1, n2, constraint267)
        else new SubTypeIndication(None, n1, constraint267)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 86, subtype_indication_StartIndex)
      }
    }
    return subType
  }

  // $ANTLR end "subtype_indication"

  // $ANTLR start "direction"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:979:1: direction returns [Range.Direction.Value rangeDirection] : ( TO | DOWNTO );
  @throws(classOf[RecognitionException])
  def direction(): Range.Direction.Value = {
    var rangeDirection: Range.Direction.Value = null;
    val direction_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 87)) {
        return rangeDirection
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:979:58: ( TO | DOWNTO )
      var alt118 = 2
      val LA118_0 = input.LA(1)

      if ((LA118_0 == TO)) {
        alt118 = 1
      }
      else if ((LA118_0 == DOWNTO)) {
        alt118 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return rangeDirection
        }
        val nvae = new NoViableAltException("", 118, 0, input)

        throw nvae
      }
      alt118 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:980:2: TO
          `match`(input, TO, FOLLOW_TO_in_direction5232);
          if (state.failed) return rangeDirection
          if (state.backtracking == 0) {
            rangeDirection = Range.Direction.To
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:981:4: DOWNTO
          `match`(input, DOWNTO, FOLLOW_DOWNTO_in_direction5239);
          if (state.failed) return rangeDirection
          if (state.backtracking == 0) {
            rangeDirection = Range.Direction.Downto
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 87, direction_StartIndex)
      }
    }
    return rangeDirection
  }

  // $ANTLR end "direction"

  // $ANTLR start "range_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:983:1: range_constraint returns [Range rangeContraint] : RANGE range ;
  @throws(classOf[RecognitionException])
  def range_constraint(): Range = {
    var rangeContraint: Range = null;
    val range_constraint_StartIndex = input.index()
    var range268: Range = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 88)) {
        return rangeContraint
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:983:49: ( RANGE range )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:984:2: RANGE range
      `match`(input, RANGE, FOLLOW_RANGE_in_range_constraint5254);
      if (state.failed) return rangeContraint
      pushFollow(FOLLOW_range_in_range_constraint5256)
      range268 = range();

      state._fsp -= 1
      if (state.failed) return rangeContraint
      if (state.backtracking == 0) {
        rangeContraint = range268
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 88, range_constraint_StartIndex)
      }
    }
    return rangeContraint
  }

  // $ANTLR end "range_constraint"

  // $ANTLR start "index_constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:986:1: index_constraint returns [Seq[DiscreteRange] ranges] : LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN ;
  @throws(classOf[RecognitionException])
  def index_constraint(): Seq[DiscreteRange] = {
    var ranges: Seq[DiscreteRange] = null;
    val index_constraint_StartIndex = input.index()
    var d1: DiscreteRange = null

    var d2: DiscreteRange = null



    val list = new Buffer[DiscreteRange]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 89)) {
        return ranges
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:989:3: ( LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:990:2: LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_index_constraint5275);
      if (state.failed) return ranges
      pushFollow(FOLLOW_discrete_range_in_index_constraint5279)
      d1 = discrete_range();

      state._fsp -= 1
      if (state.failed) return ranges
      if (state.backtracking == 0) {
        list += d1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:990:39: ( COMMA d2= discrete_range )*
      var loop119 = true
      do {
        var alt119 = 2
        val LA119_0 = input.LA(1)

        if ((LA119_0 == COMMA)) {
          alt119 = 1
        }


        alt119 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:990:40: COMMA d2= discrete_range
            `match`(input, COMMA, FOLLOW_COMMA_in_index_constraint5283);
            if (state.failed) return ranges
            pushFollow(FOLLOW_discrete_range_in_index_constraint5288)
            d2 = discrete_range();

            state._fsp -= 1
            if (state.failed) return ranges
            if (state.backtracking == 0) {
              list += d2
            }


          case _ => loop119 = false
        }
      } while (loop119);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_index_constraint5294);
      if (state.failed) return ranges
      if (state.backtracking == 0) {
        ranges = list.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 89, index_constraint_StartIndex)
      }
    }
    return ranges
  }

  // $ANTLR end "index_constraint"

  // $ANTLR start "range"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:993:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );
  @throws(classOf[RecognitionException])
  def range(): Range = {
    var range_ : Range = null;
    val range_StartIndex = input.index()
    var from: Expression = null

    var to: Expression = null

    var direction269: Range.Direction.Value = null

    var name270: Name = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 90)) {
        return range_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:993:30: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )
      var alt120 = 2
      alt120 = dfa120.predict(input)
      alt120 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:994:2: ( simple_expression direction )=>from= simple_expression direction to= simple_expression
          pushFollow(FOLLOW_simple_expression_in_range5321)
          from = simple_expression();

          state._fsp -= 1
          if (state.failed) return range_
          pushFollow(FOLLOW_direction_in_range5323)
          direction269 = direction();

          state._fsp -= 1
          if (state.failed) return range_
          pushFollow(FOLLOW_simple_expression_in_range5327)
          to = simple_expression();

          state._fsp -= 1
          if (state.failed) return range_
          if (state.backtracking == 0) {
            range_ = new Range(Left(from, direction269, to))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:995:4: name
          pushFollow(FOLLOW_name_in_range5334)
          name270 = name();

          state._fsp -= 1
          if (state.failed) return range_
          if (state.backtracking == 0) {
            range_ = new Range(Right(name270))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 90, range_StartIndex)
      }
    }
    return range_
  }

  // $ANTLR end "range"

  // $ANTLR start "constraint"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:997:1: constraint returns [Either[Range,Seq[DiscreteRange]] constraint_] : ( range_constraint | index_constraint );
  @throws(classOf[RecognitionException])
  def constraint(): Either[Range, Seq[DiscreteRange]] = {
    var constraint_ : Either[Range, Seq[DiscreteRange]] = null;
    val constraint_StartIndex = input.index()
    var range_constraint271: Range = null

    var index_constraint272: Seq[DiscreteRange] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
        return constraint_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:997:69: ( range_constraint | index_constraint )
      var alt121 = 2
      val LA121_0 = input.LA(1)

      if ((LA121_0 == RANGE)) {
        alt121 = 1
      }
      else if ((LA121_0 == LPAREN)) {
        alt121 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return constraint_
        }
        val nvae = new NoViableAltException("", 121, 0, input)

        throw nvae
      }
      alt121 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:998:2: range_constraint
          pushFollow(FOLLOW_range_constraint_in_constraint5349)
          range_constraint271 = range_constraint();

          state._fsp -= 1
          if (state.failed) return constraint_
          if (state.backtracking == 0) {
            constraint_ = Left(range_constraint271)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:999:4: index_constraint
          pushFollow(FOLLOW_index_constraint_in_constraint5356)
          index_constraint272 = index_constraint();

          state._fsp -= 1
          if (state.failed) return constraint_
          if (state.backtracking == 0) {
            constraint_ = Right(index_constraint272)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 91, constraint_StartIndex)
      }
    }
    return constraint_
  }

  // $ANTLR end "constraint"

  // $ANTLR start "discrete_range"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1008:1: discrete_range returns [DiscreteRange discreteRange] : ( ( range )=> range | subtype_indication );
  @throws(classOf[RecognitionException])
  def discrete_range(): DiscreteRange = {
    var discreteRange: DiscreteRange = null;
    val discrete_range_StartIndex = input.index()
    var range273: Range = null

    var subtype_indication274: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
        return discreteRange
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1008:54: ( ( range )=> range | subtype_indication )
      var alt122 = 2
      alt122 = dfa122.predict(input)
      alt122 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1009:2: ( range )=> range
          pushFollow(FOLLOW_range_in_discrete_range5382)
          range273 = range();

          state._fsp -= 1
          if (state.failed) return discreteRange
          if (state.backtracking == 0) {
            discreteRange = new DiscreteRange(Left(range273))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1010:4: subtype_indication
          pushFollow(FOLLOW_subtype_indication_in_discrete_range5389)
          subtype_indication274 = subtype_indication();

          state._fsp -= 1
          if (state.failed) return discreteRange
          if (state.backtracking == 0) {
            discreteRange = new DiscreteRange(Right(subtype_indication274))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 92, discrete_range_StartIndex)
      }
    }
    return discreteRange
  }

  // $ANTLR end "discrete_range"

  // $ANTLR start "type_mark"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1012:1: type_mark returns [SelectedName typeName] : selected_name ;
  @throws(classOf[RecognitionException])
  def type_mark(): SelectedName = {
    var typeName: SelectedName = null;
    val type_mark_StartIndex = input.index()
    var selected_name275: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
        return typeName
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1012:43: ( selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1013:2: selected_name
      pushFollow(FOLLOW_selected_name_in_type_mark5406)
      selected_name275 = selected_name();

      state._fsp -= 1
      if (state.failed) return typeName
      if (state.backtracking == 0) {
        typeName = selected_name275
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 93, type_mark_StartIndex)
      }
    }
    return typeName
  }

  // $ANTLR end "type_mark"

  // $ANTLR start "concurrent_statement_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1018:1: concurrent_statement_list returns [Seq[ConcurrentStatement] list] : ( concurrent_statement )* ;
  @throws(classOf[RecognitionException])
  def concurrent_statement_list(): Seq[ConcurrentStatement] = {
    var list: Seq[ConcurrentStatement] = null;
    val concurrent_statement_list_StartIndex = input.index()
    var concurrent_statement276: ConcurrentStatement = null



    val statementList = new Buffer[ConcurrentStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1021:3: ( ( concurrent_statement )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1022:2: ( concurrent_statement )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1022:2: ( concurrent_statement )*
      var loop123 = true
      do {
        var alt123 = 2
        val LA123_0 = input.LA(1)

        if ((LA123_0 == ASSERT || LA123_0 == POSTPONED || LA123_0 == PROCESS || LA123_0 == WITH || LA123_0 == LPAREN || LA123_0 == STRING_LITERAL || (LA123_0 >= BASIC_IDENTIFIER && LA123_0 <= EXTENDED_IDENTIFIER))) {
          alt123 = 1
        }
        else if ((LA123_0 == BREAK) && ((ams))) {
          alt123 = 1
        }


        alt123 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1022:3: concurrent_statement
            pushFollow(FOLLOW_concurrent_statement_in_concurrent_statement_list5433)
            concurrent_statement276 = concurrent_statement();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              statementList += concurrent_statement276
            }


          case _ => loop123 = false
        }
      } while (loop123);

      if (state.backtracking == 0) {
        list = statementList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 94, concurrent_statement_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "concurrent_statement_list"

  // $ANTLR start "concurrent_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1025:1: concurrent_statement returns [ConcurrentStatement stmt] : (label= label_colon ( ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] );
  @throws(classOf[RecognitionException])
  def concurrent_statement(): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_StartIndex = input.index()
    var label: Identifier = null

    var concurrent_statement_with_label277: ConcurrentStatement = null

    var concurrent_statement_optional_label278: ConcurrentStatement = null

    var concurrent_statement_optional_label279: ConcurrentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1025:57: (label= label_colon ( ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] ) | concurrent_statement_optional_label[$label.label] )
      var alt125 = 2
      val LA125_0 = input.LA(1)

      if ((LA125_0 == BASIC_IDENTIFIER)) {
        val LA125_1 = input.LA(2)

        if ((LA125_1 == LEQ || LA125_1 == SEMICOLON || LA125_1 == LPAREN || LA125_1 == LBRACKET || LA125_1 == DOT || LA125_1 == APOSTROPHE)) {
          alt125 = 2
        }
        else if ((LA125_1 == COLON)) {
          alt125 = 1
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 125, 1, input)

          throw nvae
        }
      }
      else if ((LA125_0 == EXTENDED_IDENTIFIER)) {
        val LA125_2 = input.LA(2)

        if ((LA125_2 == LEQ || LA125_2 == SEMICOLON || LA125_2 == LPAREN || LA125_2 == LBRACKET || LA125_2 == DOT || LA125_2 == APOSTROPHE)) {
          alt125 = 2
        }
        else if ((LA125_2 == COLON)) {
          alt125 = 1
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 125, 2, input)

          throw nvae
        }
      }
      else if ((LA125_0 == ASSERT || LA125_0 == POSTPONED || LA125_0 == PROCESS || LA125_0 == WITH || LA125_0 == LPAREN || LA125_0 == STRING_LITERAL)) {
        alt125 = 2
      }
      else if ((LA125_0 == BREAK) && ((ams))) {
        alt125 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return stmt
        }
        val nvae = new NoViableAltException("", 125, 0, input)

        throw nvae
      }
      alt125 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1026:4: label= label_colon ( ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
          pushFollow(FOLLOW_label_colon_in_concurrent_statement5458)
          label = label_colon();

          state._fsp -= 1
          if (state.failed) return stmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1026:22: ( ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )
          var alt124 = 2
          alt124 = dfa124.predict(input)
          alt124 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:4: ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label]
              pushFollow(FOLLOW_concurrent_statement_with_label_in_concurrent_statement5494)
              concurrent_statement_with_label277 = concurrent_statement_with_label(label);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_statement_with_label277
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1028:6: concurrent_statement_optional_label[$label.label]
              pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement5504)
              concurrent_statement_optional_label278 = concurrent_statement_optional_label(label);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_statement_optional_label278
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1030:5: concurrent_statement_optional_label[$label.label]
          pushFollow(FOLLOW_concurrent_statement_optional_label_in_concurrent_statement5518)
          concurrent_statement_optional_label279 = concurrent_statement_optional_label(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = concurrent_statement_optional_label279
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 95, concurrent_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement"

  // $ANTLR start "concurrent_statement_with_label"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1032:1: concurrent_statement_with_label[Identifier label] returns [ConcurrentStatement stmt] : ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] );
  @throws(classOf[RecognitionException])
  def concurrent_statement_with_label(label: Identifier): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_with_label_StartIndex = input.index()
    var component_instantiation_statement280: ComponentInstantiationStatement = null

    var block_statement281: BlockStatement = null

    var generate_statement282: ConcurrentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 96)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1032:86: ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] )
      var alt126 = 3
      input.LA(1) match {
        case COMPONENT | CONFIGURATION | ENTITY | STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt126 = 1
        case BLOCK =>
          alt126 = 2
        case FOR | IF =>
          alt126 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 126, 0, input)

          throw nvae
      }

      alt126 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1033:2: component_instantiation_statement[$label]
          pushFollow(FOLLOW_component_instantiation_statement_in_concurrent_statement_with_label5535)
          component_instantiation_statement280 = component_instantiation_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = component_instantiation_statement280
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1034:4: block_statement[$label]
          pushFollow(FOLLOW_block_statement_in_concurrent_statement_with_label5543)
          block_statement281 = block_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = block_statement281
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1035:4: generate_statement[$label]
          pushFollow(FOLLOW_generate_statement_in_concurrent_statement_with_label5551)
          generate_statement282 = generate_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = generate_statement282
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 96, concurrent_statement_with_label_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement_with_label"

  // $ANTLR start "concurrent_statement_optional_label"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1037:1: concurrent_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ( ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) ) | {...}? => ( ams_concurrent_break_statement[$label] ) );
  @throws(classOf[RecognitionException])
  def concurrent_statement_optional_label(label: Identifier): ConcurrentStatement = {
    var stmt: ConcurrentStatement = null;
    val concurrent_statement_optional_label_StartIndex = input.index()
    var postponed: Token = null
    var process_statement283: ProcessStatement = null

    var concurrent_assertion_statement284: ConcurrentAssertionStatement = null

    var concurrent_signal_assignment_statement285: ConcurrentSignalAssignmentStatement = null

    var concurrent_procedure_call_statement286: ConcurrentProcedureCallStatement = null

    var ams_concurrent_break_statement287: ConcurrentBreakStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 97)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1037:90: ( ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) ) | {...}? => ( ams_concurrent_break_statement[$label] ) )
      var alt129 = 2
      val LA129_0 = input.LA(1)

      if ((LA129_0 == ASSERT || LA129_0 == POSTPONED || LA129_0 == PROCESS || LA129_0 == WITH || LA129_0 == LPAREN || LA129_0 == STRING_LITERAL || (LA129_0 >= BASIC_IDENTIFIER && LA129_0 <= EXTENDED_IDENTIFIER))) {
        alt129 = 1
      }
      else if ((LA129_0 == BREAK) && ((ams))) {
        alt129 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return stmt
        }
        val nvae = new NoViableAltException("", 129, 0, input)

        throw nvae
      }
      alt129 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:2: ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:2: ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:3: (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:12: (postponed= POSTPONED )?
          var alt127 = 2
          val LA127_0 = input.LA(1)

          if ((LA127_0 == POSTPONED)) {
            alt127 = 1
          }
          alt127 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1038:12: postponed= POSTPONED
              postponed = `match`(input, POSTPONED, FOLLOW_POSTPONED_in_concurrent_statement_optional_label5575).asInstanceOf[Token]; if (state.failed) return stmt


            case _ =>
          }

          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1039:3: ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
          var alt128 = 4
          val LA128_0 = input.LA(1)

          if ((LA128_0 == PROCESS)) {
            alt128 = 1
          }
          else if ((LA128_0 == ASSERT)) {
            alt128 = 2
          }
          else if ((LA128_0 == BASIC_IDENTIFIER)) {
            val LA128_3 = input.LA(2)

            if ((synpred11_VHDL())) {
              alt128 = 3
            }
            else if ((true)) {
              alt128 = 4
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return stmt
              }
              val nvae = new NoViableAltException("", 128, 3, input)

              throw nvae
            }
          }
          else if ((LA128_0 == EXTENDED_IDENTIFIER)) {
            val LA128_4 = input.LA(2)

            if ((synpred11_VHDL())) {
              alt128 = 3
            }
            else if ((true)) {
              alt128 = 4
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return stmt
              }
              val nvae = new NoViableAltException("", 128, 4, input)

              throw nvae
            }
          }
          else if ((LA128_0 == STRING_LITERAL)) {
            val LA128_5 = input.LA(2)

            if ((synpred11_VHDL())) {
              alt128 = 3
            }
            else if ((true)) {
              alt128 = 4
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return stmt
              }
              val nvae = new NoViableAltException("", 128, 5, input)

              throw nvae
            }
          }
          else if ((LA128_0 == LPAREN) && (synpred11_VHDL())) {
            alt128 = 3
          }
          else if ((LA128_0 == WITH) && (synpred11_VHDL())) {
            alt128 = 3
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            val nvae = new NoViableAltException("", 128, 0, input)

            throw nvae
          }
          alt128 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1040:3: process_statement[$label,postponed!=null]
              pushFollow(FOLLOW_process_statement_in_concurrent_statement_optional_label5585)
              process_statement283 = process_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = process_statement283
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1041:5: concurrent_assertion_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_assertion_statement_in_concurrent_statement_optional_label5594)
              concurrent_assertion_statement284 = concurrent_assertion_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_assertion_statement284
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1042:5: ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_signal_assignment_statement_in_concurrent_statement_optional_label5613)
              concurrent_signal_assignment_statement285 = concurrent_signal_assignment_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_signal_assignment_statement285
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1043:5: concurrent_procedure_call_statement[$label,postponed!=null]
              pushFollow(FOLLOW_concurrent_procedure_call_statement_in_concurrent_statement_optional_label5622)
              concurrent_procedure_call_statement286 = concurrent_procedure_call_statement(label, postponed != null);

              state._fsp -= 1
              if (state.failed) return stmt
              if (state.backtracking == 0) {
                stmt = concurrent_procedure_call_statement286
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1046:4: {...}? => ( ams_concurrent_break_statement[$label] )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            throw new FailedPredicateException(input, "concurrent_statement_optional_label", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1046:12: ( ams_concurrent_break_statement[$label] )
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1047:3: ams_concurrent_break_statement[$label]
          pushFollow(FOLLOW_ams_concurrent_break_statement_in_concurrent_statement_optional_label5644)
          ams_concurrent_break_statement287 = ams_concurrent_break_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_concurrent_break_statement287
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 97, concurrent_statement_optional_label_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "concurrent_statement_optional_label"

  // $ANTLR start "generic_map_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1053:1: generic_map_aspect returns [AssociationList list] : GENERIC MAP LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def generic_map_aspect(): AssociationList = {
    var list: AssociationList = null;
    val generic_map_aspect_StartIndex = input.index()
    var association_list288: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1053:51: ( GENERIC MAP LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1054:2: GENERIC MAP LPAREN association_list RPAREN
      `match`(input, GENERIC, FOLLOW_GENERIC_in_generic_map_aspect5673);
      if (state.failed) return list
      `match`(input, MAP, FOLLOW_MAP_in_generic_map_aspect5675);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_generic_map_aspect5677);
      if (state.failed) return list
      pushFollow(FOLLOW_association_list_in_generic_map_aspect5679)
      association_list288 = association_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_generic_map_aspect5681);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = association_list288
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 98, generic_map_aspect_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "generic_map_aspect"

  // $ANTLR start "port_map_aspect"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:1: port_map_aspect returns [AssociationList list] : PORT MAP LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def port_map_aspect(): AssociationList = {
    var list: AssociationList = null;
    val port_map_aspect_StartIndex = input.index()
    var association_list289: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1056:48: ( PORT MAP LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1057:2: PORT MAP LPAREN association_list RPAREN
      `match`(input, PORT, FOLLOW_PORT_in_port_map_aspect5698);
      if (state.failed) return list
      `match`(input, MAP, FOLLOW_MAP_in_port_map_aspect5700);
      if (state.failed) return list
      `match`(input, LPAREN, FOLLOW_LPAREN_in_port_map_aspect5702);
      if (state.failed) return list
      pushFollow(FOLLOW_association_list_in_port_map_aspect5704)
      association_list289 = association_list();

      state._fsp -= 1
      if (state.failed) return list
      `match`(input, RPAREN, FOLLOW_RPAREN_in_port_map_aspect5706);
      if (state.failed) return list
      if (state.backtracking == 0) {
        list = association_list289
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 99, port_map_aspect_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "port_map_aspect"

  // $ANTLR start "block_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1059:1: block_statement[Identifier label] returns [BlockStatement blockStmt] : block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def block_statement(label: Identifier): BlockStatement = {
    var blockStmt: BlockStatement = null;
    val block_statement_StartIndex = input.index()
    var block: Token = null
    var guard_expression: Expression = null

    var end_block_label: Identifier = null

    var block_declarative_item290: DeclarativeItem = null

    var generic_clause291: Seq[InterfaceList.AbstractInterfaceElement] = null

    var generic_map_aspect292: AssociationList = null

    var port_clause293: Seq[InterfaceList.AbstractInterfaceElement] = null

    var port_map_aspect294: AssociationList = null

    var concurrent_statement_list295: Seq[ConcurrentStatement] = null



    val declItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
        return blockStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1062:3: (block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1063:2: block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN concurrent_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON
      block = `match`(input, BLOCK, FOLLOW_BLOCK_in_block_statement5733).asInstanceOf[Token];
      if (state.failed) return blockStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1063:14: ( LPAREN guard_expression= expression RPAREN )?
      var alt130 = 2
      val LA130_0 = input.LA(1)

      if ((LA130_0 == LPAREN)) {
        alt130 = 1
      }
      alt130 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1063:15: LPAREN guard_expression= expression RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_block_statement5736);
          if (state.failed) return blockStmt
          pushFollow(FOLLOW_expression_in_block_statement5740)
          guard_expression = expression();

          state._fsp -= 1
          if (state.failed) return blockStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_block_statement5742);
          if (state.failed) return blockStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1063:59: ( IS )?
      var alt131 = 2
      val LA131_0 = input.LA(1)

      if ((LA131_0 == IS)) {
        alt131 = 1
      }
      alt131 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1063:59: IS
          `match`(input, IS, FOLLOW_IS_in_block_statement5746); if (state.failed) return blockStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1064:3: ( generic_clause ( generic_map_aspect SEMICOLON )? )?
      var alt133 = 2
      val LA133_0 = input.LA(1)

      if ((LA133_0 == GENERIC)) {
        alt133 = 1
      }
      alt133 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1064:4: generic_clause ( generic_map_aspect SEMICOLON )?
          pushFollow(FOLLOW_generic_clause_in_block_statement5752)
          generic_clause291 = generic_clause();

          state._fsp -= 1
          if (state.failed) return blockStmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1064:19: ( generic_map_aspect SEMICOLON )?
          var alt132 = 2
          val LA132_0 = input.LA(1)

          if ((LA132_0 == GENERIC)) {
            alt132 = 1
          }
          alt132 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1064:20: generic_map_aspect SEMICOLON
              pushFollow(FOLLOW_generic_map_aspect_in_block_statement5755)
              generic_map_aspect292 = generic_map_aspect();

              state._fsp -= 1
              if (state.failed) return blockStmt
              `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement5757);
              if (state.failed) return blockStmt


            case _ =>
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1065:3: ( port_clause ( port_map_aspect SEMICOLON )? )?
      var alt135 = 2
      val LA135_0 = input.LA(1)

      if ((LA135_0 == PORT)) {
        alt135 = 1
      }
      alt135 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1065:4: port_clause ( port_map_aspect SEMICOLON )?
          pushFollow(FOLLOW_port_clause_in_block_statement5766)
          port_clause293 = port_clause();

          state._fsp -= 1
          if (state.failed) return blockStmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1065:16: ( port_map_aspect SEMICOLON )?
          var alt134 = 2
          val LA134_0 = input.LA(1)

          if ((LA134_0 == PORT)) {
            alt134 = 1
          }
          alt134 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1065:17: port_map_aspect SEMICOLON
              pushFollow(FOLLOW_port_map_aspect_in_block_statement5769)
              port_map_aspect294 = port_map_aspect();

              state._fsp -= 1
              if (state.failed) return blockStmt
              `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement5771);
              if (state.failed) return blockStmt


            case _ =>
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1066:3: ( block_declarative_item )*
      var loop136 = true
      do {
        var alt136 = 2
        val LA136_0 = input.LA(1)

        if ((LA136_0 == ALIAS || LA136_0 == ATTRIBUTE || LA136_0 == COMPONENT || (LA136_0 >= CONSTANT && LA136_0 <= DISCONNECT) || (LA136_0 >= FILE && LA136_0 <= FUNCTION) || LA136_0 == GROUP || LA136_0 == IMPURE || LA136_0 == PROCEDURE || LA136_0 == PURE || (LA136_0 >= SHARED && LA136_0 <= SIGNAL) || LA136_0 == SUBTYPE || LA136_0 == TYPE || (LA136_0 >= USE && LA136_0 <= VARIABLE))) {
          alt136 = 1
        }
        else if (((LA136_0 >= NATURE && LA136_0 <= QUANTITY) || (LA136_0 >= SUBNATURE && LA136_0 <= LIMIT)) && ((ams))) {
          alt136 = 1
        }


        alt136 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1066:4: block_declarative_item
            pushFollow(FOLLOW_block_declarative_item_in_block_statement5780)
            block_declarative_item290 = block_declarative_item();

            state._fsp -= 1
            if (state.failed) return blockStmt
            if (state.backtracking == 0) {
              declItems += block_declarative_item290
            }


          case _ => loop136 = false
        }
      } while (loop136);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_block_statement5786);
      if (state.failed) return blockStmt
      pushFollow(FOLLOW_concurrent_statement_list_in_block_statement5790)
      concurrent_statement_list295 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return blockStmt
      `match`(input, END, FOLLOW_END_in_block_statement5793);
      if (state.failed) return blockStmt
      `match`(input, BLOCK, FOLLOW_BLOCK_in_block_statement5795);
      if (state.failed) return blockStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1069:27: (end_block_label= identifier )?
      var alt137 = 2
      val LA137_0 = input.LA(1)

      if (((LA137_0 >= BASIC_IDENTIFIER && LA137_0 <= EXTENDED_IDENTIFIER))) {
        alt137 = 1
      }
      alt137 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1069:27: end_block_label= identifier
          pushFollow(FOLLOW_identifier_in_block_statement5799)
          end_block_label = identifier();

          state._fsp -= 1
          if (state.failed) return blockStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_block_statement5802);
      if (state.failed) return blockStmt
      if (state.backtracking == 0) {

        blockStmt = new BlockStatement(toPosition(block), label, guard_expression, generic_clause291, generic_map_aspect292, port_clause293, port_map_aspect294,
          declItems.result, concurrent_statement_list295, end_block_label)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 100, block_statement_StartIndex)
      }
    }
    return blockStmt
  }

  // $ANTLR end "block_statement"

  // $ANTLR start "block_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1075:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
  @throws(classOf[RecognitionException])
  def block_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val block_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body296: DeclarativeItem = null

    var type_declaration297: AbstractTypeDeclaration = null

    var subtype_declaration298: SubTypeDeclaration = null

    var constant_declaration299: ConstantDeclaration = null

    var signal_declaration300: SignalDeclaration = null

    var variable_declaration301: VariableDeclaration = null

    var file_declaration302: FileDeclaration = null

    var alias_declaration303: AliasDeclaration = null

    var component_declaration304: ComponentDeclaration = null

    var attribute_declaration305: AttributeDeclaration = null

    var attribute_specification306: AttributeSpecification = null

    var configuration_specification307: ConfigurationSpecification = null

    var disconnection_specification308: DisconnectionSpecification = null

    var use_clause309: UseClause = null

    var group_template_declaration310: GroupTemplateDeclaration = null

    var group_declaration311: GroupDeclaration = null

    var ams_step_limit_specification312: StepLimitSpecification = null

    var ams_nature_declaration313: AbstractTypeDeclaration = null

    var ams_subnature_declaration314: SubNatureDeclaration = null

    var ams_quantity_declaration315: AbstractQuantityDeclaration = null

    var ams_terminal_declaration316: TerminalDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1075:55: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
      var alt139 = 17
      alt139 = dfa139.predict(input)
      alt139 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1076:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_block_declarative_item5823)
          subprogram_declartion_or_body296 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body296
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1080:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_block_declarative_item5836)
          type_declaration297 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration297
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1081:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_block_declarative_item5843)
          subtype_declaration298 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration298
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1082:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_block_declarative_item5850)
          constant_declaration299 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration299
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1083:4: signal_declaration
          pushFollow(FOLLOW_signal_declaration_in_block_declarative_item5857)
          signal_declaration300 = signal_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = signal_declaration300
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1084:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_block_declarative_item5864)
          variable_declaration301 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration301
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1085:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_block_declarative_item5871)
          file_declaration302 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration302
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1086:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_block_declarative_item5878)
          alias_declaration303 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration303
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1087:4: component_declaration
          pushFollow(FOLLOW_component_declaration_in_block_declarative_item5885)
          component_declaration304 = component_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = component_declaration304
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1088:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_block_declarative_item5892)
          attribute_declaration305 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration305
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1089:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_block_declarative_item5899)
          attribute_specification306 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification306
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1090:4: configuration_specification
          pushFollow(FOLLOW_configuration_specification_in_block_declarative_item5906)
          configuration_specification307 = configuration_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = configuration_specification307
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1091:4: disconnection_specification
          pushFollow(FOLLOW_disconnection_specification_in_block_declarative_item5913)
          disconnection_specification308 = disconnection_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = disconnection_specification308
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1092:4: use_clause
          pushFollow(FOLLOW_use_clause_in_block_declarative_item5920)
          use_clause309 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause309
          }

        case 15 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1093:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_block_declarative_item5927)
          group_template_declaration310 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration310
          }

        case 16 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1094:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_block_declarative_item5934)
          group_declaration311 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration311
          }

        case 17 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1097:4: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return item
            }
            throw new FailedPredicateException(input, "block_declarative_item", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1097:12: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
          var alt138 = 5
          input.LA(1) match {
            case LIMIT =>
              alt138 = 1
            case NATURE =>
              alt138 = 2
            case SUBNATURE =>
              alt138 = 3
            case QUANTITY =>
              alt138 = 4
            case TERMINAL =>
              alt138 = 5
            case _ =>
              if (state.backtracking > 0) {
                state.failed = true; return item
              }
              val nvae = new NoViableAltException("", 138, 0, input)

              throw nvae
          }

          alt138 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1098:3: ams_step_limit_specification
              pushFollow(FOLLOW_ams_step_limit_specification_in_block_declarative_item5951)
              ams_step_limit_specification312 = ams_step_limit_specification();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_step_limit_specification312
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1099:5: ams_nature_declaration
              pushFollow(FOLLOW_ams_nature_declaration_in_block_declarative_item5959)
              ams_nature_declaration313 = ams_nature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_nature_declaration313
              }

            case 3 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1100:5: ams_subnature_declaration
              pushFollow(FOLLOW_ams_subnature_declaration_in_block_declarative_item5967)
              ams_subnature_declaration314 = ams_subnature_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_subnature_declaration314
              }

            case 4 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1101:5: ams_quantity_declaration
              pushFollow(FOLLOW_ams_quantity_declaration_in_block_declarative_item5975)
              ams_quantity_declaration315 = ams_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_quantity_declaration315
              }

            case 5 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1102:5: ams_terminal_declaration
              pushFollow(FOLLOW_ams_terminal_declaration_in_block_declarative_item5983)
              ams_terminal_declaration316 = ams_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return item
              if (state.backtracking == 0) {
                item = ams_terminal_declaration316
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 101, block_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "block_declarative_item"

  // $ANTLR start "process_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1105:1: process_statement[Identifier label,Boolean postponed] returns [ProcessStatement processStmt] : process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def process_statement(label: Identifier, postponed: Boolean): ProcessStatement = {
    var processStmt: ProcessStatement = null;
    val process_statement_StartIndex = input.index()
    var process: Token = null
    var end_process_label: Identifier = null

    var process_declarative_item317: DeclarativeItem = null

    var name_list318: Seq[Name] = null

    var sequence_of_statements319: Seq[SequentialStatement] = null



    val declItem = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
        return processStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1108:3: (process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1109:2: process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON
      process = `match`(input, PROCESS, FOLLOW_PROCESS_in_process_statement6010).asInstanceOf[Token];
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1109:18: ( LPAREN name_list RPAREN )?
      var alt140 = 2
      val LA140_0 = input.LA(1)

      if ((LA140_0 == LPAREN)) {
        alt140 = 1
      }
      alt140 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1109:19: LPAREN name_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_process_statement6013);
          if (state.failed) return processStmt
          pushFollow(FOLLOW_name_list_in_process_statement6015)
          name_list318 = name_list();

          state._fsp -= 1
          if (state.failed) return processStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_process_statement6017);
          if (state.failed) return processStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1109:45: ( IS )?
      var alt141 = 2
      val LA141_0 = input.LA(1)

      if ((LA141_0 == IS)) {
        alt141 = 1
      }
      alt141 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1109:45: IS
          `match`(input, IS, FOLLOW_IS_in_process_statement6021); if (state.failed) return processStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1110:3: ( process_declarative_item )*
      var loop142 = true
      do {
        var alt142 = 2
        val LA142_0 = input.LA(1)

        if ((LA142_0 == ALIAS || LA142_0 == ATTRIBUTE || LA142_0 == CONSTANT || LA142_0 == FILE || LA142_0 == FUNCTION || LA142_0 == GROUP || LA142_0 == IMPURE || LA142_0 == PROCEDURE || LA142_0 == PURE || LA142_0 == SHARED || LA142_0 == SUBTYPE || LA142_0 == TYPE || (LA142_0 >= USE && LA142_0 <= VARIABLE))) {
          alt142 = 1
        }


        alt142 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1110:4: process_declarative_item
            pushFollow(FOLLOW_process_declarative_item_in_process_statement6027)
            process_declarative_item317 = process_declarative_item();

            state._fsp -= 1
            if (state.failed) return processStmt
            if (state.backtracking == 0) {
              declItem += process_declarative_item317
            }


          case _ => loop142 = false
        }
      } while (loop142);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_process_statement6034);
      if (state.failed) return processStmt
      pushFollow(FOLLOW_sequence_of_statements_in_process_statement6038)
      sequence_of_statements319 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return processStmt
      `match`(input, END, FOLLOW_END_in_process_statement6041);
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:6: ( POSTPONED )?
      var alt143 = 2
      val LA143_0 = input.LA(1)

      if ((LA143_0 == POSTPONED)) {
        alt143 = 1
      }
      alt143 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:6: POSTPONED
          `match`(input, POSTPONED, FOLLOW_POSTPONED_in_process_statement6043); if (state.failed) return processStmt


        case _ =>
      }

      `match`(input, PROCESS, FOLLOW_PROCESS_in_process_statement6046);
      if (state.failed) return processStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:42: (end_process_label= identifier )?
      var alt144 = 2
      val LA144_0 = input.LA(1)

      if (((LA144_0 >= BASIC_IDENTIFIER && LA144_0 <= EXTENDED_IDENTIFIER))) {
        alt144 = 1
      }
      alt144 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1113:42: end_process_label= identifier
          pushFollow(FOLLOW_identifier_in_process_statement6050)
          end_process_label = identifier();

          state._fsp -= 1
          if (state.failed) return processStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_process_statement6053);
      if (state.failed) return processStmt
      if (state.backtracking == 0) {
        processStmt = new ProcessStatement(toPosition(process), label, postponed, name_list318, declItem.result, sequence_of_statements319, end_process_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 102, process_statement_StartIndex)
      }
    }
    return processStmt
  }

  // $ANTLR end "process_statement"

  // $ANTLR start "process_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1116:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def process_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val process_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body320: DeclarativeItem = null

    var type_declaration321: AbstractTypeDeclaration = null

    var subtype_declaration322: SubTypeDeclaration = null

    var constant_declaration323: ConstantDeclaration = null

    var variable_declaration324: VariableDeclaration = null

    var file_declaration325: FileDeclaration = null

    var alias_declaration326: AliasDeclaration = null

    var attribute_declaration327: AttributeDeclaration = null

    var attribute_specification328: AttributeSpecification = null

    var use_clause329: UseClause = null

    var group_template_declaration330: GroupTemplateDeclaration = null

    var group_declaration331: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 103)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1116:57: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt145 = 12
      alt145 = dfa145.predict(input)
      alt145 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1117:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6074)
          subprogram_declartion_or_body320 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body320
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1121:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_process_declarative_item6087)
          type_declaration321 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration321
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1122:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_process_declarative_item6094)
          subtype_declaration322 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration322
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1123:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_process_declarative_item6101)
          constant_declaration323 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration323
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1124:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_process_declarative_item6108)
          variable_declaration324 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration324
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1125:4: file_declaration
          pushFollow(FOLLOW_file_declaration_in_process_declarative_item6115)
          file_declaration325 = file_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = file_declaration325
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1126:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_process_declarative_item6122)
          alias_declaration326 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration326
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1127:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_process_declarative_item6129)
          attribute_declaration327 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration327
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1128:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_process_declarative_item6136)
          attribute_specification328 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification328
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1129:4: use_clause
          pushFollow(FOLLOW_use_clause_in_process_declarative_item6143)
          use_clause329 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause329
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1130:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_process_declarative_item6150)
          group_template_declaration330 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration330
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1131:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_process_declarative_item6157)
          group_declaration331 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration331
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 103, process_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "process_declarative_item"

  // $ANTLR start "concurrent_procedure_call_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1133:1: concurrent_procedure_call_statement[Identifier label,Boolean postponed] returns [ConcurrentProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_procedure_call_statement(label: Identifier, postponed: Boolean): ConcurrentProcedureCallStatement = {
    var procedureCallStmt: ConcurrentProcedureCallStatement = null;
    val concurrent_procedure_call_statement_StartIndex = input.index()
    var procedure_name: SelectedName = null

    var association_list332: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
        return procedureCallStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1133:134: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1134:2: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
      pushFollow(FOLLOW_selected_name_in_concurrent_procedure_call_statement6177)
      procedure_name = selected_name();

      state._fsp -= 1
      if (state.failed) return procedureCallStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1134:31: ( LPAREN association_list RPAREN )?
      var alt146 = 2
      val LA146_0 = input.LA(1)

      if ((LA146_0 == LPAREN)) {
        alt146 = 1
      }
      alt146 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1134:32: LPAREN association_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_concurrent_procedure_call_statement6180);
          if (state.failed) return procedureCallStmt
          pushFollow(FOLLOW_association_list_in_concurrent_procedure_call_statement6182)
          association_list332 = association_list();

          state._fsp -= 1
          if (state.failed) return procedureCallStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_concurrent_procedure_call_statement6184);
          if (state.failed) return procedureCallStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6188);
      if (state.failed) return procedureCallStmt
      if (state.backtracking == 0) {
        procedureCallStmt = new ConcurrentProcedureCallStatement(label, postponed, procedure_name, association_list332)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 104, concurrent_procedure_call_statement_StartIndex)
      }
    }
    return procedureCallStmt
  }

  // $ANTLR end "concurrent_procedure_call_statement"

  // $ANTLR start "concurrent_assertion_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1137:1: concurrent_assertion_statement[Identifier label,Boolean postponed] returns [ConcurrentAssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def concurrent_assertion_statement(label: Identifier, postponed: Boolean): ConcurrentAssertionStatement = {
    var assertStmt: ConcurrentAssertionStatement = null;
    val concurrent_assertion_statement_StartIndex = input.index()
    var ASSERT333: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null

    var condition334: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
        return assertStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1137:118: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
      ASSERT333 = `match`(input, ASSERT, FOLLOW_ASSERT_in_concurrent_assertion_statement6207).asInstanceOf[Token];
      if (state.failed) return assertStmt
      pushFollow(FOLLOW_condition_in_concurrent_assertion_statement6209)
      condition334 = condition();

      state._fsp -= 1
      if (state.failed) return assertStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:20: ( REPORT report_expression= expression )?
      var alt147 = 2
      val LA147_0 = input.LA(1)

      if ((LA147_0 == REPORT)) {
        alt147 = 1
      }
      alt147 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:21: REPORT report_expression= expression
          `match`(input, REPORT, FOLLOW_REPORT_in_concurrent_assertion_statement6213);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6217)
          report_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:59: ( SEVERITY severity_expression= expression )?
      var alt148 = 2
      val LA148_0 = input.LA(1)

      if ((LA148_0 == SEVERITY)) {
        alt148 = 1
      }
      alt148 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1138:60: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_concurrent_assertion_statement6222);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6226)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_concurrent_assertion_statement6230);
      if (state.failed) return assertStmt
      if (state.backtracking == 0) {
        assertStmt = new ConcurrentAssertionStatement(toPosition(ASSERT333), label, postponed, condition334, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 105, concurrent_assertion_statement_StartIndex)
      }
    }
    return assertStmt
  }

  // $ANTLR end "concurrent_assertion_statement"

  // $ANTLR start "concurrent_signal_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1141:1: concurrent_signal_assignment_statement[Identifier label,Boolean postponed] returns [ConcurrentSignalAssignmentStatement concurrentSignalAssignStmt] : ( conditional_signal_assignment[$label,$postponed] | selected_signal_assignment[$label,$postponed] );
  @throws(classOf[RecognitionException])
  def concurrent_signal_assignment_statement(label: Identifier, postponed: Boolean): ConcurrentSignalAssignmentStatement = {
    var concurrentSignalAssignStmt: ConcurrentSignalAssignmentStatement = null;
    val concurrent_signal_assignment_statement_StartIndex = input.index()
    var conditional_signal_assignment335: ConcurrentConditionalSignalAssignment = null

    var selected_signal_assignment336: ConcurrentSelectedSignalAssignment = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
        return concurrentSignalAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1141:149: ( conditional_signal_assignment[$label,$postponed] | selected_signal_assignment[$label,$postponed] )
      var alt149 = 2
      val LA149_0 = input.LA(1)

      if ((LA149_0 == LPAREN || LA149_0 == STRING_LITERAL || (LA149_0 >= BASIC_IDENTIFIER && LA149_0 <= EXTENDED_IDENTIFIER))) {
        alt149 = 1
      }
      else if ((LA149_0 == WITH)) {
        alt149 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return concurrentSignalAssignStmt
        }
        val nvae = new NoViableAltException("", 149, 0, input)

        throw nvae
      }
      alt149 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1142:2: conditional_signal_assignment[$label,$postponed]
          pushFollow(FOLLOW_conditional_signal_assignment_in_concurrent_signal_assignment_statement6254)
          conditional_signal_assignment335 = conditional_signal_assignment(label, postponed);

          state._fsp -= 1
          if (state.failed) return concurrentSignalAssignStmt
          if (state.backtracking == 0) {
            concurrentSignalAssignStmt = conditional_signal_assignment335
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1143:4: selected_signal_assignment[$label,$postponed]
          pushFollow(FOLLOW_selected_signal_assignment_in_concurrent_signal_assignment_statement6261)
          selected_signal_assignment336 = selected_signal_assignment(label, postponed);

          state._fsp -= 1
          if (state.failed) return concurrentSignalAssignStmt
          if (state.backtracking == 0) {
            concurrentSignalAssignStmt = selected_signal_assignment336
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 106, concurrent_signal_assignment_statement_StartIndex)
      }
    }
    return concurrentSignalAssignStmt
  }

  // $ANTLR end "concurrent_signal_assignment_statement"

  // $ANTLR start "conditional_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1145:1: conditional_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentConditionalSignalAssignment signalAssignment] : target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON ;
  @throws(classOf[RecognitionException])
  def conditional_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentConditionalSignalAssignment = {
    var signalAssignment: ConcurrentConditionalSignalAssignment = null;
    val conditional_signal_assignment_StartIndex = input.index()
    var LEQ337: Token = null
    var GUARDED339: Token = null
    var target338: Target = null

    var delay_mechanism340: DelayMechanism = null



    val elements = new Buffer[ConcurrentConditionalSignalAssignment.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
        return signalAssignment
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1148:3: ( target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1149:2: target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON
      pushFollow(FOLLOW_target_in_conditional_signal_assignment6281)
      target338 = target();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      LEQ337 = `match`(input, LEQ, FOLLOW_LEQ_in_conditional_signal_assignment6283).asInstanceOf[Token];
      if (state.failed) return signalAssignment
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1149:13: ( GUARDED )?
      var alt150 = 2
      val LA150_0 = input.LA(1)

      if ((LA150_0 == GUARDED)) {
        alt150 = 1
      }
      alt150 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1149:13: GUARDED
          GUARDED339 = `match`(input, GUARDED, FOLLOW_GUARDED_in_conditional_signal_assignment6285).asInstanceOf[Token]; if (state.failed) return signalAssignment


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1149:22: ( delay_mechanism )?
      var alt151 = 2
      val LA151_0 = input.LA(1)

      if ((LA151_0 == INERTIAL || LA151_0 == REJECT || LA151_0 == TRANSPORT)) {
        alt151 = 1
      }
      alt151 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1149:22: delay_mechanism
          pushFollow(FOLLOW_delay_mechanism_in_conditional_signal_assignment6288)
          delay_mechanism340 = delay_mechanism();

          state._fsp -= 1
          if (state.failed) return signalAssignment


        case _ =>
      }

      pushFollow(FOLLOW_conditional_waveforms_in_conditional_signal_assignment6295)
      conditional_waveforms(elements);

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_conditional_signal_assignment6298);
      if (state.failed) return signalAssignment
      if (state.backtracking == 0) {
        signalAssignment = new ConcurrentConditionalSignalAssignment(toPosition(LEQ337), label, postponed, target338, GUARDED339 != null, delay_mechanism340, elements.result.reverse)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 107, conditional_signal_assignment_StartIndex)
      }
    }
    return signalAssignment
  }

  // $ANTLR end "conditional_signal_assignment"

  // $ANTLR start "conditional_waveforms"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1153:1: conditional_waveforms[Buffer[ConcurrentConditionalSignalAssignment.When] elements] : waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? ;
  @throws(classOf[RecognitionException])
  def conditional_waveforms(elements: Buffer[ConcurrentConditionalSignalAssignment.When]): Unit = {
    val conditional_waveforms_StartIndex = input.index()
    var waveform341: Waveform = null

    var condition342: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
        return
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1153:85: ( waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:2: waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
      pushFollow(FOLLOW_waveform_in_conditional_waveforms6311)
      waveform341 = waveform();

      state._fsp -= 1
      if (state.failed) return
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:11: ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
      var alt153 = 2
      val LA153_0 = input.LA(1)

      if ((LA153_0 == WHEN)) {
        alt153 = 1
      }
      alt153 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:13: WHEN condition ( ELSE conditional_waveforms[elements] )?
          `match`(input, WHEN, FOLLOW_WHEN_in_conditional_waveforms6315);
          if (state.failed) return
          pushFollow(FOLLOW_condition_in_conditional_waveforms6317)
          condition342 = condition();

          state._fsp -= 1
          if (state.failed) return
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:28: ( ELSE conditional_waveforms[elements] )?
          var alt152 = 2
          val LA152_0 = input.LA(1)

          if ((LA152_0 == ELSE)) {
            alt152 = 1
          }
          alt152 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1154:30: ELSE conditional_waveforms[elements]
              `match`(input, ELSE, FOLLOW_ELSE_in_conditional_waveforms6321);
              if (state.failed) return
              pushFollow(FOLLOW_conditional_waveforms_in_conditional_waveforms6323)
              conditional_waveforms(elements);

              state._fsp -= 1
              if (state.failed) return


            case _ =>
          }


        case _ =>
      }

      if (state.backtracking == 0) {
        elements += new ConcurrentConditionalSignalAssignment.When(waveform341, condition342)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 108, conditional_waveforms_StartIndex)
      }
    }
    return
  }

  // $ANTLR end "conditional_waveforms"

  // $ANTLR start "selected_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1156:1: selected_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentSelectedSignalAssignment signalAssignment] : WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON ;
  @throws(classOf[RecognitionException])
  def selected_signal_assignment(label: Identifier, postponed: Boolean): ConcurrentSelectedSignalAssignment = {
    var signalAssignment: ConcurrentSelectedSignalAssignment = null;
    val selected_signal_assignment_StartIndex = input.index()
    var WITH343: Token = null
    var GUARDED346: Token = null
    var s1: ConcurrentSelectedSignalAssignment.When = null

    var s2: ConcurrentSelectedSignalAssignment.When = null

    var expression344: Expression = null

    var target345: Target = null

    var delay_mechanism347: DelayMechanism = null



    val elements = new Buffer[ConcurrentSelectedSignalAssignment.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 109)) {
        return signalAssignment
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1159:3: ( WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1160:2: WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON
      WITH343 = `match`(input, WITH, FOLLOW_WITH_in_selected_signal_assignment6353).asInstanceOf[Token];
      if (state.failed) return signalAssignment
      pushFollow(FOLLOW_expression_in_selected_signal_assignment6355)
      expression344 = expression();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, SELECT, FOLLOW_SELECT_in_selected_signal_assignment6357);
      if (state.failed) return signalAssignment
      pushFollow(FOLLOW_target_in_selected_signal_assignment6363)
      target345 = target();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      `match`(input, LEQ, FOLLOW_LEQ_in_selected_signal_assignment6365);
      if (state.failed) return signalAssignment
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1161:14: ( GUARDED )?
      var alt154 = 2
      val LA154_0 = input.LA(1)

      if ((LA154_0 == GUARDED)) {
        alt154 = 1
      }
      alt154 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1161:14: GUARDED
          GUARDED346 = `match`(input, GUARDED, FOLLOW_GUARDED_in_selected_signal_assignment6367).asInstanceOf[Token]; if (state.failed) return signalAssignment


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1161:23: ( delay_mechanism )?
      var alt155 = 2
      val LA155_0 = input.LA(1)

      if ((LA155_0 == INERTIAL || LA155_0 == REJECT || LA155_0 == TRANSPORT)) {
        alt155 = 1
      }
      alt155 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1161:23: delay_mechanism
          pushFollow(FOLLOW_delay_mechanism_in_selected_signal_assignment6370)
          delay_mechanism347 = delay_mechanism();

          state._fsp -= 1
          if (state.failed) return signalAssignment


        case _ =>
      }

      pushFollow(FOLLOW_selected_waveform_in_selected_signal_assignment6378)
      s1 = selected_waveform();

      state._fsp -= 1
      if (state.failed) return signalAssignment
      if (state.backtracking == 0) {
        elements += s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1162:52: ( COMMA s2= selected_waveform )*
      var loop156 = true
      do {
        var alt156 = 2
        val LA156_0 = input.LA(1)

        if ((LA156_0 == COMMA)) {
          alt156 = 1
        }


        alt156 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1162:53: COMMA s2= selected_waveform
            `match`(input, COMMA, FOLLOW_COMMA_in_selected_signal_assignment6382);
            if (state.failed) return signalAssignment
            pushFollow(FOLLOW_selected_waveform_in_selected_signal_assignment6386)
            s2 = selected_waveform();

            state._fsp -= 1
            if (state.failed) return signalAssignment
            if (state.backtracking == 0) {
              elements += s2
            }


          case _ => loop156 = false
        }
      } while (loop156);

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_selected_signal_assignment6391);
      if (state.failed) return signalAssignment
      if (state.backtracking == 0) {
        signalAssignment = new ConcurrentSelectedSignalAssignment(toPosition(WITH343), label, postponed, expression344, target345, GUARDED346 != null, delay_mechanism347, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 109, selected_signal_assignment_StartIndex)
      }
    }
    return signalAssignment
  }

  // $ANTLR end "selected_signal_assignment"

  // $ANTLR start "selected_waveform"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1165:1: selected_waveform returns [ConcurrentSelectedSignalAssignment.When whenClause] : waveform WHEN choices ;
  @throws(classOf[RecognitionException])
  def selected_waveform(): ConcurrentSelectedSignalAssignment.When = {
    var whenClause: ConcurrentSelectedSignalAssignment.When = null;
    val selected_waveform_StartIndex = input.index()
    var waveform348: Waveform = null

    var choices349: Seq[Choices.Choice] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
        return whenClause
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1165:80: ( waveform WHEN choices )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1166:2: waveform WHEN choices
      pushFollow(FOLLOW_waveform_in_selected_waveform6408)
      waveform348 = waveform();

      state._fsp -= 1
      if (state.failed) return whenClause
      `match`(input, WHEN, FOLLOW_WHEN_in_selected_waveform6410);
      if (state.failed) return whenClause
      pushFollow(FOLLOW_choices_in_selected_waveform6412)
      choices349 = choices();

      state._fsp -= 1
      if (state.failed) return whenClause
      if (state.backtracking == 0) {
        whenClause = new ConcurrentSelectedSignalAssignment.When(waveform348, choices349)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 110, selected_waveform_StartIndex)
      }
    }
    return whenClause
  }

  // $ANTLR end "selected_waveform"

  // $ANTLR start "target"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1168:1: target returns [Target target_] : ( name | aggregate );
  @throws(classOf[RecognitionException])
  def target(): Target = {
    var target_ : Target = null;
    val target_StartIndex = input.index()
    var name350: Name = null

    var aggregate351: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
        return target_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1168:33: ( name | aggregate )
      var alt157 = 2
      val LA157_0 = input.LA(1)

      if ((LA157_0 == STRING_LITERAL || (LA157_0 >= BASIC_IDENTIFIER && LA157_0 <= EXTENDED_IDENTIFIER))) {
        alt157 = 1
      }
      else if ((LA157_0 == LPAREN)) {
        alt157 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return target_
        }
        val nvae = new NoViableAltException("", 157, 0, input)

        throw nvae
      }
      alt157 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1169:2: name
          pushFollow(FOLLOW_name_in_target6431)
          name350 = name();

          state._fsp -= 1
          if (state.failed) return target_
          if (state.backtracking == 0) {
            target_ = new Target(Left(name350))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1170:4: aggregate
          pushFollow(FOLLOW_aggregate_in_target6438)
          aggregate351 = aggregate();

          state._fsp -= 1
          if (state.failed) return target_
          if (state.backtracking == 0) {
            target_ = new Target(Right(aggregate351))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 111, target_StartIndex)
      }
    }
    return target_
  }

  // $ANTLR end "target"

  // $ANTLR start "component_instantiation_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1172:1: component_instantiation_statement[Identifier label] returns [ComponentInstantiationStatement stmt] : ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def component_instantiation_statement(label: Identifier): ComponentInstantiationStatement = {
    var stmt: ComponentInstantiationStatement = null;
    val component_instantiation_statement_StartIndex = input.index()
    var n: SelectedName = null

    var architecture_identifier: Identifier = null

    var generic_map_aspect352: AssociationList = null

    var port_map_aspect353: AssociationList = null



    var componentType: ComponentInstantiationStatement.ComponentType.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 112)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1176:3: ( ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1177:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1177:2: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name )
      var alt160 = 3
      input.LA(1) match {
        case COMPONENT | STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt160 = 1
        case ENTITY =>
          alt160 = 2
        case CONFIGURATION =>
          alt160 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 160, 0, input)

          throw nvae
      }

      alt160 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: ( COMPONENT )? n= selected_name
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: ( COMPONENT )?
          var alt158 = 2
          val LA158_0 = input.LA(1)

          if ((LA158_0 == COMPONENT)) {
            alt158 = 1
          }
          alt158 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1178:3: COMPONENT
              `match`(input, COMPONENT, FOLLOW_COMPONENT_in_component_instantiation_statement6467); if (state.failed) return stmt


            case _ =>
          }

          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6472)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.COMPONENT
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:5: ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
          `match`(input, ENTITY, FOLLOW_ENTITY_in_component_instantiation_statement6480);
          if (state.failed) return stmt
          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6484)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:28: ( LPAREN architecture_identifier= identifier RPAREN )?
          var alt159 = 2
          val LA159_0 = input.LA(1)

          if ((LA159_0 == LPAREN)) {
            alt159 = 1
          }
          alt159 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1179:29: LPAREN architecture_identifier= identifier RPAREN
              `match`(input, LPAREN, FOLLOW_LPAREN_in_component_instantiation_statement6487);
              if (state.failed) return stmt
              pushFollow(FOLLOW_identifier_in_component_instantiation_statement6491)
              architecture_identifier = identifier();

              state._fsp -= 1
              if (state.failed) return stmt
              `match`(input, RPAREN, FOLLOW_RPAREN_in_component_instantiation_statement6493);
              if (state.failed) return stmt


            case _ =>
          }

          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.ENTITY
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1180:5: CONFIGURATION n= selected_name
          `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_component_instantiation_statement6503);
          if (state.failed) return stmt
          pushFollow(FOLLOW_selected_name_in_component_instantiation_statement6507)
          n = selected_name();

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            componentType = ComponentInstantiationStatement.ComponentType.CONFIGURATION
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1182:2: ( generic_map_aspect )?
      var alt161 = 2
      val LA161_0 = input.LA(1)

      if ((LA161_0 == GENERIC)) {
        alt161 = 1
      }
      alt161 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1182:2: generic_map_aspect
          pushFollow(FOLLOW_generic_map_aspect_in_component_instantiation_statement6515)
          generic_map_aspect352 = generic_map_aspect();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1183:2: ( port_map_aspect )?
      var alt162 = 2
      val LA162_0 = input.LA(1)

      if ((LA162_0 == PORT)) {
        alt162 = 1
      }
      alt162 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1183:2: port_map_aspect
          pushFollow(FOLLOW_port_map_aspect_in_component_instantiation_statement6519)
          port_map_aspect353 = port_map_aspect();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_component_instantiation_statement6522);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new ComponentInstantiationStatement(position, label, componentType, n, architecture_identifier, generic_map_aspect352, port_map_aspect353)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 112, component_instantiation_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "component_instantiation_statement"

  // $ANTLR start "generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1186:1: generate_statement[Identifier label] returns [ConcurrentStatement generateStmt] : ( for_generate_statement[$label] | if_generate_statement[$label] );
  @throws(classOf[RecognitionException])
  def generate_statement(label: Identifier): ConcurrentStatement = {
    var generateStmt: ConcurrentStatement = null;
    val generate_statement_StartIndex = input.index()
    var for_generate_statement354: ForGenerateStatement = null

    var if_generate_statement355: IfGenerateStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 113)) {
        return generateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1186:81: ( for_generate_statement[$label] | if_generate_statement[$label] )
      var alt163 = 2
      val LA163_0 = input.LA(1)

      if ((LA163_0 == FOR)) {
        alt163 = 1
      }
      else if ((LA163_0 == IF)) {
        alt163 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return generateStmt
        }
        val nvae = new NoViableAltException("", 163, 0, input)

        throw nvae
      }
      alt163 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1187:2: for_generate_statement[$label]
          pushFollow(FOLLOW_for_generate_statement_in_generate_statement6541)
          for_generate_statement354 = for_generate_statement(label);

          state._fsp -= 1
          if (state.failed) return generateStmt
          if (state.backtracking == 0) {
            generateStmt = for_generate_statement354
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1188:4: if_generate_statement[$label]
          pushFollow(FOLLOW_if_generate_statement_in_generate_statement6549)
          if_generate_statement355 = if_generate_statement(label);

          state._fsp -= 1
          if (state.failed) return generateStmt
          if (state.backtracking == 0) {
            generateStmt = if_generate_statement355
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 113, generate_statement_StartIndex)
      }
    }
    return generateStmt
  }

  // $ANTLR end "generate_statement"

  // $ANTLR start "for_generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1192:1: for_generate_statement[Identifier label] returns [ForGenerateStatement forGenerateStmt] : FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def for_generate_statement(label: Identifier): ForGenerateStatement = {
    var forGenerateStmt: ForGenerateStatement = null;
    val for_generate_statement_StartIndex = input.index()
    var FOR356: Token = null
    var loopIdentifier: Identifier = null

    var body: VHDLParser.generate_statement_body_return = null

    var end_generate_label: Identifier = null

    var discrete_range357: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 114)) {
        return forGenerateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1192:89: ( FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1193:2: FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
      FOR356 = `match`(input, FOR, FOLLOW_FOR_in_for_generate_statement6571).asInstanceOf[Token];
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_identifier_in_for_generate_statement6575)
      loopIdentifier = identifier();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, IN, FOLLOW_IN_in_for_generate_statement6577);
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_discrete_range_in_for_generate_statement6579)
      discrete_range357 = discrete_range();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_for_generate_statement6581);
      if (state.failed) return forGenerateStmt
      pushFollow(FOLLOW_generate_statement_body_in_for_generate_statement6587)
      body = generate_statement_body();

      state._fsp -= 1
      if (state.failed) return forGenerateStmt
      `match`(input, END, FOLLOW_END_in_for_generate_statement6590);
      if (state.failed) return forGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_for_generate_statement6592);
      if (state.failed) return forGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1195:33: (end_generate_label= identifier )?
      var alt164 = 2
      val LA164_0 = input.LA(1)

      if (((LA164_0 >= BASIC_IDENTIFIER && LA164_0 <= EXTENDED_IDENTIFIER))) {
        alt164 = 1
      }
      alt164 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1195:33: end_generate_label= identifier
          pushFollow(FOLLOW_identifier_in_for_generate_statement6596)
          end_generate_label = identifier();

          state._fsp -= 1
          if (state.failed) return forGenerateStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_for_generate_statement6599);
      if (state.failed) return forGenerateStmt
      if (state.backtracking == 0) {
        forGenerateStmt = new ForGenerateStatement(toPosition(FOR356), label, loopIdentifier, discrete_range357, (if (body != null) body.blockItems else null), (if (body != null) body.statementList else null), end_generate_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 114, for_generate_statement_StartIndex)
      }
    }
    return forGenerateStmt
  }

  // $ANTLR end "for_generate_statement"

  // $ANTLR start "if_generate_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1198:1: if_generate_statement[Identifier label] returns [IfGenerateStatement ifGenerateStmt] : IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def if_generate_statement(label: Identifier): IfGenerateStatement = {
    var ifGenerateStmt: IfGenerateStatement = null;
    val if_generate_statement_StartIndex = input.index()
    var IF358: Token = null
    var body: VHDLParser.generate_statement_body_return = null

    var end_generate_label: Identifier = null

    var condition359: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 115)) {
        return ifGenerateStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1198:86: ( IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1199:2: IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
      IF358 = `match`(input, IF, FOLLOW_IF_in_if_generate_statement6618).asInstanceOf[Token];
      if (state.failed) return ifGenerateStmt
      pushFollow(FOLLOW_condition_in_if_generate_statement6622)
      condition359 = condition();

      state._fsp -= 1
      if (state.failed) return ifGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement6624);
      if (state.failed) return ifGenerateStmt
      pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement6630)
      body = generate_statement_body();

      state._fsp -= 1
      if (state.failed) return ifGenerateStmt
      `match`(input, END, FOLLOW_END_in_if_generate_statement6636);
      if (state.failed) return ifGenerateStmt
      `match`(input, GENERATE, FOLLOW_GENERATE_in_if_generate_statement6638);
      if (state.failed) return ifGenerateStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1205:33: (end_generate_label= identifier )?
      var alt165 = 2
      val LA165_0 = input.LA(1)

      if (((LA165_0 >= BASIC_IDENTIFIER && LA165_0 <= EXTENDED_IDENTIFIER))) {
        alt165 = 1
      }
      alt165 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1205:33: end_generate_label= identifier
          pushFollow(FOLLOW_identifier_in_if_generate_statement6642)
          end_generate_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifGenerateStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_if_generate_statement6645);
      if (state.failed) return ifGenerateStmt
      if (state.backtracking == 0) {
        ifGenerateStmt = new IfGenerateStatement(toPosition(IF358), label, condition359, (if (body != null) body.blockItems else null), (if (body != null) body.statementList else null), end_generate_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 115, if_generate_statement_StartIndex)
      }
    }
    return ifGenerateStmt
  }

  // $ANTLR end "if_generate_statement"

  // $ANTLR start "generate_statement_body"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1217:1: generate_statement_body returns [Seq[DeclarativeItem] blockItems,Seq[ConcurrentStatement] statementList] : ( ( block_declarative_item )* BEGIN )? concurrent_statement_list ;
  @throws(classOf[RecognitionException])
  def generate_statement_body(): VHDLParser.generate_statement_body_return = {
    val retval: VHDLParser.generate_statement_body_return = new VHDLParser.generate_statement_body_return()
    retval.start = input.LT(1)
    val generate_statement_body_StartIndex = input.index()
    var block_declarative_item360: DeclarativeItem = null

    var concurrent_statement_list361: Seq[ConcurrentStatement] = null



    val tmpBockItems = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 116)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1220:3: ( ( ( block_declarative_item )* BEGIN )? concurrent_statement_list )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1221:2: ( ( block_declarative_item )* BEGIN )? concurrent_statement_list
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1221:2: ( ( block_declarative_item )* BEGIN )?
      var alt167 = 2
      val LA167_0 = input.LA(1)

      if ((LA167_0 == ALIAS || LA167_0 == ATTRIBUTE || LA167_0 == COMPONENT || (LA167_0 >= CONSTANT && LA167_0 <= DISCONNECT) || (LA167_0 >= FILE && LA167_0 <= FUNCTION) || LA167_0 == GROUP || LA167_0 == IMPURE || LA167_0 == PROCEDURE || LA167_0 == PURE || (LA167_0 >= SHARED && LA167_0 <= SIGNAL) || LA167_0 == SUBTYPE || LA167_0 == TYPE || (LA167_0 >= USE && LA167_0 <= VARIABLE))) {
        alt167 = 1
      }
      else if (((LA167_0 >= NATURE && LA167_0 <= QUANTITY) || (LA167_0 >= SUBNATURE && LA167_0 <= LIMIT)) && ((ams))) {
        alt167 = 1
      }
      else if ((LA167_0 == BEGIN)) {
        alt167 = 1
      }
      alt167 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1222:3: ( block_declarative_item )* BEGIN
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1222:3: ( block_declarative_item )*
          var loop166 = true
          do {
            var alt166 = 2
            val LA166_0 = input.LA(1)

            if ((LA166_0 == ALIAS || LA166_0 == ATTRIBUTE || LA166_0 == COMPONENT || (LA166_0 >= CONSTANT && LA166_0 <= DISCONNECT) || (LA166_0 >= FILE && LA166_0 <= FUNCTION) || LA166_0 == GROUP || LA166_0 == IMPURE || LA166_0 == PROCEDURE || LA166_0 == PURE || (LA166_0 >= SHARED && LA166_0 <= SIGNAL) || LA166_0 == SUBTYPE || LA166_0 == TYPE || (LA166_0 >= USE && LA166_0 <= VARIABLE))) {
              alt166 = 1
            }
            else if (((LA166_0 >= NATURE && LA166_0 <= QUANTITY) || (LA166_0 >= SUBNATURE && LA166_0 <= LIMIT)) && ((ams))) {
              alt166 = 1
            }


            alt166 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1222:4: block_declarative_item
                pushFollow(FOLLOW_block_declarative_item_in_generate_statement_body6677)
                block_declarative_item360 = block_declarative_item();

                state._fsp -= 1
                if (state.failed) return retval
                if (state.backtracking == 0) {
                  tmpBockItems += block_declarative_item360
                }


              case _ => loop166 = false
            }
          } while (loop166);

          `match`(input, BEGIN, FOLLOW_BEGIN_in_generate_statement_body6684);
          if (state.failed) return retval


        case _ =>
      }

      pushFollow(FOLLOW_concurrent_statement_list_in_generate_statement_body6691)
      concurrent_statement_list361 = concurrent_statement_list();

      state._fsp -= 1
      if (state.failed) return retval
      if (state.backtracking == 0) {

        retval.blockItems = tmpBockItems.result
        retval.statementList = concurrent_statement_list361

      }



      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 116, generate_statement_body_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "generate_statement_body"

  // $ANTLR start "ams_concurrent_break_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1233:1: ams_concurrent_break_statement[Identifier label] returns [ConcurrentBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_concurrent_break_statement(label: Identifier): ConcurrentBreakStatement = {
    var breakStmt: ConcurrentBreakStatement = null;
    val ams_concurrent_break_statement_StartIndex = input.index()
    var BREAK362: Token = null
    var ams_break_element_list363: Seq[BreakElement] = null

    var selected_name_list364: Seq[SelectedName] = null

    var expression365: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 117)) {
        return breakStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1233:95: ( BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:2: BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON
      BREAK362 = `match`(input, BREAK, FOLLOW_BREAK_in_ams_concurrent_break_statement6712).asInstanceOf[Token];
      if (state.failed) return breakStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:8: ( ams_break_element_list )?
      var alt168 = 2
      val LA168_0 = input.LA(1)

      if ((LA168_0 == FOR || LA168_0 == STRING_LITERAL || (LA168_0 >= BASIC_IDENTIFIER && LA168_0 <= EXTENDED_IDENTIFIER))) {
        alt168 = 1
      }
      alt168 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:8: ams_break_element_list
          pushFollow(FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement6714)
          ams_break_element_list363 = ams_break_element_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:32: ( ON selected_name_list )?
      var alt169 = 2
      val LA169_0 = input.LA(1)

      if ((LA169_0 == ON)) {
        alt169 = 1
      }
      alt169 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:33: ON selected_name_list
          `match`(input, ON, FOLLOW_ON_in_ams_concurrent_break_statement6718);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_selected_name_list_in_ams_concurrent_break_statement6720)
          selected_name_list364 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:57: ( WHEN expression )?
      var alt170 = 2
      val LA170_0 = input.LA(1)

      if ((LA170_0 == WHEN)) {
        alt170 = 1
      }
      alt170 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1234:58: WHEN expression
          `match`(input, WHEN, FOLLOW_WHEN_in_ams_concurrent_break_statement6725);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_expression_in_ams_concurrent_break_statement6727)
          expression365 = expression();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_concurrent_break_statement6731);
      if (state.failed) return breakStmt
      if (state.backtracking == 0) {
        breakStmt = new ConcurrentBreakStatement(toPosition(BREAK362), label, ams_break_element_list363, selected_name_list364, expression365)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 117, ams_concurrent_break_statement_StartIndex)
      }
    }
    return breakStmt
  }

  // $ANTLR end "ams_concurrent_break_statement"

  // $ANTLR start "ams_simultaneous_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1238:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );
  @throws(classOf[RecognitionException])
  def ams_simultaneous_statement(label: Identifier): SimultaneousStatement = {
    var stmt: SimultaneousStatement = null;
    val ams_simultaneous_statement_StartIndex = input.index()
    var ams_simple_simultaneous_statement366: SimpleSimultaneousStatement = null

    var ams_simultaneous_if_statement367: SimultaneousIfStatement = null

    var ams_simultaneous_procedural_statement368: SimultaneousProceduralStatement = null

    var ams_simultaneous_case_statement369: SimultaneousCaseStatement = null

    var ams_simultaneous_null_statement370: SimultaneousNullStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 118)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1238:83: ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] )
      var alt171 = 5
      input.LA(1) match {
        case ABS | NEW | NOT | LPAREN | PLUS | MINUS | STRING_LITERAL | CHARACTER_LITERAL | REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | BIT_STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt171 = 1
        case NULL =>
          val LA171_2 = input.LA(2)

          if ((LA171_2 == SEMICOLON)) {
            alt171 = 5
          }
          else if ((LA171_2 == MOD || LA171_2 == REM || (LA171_2 >= DOUBLESTAR && LA171_2 <= AMS_ASSIGN) || LA171_2 == AMPERSAND || (LA171_2 >= MUL && LA171_2 <= MINUS) || LA171_2 == STRING_LITERAL || (LA171_2 >= BASIC_IDENTIFIER && LA171_2 <= EXTENDED_IDENTIFIER))) {
            alt171 = 1
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            val nvae = new NoViableAltException("", 171, 2, input)

            throw nvae
          }
        case IF =>
          alt171 = 2
        case PROCEDURAL =>
          alt171 = 3
        case CASE =>
          alt171 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return stmt
          }
          val nvae = new NoViableAltException("", 171, 0, input)

          throw nvae
      }

      alt171 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1239:2: ams_simple_simultaneous_statement[$label]
          pushFollow(FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement6749)
          ams_simple_simultaneous_statement366 = ams_simple_simultaneous_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simple_simultaneous_statement366
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1240:4: ams_simultaneous_if_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement6757)
          ams_simultaneous_if_statement367 = ams_simultaneous_if_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_if_statement367
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1241:4: ams_simultaneous_procedural_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement6765)
          ams_simultaneous_procedural_statement368 = ams_simultaneous_procedural_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_procedural_statement368
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1242:4: ams_simultaneous_case_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement6773)
          ams_simultaneous_case_statement369 = ams_simultaneous_case_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_case_statement369
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1243:4: ams_simultaneous_null_statement[$label]
          pushFollow(FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement6781)
          ams_simultaneous_null_statement370 = ams_simultaneous_null_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_simultaneous_null_statement370
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 118, ams_simultaneous_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "ams_simultaneous_statement"

  // $ANTLR start "ams_simultaneous_statement_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1245:1: ams_simultaneous_statement_list returns [Seq[SimultaneousStatement] list] : ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_statement_list(): Seq[SimultaneousStatement] = {
    var list: Seq[SimultaneousStatement] = null;
    val ams_simultaneous_statement_list_StartIndex = input.index()
    var label_colon371: Identifier = null

    var ams_simultaneous_statement372: SimultaneousStatement = null



    val tmpList = new Buffer[SimultaneousStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 119)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1248:3: ( ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1249:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1249:2: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
      var loop173 = true
      do {
        var alt173 = 2
        val LA173_0 = input.LA(1)

        if ((LA173_0 == ABS || LA173_0 == CASE || LA173_0 == IF || LA173_0 == NEW || (LA173_0 >= NOT && LA173_0 <= NULL) || LA173_0 == PROCEDURAL || LA173_0 == LPAREN || (LA173_0 >= PLUS && LA173_0 <= MINUS) || LA173_0 == STRING_LITERAL || LA173_0 == CHARACTER_LITERAL || (LA173_0 >= REAL_LITERAL && LA173_0 <= EXTENDED_IDENTIFIER))) {
          alt173 = 1
        }


        alt173 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1249:3: ( label_colon )? ams_simultaneous_statement[$label_colon.label]
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1249:3: ( label_colon )?
            var alt172 = 2
            val LA172_0 = input.LA(1)

            if ((LA172_0 == BASIC_IDENTIFIER)) {
              val LA172_1 = input.LA(2)

              if ((LA172_1 == COLON)) {
                alt172 = 1
              }
            }
            else if ((LA172_0 == EXTENDED_IDENTIFIER)) {
              val LA172_2 = input.LA(2)

              if ((LA172_2 == COLON)) {
                alt172 = 1
              }
            }
            alt172 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1249:3: label_colon
                pushFollow(FOLLOW_label_colon_in_ams_simultaneous_statement_list6802)
                label_colon371 = label_colon();

                state._fsp -= 1
                if (state.failed) return list


              case _ =>
            }

            pushFollow(FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list6805)
            ams_simultaneous_statement372 = ams_simultaneous_statement(label_colon371);

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += ams_simultaneous_statement372
            }


          case _ => loop173 = false
        }
      } while (loop173);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 119, ams_simultaneous_statement_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "ams_simultaneous_statement_list"

  // $ANTLR start "ams_simple_simultaneous_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1252:1: ams_simple_simultaneous_statement[Identifier label] returns [SimpleSimultaneousStatement stmt] : e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simple_simultaneous_statement(label: Identifier): SimpleSimultaneousStatement = {
    var stmt: SimpleSimultaneousStatement = null;
    val ams_simple_simultaneous_statement_StartIndex = input.index()
    var e1: Expression = null

    var e2: Expression = null

    var tolerance_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 120)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1252:96: (e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1253:2: e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON
      pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6831)
      e1 = simple_expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, AMS_ASSIGN, FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement6833);
      if (state.failed) return stmt
      pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement6837)
      e2 = simple_expression();

      state._fsp -= 1
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1253:55: ( TOLERANCE tolerance_expression= expression )?
      var alt174 = 2
      val LA174_0 = input.LA(1)

      if ((LA174_0 == TOLERANCE)) {
        alt174 = 1
      }
      alt174 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1253:56: TOLERANCE tolerance_expression= expression
          `match`(input, TOLERANCE, FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement6840);
          if (state.failed) return stmt
          pushFollow(FOLLOW_expression_in_ams_simple_simultaneous_statement6844)
          tolerance_expression = expression();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement6848);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new SimpleSimultaneousStatement(label, e1, e2, tolerance_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 120, ams_simple_simultaneous_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "ams_simple_simultaneous_statement"

  // $ANTLR start "ams_simultaneous_if_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1256:1: ams_simultaneous_if_statement[Identifier label] returns [SimultaneousIfStatement ifStmt] : ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_if_statement(label: Identifier): SimultaneousIfStatement = {
    var ifStmt: SimultaneousIfStatement = null;
    val ams_simultaneous_if_statement_StartIndex = input.index()
    var ifToken: Token = null
    var if_condition: Expression = null

    var if_simultaneous_statement: Seq[SimultaneousStatement] = null

    var elsif_condition: Expression = null

    var else_if_simultaneous_statement: Seq[SimultaneousStatement] = null

    var else_simultaneous_statement: Seq[SimultaneousStatement] = null

    var end_if_label: Identifier = null



    val ifList = new Buffer[SimultaneousIfStatement.IfUsePart]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 121)) {
        return ifStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1259:3: (ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1260:2: ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON
      ifToken = `match`(input, IF, FOLLOW_IF_in_ams_simultaneous_if_statement6876).asInstanceOf[Token];
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement6880)
      if_condition = condition();

      state._fsp -= 1
      if (state.failed) return ifStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement6882);
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6888)
      if_simultaneous_statement = ams_simultaneous_statement_list();

      state._fsp -= 1
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifList += new SimultaneousIfStatement.IfUsePart(if_condition, if_simultaneous_statement)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1262:2: ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )*
      var loop175 = true
      do {
        var alt175 = 2
        val LA175_0 = input.LA(1)

        if ((LA175_0 == ELSIF)) {
          alt175 = 1
        }


        alt175 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1262:3: ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list
            `match`(input, ELSIF, FOLLOW_ELSIF_in_ams_simultaneous_if_statement6894);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement6898)
            elsif_condition = condition();

            state._fsp -= 1
            if (state.failed) return ifStmt
            `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement6900);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6906)
            else_if_simultaneous_statement = ams_simultaneous_statement_list();

            state._fsp -= 1
            if (state.failed) return ifStmt
            if (state.backtracking == 0) {
              ifList += new SimultaneousIfStatement.IfUsePart(elsif_condition, else_if_simultaneous_statement)
            }


          case _ => loop175 = false
        }
      } while (loop175);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1266:2: ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )?
      var alt176 = 2
      val LA176_0 = input.LA(1)

      if ((LA176_0 == ELSE)) {
        alt176 = 1
      }
      alt176 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1266:3: ELSE else_simultaneous_statement= ams_simultaneous_statement_list
          `match`(input, ELSE, FOLLOW_ELSE_in_ams_simultaneous_if_statement6918);
          if (state.failed) return ifStmt
          pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement6924)
          else_simultaneous_statement = ams_simultaneous_statement_list();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_ams_simultaneous_if_statement6929);
      if (state.failed) return ifStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_if_statement6931);
      if (state.failed) return ifStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1268:22: (end_if_label= identifier )?
      var alt177 = 2
      val LA177_0 = input.LA(1)

      if (((LA177_0 >= BASIC_IDENTIFIER && LA177_0 <= EXTENDED_IDENTIFIER))) {
        alt177 = 1
      }
      alt177 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1268:22: end_if_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_if_statement6935)
          end_if_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement6938);
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifStmt = new SimultaneousIfStatement(toPosition(ifToken), label, ifList.result, else_simultaneous_statement, end_if_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 121, ams_simultaneous_if_statement_StartIndex)
      }
    }
    return ifStmt
  }

  // $ANTLR end "ams_simultaneous_if_statement"

  // $ANTLR start "ams_simultaneous_case_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1271:1: ams_simultaneous_case_statement[Identifier label] returns [SimultaneousCaseStatement caseStmt] : caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_case_statement(label: Identifier): SimultaneousCaseStatement = {
    var caseStmt: SimultaneousCaseStatement = null;
    val ams_simultaneous_case_statement_StartIndex = input.index()
    var caseToken: Token = null
    var end_case_label: Identifier = null

    var choices373: Seq[Choices.Choice] = null

    var ams_simultaneous_statement_list374: Seq[SimultaneousStatement] = null

    var expression375: Expression = null



    val alternatives = new Buffer[SimultaneousCaseStatement.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 122)) {
        return caseStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1274:3: (caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1275:2: caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON
      caseToken = `match`(input, CASE, FOLLOW_CASE_in_ams_simultaneous_case_statement6967).asInstanceOf[Token];
      if (state.failed) return caseStmt
      pushFollow(FOLLOW_expression_in_ams_simultaneous_case_statement6969)
      expression375 = expression();

      state._fsp -= 1
      if (state.failed) return caseStmt
      `match`(input, USE, FOLLOW_USE_in_ams_simultaneous_case_statement6971);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1276:3: ( WHEN choices ARROW ams_simultaneous_statement_list )+
      var cnt178 = 0
      var loop178 = true
      do {
        var alt178 = 2
        val LA178_0 = input.LA(1)

        if ((LA178_0 == WHEN)) {
          alt178 = 1
        }


        alt178 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1276:4: WHEN choices ARROW ams_simultaneous_statement_list
            `match`(input, WHEN, FOLLOW_WHEN_in_ams_simultaneous_case_statement6976);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_choices_in_ams_simultaneous_case_statement6978)
            choices373 = choices();

            state._fsp -= 1
            if (state.failed) return caseStmt
            `match`(input, ARROW, FOLLOW_ARROW_in_ams_simultaneous_case_statement6980);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement6982)
            ams_simultaneous_statement_list374 = ams_simultaneous_statement_list();

            state._fsp -= 1
            if (state.failed) return caseStmt
            if (state.backtracking == 0) {
              alternatives += new SimultaneousCaseStatement.When(choices373, ams_simultaneous_statement_list374)
            }


          case _ =>
            if (cnt178 >= 1) loop178 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return caseStmt
              }
              val eee = new EarlyExitException(178, input)
              throw eee
            }
        }
        cnt178 += 1
      } while (loop178);

      `match`(input, END, FOLLOW_END_in_ams_simultaneous_case_statement6989);
      if (state.failed) return caseStmt
      `match`(input, CASE, FOLLOW_CASE_in_ams_simultaneous_case_statement6991);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1277:25: (end_case_label= identifier )?
      var alt179 = 2
      val LA179_0 = input.LA(1)

      if (((LA179_0 >= BASIC_IDENTIFIER && LA179_0 <= EXTENDED_IDENTIFIER))) {
        alt179 = 1
      }
      alt179 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1277:25: end_case_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_case_statement6995)
          end_case_label = identifier();

          state._fsp -= 1
          if (state.failed) return caseStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement6998);
      if (state.failed) return caseStmt
      if (state.backtracking == 0) {
        caseStmt = new SimultaneousCaseStatement(toPosition(caseToken), label, expression375, alternatives.result, end_case_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 122, ams_simultaneous_case_statement_StartIndex)
      }
    }
    return caseStmt
  }

  // $ANTLR end "ams_simultaneous_case_statement"

  // $ANTLR start "ams_simultaneous_procedural_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1280:1: ams_simultaneous_procedural_statement[Identifier label] returns [SimultaneousProceduralStatement proceduralStmt] : procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_procedural_statement(label: Identifier): SimultaneousProceduralStatement = {
    var proceduralStmt: SimultaneousProceduralStatement = null;
    val ams_simultaneous_procedural_statement_StartIndex = input.index()
    var procedural: Token = null
    var end_procedural_label: Identifier = null

    var ams_simultaneous_procedural_declarative_item376: DeclarativeItem = null

    var sequence_of_statements377: Seq[SequentialStatement] = null



    val items = new Buffer[DeclarativeItem]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 123)) {
        return proceduralStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1283:3: (procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1284:2: procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON
      procedural = `match`(input, PROCEDURAL, FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7023).asInstanceOf[Token];
      if (state.failed) return proceduralStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1284:24: ( IS )?
      var alt180 = 2
      val LA180_0 = input.LA(1)

      if ((LA180_0 == IS)) {
        alt180 = 1
      }
      alt180 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1284:24: IS
          `match`(input, IS, FOLLOW_IS_in_ams_simultaneous_procedural_statement7025); if (state.failed) return proceduralStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1285:3: ( ams_simultaneous_procedural_declarative_item )*
      var loop181 = true
      do {
        var alt181 = 2
        val LA181_0 = input.LA(1)

        if ((LA181_0 == ALIAS || LA181_0 == ATTRIBUTE || LA181_0 == CONSTANT || LA181_0 == FUNCTION || LA181_0 == GROUP || LA181_0 == IMPURE || LA181_0 == PROCEDURE || LA181_0 == PURE || LA181_0 == SHARED || LA181_0 == SUBTYPE || LA181_0 == TYPE || (LA181_0 >= USE && LA181_0 <= VARIABLE))) {
          alt181 = 1
        }


        alt181 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1285:4: ams_simultaneous_procedural_declarative_item
            pushFollow(FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7031)
            ams_simultaneous_procedural_declarative_item376 = ams_simultaneous_procedural_declarative_item();

            state._fsp -= 1
            if (state.failed) return proceduralStmt
            if (state.backtracking == 0) {
              items += ams_simultaneous_procedural_declarative_item376
            }


          case _ => loop181 = false
        }
      } while (loop181);

      `match`(input, BEGIN, FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7037);
      if (state.failed) return proceduralStmt
      pushFollow(FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7041)
      sequence_of_statements377 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return proceduralStmt
      `match`(input, END, FOLLOW_END_in_ams_simultaneous_procedural_statement7044);
      if (state.failed) return proceduralStmt
      `match`(input, PROCEDURAL, FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7046);
      if (state.failed) return proceduralStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1288:37: (end_procedural_label= identifier )?
      var alt182 = 2
      val LA182_0 = input.LA(1)

      if (((LA182_0 >= BASIC_IDENTIFIER && LA182_0 <= EXTENDED_IDENTIFIER))) {
        alt182 = 1
      }
      alt182 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1288:37: end_procedural_label= identifier
          pushFollow(FOLLOW_identifier_in_ams_simultaneous_procedural_statement7050)
          end_procedural_label = identifier();

          state._fsp -= 1
          if (state.failed) return proceduralStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7053);
      if (state.failed) return proceduralStmt
      if (state.backtracking == 0) {
        proceduralStmt = new SimultaneousProceduralStatement(toPosition(procedural), label, items.result, sequence_of_statements377, end_procedural_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 123, ams_simultaneous_procedural_statement_StartIndex)
      }
    }
    return proceduralStmt
  }

  // $ANTLR end "ams_simultaneous_procedural_statement"

  // $ANTLR start "ams_simultaneous_procedural_declarative_item"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1291:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
  @throws(classOf[RecognitionException])
  def ams_simultaneous_procedural_declarative_item(): DeclarativeItem = {
    var item: DeclarativeItem = null;
    val ams_simultaneous_procedural_declarative_item_StartIndex = input.index()
    var subprogram_declartion_or_body378: DeclarativeItem = null

    var type_declaration379: AbstractTypeDeclaration = null

    var subtype_declaration380: SubTypeDeclaration = null

    var constant_declaration381: ConstantDeclaration = null

    var variable_declaration382: VariableDeclaration = null

    var alias_declaration383: AliasDeclaration = null

    var attribute_declaration384: AttributeDeclaration = null

    var attribute_specification385: AttributeSpecification = null

    var use_clause386: UseClause = null

    var group_template_declaration387: GroupTemplateDeclaration = null

    var group_declaration388: GroupDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 124)) {
        return item
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1291:77: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
      var alt183 = 11
      alt183 = dfa183.predict(input)
      alt183 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1292:2: subprogram_declartion_or_body
          pushFollow(FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7071)
          subprogram_declartion_or_body378 = subprogram_declartion_or_body();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subprogram_declartion_or_body378
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1293:4: type_declaration
          pushFollow(FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7078)
          type_declaration379 = type_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = type_declaration379
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1294:4: subtype_declaration
          pushFollow(FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7085)
          subtype_declaration380 = subtype_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = subtype_declaration380
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1295:4: constant_declaration
          pushFollow(FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7092)
          constant_declaration381 = constant_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = constant_declaration381
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1296:4: variable_declaration
          pushFollow(FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7099)
          variable_declaration382 = variable_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = variable_declaration382
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1297:4: alias_declaration
          pushFollow(FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7106)
          alias_declaration383 = alias_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = alias_declaration383
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1298:4: attribute_declaration
          pushFollow(FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7113)
          attribute_declaration384 = attribute_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_declaration384
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1299:4: attribute_specification
          pushFollow(FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7120)
          attribute_specification385 = attribute_specification();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = attribute_specification385
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1300:4: use_clause
          pushFollow(FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7127)
          use_clause386 = use_clause();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = use_clause386
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1301:4: group_template_declaration
          pushFollow(FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7134)
          group_template_declaration387 = group_template_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_template_declaration387
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1302:4: group_declaration
          pushFollow(FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7141)
          group_declaration388 = group_declaration();

          state._fsp -= 1
          if (state.failed) return item
          if (state.backtracking == 0) {
            item = group_declaration388
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 124, ams_simultaneous_procedural_declarative_item_StartIndex)
      }
    }
    return item
  }

  // $ANTLR end "ams_simultaneous_procedural_declarative_item"

  // $ANTLR start "ams_simultaneous_null_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1304:1: ams_simultaneous_null_statement[Identifier label] returns [SimultaneousNullStatement nullStmt] : NULL SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_simultaneous_null_statement(label: Identifier): SimultaneousNullStatement = {
    var nullStmt: SimultaneousNullStatement = null;
    val ams_simultaneous_null_statement_StartIndex = input.index()
    var NULL389: Token = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 125)) {
        return nullStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1304:96: ( NULL SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1305:2: NULL SEMICOLON
      NULL389 = `match`(input, NULL, FOLLOW_NULL_in_ams_simultaneous_null_statement7158).asInstanceOf[Token];
      if (state.failed) return nullStmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7160);
      if (state.failed) return nullStmt
      if (state.backtracking == 0) {
        nullStmt = new SimultaneousNullStatement(toPosition(NULL389), label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 125, ams_simultaneous_null_statement_StartIndex)
      }
    }
    return nullStmt
  }

  // $ANTLR end "ams_simultaneous_null_statement"

  // $ANTLR start "sequence_of_statements"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1309:1: sequence_of_statements returns [Seq[SequentialStatement] list] : ( sequential_statement )* ;
  @throws(classOf[RecognitionException])
  def sequence_of_statements(): Seq[SequentialStatement] = {
    var list: Seq[SequentialStatement] = null;
    val sequence_of_statements_StartIndex = input.index()
    var sequential_statement390: SequentialStatement = null



    val tmpList = new Buffer[SequentialStatement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 126)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1312:3: ( ( sequential_statement )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1313:2: ( sequential_statement )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1313:2: ( sequential_statement )*
      var loop184 = true
      do {
        var alt184 = 2
        val LA184_0 = input.LA(1)

        if ((LA184_0 == ASSERT || LA184_0 == CASE || LA184_0 == EXIT || LA184_0 == FOR || LA184_0 == IF || LA184_0 == LOOP || LA184_0 == NEXT || LA184_0 == NULL || (LA184_0 >= REPORT && LA184_0 <= RETURN) || LA184_0 == WAIT || LA184_0 == WHILE || LA184_0 == LPAREN || LA184_0 == STRING_LITERAL || (LA184_0 >= BASIC_IDENTIFIER && LA184_0 <= EXTENDED_IDENTIFIER))) {
          alt184 = 1
        }
        else if ((LA184_0 == BREAK) && ((ams))) {
          alt184 = 1
        }


        alt184 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1313:3: sequential_statement
            pushFollow(FOLLOW_sequential_statement_in_sequence_of_statements7182)
            sequential_statement390 = sequential_statement();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += sequential_statement390
            }


          case _ => loop184 = false
        }
      } while (loop184);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 126, sequence_of_statements_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "sequence_of_statements"

  // $ANTLR start "sequential_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:1: sequential_statement returns [SequentialStatement stmt] : (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) ;
  @throws(classOf[RecognitionException])
  def sequential_statement(): SequentialStatement = {
    var stmt: SequentialStatement = null;
    val sequential_statement_StartIndex = input.index()
    var label: Identifier = null

    var wait_statement391: WaitStatement = null

    var assertion_statement392: AssertionStatement = null

    var report_statement393: ReportStatement = null

    var signal_assignment_statement394: SignalAssignmentStatement = null

    var variable_assignment_statement395: VariableAssignmentStatement = null

    var if_statement396: IfStatement = null

    var case_statement397: CaseStatement = null

    var loop_statement398: SequentialStatement = null

    var next_statement399: NextStatement = null

    var exit_statement400: ExitStatement = null

    var return_statement401: ReturnStatement = null

    var null_statement402: NullStatement = null

    var procedure_call_statement403: ProcedureCallStatement = null

    var ams_break_statement404: AMSBreakStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 127)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1316:57: ( (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1317:2: (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1317:7: (label= label_colon )?
      var alt185 = 2
      val LA185_0 = input.LA(1)

      if ((LA185_0 == BASIC_IDENTIFIER)) {
        val LA185_1 = input.LA(2)

        if ((LA185_1 == COLON)) {
          alt185 = 1
        }
      }
      else if ((LA185_0 == EXTENDED_IDENTIFIER)) {
        val LA185_2 = input.LA(2)

        if ((LA185_2 == COLON)) {
          alt185 = 1
        }
      }
      alt185 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1317:7: label= label_colon
          pushFollow(FOLLOW_label_colon_in_sequential_statement7203)
          label = label_colon();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1318:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
      var alt186 = 14
      alt186 = dfa186.predict(input)
      alt186 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1318:3: wait_statement[$label.label]
          pushFollow(FOLLOW_wait_statement_in_sequential_statement7209)
          wait_statement391 = wait_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = wait_statement391
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1319:4: assertion_statement[$label.label]
          pushFollow(FOLLOW_assertion_statement_in_sequential_statement7217)
          assertion_statement392 = assertion_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = assertion_statement392
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1320:4: report_statement[$label.label]
          pushFollow(FOLLOW_report_statement_in_sequential_statement7225)
          report_statement393 = report_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = report_statement393
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1321:4: ( target LEQ )=> signal_assignment_statement[$label.label]
          pushFollow(FOLLOW_signal_assignment_statement_in_sequential_statement7239)
          signal_assignment_statement394 = signal_assignment_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = signal_assignment_statement394
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1322:4: ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label]
          pushFollow(FOLLOW_variable_assignment_statement_in_sequential_statement7253)
          variable_assignment_statement395 = variable_assignment_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = variable_assignment_statement395
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1323:4: if_statement[$label.label]
          pushFollow(FOLLOW_if_statement_in_sequential_statement7261)
          if_statement396 = if_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = if_statement396
          }

        case 7 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1324:4: case_statement[$label.label]
          pushFollow(FOLLOW_case_statement_in_sequential_statement7269)
          case_statement397 = case_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = case_statement397
          }

        case 8 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1325:4: loop_statement[$label.label]
          pushFollow(FOLLOW_loop_statement_in_sequential_statement7277)
          loop_statement398 = loop_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = loop_statement398
          }

        case 9 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1326:4: next_statement[$label.label]
          pushFollow(FOLLOW_next_statement_in_sequential_statement7285)
          next_statement399 = next_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = next_statement399
          }

        case 10 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1327:4: exit_statement[$label.label]
          pushFollow(FOLLOW_exit_statement_in_sequential_statement7293)
          exit_statement400 = exit_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = exit_statement400
          }

        case 11 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1328:4: return_statement[$label.label]
          pushFollow(FOLLOW_return_statement_in_sequential_statement7301)
          return_statement401 = return_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = return_statement401
          }

        case 12 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1329:4: null_statement[$label.label]
          pushFollow(FOLLOW_null_statement_in_sequential_statement7309)
          null_statement402 = null_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = null_statement402
          }

        case 13 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1330:4: procedure_call_statement[$label.label]
          pushFollow(FOLLOW_procedure_call_statement_in_sequential_statement7317)
          procedure_call_statement403 = procedure_call_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = procedure_call_statement403
          }

        case 14 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1331:4: {...}? => ams_break_statement[$label.label]
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return stmt
            }
            throw new FailedPredicateException(input, "sequential_statement", "ams")
          }
          pushFollow(FOLLOW_ams_break_statement_in_sequential_statement7327)
          ams_break_statement404 = ams_break_statement(label);

          state._fsp -= 1
          if (state.failed) return stmt
          if (state.backtracking == 0) {
            stmt = ams_break_statement404
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 127, sequential_statement_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "sequential_statement"

  // $ANTLR start "wait_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1334:1: wait_statement[Identifier label] returns [WaitStatement waitStmt] : WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def wait_statement(label: Identifier): WaitStatement = {
    var waitStmt: WaitStatement = null;
    val wait_statement_StartIndex = input.index()
    var WAIT405: Token = null
    var name_list406: Seq[Name] = null

    var condition407: Expression = null

    var expression408: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 128)) {
        return waitStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1334:67: ( WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:2: WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON
      WAIT405 = `match`(input, WAIT, FOLLOW_WAIT_in_wait_statement7348).asInstanceOf[Token];
      if (state.failed) return waitStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:7: ( ON name_list )?
      var alt187 = 2
      val LA187_0 = input.LA(1)

      if ((LA187_0 == ON)) {
        alt187 = 1
      }
      alt187 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:8: ON name_list
          `match`(input, ON, FOLLOW_ON_in_wait_statement7351);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_name_list_in_wait_statement7353)
          name_list406 = name_list();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:23: ( UNTIL condition )?
      var alt188 = 2
      val LA188_0 = input.LA(1)

      if ((LA188_0 == UNTIL)) {
        alt188 = 1
      }
      alt188 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:24: UNTIL condition
          `match`(input, UNTIL, FOLLOW_UNTIL_in_wait_statement7358);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_condition_in_wait_statement7360)
          condition407 = condition();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:42: ( FOR expression )?
      var alt189 = 2
      val LA189_0 = input.LA(1)

      if ((LA189_0 == FOR)) {
        alt189 = 1
      }
      alt189 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1335:43: FOR expression
          `match`(input, FOR, FOLLOW_FOR_in_wait_statement7365);
          if (state.failed) return waitStmt
          pushFollow(FOLLOW_expression_in_wait_statement7367)
          expression408 = expression();

          state._fsp -= 1
          if (state.failed) return waitStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_wait_statement7371);
      if (state.failed) return waitStmt
      if (state.backtracking == 0) {
        waitStmt = new WaitStatement(toPosition(WAIT405), label, name_list406, condition407, expression408)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 128, wait_statement_StartIndex)
      }
    }
    return waitStmt
  }

  // $ANTLR end "wait_statement"

  // $ANTLR start "assertion_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1338:1: assertion_statement[Identifier label] returns [AssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def assertion_statement(label: Identifier): AssertionStatement = {
    var assertStmt: AssertionStatement = null;
    val assertion_statement_StartIndex = input.index()
    var ASSERT409: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null

    var condition410: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 129)) {
        return assertStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1338:79: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1339:2: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
      ASSERT409 = `match`(input, ASSERT, FOLLOW_ASSERT_in_assertion_statement7392).asInstanceOf[Token];
      if (state.failed) return assertStmt
      pushFollow(FOLLOW_condition_in_assertion_statement7394)
      condition410 = condition();

      state._fsp -= 1
      if (state.failed) return assertStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1339:19: ( REPORT report_expression= expression )?
      var alt190 = 2
      val LA190_0 = input.LA(1)

      if ((LA190_0 == REPORT)) {
        alt190 = 1
      }
      alt190 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1339:20: REPORT report_expression= expression
          `match`(input, REPORT, FOLLOW_REPORT_in_assertion_statement7397);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_assertion_statement7401)
          report_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1339:58: ( SEVERITY severity_expression= expression )?
      var alt191 = 2
      val LA191_0 = input.LA(1)

      if ((LA191_0 == SEVERITY)) {
        alt191 = 1
      }
      alt191 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1339:59: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_assertion_statement7406);
          if (state.failed) return assertStmt
          pushFollow(FOLLOW_expression_in_assertion_statement7410)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return assertStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_assertion_statement7414);
      if (state.failed) return assertStmt
      if (state.backtracking == 0) {
        assertStmt = new AssertionStatement(toPosition(ASSERT409), label, condition410, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 129, assertion_statement_StartIndex)
      }
    }
    return assertStmt
  }

  // $ANTLR end "assertion_statement"

  // $ANTLR start "report_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1342:1: report_statement[Identifier label] returns [ReportStatement reportStmt] : REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def report_statement(label: Identifier): ReportStatement = {
    var reportStmt: ReportStatement = null;
    val report_statement_StartIndex = input.index()
    var REPORT411: Token = null
    var report_expression: Expression = null

    var severity_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 130)) {
        return reportStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1342:73: ( REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1343:2: REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON
      REPORT411 = `match`(input, REPORT, FOLLOW_REPORT_in_report_statement7439).asInstanceOf[Token];
      if (state.failed) return reportStmt
      pushFollow(FOLLOW_expression_in_report_statement7443)
      report_expression = expression();

      state._fsp -= 1
      if (state.failed) return reportStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1343:38: ( SEVERITY severity_expression= expression )?
      var alt192 = 2
      val LA192_0 = input.LA(1)

      if ((LA192_0 == SEVERITY)) {
        alt192 = 1
      }
      alt192 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1343:39: SEVERITY severity_expression= expression
          `match`(input, SEVERITY, FOLLOW_SEVERITY_in_report_statement7446);
          if (state.failed) return reportStmt
          pushFollow(FOLLOW_expression_in_report_statement7450)
          severity_expression = expression();

          state._fsp -= 1
          if (state.failed) return reportStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_report_statement7454);
      if (state.failed) return reportStmt
      if (state.backtracking == 0) {
        reportStmt = new ReportStatement(toPosition(REPORT411), label, report_expression, severity_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 130, report_statement_StartIndex)
      }
    }
    return reportStmt
  }

  // $ANTLR end "report_statement"

  // $ANTLR start "signal_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1346:1: signal_assignment_statement[Identifier label] returns [SignalAssignmentStatement signalAssignStmt] : ( simple_signal_assignment[$label] ) ;
  @throws(classOf[RecognitionException])
  def signal_assignment_statement(label: Identifier): SignalAssignmentStatement = {
    var signalAssignStmt: SignalAssignmentStatement = null;
    val signal_assignment_statement_StartIndex = input.index()
    var simple_signal_assignment412: SimpleSignalAssignmentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 131)) {
        return signalAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1346:100: ( ( simple_signal_assignment[$label] ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1347:2: ( simple_signal_assignment[$label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1347:2: ( simple_signal_assignment[$label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1348:2: simple_signal_assignment[$label]
      pushFollow(FOLLOW_simple_signal_assignment_in_signal_assignment_statement7482)
      simple_signal_assignment412 = simple_signal_assignment(label);

      state._fsp -= 1
      if (state.failed) return signalAssignStmt
      if (state.backtracking == 0) {
        signalAssignStmt = simple_signal_assignment412
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 131, signal_assignment_statement_StartIndex)
      }
    }
    return signalAssignStmt
  }

  // $ANTLR end "signal_assignment_statement"

  // $ANTLR start "simple_signal_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1353:1: simple_signal_assignment[Identifier label] returns [SimpleSignalAssignmentStatement stmt] : target LEQ ( delay_mechanism )? waveform SEMICOLON ;
  @throws(classOf[RecognitionException])
  def simple_signal_assignment(label: Identifier): SimpleSignalAssignmentStatement = {
    var stmt: SimpleSignalAssignmentStatement = null;
    val simple_signal_assignment_StartIndex = input.index()
    var LEQ413: Token = null
    var target414: Target = null

    var delay_mechanism415: DelayMechanism = null

    var waveform416: Waveform = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 132)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1353:91: ( target LEQ ( delay_mechanism )? waveform SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1354:2: target LEQ ( delay_mechanism )? waveform SEMICOLON
      pushFollow(FOLLOW_target_in_simple_signal_assignment7508)
      target414 = target();

      state._fsp -= 1
      if (state.failed) return stmt
      LEQ413 = `match`(input, LEQ, FOLLOW_LEQ_in_simple_signal_assignment7510).asInstanceOf[Token];
      if (state.failed) return stmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1354:13: ( delay_mechanism )?
      var alt193 = 2
      val LA193_0 = input.LA(1)

      if ((LA193_0 == INERTIAL || LA193_0 == REJECT || LA193_0 == TRANSPORT)) {
        alt193 = 1
      }
      alt193 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1354:13: delay_mechanism
          pushFollow(FOLLOW_delay_mechanism_in_simple_signal_assignment7512)
          delay_mechanism415 = delay_mechanism();

          state._fsp -= 1
          if (state.failed) return stmt


        case _ =>
      }

      pushFollow(FOLLOW_waveform_in_simple_signal_assignment7515)
      waveform416 = waveform();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_simple_signal_assignment7517);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new SimpleSignalAssignmentStatement(toPosition(LEQ413), label, target414, delay_mechanism415, waveform416)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 132, simple_signal_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "simple_signal_assignment"

  // $ANTLR start "delay_mechanism"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1392:1: delay_mechanism returns [DelayMechanism mechanism] : ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL );
  @throws(classOf[RecognitionException])
  def delay_mechanism(): DelayMechanism = {
    var mechanism: DelayMechanism = null;
    val delay_mechanism_StartIndex = input.index()
    var time_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 133)) {
        return mechanism
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1396:3: ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL )
      var alt195 = 2
      val LA195_0 = input.LA(1)

      if ((LA195_0 == TRANSPORT)) {
        alt195 = 1
      }
      else if ((LA195_0 == INERTIAL || LA195_0 == REJECT)) {
        alt195 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return mechanism
        }
        val nvae = new NoViableAltException("", 195, 0, input)

        throw nvae
      }
      alt195 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1397:2: TRANSPORT
          `match`(input, TRANSPORT, FOLLOW_TRANSPORT_in_delay_mechanism7551); if (state.failed) return mechanism

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1398:4: ( REJECT time_expression= expression )? INERTIAL
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1398:4: ( REJECT time_expression= expression )?
          var alt194 = 2
          val LA194_0 = input.LA(1)

          if ((LA194_0 == REJECT)) {
            alt194 = 1
          }
          alt194 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1398:5: REJECT time_expression= expression
              `match`(input, REJECT, FOLLOW_REJECT_in_delay_mechanism7558);
              if (state.failed) return mechanism
              pushFollow(FOLLOW_expression_in_delay_mechanism7562)
              time_expression = expression();

              state._fsp -= 1
              if (state.failed) return mechanism


            case _ =>
          }

          `match`(input, INERTIAL, FOLLOW_INERTIAL_in_delay_mechanism7566);
          if (state.failed) return mechanism


        case _ =>
      }
      if (state.backtracking == 0) {

        if (time_expression == null) mechanism = new DelayMechanism(DelayMechanism.DelayType.TRANSPORT, None)
        else mechanism = new DelayMechanism(DelayMechanism.DelayType.INERTIAL, time_expression)

      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 133, delay_mechanism_StartIndex)
      }
    }
    return mechanism
  }

  // $ANTLR end "delay_mechanism"

  // $ANTLR start "waveform_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1400:1: waveform_element returns [Waveform.Element element] : value_expression= expression ( AFTER time_expression= expression )? ;
  @throws(classOf[RecognitionException])
  def waveform_element(): Waveform.Element = {
    var element: Waveform.Element = null;
    val waveform_element_StartIndex = input.index()
    var value_expression: Expression = null

    var time_expression: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 134)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1400:53: (value_expression= expression ( AFTER time_expression= expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1401:2: value_expression= expression ( AFTER time_expression= expression )?
      pushFollow(FOLLOW_expression_in_waveform_element7581)
      value_expression = expression();

      state._fsp -= 1
      if (state.failed) return element
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1401:30: ( AFTER time_expression= expression )?
      var alt196 = 2
      val LA196_0 = input.LA(1)

      if ((LA196_0 == AFTER)) {
        alt196 = 1
      }
      alt196 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1401:31: AFTER time_expression= expression
          `match`(input, AFTER, FOLLOW_AFTER_in_waveform_element7584);
          if (state.failed) return element
          pushFollow(FOLLOW_expression_in_waveform_element7588)
          time_expression = expression();

          state._fsp -= 1
          if (state.failed) return element


        case _ =>
      }

      if (state.backtracking == 0) {
        return new Waveform.Element(value_expression, time_expression)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 134, waveform_element_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "waveform_element"

  // $ANTLR start "waveform"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1404:1: waveform returns [Waveform waveForm] : (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED ) ;
  @throws(classOf[RecognitionException])
  def waveform(): Waveform = {
    var waveForm: Waveform = null;
    val waveform_StartIndex = input.index()
    var e1: Waveform.Element = null

    var e2: Waveform.Element = null



    val elements = new Buffer[Waveform.Element]()
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 135)) {
        return waveForm
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1408:3: ( (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1409:2: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1409:2: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
      var alt198 = 2
      val LA198_0 = input.LA(1)

      if ((LA198_0 == ABS || LA198_0 == NEW || (LA198_0 >= NOT && LA198_0 <= NULL) || LA198_0 == LPAREN || (LA198_0 >= PLUS && LA198_0 <= MINUS) || LA198_0 == STRING_LITERAL || LA198_0 == CHARACTER_LITERAL || (LA198_0 >= REAL_LITERAL && LA198_0 <= EXTENDED_IDENTIFIER))) {
        alt198 = 1
      }
      else if ((LA198_0 == UNAFFECTED)) {
        alt198 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return waveForm
        }
        val nvae = new NoViableAltException("", 198, 0, input)

        throw nvae
      }
      alt198 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1410:3: e1= waveform_element ( COMMA e2= waveform_element )*
          pushFollow(FOLLOW_waveform_element_in_waveform7620)
          e1 = waveform_element();

          state._fsp -= 1
          if (state.failed) return waveForm
          if (state.backtracking == 0) {
            elements += e1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1410:48: ( COMMA e2= waveform_element )*
          var loop197 = true
          do {
            var alt197 = 2
            val LA197_0 = input.LA(1)

            if ((LA197_0 == COMMA)) {
              alt197 = 1
            }


            alt197 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1410:49: COMMA e2= waveform_element
                `match`(input, COMMA, FOLLOW_COMMA_in_waveform7624);
                if (state.failed) return waveForm
                pushFollow(FOLLOW_waveform_element_in_waveform7628)
                e2 = waveform_element();

                state._fsp -= 1
                if (state.failed) return waveForm
                if (state.backtracking == 0) {
                  elements += e2
                }


              case _ => loop197 = false
            }
          } while (loop197);


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1411:5: UNAFFECTED
          `match`(input, UNAFFECTED, FOLLOW_UNAFFECTED_in_waveform7637); if (state.failed) return waveForm


        case _ =>
      }

      if (state.backtracking == 0) {
        waveForm = new Waveform(position, elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 135, waveform_StartIndex)
      }
    }
    return waveForm
  }

  // $ANTLR end "waveform"

  // $ANTLR start "variable_assignment_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1415:1: variable_assignment_statement[Identifier label] returns [VariableAssignmentStatement varAssignStmt] : ( simple_variable_assignment[$label] ) ;
  @throws(classOf[RecognitionException])
  def variable_assignment_statement(label: Identifier): VariableAssignmentStatement = {
    var varAssignStmt: VariableAssignmentStatement = null;
    val variable_assignment_statement_StartIndex = input.index()
    var simple_variable_assignment417: SimpleVariableAssignmentStatement = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 136)) {
        return varAssignStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1415:101: ( ( simple_variable_assignment[$label] ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1416:2: ( simple_variable_assignment[$label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1416:2: ( simple_variable_assignment[$label] )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1417:2: simple_variable_assignment[$label]
      pushFollow(FOLLOW_simple_variable_assignment_in_variable_assignment_statement7663)
      simple_variable_assignment417 = simple_variable_assignment(label);

      state._fsp -= 1
      if (state.failed) return varAssignStmt
      if (state.backtracking == 0) {
        varAssignStmt = simple_variable_assignment417
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 136, variable_assignment_statement_StartIndex)
      }
    }
    return varAssignStmt
  }

  // $ANTLR end "variable_assignment_statement"

  // $ANTLR start "simple_variable_assignment"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1422:1: simple_variable_assignment[Identifier label] returns [SimpleVariableAssignmentStatement stmt] : target VAR_ASSIGN expression SEMICOLON ;
  @throws(classOf[RecognitionException])
  def simple_variable_assignment(label: Identifier): SimpleVariableAssignmentStatement = {
    var stmt: SimpleVariableAssignmentStatement = null;
    val simple_variable_assignment_StartIndex = input.index()
    var VAR_ASSIGN418: Token = null
    var target419: Target = null

    var expression420: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 137)) {
        return stmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1422:95: ( target VAR_ASSIGN expression SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1423:2: target VAR_ASSIGN expression SEMICOLON
      pushFollow(FOLLOW_target_in_simple_variable_assignment7689)
      target419 = target();

      state._fsp -= 1
      if (state.failed) return stmt
      VAR_ASSIGN418 = `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_simple_variable_assignment7691).asInstanceOf[Token];
      if (state.failed) return stmt
      pushFollow(FOLLOW_expression_in_simple_variable_assignment7693)
      expression420 = expression();

      state._fsp -= 1
      if (state.failed) return stmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_simple_variable_assignment7695);
      if (state.failed) return stmt
      if (state.backtracking == 0) {
        stmt = new SimpleVariableAssignmentStatement(toPosition(VAR_ASSIGN418), label, target419, expression420)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 137, simple_variable_assignment_StartIndex)
      }
    }
    return stmt
  }

  // $ANTLR end "simple_variable_assignment"

  // $ANTLR start "procedure_call_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1438:1: procedure_call_statement[Identifier label] returns [ProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def procedure_call_statement(label: Identifier): ProcedureCallStatement = {
    var procedureCallStmt: ProcedureCallStatement = null;
    val procedure_call_statement_StartIndex = input.index()
    var procedure_name: SelectedName = null

    var association_list421: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 138)) {
        return procedureCallStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1438:95: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1439:2: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
      pushFollow(FOLLOW_selected_name_in_procedure_call_statement7719)
      procedure_name = selected_name();

      state._fsp -= 1
      if (state.failed) return procedureCallStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1439:31: ( LPAREN association_list RPAREN )?
      var alt199 = 2
      val LA199_0 = input.LA(1)

      if ((LA199_0 == LPAREN)) {
        alt199 = 1
      }
      alt199 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1439:32: LPAREN association_list RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_procedure_call_statement7722);
          if (state.failed) return procedureCallStmt
          pushFollow(FOLLOW_association_list_in_procedure_call_statement7724)
          association_list421 = association_list();

          state._fsp -= 1
          if (state.failed) return procedureCallStmt
          `match`(input, RPAREN, FOLLOW_RPAREN_in_procedure_call_statement7726);
          if (state.failed) return procedureCallStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_procedure_call_statement7730);
      if (state.failed) return procedureCallStmt
      if (state.backtracking == 0) {
        procedureCallStmt = new ProcedureCallStatement(label, procedure_name, association_list421)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 138, procedure_call_statement_StartIndex)
      }
    }
    return procedureCallStmt
  }

  // $ANTLR end "procedure_call_statement"

  // $ANTLR start "if_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1442:1: if_statement[Identifier label] returns [IfStatement ifStmt] : ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def if_statement(label: Identifier): IfStatement = {
    var ifStmt: IfStatement = null;
    val if_statement_StartIndex = input.index()
    var ifToken: Token = null
    var if_condition: Expression = null

    var if_sequential_statement: Seq[SequentialStatement] = null

    var elsif_condition: Expression = null

    var elsif_sequential_statement: Seq[SequentialStatement] = null

    var else_sequential_statement: Seq[SequentialStatement] = null

    var end_if_label: Identifier = null



    val ifList = new Buffer[IfStatement.IfThenPart]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 139)) {
        return ifStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1445:3: (ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1446:2: ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON
      ifToken = `match`(input, IF, FOLLOW_IF_in_if_statement7754).asInstanceOf[Token];
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_condition_in_if_statement7758)
      if_condition = condition();

      state._fsp -= 1
      if (state.failed) return ifStmt
      `match`(input, THEN, FOLLOW_THEN_in_if_statement7760);
      if (state.failed) return ifStmt
      pushFollow(FOLLOW_sequence_of_statements_in_if_statement7766)
      if_sequential_statement = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifList += new IfStatement.IfThenPart(if_condition, if_sequential_statement)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1448:2: ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )*
      var loop200 = true
      do {
        var alt200 = 2
        val LA200_0 = input.LA(1)

        if ((LA200_0 == ELSIF)) {
          alt200 = 1
        }


        alt200 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1448:3: ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements
            `match`(input, ELSIF, FOLLOW_ELSIF_in_if_statement7772);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_condition_in_if_statement7776)
            elsif_condition = condition();

            state._fsp -= 1
            if (state.failed) return ifStmt
            `match`(input, THEN, FOLLOW_THEN_in_if_statement7778);
            if (state.failed) return ifStmt
            pushFollow(FOLLOW_sequence_of_statements_in_if_statement7785)
            elsif_sequential_statement = sequence_of_statements();

            state._fsp -= 1
            if (state.failed) return ifStmt
            if (state.backtracking == 0) {
              ifList += new IfStatement.IfThenPart(elsif_condition, elsif_sequential_statement)
            }


          case _ => loop200 = false
        }
      } while (loop200);

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1452:2: ( ELSE else_sequential_statement= sequence_of_statements )?
      var alt201 = 2
      val LA201_0 = input.LA(1)

      if ((LA201_0 == ELSE)) {
        alt201 = 1
      }
      alt201 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1452:3: ELSE else_sequential_statement= sequence_of_statements
          `match`(input, ELSE, FOLLOW_ELSE_in_if_statement7798);
          if (state.failed) return ifStmt
          pushFollow(FOLLOW_sequence_of_statements_in_if_statement7805)
          else_sequential_statement = sequence_of_statements();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, END, FOLLOW_END_in_if_statement7810);
      if (state.failed) return ifStmt
      `match`(input, IF, FOLLOW_IF_in_if_statement7812);
      if (state.failed) return ifStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1454:21: (end_if_label= identifier )?
      var alt202 = 2
      val LA202_0 = input.LA(1)

      if (((LA202_0 >= BASIC_IDENTIFIER && LA202_0 <= EXTENDED_IDENTIFIER))) {
        alt202 = 1
      }
      alt202 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1454:21: end_if_label= identifier
          pushFollow(FOLLOW_identifier_in_if_statement7816)
          end_if_label = identifier();

          state._fsp -= 1
          if (state.failed) return ifStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_if_statement7819);
      if (state.failed) return ifStmt
      if (state.backtracking == 0) {
        ifStmt = new IfStatement(toPosition(ifToken), label, ifList.result, else_sequential_statement, end_if_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 139, if_statement_StartIndex)
      }
    }
    return ifStmt
  }

  // $ANTLR end "if_statement"

  // $ANTLR start "case_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1457:1: case_statement[Identifier label] returns [CaseStatement caseStmt] : caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def case_statement(label: Identifier): CaseStatement = {
    var caseStmt: CaseStatement = null;
    val case_statement_StartIndex = input.index()
    var caseToken: Token = null
    var end_case_label: Identifier = null

    var choices422: Seq[Choices.Choice] = null

    var sequence_of_statements423: Seq[SequentialStatement] = null

    var expression424: Expression = null



    val alternatives = new Buffer[CaseStatement.When]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 140)) {
        return caseStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1460:3: (caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1461:2: caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON
      caseToken = `match`(input, CASE, FOLLOW_CASE_in_case_statement7843).asInstanceOf[Token];
      if (state.failed) return caseStmt
      pushFollow(FOLLOW_expression_in_case_statement7847)
      expression424 = expression();

      state._fsp -= 1
      if (state.failed) return caseStmt
      `match`(input, IS, FOLLOW_IS_in_case_statement7849);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1462:3: ( WHEN choices ARROW sequence_of_statements )+
      var cnt203 = 0
      var loop203 = true
      do {
        var alt203 = 2
        val LA203_0 = input.LA(1)

        if ((LA203_0 == WHEN)) {
          alt203 = 1
        }


        alt203 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1462:4: WHEN choices ARROW sequence_of_statements
            `match`(input, WHEN, FOLLOW_WHEN_in_case_statement7854);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_choices_in_case_statement7856)
            choices422 = choices();

            state._fsp -= 1
            if (state.failed) return caseStmt
            `match`(input, ARROW, FOLLOW_ARROW_in_case_statement7858);
            if (state.failed) return caseStmt
            pushFollow(FOLLOW_sequence_of_statements_in_case_statement7860)
            sequence_of_statements423 = sequence_of_statements();

            state._fsp -= 1
            if (state.failed) return caseStmt
            if (state.backtracking == 0) {
              alternatives += new CaseStatement.When(choices422, sequence_of_statements423)
            }


          case _ =>
            if (cnt203 >= 1) loop203 = false
            else {
              if (state.backtracking > 0) {
                state.failed = true; return caseStmt
              }
              val eee = new EarlyExitException(203, input)
              throw eee
            }
        }
        cnt203 += 1
      } while (loop203);

      `match`(input, END, FOLLOW_END_in_case_statement7867);
      if (state.failed) return caseStmt
      `match`(input, CASE, FOLLOW_CASE_in_case_statement7869);
      if (state.failed) return caseStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1463:49: (end_case_label= identifier )?
      var alt204 = 2
      val LA204_0 = input.LA(1)

      if (((LA204_0 >= BASIC_IDENTIFIER && LA204_0 <= EXTENDED_IDENTIFIER))) {
        alt204 = 1
      }
      alt204 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1463:49: end_case_label= identifier
          pushFollow(FOLLOW_identifier_in_case_statement7875)
          end_case_label = identifier();

          state._fsp -= 1
          if (state.failed) return caseStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_case_statement7878);
      if (state.failed) return caseStmt
      if (state.backtracking == 0) {
        caseStmt = new CaseStatement(toPosition(caseToken), label, expression424, alternatives.result, end_case_label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 140, case_statement_StartIndex)
      }
    }
    return caseStmt
  }

  // $ANTLR end "case_statement"

  // $ANTLR start "iteration_scheme"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1466:1: iteration_scheme returns [Either[Expression,(Identifier,DiscreteRange)] scheme] : ( WHILE condition | FOR identifier IN discrete_range );
  @throws(classOf[RecognitionException])
  def iteration_scheme(): Either[Expression, (Identifier, DiscreteRange)] = {
    var scheme: Either[Expression, (Identifier, DiscreteRange)] = null;
    val iteration_scheme_StartIndex = input.index()
    var condition425: Expression = null

    var identifier426: Identifier = null

    var discrete_range427: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 141)) {
        return scheme
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1466:82: ( WHILE condition | FOR identifier IN discrete_range )
      var alt205 = 2
      val LA205_0 = input.LA(1)

      if ((LA205_0 == WHILE)) {
        alt205 = 1
      }
      else if ((LA205_0 == FOR)) {
        alt205 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return scheme
        }
        val nvae = new NoViableAltException("", 205, 0, input)

        throw nvae
      }
      alt205 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1467:2: WHILE condition
          `match`(input, WHILE, FOLLOW_WHILE_in_iteration_scheme7894);
          if (state.failed) return scheme
          pushFollow(FOLLOW_condition_in_iteration_scheme7896)
          condition425 = condition();

          state._fsp -= 1
          if (state.failed) return scheme
          if (state.backtracking == 0) {
            scheme = Left(condition425)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1468:4: FOR identifier IN discrete_range
          `match`(input, FOR, FOLLOW_FOR_in_iteration_scheme7903);
          if (state.failed) return scheme
          pushFollow(FOLLOW_identifier_in_iteration_scheme7905)
          identifier426 = identifier();

          state._fsp -= 1
          if (state.failed) return scheme
          `match`(input, IN, FOLLOW_IN_in_iteration_scheme7907);
          if (state.failed) return scheme
          pushFollow(FOLLOW_discrete_range_in_iteration_scheme7909)
          discrete_range427 = discrete_range();

          state._fsp -= 1
          if (state.failed) return scheme
          if (state.backtracking == 0) {
            scheme = Right((identifier426, discrete_range427))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 141, iteration_scheme_StartIndex)
      }
    }
    return scheme
  }

  // $ANTLR end "iteration_scheme"

  // $ANTLR start "loop_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1470:1: loop_statement[Identifier label] returns [SequentialStatement loopStmt] : (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def loop_statement(label: Identifier): SequentialStatement = {
    var loopStmt: SequentialStatement = null;
    val loop_statement_StartIndex = input.index()
    var stmtType: Either[Expression, (Identifier, DiscreteRange)] = null

    var end_loop_label: Identifier = null

    var sequence_of_statements428: Seq[SequentialStatement] = null



    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 142)) {
        return loopStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1473:3: ( (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1474:2: (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1474:10: (stmtType= iteration_scheme )?
      var alt206 = 2
      val LA206_0 = input.LA(1)

      if ((LA206_0 == FOR || LA206_0 == WHILE)) {
        alt206 = 1
      }
      alt206 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1474:10: stmtType= iteration_scheme
          pushFollow(FOLLOW_iteration_scheme_in_loop_statement7935)
          stmtType = iteration_scheme();

          state._fsp -= 1
          if (state.failed) return loopStmt


        case _ =>
      }

      `match`(input, LOOP, FOLLOW_LOOP_in_loop_statement7938);
      if (state.failed) return loopStmt
      pushFollow(FOLLOW_sequence_of_statements_in_loop_statement7942)
      sequence_of_statements428 = sequence_of_statements();

      state._fsp -= 1
      if (state.failed) return loopStmt
      `match`(input, END, FOLLOW_END_in_loop_statement7945);
      if (state.failed) return loopStmt
      `match`(input, LOOP, FOLLOW_LOOP_in_loop_statement7947);
      if (state.failed) return loopStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1476:25: (end_loop_label= identifier )?
      var alt207 = 2
      val LA207_0 = input.LA(1)

      if (((LA207_0 >= BASIC_IDENTIFIER && LA207_0 <= EXTENDED_IDENTIFIER))) {
        alt207 = 1
      }
      alt207 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1476:25: end_loop_label= identifier
          pushFollow(FOLLOW_identifier_in_loop_statement7951)
          end_loop_label = identifier();

          state._fsp -= 1
          if (state.failed) return loopStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_loop_statement7954);
      if (state.failed) return loopStmt
      if (state.backtracking == 0) {

        loopStmt = Option(stmtType) match {
          case Some(x) => x match {
            case Left(condition) => new WhileStatement(position, label, condition, sequence_of_statements428, end_loop_label)
            case Right((identifier, discreteRange)) => new ForStatement(position, label, identifier, discreteRange, sequence_of_statements428, end_loop_label)
          }
          case None => new LoopStatement(position, label, sequence_of_statements428, end_loop_label)
        }

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 142, loop_statement_StartIndex)
      }
    }
    return loopStmt
  }

  // $ANTLR end "loop_statement"

  // $ANTLR start "next_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1487:1: next_statement[Identifier label] returns [NextStatement nextStmt] : NEXT ( identifier )? ( WHEN condition )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def next_statement(label: Identifier): NextStatement = {
    var nextStmt: NextStatement = null;
    val next_statement_StartIndex = input.index()
    var NEXT429: Token = null
    var identifier430: Identifier = null

    var condition431: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 143)) {
        return nextStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1487:67: ( NEXT ( identifier )? ( WHEN condition )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:2: NEXT ( identifier )? ( WHEN condition )? SEMICOLON
      NEXT429 = `match`(input, NEXT, FOLLOW_NEXT_in_next_statement7971).asInstanceOf[Token];
      if (state.failed) return nextStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:7: ( identifier )?
      var alt208 = 2
      val LA208_0 = input.LA(1)

      if (((LA208_0 >= BASIC_IDENTIFIER && LA208_0 <= EXTENDED_IDENTIFIER))) {
        alt208 = 1
      }
      alt208 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:7: identifier
          pushFollow(FOLLOW_identifier_in_next_statement7973)
          identifier430 = identifier();

          state._fsp -= 1
          if (state.failed) return nextStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:19: ( WHEN condition )?
      var alt209 = 2
      val LA209_0 = input.LA(1)

      if ((LA209_0 == WHEN)) {
        alt209 = 1
      }
      alt209 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1488:20: WHEN condition
          `match`(input, WHEN, FOLLOW_WHEN_in_next_statement7977);
          if (state.failed) return nextStmt
          pushFollow(FOLLOW_condition_in_next_statement7979)
          condition431 = condition();

          state._fsp -= 1
          if (state.failed) return nextStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_next_statement7983);
      if (state.failed) return nextStmt
      if (state.backtracking == 0) {
        nextStmt = new NextStatement(toPosition(NEXT429), label, identifier430, condition431)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 143, next_statement_StartIndex)
      }
    }
    return nextStmt
  }

  // $ANTLR end "next_statement"

  // $ANTLR start "exit_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1491:1: exit_statement[Identifier label] returns [ExitStatement exitStmt] : EXIT ( identifier )? ( WHEN condition )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def exit_statement(label: Identifier): ExitStatement = {
    var exitStmt: ExitStatement = null;
    val exit_statement_StartIndex = input.index()
    var EXIT432: Token = null
    var identifier433: Identifier = null

    var condition434: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 144)) {
        return exitStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1491:67: ( EXIT ( identifier )? ( WHEN condition )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:2: EXIT ( identifier )? ( WHEN condition )? SEMICOLON
      EXIT432 = `match`(input, EXIT, FOLLOW_EXIT_in_exit_statement8001).asInstanceOf[Token];
      if (state.failed) return exitStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:7: ( identifier )?
      var alt210 = 2
      val LA210_0 = input.LA(1)

      if (((LA210_0 >= BASIC_IDENTIFIER && LA210_0 <= EXTENDED_IDENTIFIER))) {
        alt210 = 1
      }
      alt210 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:7: identifier
          pushFollow(FOLLOW_identifier_in_exit_statement8003)
          identifier433 = identifier();

          state._fsp -= 1
          if (state.failed) return exitStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:19: ( WHEN condition )?
      var alt211 = 2
      val LA211_0 = input.LA(1)

      if ((LA211_0 == WHEN)) {
        alt211 = 1
      }
      alt211 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1492:20: WHEN condition
          `match`(input, WHEN, FOLLOW_WHEN_in_exit_statement8007);
          if (state.failed) return exitStmt
          pushFollow(FOLLOW_condition_in_exit_statement8009)
          condition434 = condition();

          state._fsp -= 1
          if (state.failed) return exitStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_exit_statement8013);
      if (state.failed) return exitStmt
      if (state.backtracking == 0) {
        exitStmt = new ExitStatement(toPosition(EXIT432), label, identifier433, condition434)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 144, exit_statement_StartIndex)
      }
    }
    return exitStmt
  }

  // $ANTLR end "exit_statement"

  // $ANTLR start "return_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1495:1: return_statement[Identifier label] returns [ReturnStatement returnStmt] : RETURN ( expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def return_statement(label: Identifier): ReturnStatement = {
    var returnStmt: ReturnStatement = null;
    val return_statement_StartIndex = input.index()
    var RETURN435: Token = null
    var expression436: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 145)) {
        return returnStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1495:73: ( RETURN ( expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1496:2: RETURN ( expression )? SEMICOLON
      RETURN435 = `match`(input, RETURN, FOLLOW_RETURN_in_return_statement8031).asInstanceOf[Token];
      if (state.failed) return returnStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1496:9: ( expression )?
      var alt212 = 2
      val LA212_0 = input.LA(1)

      if ((LA212_0 == ABS || LA212_0 == NEW || (LA212_0 >= NOT && LA212_0 <= NULL) || LA212_0 == LPAREN || (LA212_0 >= PLUS && LA212_0 <= MINUS) || LA212_0 == STRING_LITERAL || LA212_0 == CHARACTER_LITERAL || (LA212_0 >= REAL_LITERAL && LA212_0 <= EXTENDED_IDENTIFIER))) {
        alt212 = 1
      }
      alt212 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1496:9: expression
          pushFollow(FOLLOW_expression_in_return_statement8033)
          expression436 = expression();

          state._fsp -= 1
          if (state.failed) return returnStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_return_statement8036);
      if (state.failed) return returnStmt
      if (state.backtracking == 0) {
        returnStmt = new ReturnStatement(toPosition(RETURN435), label, expression436)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 145, return_statement_StartIndex)
      }
    }
    return returnStmt
  }

  // $ANTLR end "return_statement"

  // $ANTLR start "null_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1499:1: null_statement[Identifier label] returns [NullStatement nullStmt] : NULL SEMICOLON ;
  @throws(classOf[RecognitionException])
  def null_statement(label: Identifier): NullStatement = {
    var nullStmt: NullStatement = null;
    val null_statement_StartIndex = input.index()
    var NULL437: Token = null

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 146)) {
        return nullStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1499:67: ( NULL SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1500:2: NULL SEMICOLON
      NULL437 = `match`(input, NULL, FOLLOW_NULL_in_null_statement8055).asInstanceOf[Token];
      if (state.failed) return nullStmt
      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_null_statement8057);
      if (state.failed) return nullStmt
      if (state.backtracking == 0) {
        nullStmt = new NullStatement(toPosition(NULL437), label)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 146, null_statement_StartIndex)
      }
    }
    return nullStmt
  }

  // $ANTLR end "null_statement"

  // $ANTLR start "ams_break_statement"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1503:1: ams_break_statement[Identifier label] returns [AMSBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON ;
  @throws(classOf[RecognitionException])
  def ams_break_statement(label: Identifier): AMSBreakStatement = {
    var breakStmt: AMSBreakStatement = null;
    val ams_break_statement_StartIndex = input.index()
    var BREAK438: Token = null
    var ams_break_element_list439: Seq[BreakElement] = null

    var expression440: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 147)) {
        return breakStmt
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1503:77: ( BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:2: BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON
      BREAK438 = `match`(input, BREAK, FOLLOW_BREAK_in_ams_break_statement8074).asInstanceOf[Token];
      if (state.failed) return breakStmt
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:8: ( ams_break_element_list )?
      var alt213 = 2
      val LA213_0 = input.LA(1)

      if ((LA213_0 == FOR || LA213_0 == STRING_LITERAL || (LA213_0 >= BASIC_IDENTIFIER && LA213_0 <= EXTENDED_IDENTIFIER))) {
        alt213 = 1
      }
      alt213 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:8: ams_break_element_list
          pushFollow(FOLLOW_ams_break_element_list_in_ams_break_statement8076)
          ams_break_element_list439 = ams_break_element_list();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:32: ( WHEN expression )?
      var alt214 = 2
      val LA214_0 = input.LA(1)

      if ((LA214_0 == WHEN)) {
        alt214 = 1
      }
      alt214 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1504:33: WHEN expression
          `match`(input, WHEN, FOLLOW_WHEN_in_ams_break_statement8080);
          if (state.failed) return breakStmt
          pushFollow(FOLLOW_expression_in_ams_break_statement8082)
          expression440 = expression();

          state._fsp -= 1
          if (state.failed) return breakStmt


        case _ =>
      }

      `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_ams_break_statement8086);
      if (state.failed) return breakStmt
      if (state.backtracking == 0) {
        breakStmt = new AMSBreakStatement(toPosition(BREAK438), label, ams_break_element_list439, expression440)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 147, ams_break_statement_StartIndex)
      }
    }
    return breakStmt
  }

  // $ANTLR end "ams_break_statement"

  // $ANTLR start "ams_break_element_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1507:1: ams_break_element_list returns [Seq[BreakElement] list] : e1= ams_break_element ( COMMA e2= ams_break_element )* ;
  @throws(classOf[RecognitionException])
  def ams_break_element_list(): Seq[BreakElement] = {
    var list: Seq[BreakElement] = null;
    val ams_break_element_list_StartIndex = input.index()
    var e1: BreakElement = null

    var e2: BreakElement = null



    val elements = new Buffer[BreakElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 148)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1510:3: (e1= ams_break_element ( COMMA e2= ams_break_element )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1511:2: e1= ams_break_element ( COMMA e2= ams_break_element )*
      pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list8108)
      e1 = ams_break_element();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1511:53: ( COMMA e2= ams_break_element )*
      var loop215 = true
      do {
        var alt215 = 2
        val LA215_0 = input.LA(1)

        if ((LA215_0 == COMMA)) {
          alt215 = 1
        }


        alt215 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1511:54: COMMA e2= ams_break_element
            `match`(input, COMMA, FOLLOW_COMMA_in_ams_break_element_list8112);
            if (state.failed) return list
            pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list8116)
            e2 = ams_break_element();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop215 = false
        }
      } while (loop215);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 148, ams_break_element_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "ams_break_element_list"

  // $ANTLR start "ams_break_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1514:1: ams_break_element returns [BreakElement breakElement] : ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression ;
  @throws(classOf[RecognitionException])
  def ams_break_element(): BreakElement = {
    var breakElement: BreakElement = null;
    val ams_break_element_StartIndex = input.index()
    var quantity_name1: Name = null

    var quantity_name2: Name = null

    var expr: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 149)) {
        return breakElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1514:55: ( ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1515:2: ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1515:2: ( FOR quantity_name1= name USE )?
      var alt216 = 2
      val LA216_0 = input.LA(1)

      if ((LA216_0 == FOR)) {
        alt216 = 1
      }
      alt216 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1515:3: FOR quantity_name1= name USE
          `match`(input, FOR, FOLLOW_FOR_in_ams_break_element8140);
          if (state.failed) return breakElement
          pushFollow(FOLLOW_name_in_ams_break_element8144)
          quantity_name1 = name();

          state._fsp -= 1
          if (state.failed) return breakElement
          `match`(input, USE, FOLLOW_USE_in_ams_break_element8146);
          if (state.failed) return breakElement


        case _ =>
      }

      pushFollow(FOLLOW_name_in_ams_break_element8152)
      quantity_name2 = name();

      state._fsp -= 1
      if (state.failed) return breakElement
      `match`(input, ARROW, FOLLOW_ARROW_in_ams_break_element8154);
      if (state.failed) return breakElement
      pushFollow(FOLLOW_expression_in_ams_break_element8158)
      expr = expression();

      state._fsp -= 1
      if (state.failed) return breakElement
      if (state.backtracking == 0) {
        breakElement = new BreakElement(quantity_name1, quantity_name2, expr)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 149, ams_break_element_StartIndex)
      }
    }
    return breakElement
  }

  // $ANTLR end "ams_break_element"

  // $ANTLR start "interface_element_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1519:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
  @throws(classOf[RecognitionException])
  def interface_element_procedure(): InterfaceList.AbstractInterfaceElement = {
    var element: InterfaceList.AbstractInterfaceElement = null;
    val interface_element_procedure_StartIndex = input.index()
    var interface_constant_declaration441: InterfaceList.InterfaceConstantDeclaration = null

    var interface_variable_declaration442: InterfaceList.InterfaceVariableDeclaration = null

    var interface_signal_declaration_procedure443: InterfaceList.InterfaceSignalDeclaration = null

    var interface_file_declaration444: InterfaceList.InterfaceFileDeclaration = null

    var ams_interface_terminal_declaration445: InterfaceList.InterfaceTerminalDeclaration = null

    var ams_interface_quantity_declaration446: InterfaceList.InterfaceQuantityDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 150)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1519:86: ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
      var alt218 = 5
      alt218 = dfa218.predict(input)
      alt218 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:2: ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration
          pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_procedure8188)
          interface_constant_declaration441 = interface_constant_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_constant_declaration441
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:4: ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration
          pushFollow(FOLLOW_interface_variable_declaration_in_interface_element_procedure8212)
          interface_variable_declaration442 = interface_variable_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_variable_declaration442
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1522:4: interface_signal_declaration_procedure
          pushFollow(FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure8220)
          interface_signal_declaration_procedure443 = interface_signal_declaration_procedure();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_signal_declaration_procedure443
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1523:4: interface_file_declaration
          pushFollow(FOLLOW_interface_file_declaration_in_interface_element_procedure8227)
          interface_file_declaration444 = interface_file_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_file_declaration444
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1524:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_procedure", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1524:13: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          var alt217 = 2
          val LA217_0 = input.LA(1)

          if ((LA217_0 == TERMINAL)) {
            alt217 = 1
          }
          else if ((LA217_0 == QUANTITY)) {
            alt217 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            val nvae = new NoViableAltException("", 217, 0, input)

            throw nvae
          }
          alt217 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1525:3: ams_interface_terminal_declaration
              pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure8242)
              ams_interface_terminal_declaration445 = ams_interface_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_terminal_declaration445
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1526:5: ams_interface_quantity_declaration
              pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure8250)
              ams_interface_quantity_declaration446 = ams_interface_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_quantity_declaration446
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 150, interface_element_procedure_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "interface_element_procedure"

  // $ANTLR start "interface_element_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1533:1: interface_element_function returns [InterfaceList.AbstractInterfaceElement element] : ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
  @throws(classOf[RecognitionException])
  def interface_element_function(): InterfaceList.AbstractInterfaceElement = {
    var element: InterfaceList.AbstractInterfaceElement = null;
    val interface_element_function_StartIndex = input.index()
    var interface_constant_declaration447: InterfaceList.InterfaceConstantDeclaration = null

    var interface_signal_declaration_function448: InterfaceList.InterfaceSignalDeclaration = null

    var interface_file_declaration449: InterfaceList.InterfaceFileDeclaration = null

    var ams_interface_terminal_declaration450: InterfaceList.InterfaceTerminalDeclaration = null

    var ams_interface_quantity_declaration451: InterfaceList.InterfaceQuantityDeclaration = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 151)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1533:85: ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
      var alt220 = 4
      val LA220_0 = input.LA(1)

      if ((LA220_0 == CONSTANT || (LA220_0 >= BASIC_IDENTIFIER && LA220_0 <= EXTENDED_IDENTIFIER))) {
        alt220 = 1
      }
      else if ((LA220_0 == SIGNAL)) {
        alt220 = 2
      }
      else if ((LA220_0 == FILE)) {
        alt220 = 3
      }
      else if (((LA220_0 >= TERMINAL && LA220_0 <= QUANTITY)) && ((ams))) {
        alt220 = 4
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return element
        }
        val nvae = new NoViableAltException("", 220, 0, input)

        throw nvae
      }
      alt220 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1534:2: interface_constant_declaration
          pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_function8278)
          interface_constant_declaration447 = interface_constant_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_constant_declaration447
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1535:4: interface_signal_declaration_function
          pushFollow(FOLLOW_interface_signal_declaration_function_in_interface_element_function8286)
          interface_signal_declaration_function448 = interface_signal_declaration_function();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_signal_declaration_function448
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1536:4: interface_file_declaration
          pushFollow(FOLLOW_interface_file_declaration_in_interface_element_function8293)
          interface_file_declaration449 = interface_file_declaration();

          state._fsp -= 1
          if (state.failed) return element
          if (state.backtracking == 0) {
            element = interface_file_declaration449
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1537:4: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          if (!((ams))) {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            throw new FailedPredicateException(input, "interface_element_function", "ams")
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1537:13: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
          var alt219 = 2
          val LA219_0 = input.LA(1)

          if ((LA219_0 == TERMINAL)) {
            alt219 = 1
          }
          else if ((LA219_0 == QUANTITY)) {
            alt219 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return element
            }
            val nvae = new NoViableAltException("", 219, 0, input)

            throw nvae
          }
          alt219 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1538:3: ams_interface_terminal_declaration
              pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_function8308)
              ams_interface_terminal_declaration450 = ams_interface_terminal_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_terminal_declaration450
              }

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1539:5: ams_interface_quantity_declaration
              pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_function8316)
              ams_interface_quantity_declaration451 = ams_interface_quantity_declaration();

              state._fsp -= 1
              if (state.failed) return element
              if (state.backtracking == 0) {
                element = ams_interface_quantity_declaration451
              }


            case _ =>
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 151, interface_element_function_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "interface_element_function"

  // $ANTLR start "parameter_interface_list_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1546:1: parameter_interface_list_procedure returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* ;
  @throws(classOf[RecognitionException])
  def parameter_interface_list_procedure(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val parameter_interface_list_procedure_StartIndex = input.index()
    var e1: InterfaceList.AbstractInterfaceElement = null

    var e2: InterfaceList.AbstractInterfaceElement = null



    val elements = new Buffer[InterfaceList.AbstractInterfaceElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 152)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1549:3: (e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1550:2: e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )*
      pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8351)
      e1 = interface_element_procedure();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1550:58: ( SEMICOLON e2= interface_element_procedure )*
      var loop221 = true
      do {
        var alt221 = 2
        val LA221_0 = input.LA(1)

        if ((LA221_0 == SEMICOLON)) {
          alt221 = 1
        }


        alt221 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1550:59: SEMICOLON e2= interface_element_procedure
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_parameter_interface_list_procedure8355);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure8359)
            e2 = interface_element_procedure();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop221 = false
        }
      } while (loop221);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 152, parameter_interface_list_procedure_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "parameter_interface_list_procedure"

  // $ANTLR start "parameter_interface_list_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1553:1: parameter_interface_list_function returns [Seq[InterfaceList.AbstractInterfaceElement] list] : e1= interface_element_function ( SEMICOLON e2= interface_element_function )* ;
  @throws(classOf[RecognitionException])
  def parameter_interface_list_function(): Seq[InterfaceList.AbstractInterfaceElement] = {
    var list: Seq[InterfaceList.AbstractInterfaceElement] = null;
    val parameter_interface_list_function_StartIndex = input.index()
    var e1: InterfaceList.AbstractInterfaceElement = null

    var e2: InterfaceList.AbstractInterfaceElement = null



    val elements = new Buffer[InterfaceList.AbstractInterfaceElement]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 153)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1556:3: (e1= interface_element_function ( SEMICOLON e2= interface_element_function )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1557:2: e1= interface_element_function ( SEMICOLON e2= interface_element_function )*
      pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function8388)
      e1 = interface_element_function();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1557:58: ( SEMICOLON e2= interface_element_function )*
      var loop222 = true
      do {
        var alt222 = 2
        val LA222_0 = input.LA(1)

        if ((LA222_0 == SEMICOLON)) {
          alt222 = 1
        }


        alt222 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1557:59: SEMICOLON e2= interface_element_function
            `match`(input, SEMICOLON, FOLLOW_SEMICOLON_in_parameter_interface_list_function8393);
            if (state.failed) return list
            pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function8397)
            e2 = interface_element_function();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop222 = false
        }
      } while (loop222);

      if (state.backtracking == 0) {
        list = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 153, parameter_interface_list_function_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "parameter_interface_list_function"

  // $ANTLR start "interface_constant_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1560:1: interface_constant_declaration returns [InterfaceList.InterfaceConstantDeclaration constElement] : ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_constant_declaration(): InterfaceList.InterfaceConstantDeclaration = {
    var constElement: InterfaceList.InterfaceConstantDeclaration = null;
    val interface_constant_declaration_StartIndex = input.index()
    var identifier_list452: Seq[Identifier] = null

    var subtype_indication453: SubTypeIndication = null

    var expression454: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 154)) {
        return constElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1560:97: ( ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:2: ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:2: ( CONSTANT )?
      var alt223 = 2
      val LA223_0 = input.LA(1)

      if ((LA223_0 == CONSTANT)) {
        alt223 = 1
      }
      alt223 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:2: CONSTANT
          `match`(input, CONSTANT, FOLLOW_CONSTANT_in_interface_constant_declaration8420); if (state.failed) return constElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_constant_declaration8423)
      identifier_list452 = identifier_list();

      state._fsp -= 1
      if (state.failed) return constElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_constant_declaration8425);
      if (state.failed) return constElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:34: ( IN )?
      var alt224 = 2
      val LA224_0 = input.LA(1)

      if ((LA224_0 == IN)) {
        alt224 = 1
      }
      alt224 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:34: IN
          `match`(input, IN, FOLLOW_IN_in_interface_constant_declaration8427); if (state.failed) return constElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_constant_declaration8430)
      subtype_indication453 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return constElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:57: ( VAR_ASSIGN expression )?
      var alt225 = 2
      val LA225_0 = input.LA(1)

      if ((LA225_0 == VAR_ASSIGN)) {
        alt225 = 1
      }
      alt225 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1561:58: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_constant_declaration8433);
          if (state.failed) return constElement
          pushFollow(FOLLOW_expression_in_interface_constant_declaration8435)
          expression454 = expression();

          state._fsp -= 1
          if (state.failed) return constElement


        case _ =>
      }

      if (state.backtracking == 0) {
        constElement = new InterfaceList.InterfaceConstantDeclaration(identifier_list452, subtype_indication453, expression454)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 154, interface_constant_declaration_StartIndex)
      }
    }
    return constElement
  }

  // $ANTLR end "interface_constant_declaration"

  // $ANTLR start "interface_signal_declaration_procedure"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1564:1: interface_signal_declaration_procedure returns [InterfaceList.InterfaceSignalDeclaration signalElement] : ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_signal_declaration_procedure(): InterfaceList.InterfaceSignalDeclaration = {
    var signalElement: InterfaceList.InterfaceSignalDeclaration = null;
    val interface_signal_declaration_procedure_StartIndex = input.index()
    var BUS458: Token = null
    var identifier_list455: Seq[Identifier] = null

    var interface_mode456: InterfaceList.Mode.Value = null

    var subtype_indication457: SubTypeIndication = null

    var expression459: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 155)) {
        return signalElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1564:105: ( ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:2: ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:2: ( SIGNAL )?
      var alt226 = 2
      val LA226_0 = input.LA(1)

      if ((LA226_0 == SIGNAL)) {
        alt226 = 1
      }
      alt226 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:2: SIGNAL
          `match`(input, SIGNAL, FOLLOW_SIGNAL_in_interface_signal_declaration_procedure8454); if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_procedure8457)
      identifier_list455 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_signal_declaration_procedure8459);
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:32: ( interface_mode )?
      var alt227 = 2
      val LA227_0 = input.LA(1)

      if ((LA227_0 == BUFFER || LA227_0 == IN || LA227_0 == INOUT || LA227_0 == LINKAGE || LA227_0 == OUT)) {
        alt227 = 1
      }
      alt227 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:32: interface_mode
          pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_procedure8461)
          interface_mode456 = interface_mode();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_procedure8464)
      subtype_indication457 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:67: ( BUS )?
      var alt228 = 2
      val LA228_0 = input.LA(1)

      if ((LA228_0 == BUS)) {
        alt228 = 1
      }
      alt228 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:67: BUS
          BUS458 = `match`(input, BUS, FOLLOW_BUS_in_interface_signal_declaration_procedure8466).asInstanceOf[Token]; if (state.failed) return signalElement


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:72: ( VAR_ASSIGN expression )?
      var alt229 = 2
      val LA229_0 = input.LA(1)

      if ((LA229_0 == VAR_ASSIGN)) {
        alt229 = 1
      }
      alt229 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1565:73: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure8470);
          if (state.failed) return signalElement
          pushFollow(FOLLOW_expression_in_interface_signal_declaration_procedure8472)
          expression459 = expression();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      if (state.backtracking == 0) {
        signalElement = new InterfaceList.InterfaceSignalDeclaration(identifier_list455, interface_mode456, subtype_indication457, BUS458 != null, expression459)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 155, interface_signal_declaration_procedure_StartIndex)
      }
    }
    return signalElement
  }

  // $ANTLR end "interface_signal_declaration_procedure"

  // $ANTLR start "interface_signal_declaration_function"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1568:1: interface_signal_declaration_function returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_signal_declaration_function(): InterfaceList.InterfaceSignalDeclaration = {
    var signalElement: InterfaceList.InterfaceSignalDeclaration = null;
    val interface_signal_declaration_function_StartIndex = input.index()
    var BUS462: Token = null
    var identifier_list460: Seq[Identifier] = null

    var subtype_indication461: SubTypeIndication = null

    var expression463: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 156)) {
        return signalElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1568:104: ( SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:2: SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
      `match`(input, SIGNAL, FOLLOW_SIGNAL_in_interface_signal_declaration_function8492);
      if (state.failed) return signalElement
      pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_function8494)
      identifier_list460 = identifier_list();

      state._fsp -= 1
      if (state.failed) return signalElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_signal_declaration_function8496);
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:31: ( IN )?
      var alt230 = 2
      val LA230_0 = input.LA(1)

      if ((LA230_0 == IN)) {
        alt230 = 1
      }
      alt230 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:31: IN
          `match`(input, IN, FOLLOW_IN_in_interface_signal_declaration_function8498); if (state.failed) return signalElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_function8501)
      subtype_indication461 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return signalElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:54: ( BUS )?
      var alt231 = 2
      val LA231_0 = input.LA(1)

      if ((LA231_0 == BUS)) {
        alt231 = 1
      }
      alt231 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:54: BUS
          BUS462 = `match`(input, BUS, FOLLOW_BUS_in_interface_signal_declaration_function8503).asInstanceOf[Token]; if (state.failed) return signalElement


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:59: ( VAR_ASSIGN expression )?
      var alt232 = 2
      val LA232_0 = input.LA(1)

      if ((LA232_0 == VAR_ASSIGN)) {
        alt232 = 1
      }
      alt232 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1569:60: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function8507);
          if (state.failed) return signalElement
          pushFollow(FOLLOW_expression_in_interface_signal_declaration_function8509)
          expression463 = expression();

          state._fsp -= 1
          if (state.failed) return signalElement


        case _ =>
      }

      if (state.backtracking == 0) {
        signalElement = new InterfaceList.InterfaceSignalDeclaration(identifier_list460, InterfaceList.Mode.IN, subtype_indication461, BUS462 != null, expression463)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 156, interface_signal_declaration_function_StartIndex)
      }
    }
    return signalElement
  }

  // $ANTLR end "interface_signal_declaration_function"

  // $ANTLR start "interface_variable_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1572:1: interface_variable_declaration returns [InterfaceList.InterfaceVariableDeclaration varElement] : ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def interface_variable_declaration(): InterfaceList.InterfaceVariableDeclaration = {
    var varElement: InterfaceList.InterfaceVariableDeclaration = null;
    val interface_variable_declaration_StartIndex = input.index()
    var identifier_list464: Seq[Identifier] = null

    var interface_mode465: InterfaceList.Mode.Value = null

    var subtype_indication466: SubTypeIndication = null

    var expression467: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 157)) {
        return varElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1572:96: ( ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:2: ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:2: ( VARIABLE )?
      var alt233 = 2
      val LA233_0 = input.LA(1)

      if ((LA233_0 == VARIABLE)) {
        alt233 = 1
      }
      alt233 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:2: VARIABLE
          `match`(input, VARIABLE, FOLLOW_VARIABLE_in_interface_variable_declaration8528); if (state.failed) return varElement


        case _ =>
      }

      pushFollow(FOLLOW_identifier_list_in_interface_variable_declaration8531)
      identifier_list464 = identifier_list();

      state._fsp -= 1
      if (state.failed) return varElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_variable_declaration8533);
      if (state.failed) return varElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:34: ( interface_mode )?
      var alt234 = 2
      val LA234_0 = input.LA(1)

      if ((LA234_0 == BUFFER || LA234_0 == IN || LA234_0 == INOUT || LA234_0 == LINKAGE || LA234_0 == OUT)) {
        alt234 = 1
      }
      alt234 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:34: interface_mode
          pushFollow(FOLLOW_interface_mode_in_interface_variable_declaration8535)
          interface_mode465 = interface_mode();

          state._fsp -= 1
          if (state.failed) return varElement


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_interface_variable_declaration8538)
      subtype_indication466 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return varElement
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:69: ( VAR_ASSIGN expression )?
      var alt235 = 2
      val LA235_0 = input.LA(1)

      if ((LA235_0 == VAR_ASSIGN)) {
        alt235 = 1
      }
      alt235 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1573:70: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_interface_variable_declaration8541);
          if (state.failed) return varElement
          pushFollow(FOLLOW_expression_in_interface_variable_declaration8543)
          expression467 = expression();

          state._fsp -= 1
          if (state.failed) return varElement


        case _ =>
      }

      if (state.backtracking == 0) {
        varElement = new InterfaceList.InterfaceVariableDeclaration(identifier_list464, interface_mode465, subtype_indication466, expression467)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 157, interface_variable_declaration_StartIndex)
      }
    }
    return varElement
  }

  // $ANTLR end "interface_variable_declaration"

  // $ANTLR start "interface_mode"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1576:1: interface_mode returns [InterfaceList.Mode.Value mode] : ( IN | OUT | INOUT | BUFFER | LINKAGE );
  @throws(classOf[RecognitionException])
  def interface_mode(): InterfaceList.Mode.Value = {
    var mode: InterfaceList.Mode.Value = null;
    val interface_mode_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 158)) {
        return mode
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1576:65: ( IN | OUT | INOUT | BUFFER | LINKAGE )
      var alt236 = 5
      input.LA(1) match {
        case IN =>
          alt236 = 1
        case OUT =>
          alt236 = 2
        case INOUT =>
          alt236 = 3
        case BUFFER =>
          alt236 = 4
        case LINKAGE =>
          alt236 = 5
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return mode
          }
          val nvae = new NoViableAltException("", 236, 0, input)

          throw nvae
      }

      alt236 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1577:2: IN
          `match`(input, IN, FOLLOW_IN_in_interface_mode8562);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.IN
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1578:4: OUT
          `match`(input, OUT, FOLLOW_OUT_in_interface_mode8569);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.OUT
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1579:4: INOUT
          `match`(input, INOUT, FOLLOW_INOUT_in_interface_mode8576);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.INOUT
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1580:4: BUFFER
          `match`(input, BUFFER, FOLLOW_BUFFER_in_interface_mode8583);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.BUFFER
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1581:4: LINKAGE
          `match`(input, LINKAGE, FOLLOW_LINKAGE_in_interface_mode8590);
          if (state.failed) return mode
          if (state.backtracking == 0) {
            mode = InterfaceList.Mode.LINKAGE
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 158, interface_mode_StartIndex)
      }
    }
    return mode
  }

  // $ANTLR end "interface_mode"

  // $ANTLR start "interface_file_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1583:1: interface_file_declaration returns [InterfaceList.InterfaceFileDeclaration fileElement] : FILE identifier_list COLON subtype_indication ;
  @throws(classOf[RecognitionException])
  def interface_file_declaration(): InterfaceList.InterfaceFileDeclaration = {
    var fileElement: InterfaceList.InterfaceFileDeclaration = null;
    val interface_file_declaration_StartIndex = input.index()
    var identifier_list468: Seq[Identifier] = null

    var subtype_indication469: SubTypeIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 159)) {
        return fileElement
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1583:89: ( FILE identifier_list COLON subtype_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1584:2: FILE identifier_list COLON subtype_indication
      `match`(input, FILE, FOLLOW_FILE_in_interface_file_declaration8605);
      if (state.failed) return fileElement
      pushFollow(FOLLOW_identifier_list_in_interface_file_declaration8607)
      identifier_list468 = identifier_list();

      state._fsp -= 1
      if (state.failed) return fileElement
      `match`(input, COLON, FOLLOW_COLON_in_interface_file_declaration8609);
      if (state.failed) return fileElement
      pushFollow(FOLLOW_subtype_indication_in_interface_file_declaration8611)
      subtype_indication469 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return fileElement
      if (state.backtracking == 0) {
        fileElement = new InterfaceList.InterfaceFileDeclaration(identifier_list468, subtype_indication469)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 159, interface_file_declaration_StartIndex)
      }
    }
    return fileElement
  }

  // $ANTLR end "interface_file_declaration"

  // $ANTLR start "ams_interface_terminal_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1587:1: ams_interface_terminal_declaration returns [InterfaceList.InterfaceTerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication ;
  @throws(classOf[RecognitionException])
  def ams_interface_terminal_declaration(): InterfaceList.InterfaceTerminalDeclaration = {
    var terminalDecl: InterfaceList.InterfaceTerminalDeclaration = null;
    val ams_interface_terminal_declaration_StartIndex = input.index()
    var identifier_list470: Seq[Identifier] = null

    var ams_subnature_indication471: SubNatureIndication = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 160)) {
        return terminalDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1587:102: ( TERMINAL identifier_list COLON ams_subnature_indication )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1588:2: TERMINAL identifier_list COLON ams_subnature_indication
      `match`(input, TERMINAL, FOLLOW_TERMINAL_in_ams_interface_terminal_declaration8629);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_identifier_list_in_ams_interface_terminal_declaration8631)
      identifier_list470 = identifier_list();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_interface_terminal_declaration8633);
      if (state.failed) return terminalDecl
      pushFollow(FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration8635)
      ams_subnature_indication471 = ams_subnature_indication();

      state._fsp -= 1
      if (state.failed) return terminalDecl
      if (state.backtracking == 0) {
        terminalDecl = new InterfaceList.InterfaceTerminalDeclaration(identifier_list470, ams_subnature_indication471)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 160, ams_interface_terminal_declaration_StartIndex)
      }
    }
    return terminalDecl
  }

  // $ANTLR end "ams_interface_terminal_declaration"

  // $ANTLR start "ams_interface_quantity_declaration"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1591:1: ams_interface_quantity_declaration returns [InterfaceList.InterfaceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? ;
  @throws(classOf[RecognitionException])
  def ams_interface_quantity_declaration(): InterfaceList.InterfaceQuantityDeclaration = {
    var quantityDecl: InterfaceList.InterfaceQuantityDeclaration = null;
    val ams_interface_quantity_declaration_StartIndex = input.index()
    var out: Token = null
    var identifier_list472: Seq[Identifier] = null

    var subtype_indication473: SubTypeIndication = null

    var expression474: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 161)) {
        return quantityDecl
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1591:102: ( QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:2: QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )?
      `match`(input, QUANTITY, FOLLOW_QUANTITY_in_ams_interface_quantity_declaration8651);
      if (state.failed) return quantityDecl
      pushFollow(FOLLOW_identifier_list_in_ams_interface_quantity_declaration8653)
      identifier_list472 = identifier_list();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      `match`(input, COLON, FOLLOW_COLON_in_ams_interface_quantity_declaration8655);
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:33: ( IN | out= OUT )?
      var alt237 = 3
      val LA237_0 = input.LA(1)

      if ((LA237_0 == IN)) {
        alt237 = 1
      }
      else if ((LA237_0 == OUT)) {
        alt237 = 2
      }
      alt237 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:34: IN
          `match`(input, IN, FOLLOW_IN_in_ams_interface_quantity_declaration8658); if (state.failed) return quantityDecl

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:37: out= OUT
          out = `match`(input, OUT, FOLLOW_OUT_in_ams_interface_quantity_declaration8662).asInstanceOf[Token]; if (state.failed) return quantityDecl


        case _ =>
      }

      pushFollow(FOLLOW_subtype_indication_in_ams_interface_quantity_declaration8666)
      subtype_indication473 = subtype_indication();

      state._fsp -= 1
      if (state.failed) return quantityDecl
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:66: ( VAR_ASSIGN expression )?
      var alt238 = 2
      val LA238_0 = input.LA(1)

      if ((LA238_0 == VAR_ASSIGN)) {
        alt238 = 1
      }
      alt238 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1592:67: VAR_ASSIGN expression
          `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration8669);
          if (state.failed) return quantityDecl
          pushFollow(FOLLOW_expression_in_ams_interface_quantity_declaration8671)
          expression474 = expression();

          state._fsp -= 1
          if (state.failed) return quantityDecl


        case _ =>
      }

      if (state.backtracking == 0) {

        val mode = if (out != null) InterfaceList.Mode.OUT
        else InterfaceList.Mode.IN
        quantityDecl = new InterfaceList.InterfaceQuantityDeclaration(identifier_list472, mode, subtype_indication473, expression474)

      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 161, ams_interface_quantity_declaration_StartIndex)
      }
    }
    return quantityDecl
  }

  // $ANTLR end "ams_interface_quantity_declaration"

  // $ANTLR start "association_element"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1613:1: association_element returns [AssociationList.Element element] : ( ( formal_part ARROW )=> formal_part ARROW )? actual_part ;
  @throws(classOf[RecognitionException])
  def association_element(): AssociationList.Element = {
    var element: AssociationList.Element = null;
    val association_element_StartIndex = input.index()
    var formal_part475: Either[Identifier, (SelectedName, Name.Part)] = null

    var actual_part476: Either[Expression, Identifier] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 162)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1613:63: ( ( ( formal_part ARROW )=> formal_part ARROW )? actual_part )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:2: ( ( formal_part ARROW )=> formal_part ARROW )? actual_part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:2: ( ( formal_part ARROW )=> formal_part ARROW )?
      var alt239 = 2
      alt239 = dfa239.predict(input)
      alt239 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:3: ( formal_part ARROW )=> formal_part ARROW
          pushFollow(FOLLOW_formal_part_in_association_element8700)
          formal_part475 = formal_part();

          state._fsp -= 1
          if (state.failed) return element
          `match`(input, ARROW, FOLLOW_ARROW_in_association_element8702);
          if (state.failed) return element


        case _ =>
      }

      pushFollow(FOLLOW_actual_part_in_association_element8706)
      actual_part476 = actual_part();

      state._fsp -= 1
      if (state.failed) return element
      if (state.backtracking == 0) {
        element = new AssociationList.Element(formal_part475, actual_part476)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 162, association_element_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "association_element"

  // $ANTLR start "association_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1617:1: association_list returns [AssociationList list] : e1= association_element ( COMMA e2= association_element )* ;
  @throws(classOf[RecognitionException])
  def association_list(): AssociationList = {
    var list: AssociationList = null;
    val association_list_StartIndex = input.index()
    var e1: AssociationList.Element = null

    var e2: AssociationList.Element = null



    val elements = new Buffer[AssociationList.Element]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 163)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1620:3: (e1= association_element ( COMMA e2= association_element )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1621:2: e1= association_element ( COMMA e2= association_element )*
      pushFollow(FOLLOW_association_element_in_association_list8733)
      e1 = association_element();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1621:51: ( COMMA e2= association_element )*
      var loop240 = true
      do {
        var alt240 = 2
        val LA240_0 = input.LA(1)

        if ((LA240_0 == COMMA)) {
          alt240 = 1
        }


        alt240 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1621:52: COMMA e2= association_element
            `match`(input, COMMA, FOLLOW_COMMA_in_association_list8738);
            if (state.failed) return list
            pushFollow(FOLLOW_association_element_in_association_list8742)
            e2 = association_element();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop240 = false
        }
      } while (loop240);

      if (state.backtracking == 0) {
        list = new AssociationList(elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 163, association_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "association_list"

  // $ANTLR start "formal_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1624:1: formal_part returns [Either[Identifier,(SelectedName,Name.Part)] formal_part_] : ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) );
  @throws(classOf[RecognitionException])
  def formal_part(): Either[Identifier, (SelectedName, Name.Part)] = {
    var formal_part_ : Either[Identifier, (SelectedName, Name.Part)] = null;
    val formal_part_StartIndex = input.index()
    var identifier477: Identifier = null

    var selected_name478: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 164)) {
        return formal_part_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1624:81: ( identifier | selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part ) )
      var alt242 = 2
      input.LA(1) match {
        case BASIC_IDENTIFIER =>
          val LA242_1 = input.LA(2)

          if ((LA242_1 == LPAREN || LA242_1 == DOT)) {
            alt242 = 2
          }
          else if ((LA242_1 == ARROW)) {
            alt242 = 1
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return formal_part_
            }
            val nvae = new NoViableAltException("", 242, 1, input)

            throw nvae
          }
        case EXTENDED_IDENTIFIER =>
          val LA242_2 = input.LA(2)

          if ((LA242_2 == ARROW)) {
            alt242 = 1
          }
          else if ((LA242_2 == LPAREN || LA242_2 == DOT)) {
            alt242 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return formal_part_
            }
            val nvae = new NoViableAltException("", 242, 2, input)

            throw nvae
          }
        case STRING_LITERAL =>
          alt242 = 2
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return formal_part_
          }
          val nvae = new NoViableAltException("", 242, 0, input)

          throw nvae
      }

      alt242 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1625:2: identifier
          pushFollow(FOLLOW_identifier_in_formal_part8764)
          identifier477 = identifier();

          state._fsp -= 1
          if (state.failed) return formal_part_
          if (state.backtracking == 0) {
            formal_part_ = Left(identifier477)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:4: selected_name ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
          pushFollow(FOLLOW_selected_name_in_formal_part8771)
          selected_name478 = selected_name();

          state._fsp -= 1
          if (state.failed) return formal_part_
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:18: ( ( name_association_list_part )=> name_association_list_part | name_slice_part )
          var alt241 = 2
          val LA241_0 = input.LA(1)

          if ((LA241_0 == LPAREN)) {
            val LA241_1 = input.LA(2)

            if ((synpred17_VHDL())) {
              alt241 = 1
            }
            else if ((true)) {
              alt241 = 2
            }
            else {
              if (state.backtracking > 0) {
                state.failed = true; return formal_part_
              }
              val nvae = new NoViableAltException("", 241, 1, input)

              throw nvae
            }
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return formal_part_
            }
            val nvae = new NoViableAltException("", 241, 0, input)

            throw nvae
          }
          alt241 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:19: ( name_association_list_part )=> name_association_list_part
              pushFollow(FOLLOW_name_association_list_part_in_formal_part8778)
              name_association_list_part();

              state._fsp -= 1
              if (state.failed) return formal_part_

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:78: name_slice_part
              pushFollow(FOLLOW_name_slice_part_in_formal_part8782)
              name_slice_part();

              state._fsp -= 1
              if (state.failed) return formal_part_


            case _ =>
          }

          if (state.backtracking == 0) {
            formal_part_ = Right((selected_name478, null))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 164, formal_part_StartIndex)
      }
    }
    return formal_part_
  }

  // $ANTLR end "formal_part"

  // $ANTLR start "actual_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1629:1: actual_part returns [Either[Expression,Identifier] actual_part_ ] : ( expression | OPEN );
  @throws(classOf[RecognitionException])
  def actual_part(): Either[Expression, Identifier] = {
    var actual_part_ : Either[Expression, Identifier] = null;
    val actual_part_StartIndex = input.index()
    var OPEN480: Token = null
    var expression479: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 165)) {
        return actual_part_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1629:68: ( expression | OPEN )
      var alt243 = 2
      val LA243_0 = input.LA(1)

      if ((LA243_0 == ABS || LA243_0 == NEW || (LA243_0 >= NOT && LA243_0 <= NULL) || LA243_0 == LPAREN || (LA243_0 >= PLUS && LA243_0 <= MINUS) || LA243_0 == STRING_LITERAL || LA243_0 == CHARACTER_LITERAL || (LA243_0 >= REAL_LITERAL && LA243_0 <= EXTENDED_IDENTIFIER))) {
        alt243 = 1
      }
      else if ((LA243_0 == OPEN)) {
        alt243 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return actual_part_
        }
        val nvae = new NoViableAltException("", 243, 0, input)

        throw nvae
      }
      alt243 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1631:29: expression
          pushFollow(FOLLOW_expression_in_actual_part8806)
          expression479 = expression();

          state._fsp -= 1
          if (state.failed) return actual_part_
          if (state.backtracking == 0) {
            actual_part_ = Left(expression479)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1633:4: OPEN
          OPEN480 = `match`(input, OPEN, FOLLOW_OPEN_in_actual_part8815).asInstanceOf[Token];
          if (state.failed) return actual_part_
          if (state.backtracking == 0) {
            actual_part_ = Right(toIdentifier(OPEN480))
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 165, actual_part_StartIndex)
      }
    }
    return actual_part_
  }

  // $ANTLR end "actual_part"

  // $ANTLR start "condition"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1636:1: condition returns [Expression con] : expression ;
  @throws(classOf[RecognitionException])
  def condition(): Expression = {
    var con: Expression = null;
    val condition_StartIndex = input.index()
    var expression481: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 166)) {
        return con
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1636:36: ( expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1637:2: expression
      pushFollow(FOLLOW_expression_in_condition8834)
      expression481 = expression();

      state._fsp -= 1
      if (state.failed) return con
      if (state.backtracking == 0) {
        con = expression481
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 166, condition_StartIndex)
      }
    }
    return con
  }

  // $ANTLR end "condition"

  // $ANTLR start "expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1639:1: expression returns [Expression expr] : r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) ;
  @throws(classOf[RecognitionException])
  def expression(): Expression = {
    var expr: Expression = null;
    val expression_StartIndex = input.index()
    var nand: Token = null
    var nor: Token = null
    var r1: Expression = null

    var r2: Expression = null

    var logical_operator482: VHDLParser.logical_operator_return = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 167)) {
        return expr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1639:38: (r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1640:2: r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
      pushFollow(FOLLOW_relation_in_expression8855)
      r1 = relation();

      state._fsp -= 1
      if (state.failed) return expr
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1640:14: ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
      var alt246 = 2
      val LA246_0 = input.LA(1)

      if ((LA246_0 == NAND || LA246_0 == NOR)) {
        alt246 = 1
      }
      else if ((LA246_0 == AFTER || LA246_0 == AND || LA246_0 == ELSE || LA246_0 == FOR || LA246_0 == GENERATE || LA246_0 == INERTIAL || LA246_0 == IS || LA246_0 == LOOP || LA246_0 == ON || LA246_0 == OR || LA246_0 == REPORT || (LA246_0 >= SELECT && LA246_0 <= SEVERITY) || LA246_0 == THEN || LA246_0 == USE || LA246_0 == WHEN || (LA246_0 >= XNOR && LA246_0 <= XOR) || (LA246_0 >= ACROSS && LA246_0 <= THROUGH) || LA246_0 == VAR_ASSIGN || (LA246_0 >= SEMICOLON && LA246_0 <= COMMA) || LA246_0 == RPAREN)) {
        alt246 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return expr
        }
        val nvae = new NoViableAltException("", 246, 0, input)

        throw nvae
      }
      alt246 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1641:5: (nand= NAND | nor= NOR ) r2= relation
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1641:5: (nand= NAND | nor= NOR )
          var alt244 = 2
          val LA244_0 = input.LA(1)

          if ((LA244_0 == NAND)) {
            alt244 = 1
          }
          else if ((LA244_0 == NOR)) {
            alt244 = 2
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return expr
            }
            val nvae = new NoViableAltException("", 244, 0, input)

            throw nvae
          }
          alt244 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1641:6: nand= NAND
              nand = `match`(input, NAND, FOLLOW_NAND_in_expression8866).asInstanceOf[Token]; if (state.failed) return expr

            case 2 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1641:16: nor= NOR
              nor = `match`(input, NOR, FOLLOW_NOR_in_expression8870).asInstanceOf[Token]; if (state.failed) return expr


            case _ =>
          }

          pushFollow(FOLLOW_relation_in_expression8875)
          r2 = relation();

          state._fsp -= 1
          if (state.failed) return expr
          if (state.backtracking == 0) {
            expr = new LogicalExpression(toPosition(if (nand ne null) nand else nor), r1, if (nand ne null) LogicalExpression.Operator.NAND else LogicalExpression.Operator.NOR, r2)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1642:7: ( logical_operator r2= relation )*
          if (state.backtracking == 0) {
            expr = r1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1642:23: ( logical_operator r2= relation )*
          var loop245 = true
          do {
            var alt245 = 2
            val LA245_0 = input.LA(1)

            if ((LA245_0 == AND || LA245_0 == OR || (LA245_0 >= XNOR && LA245_0 <= XOR))) {
              alt245 = 1
            }


            alt245 match {
              case 1 =>
              // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1642:24: logical_operator r2= relation
                pushFollow(FOLLOW_logical_operator_in_expression8888)
                logical_operator482 = logical_operator();

                state._fsp -= 1
                if (state.failed) return expr
                pushFollow(FOLLOW_relation_in_expression8892)
                r2 = relation();

                state._fsp -= 1
                if (state.failed) return expr
                if (state.backtracking == 0) {
                  expr = new LogicalExpression((if (logical_operator482 != null) logical_operator482.pos else null), expr, (if (logical_operator482 != null) logical_operator482.logOp else null), r2)
                }


              case _ => loop245 = false
            }
          } while (loop245);


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 167, expression_StartIndex)
      }
    }
    return expr
  }

  // $ANTLR end "expression"

  // $ANTLR start "logical_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1645:1: logical_operator returns [LogicalExpression.Operator.Value logOp,Position pos] : ( AND | OR | XOR | XNOR );
  @throws(classOf[RecognitionException])
  def logical_operator(): VHDLParser.logical_operator_return = {
    val retval: VHDLParser.logical_operator_return = new VHDLParser.logical_operator_return()
    retval.start = input.LT(1)
    val logical_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 168)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1648:3: ( AND | OR | XOR | XNOR )
      var alt247 = 4
      input.LA(1) match {
        case AND =>
          alt247 = 1
        case OR =>
          alt247 = 2
        case XOR =>
          alt247 = 3
        case XNOR =>
          alt247 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 247, 0, input)

          throw nvae
      }

      alt247 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1649:2: AND
          `match`(input, AND, FOLLOW_AND_in_logical_operator8916);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.AND
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1650:4: OR
          `match`(input, OR, FOLLOW_OR_in_logical_operator8923);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.OR
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1651:4: XOR
          `match`(input, XOR, FOLLOW_XOR_in_logical_operator8930);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.XOR
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1652:4: XNOR
          `match`(input, XNOR, FOLLOW_XNOR_in_logical_operator8937);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.logOp = LogicalExpression.Operator.XNOR
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 168, logical_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "logical_operator"

  // $ANTLR start "relation"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1656:1: relation returns [Expression rel] : s1= shift_expression (op= relational_operator s2= shift_expression )? ;
  @throws(classOf[RecognitionException])
  def relation(): Expression = {
    var rel: Expression = null;
    val relation_StartIndex = input.index()
    var s1: Expression = null

    var op: VHDLParser.relational_operator_return = null

    var s2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 169)) {
        return rel
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1656:35: (s1= shift_expression (op= relational_operator s2= shift_expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1657:2: s1= shift_expression (op= relational_operator s2= shift_expression )?
      pushFollow(FOLLOW_shift_expression_in_relation8958)
      s1 = shift_expression();

      state._fsp -= 1
      if (state.failed) return rel
      if (state.backtracking == 0) {
        rel = s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1658:2: (op= relational_operator s2= shift_expression )?
      var alt248 = 2
      val LA248_0 = input.LA(1)

      if (((LA248_0 >= LEQ && LA248_0 <= GEQ) || LA248_0 == NEQ || (LA248_0 >= LT && LA248_0 <= EQ))) {
        alt248 = 1
      }
      alt248 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1658:3: op= relational_operator s2= shift_expression
          pushFollow(FOLLOW_relational_operator_in_relation8966)
          op = relational_operator();

          state._fsp -= 1
          if (state.failed) return rel
          pushFollow(FOLLOW_shift_expression_in_relation8970)
          s2 = shift_expression();

          state._fsp -= 1
          if (state.failed) return rel
          if (state.backtracking == 0) {
            rel = new Relation((if (op != null) op.pos else null), s1, (if (op != null) op.relOp else null), s2)
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 169, relation_StartIndex)
      }
    }
    return rel
  }

  // $ANTLR end "relation"

  // $ANTLR start "relational_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1660:1: relational_operator returns [Relation.Operator.Value relOp,Position pos] : ( EQ | NEQ | LT | LEQ | GT | GEQ );
  @throws(classOf[RecognitionException])
  def relational_operator(): VHDLParser.relational_operator_return = {
    val retval: VHDLParser.relational_operator_return = new VHDLParser.relational_operator_return()
    retval.start = input.LT(1)
    val relational_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 170)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1663:3: ( EQ | NEQ | LT | LEQ | GT | GEQ )
      var alt249 = 6
      input.LA(1) match {
        case EQ =>
          alt249 = 1
        case NEQ =>
          alt249 = 2
        case LT =>
          alt249 = 3
        case LEQ =>
          alt249 = 4
        case GT =>
          alt249 = 5
        case GEQ =>
          alt249 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 249, 0, input)

          throw nvae
      }

      alt249 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1664:2: EQ
          `match`(input, EQ, FOLLOW_EQ_in_relational_operator8991);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.EQ
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1665:4: NEQ
          `match`(input, NEQ, FOLLOW_NEQ_in_relational_operator8998);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.NEQ
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1666:4: LT
          `match`(input, LT, FOLLOW_LT_in_relational_operator9005);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.LT
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1667:4: LEQ
          `match`(input, LEQ, FOLLOW_LEQ_in_relational_operator9012);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.LEQ
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1668:4: GT
          `match`(input, GT, FOLLOW_GT_in_relational_operator9019);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.GT
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1669:4: GEQ
          `match`(input, GEQ, FOLLOW_GEQ_in_relational_operator9026);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.relOp = Relation.Operator.GEQ
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 170, relational_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "relational_operator"

  // $ANTLR start "shift_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1672:1: shift_expression returns [Expression shiftExpr] : s1= simple_expression (op= shift_operator s2= simple_expression )? ;
  @throws(classOf[RecognitionException])
  def shift_expression(): Expression = {
    var shiftExpr: Expression = null;
    val shift_expression_StartIndex = input.index()
    var s1: Expression = null

    var op: VHDLParser.shift_operator_return = null

    var s2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 171)) {
        return shiftExpr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1672:49: (s1= simple_expression (op= shift_operator s2= simple_expression )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1673:2: s1= simple_expression (op= shift_operator s2= simple_expression )?
      pushFollow(FOLLOW_simple_expression_in_shift_expression9045)
      s1 = simple_expression();

      state._fsp -= 1
      if (state.failed) return shiftExpr
      if (state.backtracking == 0) {
        shiftExpr = s1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1674:2: (op= shift_operator s2= simple_expression )?
      var alt250 = 2
      val LA250_0 = input.LA(1)

      if (((LA250_0 >= ROL && LA250_0 <= ROR) || (LA250_0 >= SLA && LA250_0 <= SRL))) {
        alt250 = 1
      }
      alt250 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1674:3: op= shift_operator s2= simple_expression
          pushFollow(FOLLOW_shift_operator_in_shift_expression9053)
          op = shift_operator();

          state._fsp -= 1
          if (state.failed) return shiftExpr
          pushFollow(FOLLOW_simple_expression_in_shift_expression9057)
          s2 = simple_expression();

          state._fsp -= 1
          if (state.failed) return shiftExpr
          if (state.backtracking == 0) {
            shiftExpr = new ShiftExpression((if (op != null) op.pos else null), s1, (if (op != null) op.shiftOp else null), s2)
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 171, shift_expression_StartIndex)
      }
    }
    return shiftExpr
  }

  // $ANTLR end "shift_expression"

  // $ANTLR start "shift_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1676:1: shift_operator returns [ShiftExpression.Operator.Value shiftOp,Position pos] : ( SLL | SRL | SLA | SRA | ROL | ROR );
  @throws(classOf[RecognitionException])
  def shift_operator(): VHDLParser.shift_operator_return = {
    val retval: VHDLParser.shift_operator_return = new VHDLParser.shift_operator_return()
    retval.start = input.LT(1)
    val shift_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 172)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1679:3: ( SLL | SRL | SLA | SRA | ROL | ROR )
      var alt251 = 6
      input.LA(1) match {
        case SLL =>
          alt251 = 1
        case SRL =>
          alt251 = 2
        case SLA =>
          alt251 = 3
        case SRA =>
          alt251 = 4
        case ROL =>
          alt251 = 5
        case ROR =>
          alt251 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 251, 0, input)

          throw nvae
      }

      alt251 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1680:2: SLL
          `match`(input, SLL, FOLLOW_SLL_in_shift_operator9078);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SLL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1681:4: SRL
          `match`(input, SRL, FOLLOW_SRL_in_shift_operator9085);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SRL
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1682:4: SLA
          `match`(input, SLA, FOLLOW_SLA_in_shift_operator9092);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SLA
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1683:4: SRA
          `match`(input, SRA, FOLLOW_SRA_in_shift_operator9099);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.SRA
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1684:4: ROL
          `match`(input, ROL, FOLLOW_ROL_in_shift_operator9106);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.ROL
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1685:4: ROR
          `match`(input, ROR, FOLLOW_ROR_in_shift_operator9113);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.shiftOp = ShiftExpression.Operator.ROR
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 172, shift_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "shift_operator"

  // $ANTLR start "simple_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1687:1: simple_expression returns [Expression simpleExpr] : (s= sign )? t1= term (op= adding_operator t2= term )* ;
  @throws(classOf[RecognitionException])
  def simple_expression(): Expression = {
    var simpleExpr: Expression = null;
    val simple_expression_StartIndex = input.index()
    var s: VHDLParser.sign_return = null

    var t1: Expression = null

    var op: VHDLParser.adding_operator_return = null

    var t2: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 173)) {
        return simpleExpr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1687:51: ( (s= sign )? t1= term (op= adding_operator t2= term )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1688:2: (s= sign )? t1= term (op= adding_operator t2= term )*
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1688:3: (s= sign )?
      var alt252 = 2
      val LA252_0 = input.LA(1)

      if (((LA252_0 >= PLUS && LA252_0 <= MINUS))) {
        alt252 = 1
      }
      alt252 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1688:3: s= sign
          pushFollow(FOLLOW_sign_in_simple_expression9132)
          s = sign();

          state._fsp -= 1
          if (state.failed) return simpleExpr


        case _ =>
      }

      pushFollow(FOLLOW_term_in_simple_expression9137)
      t1 = term();

      state._fsp -= 1
      if (state.failed) return simpleExpr
      if (state.backtracking == 0) {
        simpleExpr = if (s != null) new SimpleExpression((if (s != null) s.pos else null), (if (s != null) s.signOp else null), t1, None, None) else t1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1690:2: (op= adding_operator t2= term )*
      var loop253 = true
      do {
        var alt253 = 2
        val LA253_0 = input.LA(1)

        if ((LA253_0 == AMPERSAND || (LA253_0 >= PLUS && LA253_0 <= MINUS))) {
          alt253 = 1
        }


        alt253 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1690:4: op= adding_operator t2= term
            pushFollow(FOLLOW_adding_operator_in_simple_expression9148)
            op = adding_operator();

            state._fsp -= 1
            if (state.failed) return simpleExpr
            pushFollow(FOLLOW_term_in_simple_expression9152)
            t2 = term();

            state._fsp -= 1
            if (state.failed) return simpleExpr
            if (state.backtracking == 0) {
              simpleExpr = new SimpleExpression((if (op != null) op.pos else null), None, simpleExpr, (if (op != null) op.addOp else null), t2)
            }


          case _ => loop253 = false
        }
      } while (loop253);


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 173, simple_expression_StartIndex)
      }
    }
    return simpleExpr
  }

  // $ANTLR end "simple_expression"

  // $ANTLR start "sign"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1692:1: sign returns [SimpleExpression.SignOperator.Value signOp,Position pos] : ( PLUS | MINUS );
  @throws(classOf[RecognitionException])
  def sign(): VHDLParser.sign_return = {
    val retval: VHDLParser.sign_return = new VHDLParser.sign_return()
    retval.start = input.LT(1)
    val sign_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 174)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1695:3: ( PLUS | MINUS )
      var alt254 = 2
      val LA254_0 = input.LA(1)

      if ((LA254_0 == PLUS)) {
        alt254 = 1
      }
      else if ((LA254_0 == MINUS)) {
        alt254 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return retval
        }
        val nvae = new NoViableAltException("", 254, 0, input)

        throw nvae
      }
      alt254 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1696:2: PLUS
          `match`(input, PLUS, FOLLOW_PLUS_in_sign9173);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.signOp = SimpleExpression.SignOperator.PLUS
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1697:4: MINUS
          `match`(input, MINUS, FOLLOW_MINUS_in_sign9180);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.signOp = SimpleExpression.SignOperator.MINUS
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 174, sign_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "sign"

  // $ANTLR start "adding_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1699:1: adding_operator returns [SimpleExpression.AddOperator.Value addOp,Position pos] : ( PLUS | MINUS | AMPERSAND );
  @throws(classOf[RecognitionException])
  def adding_operator(): VHDLParser.adding_operator_return = {
    val retval: VHDLParser.adding_operator_return = new VHDLParser.adding_operator_return()
    retval.start = input.LT(1)
    val adding_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 175)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1702:3: ( PLUS | MINUS | AMPERSAND )
      var alt255 = 3
      input.LA(1) match {
        case PLUS =>
          alt255 = 1
        case MINUS =>
          alt255 = 2
        case AMPERSAND =>
          alt255 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 255, 0, input)

          throw nvae
      }

      alt255 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1703:2: PLUS
          `match`(input, PLUS, FOLLOW_PLUS_in_adding_operator9203);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.PLUS
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1704:4: MINUS
          `match`(input, MINUS, FOLLOW_MINUS_in_adding_operator9210);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.MINUS
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1705:4: AMPERSAND
          `match`(input, AMPERSAND, FOLLOW_AMPERSAND_in_adding_operator9217);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.addOp = SimpleExpression.AddOperator.CONCATENATION
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 175, adding_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "adding_operator"

  // $ANTLR start "multiplying_operator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1707:1: multiplying_operator returns [Term.Operator.Value mulOp,Position pos] : ( MUL | DIV | MOD | REM );
  @throws(classOf[RecognitionException])
  def multiplying_operator(): VHDLParser.multiplying_operator_return = {
    val retval: VHDLParser.multiplying_operator_return = new VHDLParser.multiplying_operator_return()
    retval.start = input.LT(1)
    val multiplying_operator_StartIndex = input.index()

    retval.pos = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 176)) {
        return retval
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1710:3: ( MUL | DIV | MOD | REM )
      var alt256 = 4
      input.LA(1) match {
        case MUL =>
          alt256 = 1
        case DIV =>
          alt256 = 2
        case MOD =>
          alt256 = 3
        case REM =>
          alt256 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return retval
          }
          val nvae = new NoViableAltException("", 256, 0, input)

          throw nvae
      }

      alt256 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1711:2: MUL
          `match`(input, MUL, FOLLOW_MUL_in_multiplying_operator9236);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.MUL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1712:4: DIV
          `match`(input, DIV, FOLLOW_DIV_in_multiplying_operator9243);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.DIV
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1713:4: MOD
          `match`(input, MOD, FOLLOW_MOD_in_multiplying_operator9250);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.MOD
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1714:4: REM
          `match`(input, REM, FOLLOW_REM_in_multiplying_operator9257);
          if (state.failed) return retval
          if (state.backtracking == 0) {
            retval.mulOp = Term.Operator.REM
          }


        case _ =>
      }
      retval.stop = input.LT(-1)

    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 176, multiplying_operator_StartIndex)
      }
    }
    return retval
  }

  // $ANTLR end "multiplying_operator"

  // $ANTLR start "term"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1716:1: term returns [Expression term_] : f1= factor ( multiplying_operator f2= factor )* ;
  @throws(classOf[RecognitionException])
  def term(): Expression = {
    var term_ : Expression = null;
    val term_StartIndex = input.index()
    var f1: Expression = null

    var f2: Expression = null

    var multiplying_operator483: VHDLParser.multiplying_operator_return = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 177)) {
        return term_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1716:33: (f1= factor ( multiplying_operator f2= factor )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1717:2: f1= factor ( multiplying_operator f2= factor )*
      pushFollow(FOLLOW_factor_in_term9274)
      f1 = factor();

      state._fsp -= 1
      if (state.failed) return term_
      if (state.backtracking == 0) {
        term_ = f1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1718:2: ( multiplying_operator f2= factor )*
      var loop257 = true
      do {
        var alt257 = 2
        val LA257_0 = input.LA(1)

        if ((LA257_0 == MOD || LA257_0 == REM || (LA257_0 >= MUL && LA257_0 <= DIV))) {
          alt257 = 1
        }


        alt257 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1718:4: multiplying_operator f2= factor
            pushFollow(FOLLOW_multiplying_operator_in_term9282)
            multiplying_operator483 = multiplying_operator();

            state._fsp -= 1
            if (state.failed) return term_
            pushFollow(FOLLOW_factor_in_term9286)
            f2 = factor();

            state._fsp -= 1
            if (state.failed) return term_
            if (state.backtracking == 0) {
              term_ = new Term((if (multiplying_operator483 != null) multiplying_operator483.pos else null), term_, (if (multiplying_operator483 != null) multiplying_operator483.mulOp else null), f2)
            }


          case _ => loop257 = false
        }
      } while (loop257);


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 177, term_StartIndex)
      }
    }
    return term_
  }

  // $ANTLR end "term"

  // $ANTLR start "factor"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1720:1: factor returns [Expression factor_] : (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary );
  @throws(classOf[RecognitionException])
  def factor(): Expression = {
    var factor_ : Expression = null;
    val factor_StartIndex = input.index()
    var DOUBLESTAR484: Token = null
    var ABS485: Token = null
    var NOT487: Token = null
    var p1: Expression = null

    var p2: Expression = null

    var primary486: Expression = null

    var primary488: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 178)) {
        return factor_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1720:37: (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary )
      var alt259 = 3
      input.LA(1) match {
        case NEW | NULL | LPAREN | STRING_LITERAL | CHARACTER_LITERAL | REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | BIT_STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt259 = 1
        case ABS =>
          alt259 = 2
        case NOT =>
          alt259 = 3
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return factor_
          }
          val nvae = new NoViableAltException("", 259, 0, input)

          throw nvae
      }

      alt259 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1721:2: p1= primary ( DOUBLESTAR p2= primary )?
          pushFollow(FOLLOW_primary_in_factor9306)
          p1 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = p1
          }
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1721:32: ( DOUBLESTAR p2= primary )?
          var alt258 = 2
          val LA258_0 = input.LA(1)

          if ((LA258_0 == DOUBLESTAR)) {
            alt258 = 1
          }
          alt258 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1721:33: DOUBLESTAR p2= primary
              DOUBLESTAR484 = `match`(input, DOUBLESTAR, FOLLOW_DOUBLESTAR_in_factor9309).asInstanceOf[Token];
              if (state.failed) return factor_
              pushFollow(FOLLOW_primary_in_factor9313)
              p2 = primary();

              state._fsp -= 1
              if (state.failed) return factor_
              if (state.backtracking == 0) {
                factor_ = new Factor(toPosition(DOUBLESTAR484), p1, Factor.Operator.POW, p2)
              }


            case _ =>
          }


        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1722:4: ABS primary
          ABS485 = `match`(input, ABS, FOLLOW_ABS_in_factor9322).asInstanceOf[Token];
          if (state.failed) return factor_
          pushFollow(FOLLOW_primary_in_factor9324)
          primary486 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = new Factor(toPosition(ABS485), primary486, Factor.Operator.ABS)
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1723:4: NOT primary
          NOT487 = `match`(input, NOT, FOLLOW_NOT_in_factor9331).asInstanceOf[Token];
          if (state.failed) return factor_
          pushFollow(FOLLOW_primary_in_factor9333)
          primary488 = primary();

          state._fsp -= 1
          if (state.failed) return factor_
          if (state.backtracking == 0) {
            factor_ = new Factor(toPosition(NOT487), primary488, Factor.Operator.NOT)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 178, factor_StartIndex)
      }
    }
    return factor_
  }

  // $ANTLR end "factor"

  // $ANTLR start "primary"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1734:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );
  @throws(classOf[RecognitionException])
  def primary(): Expression = {
    var obj: Expression = null;
    val primary_StartIndex = input.index()
    var selected_name489: SelectedName = null

    var qualified_expression490: QualifiedExpression = null

    var name491: Name = null

    var literal492: Expression = null

    var allocator493: Expression = null

    var aggregate494: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 179)) {
        return obj
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1734:34: ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate )
      var alt260 = 5
      alt260 = dfa260.predict(input)
      alt260 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1735:2: selected_name qualified_expression[$selected_name.name_]
          pushFollow(FOLLOW_selected_name_in_primary9353)
          selected_name489 = selected_name();

          state._fsp -= 1
          if (state.failed) return obj
          pushFollow(FOLLOW_qualified_expression_in_primary9355)
          qualified_expression490 = qualified_expression(selected_name489);

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = qualified_expression490
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1736:4: name
          pushFollow(FOLLOW_name_in_primary9363)
          name491 = name();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = name491
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1737:4: literal
          pushFollow(FOLLOW_literal_in_primary9370)
          literal492 = literal();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = literal492
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1738:4: allocator
          pushFollow(FOLLOW_allocator_in_primary9378)
          allocator493 = allocator();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = allocator493
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1739:4: aggregate
          pushFollow(FOLLOW_aggregate_in_primary9385)
          aggregate494 = aggregate();

          state._fsp -= 1
          if (state.failed) return obj
          if (state.backtracking == 0) {
            obj = aggregate494
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 179, primary_StartIndex)
      }
    }
    return obj
  }

  // $ANTLR end "primary"

  // $ANTLR start "allocator"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1741:1: allocator returns [Expression newExpression] : NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) ;
  @throws(classOf[RecognitionException])
  def allocator(): Expression = {
    var newExpression: Expression = null;
    val allocator_StartIndex = input.index()
    var NEW496: Token = null
    var selected_name495: SelectedName = null

    var qualified_expression497: QualifiedExpression = null

    var index_constraint498: Seq[DiscreteRange] = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 180)) {
        return newExpression
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1741:46: ( NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1742:2: NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
      NEW496 = `match`(input, NEW, FOLLOW_NEW_in_allocator9401).asInstanceOf[Token];
      if (state.failed) return newExpression
      pushFollow(FOLLOW_selected_name_in_allocator9403)
      selected_name495 = selected_name();

      state._fsp -= 1
      if (state.failed) return newExpression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1743:3: ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
      var alt262 = 2
      val LA262_0 = input.LA(1)

      if ((LA262_0 == APOSTROPHE)) {
        alt262 = 1
      }
      else if ((LA262_0 == EOF || LA262_0 == AFTER || LA262_0 == AND || LA262_0 == BUS || (LA262_0 >= DOWNTO && LA262_0 <= ELSE) || LA262_0 == FOR || LA262_0 == GENERATE || LA262_0 == INERTIAL || LA262_0 == IS || LA262_0 == LOOP || (LA262_0 >= MOD && LA262_0 <= NAND) || LA262_0 == NOR || (LA262_0 >= ON && LA262_0 <= OR) || LA262_0 == REGISTER || (LA262_0 >= REM && LA262_0 <= REPORT) || (LA262_0 >= ROL && LA262_0 <= SEVERITY) || (LA262_0 >= SLA && LA262_0 <= SRL) || (LA262_0 >= THEN && LA262_0 <= TO) || LA262_0 == UNITS || LA262_0 == USE || LA262_0 == WHEN || (LA262_0 >= XNOR && LA262_0 <= XOR) || (LA262_0 >= ACROSS && LA262_0 <= NOISE) || (LA262_0 >= DOUBLESTAR && LA262_0 <= VAR_ASSIGN) || (LA262_0 >= SEMICOLON && LA262_0 <= RPAREN) || (LA262_0 >= MUL && LA262_0 <= BAR) || LA262_0 == TOLERANCE)) {
        alt262 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return newExpression
        }
        val nvae = new NoViableAltException("", 262, 0, input)

        throw nvae
      }
      alt262 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1743:5: qualified_expression[$selected_name.name_]
          pushFollow(FOLLOW_qualified_expression_in_allocator9410)
          qualified_expression497 = qualified_expression(selected_name495);

          state._fsp -= 1
          if (state.failed) return newExpression
          if (state.backtracking == 0) {
            newExpression = new NewExpression(toPosition(NEW496), Left(qualified_expression497))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1744:6: ( index_constraint )?
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1744:6: ( index_constraint )?
          var alt261 = 2
          val LA261_0 = input.LA(1)

          if ((LA261_0 == LPAREN)) {
            alt261 = 1
          }
          alt261 match {
            case 1 =>
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1744:6: index_constraint
              pushFollow(FOLLOW_index_constraint_in_allocator9420)
              index_constraint498 = index_constraint();

              state._fsp -= 1
              if (state.failed) return newExpression


            case _ =>
          }

          if (state.backtracking == 0) {
            newExpression = new NewExpression(toPosition(NEW496), Right(new SubTypeIndication(None, selected_name495, if (index_constraint498 == null) None else Right(index_constraint498))))
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 180, allocator_StartIndex)
      }
    }
    return newExpression
  }

  // $ANTLR end "allocator"

  // $ANTLR start "qualified_expression"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1747:1: qualified_expression[SelectedName typeName] returns [QualifiedExpression expr] : APOSTROPHE aggregate ;
  @throws(classOf[RecognitionException])
  def qualified_expression(typeName: SelectedName): QualifiedExpression = {
    var expr: QualifiedExpression = null;
    val qualified_expression_StartIndex = input.index()
    var aggregate499: Aggregate = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 181)) {
        return expr
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1747:80: ( APOSTROPHE aggregate )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1748:2: APOSTROPHE aggregate
      `match`(input, APOSTROPHE, FOLLOW_APOSTROPHE_in_qualified_expression9443);
      if (state.failed) return expr
      pushFollow(FOLLOW_aggregate_in_qualified_expression9445)
      aggregate499 = aggregate();

      state._fsp -= 1
      if (state.failed) return expr
      if (state.backtracking == 0) {
        expr = new QualifiedExpression(typeName, aggregate499)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 181, qualified_expression_StartIndex)
      }
    }
    return expr
  }

  // $ANTLR end "qualified_expression"

  // $ANTLR start "selected_name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1751:1: selected_name_list returns [Seq[SelectedName] list] : n1= selected_name ( COMMA n2= selected_name )* ;
  @throws(classOf[RecognitionException])
  def selected_name_list(): Seq[SelectedName] = {
    var list: Seq[SelectedName] = null;
    val selected_name_list_StartIndex = input.index()
    var n1: SelectedName = null

    var n2: SelectedName = null



    val tmpList = new Buffer[SelectedName]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 182)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1754:3: (n1= selected_name ( COMMA n2= selected_name )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1755:2: n1= selected_name ( COMMA n2= selected_name )*
      pushFollow(FOLLOW_selected_name_in_selected_name_list9467)
      n1 = selected_name();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        tmpList += n1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1755:42: ( COMMA n2= selected_name )*
      var loop263 = true
      do {
        var alt263 = 2
        val LA263_0 = input.LA(1)

        if ((LA263_0 == COMMA)) {
          alt263 = 1
        }


        alt263 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1755:43: COMMA n2= selected_name
            `match`(input, COMMA, FOLLOW_COMMA_in_selected_name_list9472);
            if (state.failed) return list
            pushFollow(FOLLOW_selected_name_in_selected_name_list9476)
            n2 = selected_name();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += n2
            }


          case _ => loop263 = false
        }
      } while (loop263);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 182, selected_name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "selected_name_list"

  // $ANTLR start "selected_name"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1758:1: selected_name returns [SelectedName name_] : name_prefix ( name_selected_part )* ;
  @throws(classOf[RecognitionException])
  def selected_name(): SelectedName = {
    var name_ : SelectedName = null;
    val selected_name_StartIndex = input.index()
    var name_selected_part500: Name.SelectedPart = null

    var name_prefix501: Identifier = null



    val parts = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 183)) {
        return name_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1761:3: ( name_prefix ( name_selected_part )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1762:2: name_prefix ( name_selected_part )*
      pushFollow(FOLLOW_name_prefix_in_selected_name9503)
      name_prefix501 = name_prefix();

      state._fsp -= 1
      if (state.failed) return name_
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1762:14: ( name_selected_part )*
      var loop264 = true
      do {
        var alt264 = 2
        val LA264_0 = input.LA(1)

        if ((LA264_0 == DOT)) {
          alt264 = 1
        }


        alt264 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1762:16: name_selected_part
            pushFollow(FOLLOW_name_selected_part_in_selected_name9507)
            name_selected_part500 = name_selected_part();

            state._fsp -= 1
            if (state.failed) return name_
            if (state.backtracking == 0) {
              parts += name_selected_part500.identifier
            }


          case _ => loop264 = false
        }
      } while (loop264);

      if (state.backtracking == 0) {
        name_ = new SelectedName(name_prefix501 +: parts.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 183, selected_name_StartIndex)
      }
    }
    return name_
  }

  // $ANTLR end "selected_name"

  // $ANTLR start "name_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1765:1: name_list returns [Seq[Name] list] : n1= name ( COMMA n2= name )* ;
  @throws(classOf[RecognitionException])
  def name_list(): Seq[Name] = {
    var list: Seq[Name] = null;
    val name_list_StartIndex = input.index()
    var n1: Name = null

    var n2: Name = null



    val tmpList = new Buffer[Name]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 184)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1768:3: (n1= name ( COMMA n2= name )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1769:2: n1= name ( COMMA n2= name )*
      pushFollow(FOLLOW_name_in_name_list9533)
      n1 = name();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        tmpList += n1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1769:33: ( COMMA n2= name )*
      var loop265 = true
      do {
        var alt265 = 2
        val LA265_0 = input.LA(1)

        if ((LA265_0 == COMMA)) {
          alt265 = 1
        }


        alt265 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1769:34: COMMA n2= name
            `match`(input, COMMA, FOLLOW_COMMA_in_name_list9538);
            if (state.failed) return list
            pushFollow(FOLLOW_name_in_name_list9542)
            n2 = name();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              tmpList += n2
            }


          case _ => loop265 = false
        }
      } while (loop265);

      if (state.backtracking == 0) {
        list = tmpList.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 184, name_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "name_list"

  // $ANTLR start "name"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1772:1: name returns [Name name_] : name_prefix ( name_part )* ;
  @throws(classOf[RecognitionException])
  def name(): Name = {
    var name_ : Name = null;
    val name_StartIndex = input.index()
    var name_part502: Name.Part = null

    var name_prefix503: Identifier = null



    val parts = new Buffer[Name.Part]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 185)) {
        return name_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1775:3: ( name_prefix ( name_part )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1776:2: name_prefix ( name_part )*
      pushFollow(FOLLOW_name_prefix_in_name9570)
      name_prefix503 = name_prefix();

      state._fsp -= 1
      if (state.failed) return name_
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1776:14: ( name_part )*
      var loop266 = true
      do {
        var alt266 = 2
        alt266 = dfa266.predict(input)
        alt266 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1776:15: name_part
            pushFollow(FOLLOW_name_part_in_name9573)
            name_part502 = name_part();

            state._fsp -= 1
            if (state.failed) return name_
            if (state.backtracking == 0) {
              parts += name_part502
            }


          case _ => loop266 = false
        }
      } while (loop266);

      if (state.backtracking == 0) {
        name_ = new Name(name_prefix503, parts.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 185, name_StartIndex)
      }
    }
    return name_
  }

  // $ANTLR end "name"

  // $ANTLR start "name_prefix"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1779:1: name_prefix returns [Identifier id] : ( identifier | STRING_LITERAL );
  @throws(classOf[RecognitionException])
  def name_prefix(): Identifier = {
    var id: Identifier = null;
    val name_prefix_StartIndex = input.index()
    var STRING_LITERAL505: Token = null
    var identifier504: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 186)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1779:37: ( identifier | STRING_LITERAL )
      var alt267 = 2
      val LA267_0 = input.LA(1)

      if (((LA267_0 >= BASIC_IDENTIFIER && LA267_0 <= EXTENDED_IDENTIFIER))) {
        alt267 = 1
      }
      else if ((LA267_0 == STRING_LITERAL)) {
        alt267 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 267, 0, input)

        throw nvae
      }
      alt267 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1780:2: identifier
          pushFollow(FOLLOW_identifier_in_name_prefix9593)
          identifier504 = identifier();

          state._fsp -= 1
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = identifier504
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1781:5: STRING_LITERAL
          STRING_LITERAL505 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_name_prefix9601).asInstanceOf[Token];
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(STRING_LITERAL505)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 186, name_prefix_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "name_prefix"

  // $ANTLR start "name_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1783:1: name_part returns [Name.Part part] : ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part );
  @throws(classOf[RecognitionException])
  def name_part(): Name.Part = {
    var part: Name.Part = null;
    val name_part_StartIndex = input.index()
    var name_selected_part506: Name.SelectedPart = null

    var name_attribute_part507: Name.AttributePart = null

    var name_association_list_part508: Name.AssociationListPart = null

    var name_slice_part509: Name.SlicePart = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 187)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1783:36: ( name_selected_part | name_attribute_part | ( name_association_list_part )=> name_association_list_part | name_slice_part )
      var alt268 = 4
      input.LA(1) match {
        case DOT =>
          alt268 = 1
        case LBRACKET | APOSTROPHE =>
          alt268 = 2
        case LPAREN =>
          val LA268_4 = input.LA(2)

          if ((synpred18_VHDL())) {
            alt268 = 3
          }
          else if ((true)) {
            alt268 = 4
          }
          else {
            if (state.backtracking > 0) {
              state.failed = true; return part
            }
            val nvae = new NoViableAltException("", 268, 4, input)

            throw nvae
          }
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return part
          }
          val nvae = new NoViableAltException("", 268, 0, input)

          throw nvae
      }

      alt268 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1784:2: name_selected_part
          pushFollow(FOLLOW_name_selected_part_in_name_part9617)
          name_selected_part506 = name_selected_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_selected_part506
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1785:4: name_attribute_part
          pushFollow(FOLLOW_name_attribute_part_in_name_part9624)
          name_attribute_part507 = name_attribute_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_attribute_part507
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1786:4: ( name_association_list_part )=> name_association_list_part
          pushFollow(FOLLOW_name_association_list_part_in_name_part9635)
          name_association_list_part508 = name_association_list_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_association_list_part508
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1787:4: name_slice_part
          pushFollow(FOLLOW_name_slice_part_in_name_part9642)
          name_slice_part509 = name_slice_part();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = name_slice_part509
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 187, name_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_part"

  // $ANTLR start "name_selected_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1790:1: name_selected_part returns [Name.SelectedPart part] : DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) ;
  @throws(classOf[RecognitionException])
  def name_selected_part(): Name.SelectedPart = {
    var part: Name.SelectedPart = null;
    val name_selected_part_StartIndex = input.index()
    var CHARACTER_LITERAL511: Token = null
    var STRING_LITERAL512: Token = null
    var ALL513: Token = null
    var identifier510: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 188)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1790:53: ( DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1791:2: DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
      `match`(input, DOT, FOLLOW_DOT_in_name_selected_part9662);
      if (state.failed) return part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1791:6: ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
      var alt269 = 4
      input.LA(1) match {
        case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER =>
          alt269 = 1
        case CHARACTER_LITERAL =>
          alt269 = 2
        case STRING_LITERAL =>
          alt269 = 3
        case ALL =>
          alt269 = 4
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return part
          }
          val nvae = new NoViableAltException("", 269, 0, input)

          throw nvae
      }

      alt269 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1792:2: identifier
          pushFollow(FOLLOW_identifier_in_name_selected_part9667)
          identifier510 = identifier();

          state._fsp -= 1
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(identifier510)
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1793:4: CHARACTER_LITERAL
          CHARACTER_LITERAL511 = `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_name_selected_part9673).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(CHARACTER_LITERAL511))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1794:4: STRING_LITERAL
          STRING_LITERAL512 = `match`(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_name_selected_part9680).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(STRING_LITERAL512))
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1795:4: ALL
          ALL513 = `match`(input, ALL, FOLLOW_ALL_in_name_selected_part9686).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            part = new Name.SelectedPart(toIdentifier(ALL513))
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 188, name_selected_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_selected_part"

  // $ANTLR start "name_association_list_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1798:1: name_association_list_part returns [Name.AssociationListPart part] : LPAREN association_list RPAREN ;
  @throws(classOf[RecognitionException])
  def name_association_list_part(): Name.AssociationListPart = {
    var part: Name.AssociationListPart = null;
    val name_association_list_part_StartIndex = input.index()
    var LPAREN514: Token = null
    var association_list515: AssociationList = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 189)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1798:68: ( LPAREN association_list RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1799:2: LPAREN association_list RPAREN
      LPAREN514 = `match`(input, LPAREN, FOLLOW_LPAREN_in_name_association_list_part9703).asInstanceOf[Token];
      if (state.failed) return part
      pushFollow(FOLLOW_association_list_in_name_association_list_part9705)
      association_list515 = association_list();

      state._fsp -= 1
      if (state.failed) return part
      `match`(input, RPAREN, FOLLOW_RPAREN_in_name_association_list_part9707);
      if (state.failed) return part
      if (state.backtracking == 0) {
        part = new Name.AssociationListPart(toPosition(LPAREN514), association_list515)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 189, name_association_list_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_association_list_part"

  // $ANTLR start "name_slice_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1801:1: name_slice_part returns [Name.SlicePart part] : LPAREN discrete_range RPAREN ;
  @throws(classOf[RecognitionException])
  def name_slice_part(): Name.SlicePart = {
    var part: Name.SlicePart = null;
    val name_slice_part_StartIndex = input.index()
    var discrete_range516: DiscreteRange = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 190)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1801:47: ( LPAREN discrete_range RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1802:2: LPAREN discrete_range RPAREN
      `match`(input, LPAREN, FOLLOW_LPAREN_in_name_slice_part9726);
      if (state.failed) return part
      pushFollow(FOLLOW_discrete_range_in_name_slice_part9728)
      discrete_range516 = discrete_range();

      state._fsp -= 1
      if (state.failed) return part
      `match`(input, RPAREN, FOLLOW_RPAREN_in_name_slice_part9730);
      if (state.failed) return part
      if (state.backtracking == 0) {
        part = new Name.SlicePart(discrete_range516)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 190, name_slice_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_slice_part"

  // $ANTLR start "name_attribute_part"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:1: name_attribute_part returns [Name.AttributePart part] : ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN )=> LPAREN expression RPAREN )? ;
  @throws(classOf[RecognitionException])
  def name_attribute_part(): Name.AttributePart = {
    var part: Name.AttributePart = null;
    val name_attribute_part_StartIndex = input.index()
    var RANGE517: Token = null
    var id: Identifier = null

    var signature518: Signature = null

    var expression519: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 191)) {
        return part
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1804:55: ( ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN )=> LPAREN expression RPAREN )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:2: ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN )=> LPAREN expression RPAREN )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:2: ( signature )?
      var alt270 = 2
      val LA270_0 = input.LA(1)

      if ((LA270_0 == LBRACKET)) {
        alt270 = 1
      }
      alt270 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:2: signature
          pushFollow(FOLLOW_signature_in_name_attribute_part9746)
          signature518 = signature();

          state._fsp -= 1
          if (state.failed) return part


        case _ =>
      }

      `match`(input, APOSTROPHE, FOLLOW_APOSTROPHE_in_name_attribute_part9749);
      if (state.failed) return part
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:24: (id= identifier | RANGE )
      var alt271 = 2
      val LA271_0 = input.LA(1)

      if (((LA271_0 >= BASIC_IDENTIFIER && LA271_0 <= EXTENDED_IDENTIFIER))) {
        alt271 = 1
      }
      else if ((LA271_0 == RANGE)) {
        alt271 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return part
        }
        val nvae = new NoViableAltException("", 271, 0, input)

        throw nvae
      }
      alt271 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:25: id= identifier
          pushFollow(FOLLOW_identifier_in_name_attribute_part9754)
          id = identifier();

          state._fsp -= 1
          if (state.failed) return part

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1805:39: RANGE
          RANGE517 = `match`(input, RANGE, FOLLOW_RANGE_in_name_attribute_part9756).asInstanceOf[Token];
          if (state.failed) return part
          if (state.backtracking == 0) {
            id = toIdentifier(RANGE517)
          }


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1806:2: ( ( LPAREN )=> LPAREN expression RPAREN )?
      var alt272 = 2
      alt272 = dfa272.predict(input)
      alt272 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1806:4: ( LPAREN )=> LPAREN expression RPAREN
          `match`(input, LPAREN, FOLLOW_LPAREN_in_name_attribute_part9769);
          if (state.failed) return part
          pushFollow(FOLLOW_expression_in_name_attribute_part9771)
          expression519 = expression();

          state._fsp -= 1
          if (state.failed) return part
          `match`(input, RPAREN, FOLLOW_RPAREN_in_name_attribute_part9773);
          if (state.failed) return part


        case _ =>
      }

      if (state.backtracking == 0) {
        part = new Name.AttributePart(signature518, id, expression519)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 191, name_attribute_part_StartIndex)
      }
    }
    return part
  }

  // $ANTLR end "name_attribute_part"

  // $ANTLR start "signature"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:1: signature returns [Signature signature_] : LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET ;
  @throws(classOf[RecognitionException])
  def signature(): Signature = {
    var signature_ : Signature = null;
    val signature_StartIndex = input.index()
    var LBRACKET520: Token = null
    var selected_name_list521: Seq[SelectedName] = null

    var type_mark522: SelectedName = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 192)) {
        return signature_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1808:42: ( LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1809:2: LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET
      LBRACKET520 = `match`(input, LBRACKET, FOLLOW_LBRACKET_in_signature9792).asInstanceOf[Token];
      if (state.failed) return signature_
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1809:11: ( selected_name_list )?
      var alt273 = 2
      val LA273_0 = input.LA(1)

      if ((LA273_0 == STRING_LITERAL || (LA273_0 >= BASIC_IDENTIFIER && LA273_0 <= EXTENDED_IDENTIFIER))) {
        alt273 = 1
      }
      alt273 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1809:11: selected_name_list
          pushFollow(FOLLOW_selected_name_list_in_signature9794)
          selected_name_list521 = selected_name_list();

          state._fsp -= 1
          if (state.failed) return signature_


        case _ =>
      }

      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1809:31: ( RETURN type_mark )?
      var alt274 = 2
      val LA274_0 = input.LA(1)

      if ((LA274_0 == RETURN)) {
        alt274 = 1
      }
      alt274 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1809:32: RETURN type_mark
          `match`(input, RETURN, FOLLOW_RETURN_in_signature9798);
          if (state.failed) return signature_
          pushFollow(FOLLOW_type_mark_in_signature9800)
          type_mark522 = type_mark();

          state._fsp -= 1
          if (state.failed) return signature_


        case _ =>
      }

      `match`(input, RBRACKET, FOLLOW_RBRACKET_in_signature9804);
      if (state.failed) return signature_
      if (state.backtracking == 0) {
        signature_ = new Signature(toPosition(LBRACKET520), selected_name_list521, type_mark522)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 192, signature_StartIndex)
      }
    }
    return signature_
  }

  // $ANTLR end "signature"

  // $ANTLR start "literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1834:1: literal returns [Expression literal_] : ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? ;
  @throws(classOf[RecognitionException])
  def literal(): Expression = {
    var literal_ : Expression = null;
    val literal_StartIndex = input.index()
    var selected_name523: SelectedName = null



    var literalType: Literal.Type.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 193)) {
        return literal_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1838:3: ( ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )? )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1839:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => selected_name )?
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1839:2: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | BIT_STRING_LITERAL | NULL )
      var alt275 = 6
      input.LA(1) match {
        case REAL_LITERAL =>
          alt275 = 1
        case INTEGER_LITERAL =>
          alt275 = 2
        case BASED_LITERAL =>
          alt275 = 3
        case CHARACTER_LITERAL =>
          alt275 = 4
        case BIT_STRING_LITERAL =>
          alt275 = 5
        case NULL =>
          alt275 = 6
        case _ =>
          if (state.backtracking > 0) {
            state.failed = true; return literal_
          }
          val nvae = new NoViableAltException("", 275, 0, input)

          throw nvae
      }

      alt275 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1840:3: REAL_LITERAL
          `match`(input, REAL_LITERAL, FOLLOW_REAL_LITERAL_in_literal9832);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.REAL_LITERAL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1841:5: INTEGER_LITERAL
          `match`(input, INTEGER_LITERAL, FOLLOW_INTEGER_LITERAL_in_literal9840);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.INTEGER_LITERAL
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1842:5: BASED_LITERAL
          `match`(input, BASED_LITERAL, FOLLOW_BASED_LITERAL_in_literal9848);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.BASED_LITERAL
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1843:5: CHARACTER_LITERAL
          `match`(input, CHARACTER_LITERAL, FOLLOW_CHARACTER_LITERAL_in_literal9856);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.CHARACTER_LITERAL
          }

        case 5 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1845:5: BIT_STRING_LITERAL
          `match`(input, BIT_STRING_LITERAL, FOLLOW_BIT_STRING_LITERAL_in_literal9867);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.BIT_STRING_LITERAL
          }

        case 6 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1846:5: NULL
          `match`(input, NULL, FOLLOW_NULL_in_literal9875);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literalType = Literal.Type.NULL_LITERAL
          }


        case _ =>
      }

      if (state.backtracking == 0) {
        literal_ = new Literal(position, input.LT(-1).getText(), literalType)
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1849:2: ({...}? => selected_name )?
      var alt276 = 2
      val LA276_0 = input.LA(1)

      if ((LA276_0 == STRING_LITERAL || (LA276_0 >= BASIC_IDENTIFIER && LA276_0 <= EXTENDED_IDENTIFIER)) && ((input.LA(-1) == INTEGER_LITERAL || input.LA(-1) == REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/))) {
        alt276 = 1
      }
      alt276 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1849:3: {...}? => selected_name
          if (!((input.LA(-1) == INTEGER_LITERAL || input.LA(-1) == REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/))) {
            if (state.backtracking > 0) {
              state.failed = true; return literal_
            }
            throw new FailedPredicateException(input, "literal", "input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/")
          }
          pushFollow(FOLLOW_selected_name_in_literal9890)
          selected_name523 = selected_name();

          state._fsp -= 1
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            literal_ = new PhysicalLiteral(literal_.asInstanceOf[Literal], selected_name523)
          }


        case _ =>
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 193, literal_StartIndex)
      }
    }
    return literal_
  }

  // $ANTLR end "literal"

  // $ANTLR start "physical_literal"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1851:1: physical_literal returns [PhysicalLiteral literal_] : ( INTEGER_LITERAL | REAL_LITERAL ) selected_name ;
  @throws(classOf[RecognitionException])
  def physical_literal(): PhysicalLiteral = {
    var literal_ : PhysicalLiteral = null;
    val physical_literal_StartIndex = input.index()
    var selected_name524: SelectedName = null



    var text: String = null
    var literalType: Literal.Type.Value = null
    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 194)) {
        return literal_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1856:3: ( ( INTEGER_LITERAL | REAL_LITERAL ) selected_name )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1857:2: ( INTEGER_LITERAL | REAL_LITERAL ) selected_name
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1857:2: ( INTEGER_LITERAL | REAL_LITERAL )
      var alt277 = 2
      val LA277_0 = input.LA(1)

      if ((LA277_0 == INTEGER_LITERAL)) {
        alt277 = 1
      }
      else if ((LA277_0 == REAL_LITERAL)) {
        alt277 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return literal_
        }
        val nvae = new NoViableAltException("", 277, 0, input)

        throw nvae
      }
      alt277 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1858:3: INTEGER_LITERAL
          `match`(input, INTEGER_LITERAL, FOLLOW_INTEGER_LITERAL_in_physical_literal9916);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            text = input.LT(-1).getText();
            literalType = Literal.Type.INTEGER_LITERAL
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1859:5: REAL_LITERAL
          `match`(input, REAL_LITERAL, FOLLOW_REAL_LITERAL_in_physical_literal9924);
          if (state.failed) return literal_
          if (state.backtracking == 0) {
            text = input.LT(-1).getText();
            literalType = Literal.Type.REAL_LITERAL
          }


        case _ =>
      }

      pushFollow(FOLLOW_selected_name_in_physical_literal9934)
      selected_name524 = selected_name();

      state._fsp -= 1
      if (state.failed) return literal_
      if (state.backtracking == 0) {
        literal_ = new PhysicalLiteral(position, text, selected_name524, literalType)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 194, physical_literal_StartIndex)
      }
    }
    return literal_
  }

  // $ANTLR end "physical_literal"

  // $ANTLR start "element_association"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:1: element_association returns [Aggregate.ElementAssociation element] : ( ( choices ARROW )=> choices ARROW )? expression ;
  @throws(classOf[RecognitionException])
  def element_association(): Aggregate.ElementAssociation = {
    var element: Aggregate.ElementAssociation = null;
    val element_association_StartIndex = input.index()
    var choices525: Seq[Choices.Choice] = null

    var expression526: Expression = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 195)) {
        return element
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1864:68: ( ( ( choices ARROW )=> choices ARROW )? expression )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1865:2: ( ( choices ARROW )=> choices ARROW )? expression
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1865:2: ( ( choices ARROW )=> choices ARROW )?
      var alt278 = 2
      alt278 = dfa278.predict(input)
      alt278 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1865:4: ( choices ARROW )=> choices ARROW
          pushFollow(FOLLOW_choices_in_element_association9960)
          choices525 = choices();

          state._fsp -= 1
          if (state.failed) return element
          `match`(input, ARROW, FOLLOW_ARROW_in_element_association9962);
          if (state.failed) return element


        case _ =>
      }

      pushFollow(FOLLOW_expression_in_element_association9967)
      expression526 = expression();

      state._fsp -= 1
      if (state.failed) return element
      if (state.backtracking == 0) {
        element = new Aggregate.ElementAssociation(choices525, expression526)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 195, element_association_StartIndex)
      }
    }
    return element
  }

  // $ANTLR end "element_association"

  // $ANTLR start "aggregate"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1868:1: aggregate returns [Aggregate aggregate_] : LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN ;
  @throws(classOf[RecognitionException])
  def aggregate(): Aggregate = {
    var aggregate_ : Aggregate = null;
    val aggregate_StartIndex = input.index()
    var LPAREN527: Token = null
    var e1: Aggregate.ElementAssociation = null

    var e2: Aggregate.ElementAssociation = null



    val elements = new Buffer[Aggregate.ElementAssociation]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 196)) {
        return aggregate_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1871:3: ( LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1872:2: LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN
      LPAREN527 = `match`(input, LPAREN, FOLLOW_LPAREN_in_aggregate9988).asInstanceOf[Token];
      if (state.failed) return aggregate_
      pushFollow(FOLLOW_element_association_in_aggregate9992)
      e1 = element_association();

      state._fsp -= 1
      if (state.failed) return aggregate_
      if (state.backtracking == 0) {
        elements += e1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1872:57: ( COMMA e2= element_association )*
      var loop279 = true
      do {
        var alt279 = 2
        val LA279_0 = input.LA(1)

        if ((LA279_0 == COMMA)) {
          alt279 = 1
        }


        alt279 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1872:58: COMMA e2= element_association
            `match`(input, COMMA, FOLLOW_COMMA_in_aggregate9996);
            if (state.failed) return aggregate_
            pushFollow(FOLLOW_element_association_in_aggregate10000)
            e2 = element_association();

            state._fsp -= 1
            if (state.failed) return aggregate_
            if (state.backtracking == 0) {
              elements += e2
            }


          case _ => loop279 = false
        }
      } while (loop279);

      `match`(input, RPAREN, FOLLOW_RPAREN_in_aggregate10006);
      if (state.failed) return aggregate_
      if (state.backtracking == 0) {
        aggregate_ = new Aggregate(toPosition(LPAREN527), elements.result)
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 196, aggregate_StartIndex)
      }
    }
    return aggregate_
  }

  // $ANTLR end "aggregate"

  // $ANTLR start "choice"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1875:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );
  @throws(classOf[RecognitionException])
  def choice(): Choices.Choice = {
    var choice_ : Choices.Choice = null;
    val choice_StartIndex = input.index()
    var identifier528: Identifier = null

    var simple_expression529: Expression = null

    var discrete_range530: DiscreteRange = null



    val position = toPosition(input.LT(1))

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 197)) {
        return choice_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1878:3: ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS )
      var alt280 = 4
      alt280 = dfa280.predict(input)
      alt280 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier
          pushFollow(FOLLOW_identifier_in_choice10047)
          identifier528 = identifier();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(Third(identifier528)))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1880:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression
          pushFollow(FOLLOW_simple_expression_in_choice10074)
          simple_expression529 = simple_expression();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(Second(simple_expression529)))
          }

        case 3 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1881:4: discrete_range
          pushFollow(FOLLOW_discrete_range_in_choice10081)
          discrete_range530 = discrete_range();

          state._fsp -= 1
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, Some(First(discrete_range530)))
          }

        case 4 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1882:4: OTHERS
          `match`(input, OTHERS, FOLLOW_OTHERS_in_choice10088);
          if (state.failed) return choice_
          if (state.backtracking == 0) {
            choice_ = new Choices.Choice(position, None)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 197, choice_StartIndex)
      }
    }
    return choice_
  }

  // $ANTLR end "choice"

  // $ANTLR start "choices"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1884:1: choices returns [Seq[Choices.Choice] choices_] : c1= choice ( BAR c2= choice )* ;
  @throws(classOf[RecognitionException])
  def choices(): Seq[Choices.Choice] = {
    var choices_ : Seq[Choices.Choice] = null;
    val choices_StartIndex = input.index()
    var c1: Choices.Choice = null

    var c2: Choices.Choice = null



    val elements = new Buffer[Choices.Choice]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 198)) {
        return choices_
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1887:3: (c1= choice ( BAR c2= choice )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1888:2: c1= choice ( BAR c2= choice )*
      pushFollow(FOLLOW_choice_in_choices10109)
      c1 = choice();

      state._fsp -= 1
      if (state.failed) return choices_
      if (state.backtracking == 0) {
        elements += c1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1888:37: ( BAR c2= choice )*
      var loop281 = true
      do {
        var alt281 = 2
        val LA281_0 = input.LA(1)

        if ((LA281_0 == BAR)) {
          alt281 = 1
        }


        alt281 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1888:39: BAR c2= choice
            `match`(input, BAR, FOLLOW_BAR_in_choices10114);
            if (state.failed) return choices_
            pushFollow(FOLLOW_choice_in_choices10118)
            c2 = choice();

            state._fsp -= 1
            if (state.failed) return choices_
            if (state.backtracking == 0) {
              elements += c2
            }


          case _ => loop281 = false
        }
      } while (loop281);

      if (state.backtracking == 0) {
        choices_ = elements.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 198, choices_StartIndex)
      }
    }
    return choices_
  }

  // $ANTLR end "choices"

  // $ANTLR start "identifier_list"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1908:1: identifier_list returns [Seq[Identifier] list] : id1= identifier ( COMMA id2= identifier )* ;
  @throws(classOf[RecognitionException])
  def identifier_list(): Seq[Identifier] = {
    var list: Seq[Identifier] = null;
    val identifier_list_StartIndex = input.index()
    var id1: Identifier = null

    var id2: Identifier = null



    val identifiers = new Buffer[Identifier]()

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 199)) {
        return list
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1911:3: (id1= identifier ( COMMA id2= identifier )* )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1912:2: id1= identifier ( COMMA id2= identifier )*
      pushFollow(FOLLOW_identifier_in_identifier_list10149)
      id1 = identifier();

      state._fsp -= 1
      if (state.failed) return list
      if (state.backtracking == 0) {
        identifiers += id1
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1912:42: ( COMMA id2= identifier )*
      var loop282 = true
      do {
        var alt282 = 2
        val LA282_0 = input.LA(1)

        if ((LA282_0 == COMMA)) {
          alt282 = 1
        }


        alt282 match {
          case 1 =>
          // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1912:43: COMMA id2= identifier
            `match`(input, COMMA, FOLLOW_COMMA_in_identifier_list10154);
            if (state.failed) return list
            pushFollow(FOLLOW_identifier_in_identifier_list10158)
            id2 = identifier();

            state._fsp -= 1
            if (state.failed) return list
            if (state.backtracking == 0) {
              identifiers += id2
            }


          case _ => loop282 = false
        }
      } while (loop282);

      if (state.backtracking == 0) {
        list = identifiers.result
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 199, identifier_list_StartIndex)
      }
    }
    return list
  }

  // $ANTLR end "identifier_list"

  // $ANTLR start "identifier"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:1: identifier returns [Identifier id] : ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER );
  @throws(classOf[RecognitionException])
  def identifier(): Identifier = {
    var id: Identifier = null;
    val identifier_StartIndex = input.index()
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 200)) {
        return id
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1915:36: ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER )
      var alt283 = 2
      val LA283_0 = input.LA(1)

      if ((LA283_0 == BASIC_IDENTIFIER)) {
        alt283 = 1
      }
      else if ((LA283_0 == EXTENDED_IDENTIFIER)) {
        alt283 = 2
      }
      else {
        if (state.backtracking > 0) {
          state.failed = true; return id
        }
        val nvae = new NoViableAltException("", 283, 0, input)

        throw nvae
      }
      alt283 match {
        case 1 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1916:2: BASIC_IDENTIFIER
          `match`(input, BASIC_IDENTIFIER, FOLLOW_BASIC_IDENTIFIER_in_identifier10183);
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(input.LT(-1))
          }

        case 2 =>
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1917:4: EXTENDED_IDENTIFIER
          `match`(input, EXTENDED_IDENTIFIER, FOLLOW_EXTENDED_IDENTIFIER_in_identifier10190);
          if (state.failed) return id
          if (state.backtracking == 0) {
            id = toIdentifier(input.LT(-1), false)
          }


        case _ =>
      }
    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 200, identifier_StartIndex)
      }
    }
    return id
  }

  // $ANTLR end "identifier"

  // $ANTLR start "label_colon"
  // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1923:1: label_colon returns [Identifier label] : identifier COLON ;
  @throws(classOf[RecognitionException])
  def label_colon(): Identifier = {
    var label: Identifier = null;
    val label_colon_StartIndex = input.index()
    var identifier531: Identifier = null


    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 201)) {
        return label
      }
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1923:40: ( identifier COLON )
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1924:2: identifier COLON
      pushFollow(FOLLOW_identifier_in_label_colon10210)
      identifier531 = identifier();

      state._fsp -= 1
      if (state.failed) return label
      `match`(input, COLON, FOLLOW_COLON_in_label_colon10212);
      if (state.failed) return label
      if (state.backtracking == 0) {
        label = identifier531
      }


    }
    catch {
      case re: RecognitionException =>
        reportError(re)
        recover(input, re)
    }
    finally {
      if (state.backtracking > 0) {
        memoize(input, 201, label_colon_StartIndex)
      }
    }
    return label
  }

  // $ANTLR end "label_colon"

  // $ANTLR start synpred1_VHDL
  @throws(classOf[RecognitionException])
  def synpred1_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:408:4: ( discrete_range )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:408:5: discrete_range
    pushFollow(FOLLOW_discrete_range_in_synpred1_VHDL2009)
    discrete_range();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred1_VHDL

  // $ANTLR start synpred2_VHDL
  @throws(classOf[RecognitionException])
  def synpred2_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:414:2: ( identifier )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:414:3: identifier
    pushFollow(FOLLOW_identifier_in_synpred2_VHDL2048)
    identifier();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred2_VHDL

  // $ANTLR start synpred3_VHDL
  @throws(classOf[RecognitionException])
  def synpred3_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:595:4: ( RANGE range UNITS )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:595:5: RANGE range UNITS
    `match`(input, RANGE, FOLLOW_RANGE_in_synpred3_VHDL2913);
    if (state.failed) return
    pushFollow(FOLLOW_range_in_synpred3_VHDL2915)
    range();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, UNITS, FOLLOW_UNITS_in_synpred3_VHDL2917);
    if (state.failed) return


  }

  // $ANTLR end synpred3_VHDL

  // $ANTLR start synpred4_VHDL
  @throws(classOf[RecognitionException])
  def synpred4_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:601:4: ( PROTECTED BODY )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:601:5: PROTECTED BODY
    `match`(input, PROTECTED, FOLLOW_PROTECTED_in_synpred4_VHDL2971);
    if (state.failed) return
    `match`(input, BODY, FOLLOW_BODY_in_synpred4_VHDL2973);
    if (state.failed) return


  }

  // $ANTLR end synpred4_VHDL

  // $ANTLR start synpred5_VHDL
  @throws(classOf[RecognitionException])
  def synpred5_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:618:2: ( ams_free_quantity_declaration )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:618:3: ams_free_quantity_declaration
    pushFollow(FOLLOW_ams_free_quantity_declaration_in_synpred5_VHDL3086)
    ams_free_quantity_declaration();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred5_VHDL

  // $ANTLR start synpred6_VHDL
  @throws(classOf[RecognitionException])
  def synpred6_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:619:4: ( ams_branch_quantity_declaration )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:619:5: ams_branch_quantity_declaration
    pushFollow(FOLLOW_ams_branch_quantity_declaration_in_synpred6_VHDL3098)
    ams_branch_quantity_declaration();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred6_VHDL

  // $ANTLR start synpred7_VHDL
  @throws(classOf[RecognitionException])
  def synpred7_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:13: ( ams_across_aspect )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:627:14: ams_across_aspect
    pushFollow(FOLLOW_ams_across_aspect_in_synpred7_VHDL3165)
    ams_across_aspect();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred7_VHDL

  // $ANTLR start synpred8_VHDL
  @throws(classOf[RecognitionException])
  def synpred8_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:994:2: ( simple_expression direction )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:994:3: simple_expression direction
    pushFollow(FOLLOW_simple_expression_in_synpred8_VHDL5313)
    simple_expression();

    state._fsp -= 1
    if (state.failed) return
    pushFollow(FOLLOW_direction_in_synpred8_VHDL5315)
    direction();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred8_VHDL

  // $ANTLR start synpred9_VHDL
  @throws(classOf[RecognitionException])
  def synpred9_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1009:2: ( range )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1009:3: range
    pushFollow(FOLLOW_range_in_synpred9_VHDL5379)
    range();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred9_VHDL

  // $ANTLR start synpred10_VHDL
  @throws(classOf[RecognitionException])
  def synpred10_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:4: ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )
    var alt284 = 7
    alt284 = dfa284.predict(input)
    alt284 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:5: COMPONENT
        `match`(input, COMPONENT, FOLLOW_COMPONENT_in_synpred10_VHDL5466); if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:17: ENTITY
        `match`(input, ENTITY, FOLLOW_ENTITY_in_synpred10_VHDL5470); if (state.failed) return

      case 3 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:26: CONFIGURATION
        `match`(input, CONFIGURATION, FOLLOW_CONFIGURATION_in_synpred10_VHDL5474); if (state.failed) return

      case 4 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:42: BLOCK
        `match`(input, BLOCK, FOLLOW_BLOCK_in_synpred10_VHDL5478); if (state.failed) return

      case 5 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:50: IF
        `match`(input, IF, FOLLOW_IF_in_synpred10_VHDL5482); if (state.failed) return

      case 6 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:55: FOR
        `match`(input, FOR, FOLLOW_FOR_in_synpred10_VHDL5486); if (state.failed) return

      case 7 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1027:61: component_instantiation_statement[null]
        pushFollow(FOLLOW_component_instantiation_statement_in_synpred10_VHDL5490)
        component_instantiation_statement(null);

        state._fsp -= 1
        if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred10_VHDL

  // $ANTLR start synpred11_VHDL
  @throws(classOf[RecognitionException])
  def synpred11_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1042:5: ( target LEQ | WITH )
    var alt285 = 2
    val LA285_0 = input.LA(1)

    if ((LA285_0 == LPAREN || LA285_0 == STRING_LITERAL || (LA285_0 >= BASIC_IDENTIFIER && LA285_0 <= EXTENDED_IDENTIFIER))) {
      alt285 = 1
    }
    else if ((LA285_0 == WITH)) {
      alt285 = 2
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val nvae = new NoViableAltException("", 285, 0, input)

      throw nvae
    }
    alt285 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1042:6: target LEQ
        pushFollow(FOLLOW_target_in_synpred11_VHDL5604)
        target();

        state._fsp -= 1
        if (state.failed) return
        `match`(input, LEQ, FOLLOW_LEQ_in_synpred11_VHDL5606);
        if (state.failed) return

      case 2 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1042:19: WITH
        `match`(input, WITH, FOLLOW_WITH_in_synpred11_VHDL5610); if (state.failed) return


      case _ =>
    }
  }

  // $ANTLR end synpred11_VHDL

  // $ANTLR start synpred12_VHDL
  @throws(classOf[RecognitionException])
  def synpred12_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1321:4: ( target LEQ )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1321:5: target LEQ
    pushFollow(FOLLOW_target_in_synpred12_VHDL7234)
    target();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, LEQ, FOLLOW_LEQ_in_synpred12_VHDL7236);
    if (state.failed) return


  }

  // $ANTLR end synpred12_VHDL

  // $ANTLR start synpred13_VHDL
  @throws(classOf[RecognitionException])
  def synpred13_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1322:4: ( target VAR_ASSIGN )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1322:5: target VAR_ASSIGN
    pushFollow(FOLLOW_target_in_synpred13_VHDL7248)
    target();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, VAR_ASSIGN, FOLLOW_VAR_ASSIGN_in_synpred13_VHDL7250);
    if (state.failed) return


  }

  // $ANTLR end synpred13_VHDL

  // $ANTLR start synpred14_VHDL
  @throws(classOf[RecognitionException])
  def synpred14_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:2: ( ( CONSTANT )? identifier_list COLON ( IN )? )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:3: ( CONSTANT )? identifier_list COLON ( IN )?
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:3: ( CONSTANT )?
    var alt286 = 2
    val LA286_0 = input.LA(1)

    if ((LA286_0 == CONSTANT)) {
      alt286 = 1
    }
    alt286 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:3: CONSTANT
        `match`(input, CONSTANT, FOLLOW_CONSTANT_in_synpred14_VHDL8176); if (state.failed) return


      case _ =>
    }

    pushFollow(FOLLOW_identifier_list_in_synpred14_VHDL8179)
    identifier_list();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, COLON, FOLLOW_COLON_in_synpred14_VHDL8181);
    if (state.failed) return
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:35: ( IN )?
    var alt287 = 2
    val LA287_0 = input.LA(1)

    if ((LA287_0 == IN)) {
      alt287 = 1
    }
    alt287 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1520:35: IN
        `match`(input, IN, FOLLOW_IN_in_synpred14_VHDL8183); if (state.failed) return


      case _ =>
    }


  }

  // $ANTLR end synpred14_VHDL

  // $ANTLR start synpred15_VHDL
  @throws(classOf[RecognitionException])
  def synpred15_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:4: ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:5: ( VARIABLE )? identifier_list COLON ( OUT | INOUT )?
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:5: ( VARIABLE )?
    var alt288 = 2
    val LA288_0 = input.LA(1)

    if ((LA288_0 == VARIABLE)) {
      alt288 = 1
    }
    alt288 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:5: VARIABLE
        `match`(input, VARIABLE, FOLLOW_VARIABLE_in_synpred15_VHDL8197); if (state.failed) return


      case _ =>
    }

    pushFollow(FOLLOW_identifier_list_in_synpred15_VHDL8200)
    identifier_list();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, COLON, FOLLOW_COLON_in_synpred15_VHDL8202);
    if (state.failed) return
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1521:37: ( OUT | INOUT )?
    var alt289 = 2
    val LA289_0 = input.LA(1)

    if ((LA289_0 == INOUT || LA289_0 == OUT)) {
      alt289 = 1
    }
    alt289 match {
      case 1 =>
      // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:
        if (input.LA(1) == INOUT || input.LA(1) == OUT) {
          input.consume()
          state.errorRecovery = false;
          state.failed = false
        }
        else {
          if (state.backtracking > 0) {
            state.failed = true; return
          }
          val mse = new MismatchedSetException(null, input)
          throw mse

        }


      case _ =>
    }


  }

  // $ANTLR end synpred15_VHDL

  // $ANTLR start synpred16_VHDL
  @throws(classOf[RecognitionException])
  def synpred16_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:3: ( formal_part ARROW )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1614:4: formal_part ARROW
    pushFollow(FOLLOW_formal_part_in_synpred16_VHDL8695)
    formal_part();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, ARROW, FOLLOW_ARROW_in_synpred16_VHDL8697);
    if (state.failed) return


  }

  // $ANTLR end synpred16_VHDL

  // $ANTLR start synpred17_VHDL
  @throws(classOf[RecognitionException])
  def synpred17_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:19: ( name_association_list_part )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1626:20: name_association_list_part
    pushFollow(FOLLOW_name_association_list_part_in_synpred17_VHDL8775)
    name_association_list_part();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred17_VHDL

  // $ANTLR start synpred18_VHDL
  @throws(classOf[RecognitionException])
  def synpred18_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1786:4: ( name_association_list_part )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1786:5: name_association_list_part
    pushFollow(FOLLOW_name_association_list_part_in_synpred18_VHDL9632)
    name_association_list_part();

    state._fsp -= 1
    if (state.failed) return


  }

  // $ANTLR end synpred18_VHDL

  // $ANTLR start synpred19_VHDL
  @throws(classOf[RecognitionException])
  def synpred19_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1806:4: ( LPAREN )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1806:5: LPAREN
    `match`(input, LPAREN, FOLLOW_LPAREN_in_synpred19_VHDL9765);
    if (state.failed) return


  }

  // $ANTLR end synpred19_VHDL

  // $ANTLR start synpred20_VHDL
  @throws(classOf[RecognitionException])
  def synpred20_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1865:4: ( choices ARROW )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1865:5: choices ARROW
    pushFollow(FOLLOW_choices_in_synpred20_VHDL9954)
    choices();

    state._fsp -= 1
    if (state.failed) return
    `match`(input, ARROW, FOLLOW_ARROW_in_synpred20_VHDL9956);
    if (state.failed) return


  }

  // $ANTLR end synpred20_VHDL

  // $ANTLR start synpred21_VHDL
  @throws(classOf[RecognitionException])
  def synpred21_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:2: ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1879:3: identifier ( BAR | ARROW | COMMA | SEMICOLON )
    pushFollow(FOLLOW_identifier_in_synpred21_VHDL10028)
    identifier();

    state._fsp -= 1
    if (state.failed) return
    if (input.LA(1) == ARROW || (input.LA(1) >= SEMICOLON && input.LA(1) <= COMMA) || input.LA(1) == BAR) {
      input.consume()
      state.errorRecovery = false;
      state.failed = false
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val mse = new MismatchedSetException(null, input)
      throw mse

    }


  }

  // $ANTLR end synpred21_VHDL

  // $ANTLR start synpred22_VHDL
  @throws(classOf[RecognitionException])
  def synpred22_VHDL_fragment(): Unit = {
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1880:4: ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\parser\\VHDL.g:1880:5: simple_expression ( BAR | ARROW | COMMA | SEMICOLON )
    pushFollow(FOLLOW_simple_expression_in_synpred22_VHDL10055)
    simple_expression();

    state._fsp -= 1
    if (state.failed) return
    if (input.LA(1) == ARROW || (input.LA(1) >= SEMICOLON && input.LA(1) <= COMMA) || input.LA(1) == BAR) {
      input.consume()
      state.errorRecovery = false;
      state.failed = false
    }
    else {
      if (state.backtracking > 0) {
        state.failed = true; return
      }
      val mse = new MismatchedSetException(null, input)
      throw mse

    }


  }

  // $ANTLR end synpred22_VHDL

  // Delegated rules
  def synpred1_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred1_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred12_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred12_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred2_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred2_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred10_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred10_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred15_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred15_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred4_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred4_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred19_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred19_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred14_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred14_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred6_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred6_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred5_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred5_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred3_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred3_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred8_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred8_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred21_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred21_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred9_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred9_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred18_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred18_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred11_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred11_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred22_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred22_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred17_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred17_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred16_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred16_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred20_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred20_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred7_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred7_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  def synpred13_VHDL(): Boolean = {
    state.backtracking += 1
    val start = input.mark()
    try {
      synpred13_VHDL_fragment() // can never throw exception
    } catch {
      case re: RecognitionException => error("impossible: " + re)
    }
    val success = !state.failed
    input.rewind(start)
    state.backtracking -= 1
    state.failed = false
    success
  }

  final private class DFA17(rec: BaseRecognizer) extends DFA {
    private val DFA17_eotS = "\26\uffff"
    private val DFA17_eofS = "\26\uffff"
    private val DFA17_minS = "\1\7\10\uffff\1\u0094\2\uffff\1\u0094\1\uffff" +
      "\2\70\2\52\4\uffff"
    private val DFA17_maxS = "\1\156\10\uffff\1\u0095\2\uffff\1\u0095\1" +
      "\uffff\4\u0081\4\uffff"
    private val DFA17_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\uffff\1\13\1\14\1\uffff\1\17\4\uffff\1\12\1\11\1\16\1\15"
    private val DFA17_specialS = "\1\0\25\uffff}>"
    private val DFA17_transitionS = Array("\1\10\5\uffff\1\11\10\uffff\1" +
      "\4\1\12\6\uffff\1\7\1\uffff\1\1\2\uffff\1\14\2\uffff\1\1\32\uffff\1\1\2" +
      "\uffff\1\1\13\uffff\1\6\1\5\4\uffff\1\3\3\uffff\1\2\3\uffff\1\13\1\6\6\uffff" +
      "\3\15\4\uffff\2\15",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\16\1\17",
      "",
      "",
      "\1\20\1\21",
      "",
      "\1\22\110\uffff\1\23",
      "\1\22\110\uffff\1\23",
      "\1\25\126\uffff\1\24",
      "\1\25\126\uffff\1\24",
      "",
      "",
      "",
      "")

    private val DFA17_eot = DFA.unpackEncodedString(DFA17_eotS)
    private val DFA17_eof = DFA.unpackEncodedString(DFA17_eofS)
    private val DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS)
    private val DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS)
    private val DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS)
    private val DFA17_special = DFA.unpackEncodedString(DFA17_specialS)
    private val DFA17_transition = new Array[Array[Short]](DFA17_transitionS.length)
    for (i <- DFA17_transition.indices) {
      DFA17_transition(i) = DFA.unpackEncodedString(DFA17_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 17
    this.eot = DFA17_eot
    this.eof = DFA17_eof
    this.min = DFA17_min
    this.max = DFA17_max
    this.accept = DFA17_accept
    this.special = DFA17_special
    this.transition = DFA17_transition

    val description = "351:1: entity_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA17_0 = input.LA(1)


          val index17_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA17_0 == FUNCTION || LA17_0 == IMPURE || LA17_0 == PROCEDURE || LA17_0 == PURE)) {
            s = 1
          }

          else if ((LA17_0 == TYPE)) {
            s = 2
          }

          else if ((LA17_0 == SUBTYPE)) {
            s = 3
          }

          else if ((LA17_0 == CONSTANT)) {
            s = 4
          }

          else if ((LA17_0 == SIGNAL)) {
            s = 5
          }

          else if ((LA17_0 == SHARED || LA17_0 == VARIABLE)) {
            s = 6
          }

          else if ((LA17_0 == FILE)) {
            s = 7
          }

          else if ((LA17_0 == ALIAS)) {
            s = 8
          }

          else if ((LA17_0 == ATTRIBUTE)) {
            s = 9
          }

          else if ((LA17_0 == DISCONNECT)) {
            s = 10
          }

          else if ((LA17_0 == USE)) {
            s = 11
          }

          else if ((LA17_0 == GROUP)) {
            s = 12
          }

          else if (((LA17_0 >= NATURE && LA17_0 <= QUANTITY) || (LA17_0 >= SUBNATURE && LA17_0 <= LIMIT)) && ((ams))) {
            s = 13
          }


          input_.seek(index17_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 17, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA25(rec: BaseRecognizer) extends DFA {
    private val DFA25_eotS = "\22\uffff"
    private val DFA25_eofS = "\22\uffff"
    private val DFA25_minS = "\1\4\17\0\2\uffff"
    private val DFA25_maxS = "\1\u0095\17\0\2\uffff"
    private val DFA25_acceptS = "\20\uffff\1\1\1\2"
    private val DFA25_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1" +
      "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\uffff}>"
    private val DFA25_transitionS = Array("\1\16\56\uffff\1\14\2\uffff\1" +
      "\17\1\13\105\uffff\1\15\6\uffff\1\1\1\2\5\uffff\1\5\1\uffff\1\11\2\uffff" +
      "\1\6\1\7\1\10\1\12\1\3\1\4",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "")

    private val DFA25_eot = DFA.unpackEncodedString(DFA25_eotS)
    private val DFA25_eof = DFA.unpackEncodedString(DFA25_eofS)
    private val DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS)
    private val DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS)
    private val DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS)
    private val DFA25_special = DFA.unpackEncodedString(DFA25_specialS)
    private val DFA25_transition = new Array[Array[Short]](DFA25_transitionS.length)
    for (i <- DFA25_transition.indices) {
      DFA25_transition(i) = DFA.unpackEncodedString(DFA25_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 25
    this.eot = DFA25_eot
    this.eof = DFA25_eof
    this.min = DFA25_min
    this.max = DFA25_max
    this.accept = DFA25_accept
    this.special = DFA25_special
    this.transition = DFA25_transition

    val description = "407:1: block_configuration_index returns [Either[DiscreteRange,Expression] blockIndex] : ( ( discrete_range )=> discrete_range | expression );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA25_1 = input.LA(1)


          val index25_1 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_1)
          if (s >= 0) return s
        case 1 =>
          val LA25_2 = input.LA(1)


          val index25_2 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_2)
          if (s >= 0) return s
        case 2 =>
          val LA25_3 = input.LA(1)


          val index25_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_3)
          if (s >= 0) return s
        case 3 =>
          val LA25_4 = input.LA(1)


          val index25_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_4)
          if (s >= 0) return s
        case 4 =>
          val LA25_5 = input.LA(1)


          val index25_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_5)
          if (s >= 0) return s
        case 5 =>
          val LA25_6 = input.LA(1)


          val index25_6 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_6)
          if (s >= 0) return s
        case 6 =>
          val LA25_7 = input.LA(1)


          val index25_7 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_7)
          if (s >= 0) return s
        case 7 =>
          val LA25_8 = input.LA(1)


          val index25_8 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_8)
          if (s >= 0) return s
        case 8 =>
          val LA25_9 = input.LA(1)


          val index25_9 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_9)
          if (s >= 0) return s
        case 9 =>
          val LA25_10 = input.LA(1)


          val index25_10 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_10)
          if (s >= 0) return s
        case 10 =>
          val LA25_11 = input.LA(1)


          val index25_11 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_11)
          if (s >= 0) return s
        case 11 =>
          val LA25_12 = input.LA(1)


          val index25_12 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_12)
          if (s >= 0) return s
        case 12 =>
          val LA25_13 = input.LA(1)


          val index25_13 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_13)
          if (s >= 0) return s
        case 13 =>
          val LA25_14 = input.LA(1)


          val index25_14 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_14)
          if (s >= 0) return s
        case 14 =>
          val LA25_15 = input.LA(1)


          val index25_15 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred1_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index25_15)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 25, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA36(rec: BaseRecognizer) extends DFA {
    private val DFA36_eotS = "\27\uffff"
    private val DFA36_eofS = "\27\uffff"
    private val DFA36_minS = "\1\7\11\uffff\1\u0094\2\uffff\1\u0094\1\uffff" +
      "\2\70\2\52\4\uffff"
    private val DFA36_maxS = "\1\155\11\uffff\1\u0095\2\uffff\1\u0095\1" +
      "\uffff\4\u0081\4\uffff"
    private val DFA36_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\11\1\uffff\1\14\1\15\1\uffff\1\20\4\uffff\1\13\1\12\1\17\1\16"
    private val DFA36_specialS = "\1\0\26\uffff}>"
    private val DFA36_transitionS = Array("\1\10\5\uffff\1\12\6\uffff\1" +
      "\11\1\uffff\1\4\1\13\6\uffff\1\7\1\uffff\1\1\2\uffff\1\15\2\uffff\1\1\32" +
      "\uffff\1\1\2\uffff\1\1\13\uffff\1\6\1\5\4\uffff\1\3\3\uffff\1\2\3\uffff" +
      "\1\14\1\6\6\uffff\2\16\5\uffff\1\16",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\17\1\20",
      "",
      "",
      "\1\21\1\22",
      "",
      "\1\23\110\uffff\1\24",
      "\1\23\110\uffff\1\24",
      "\1\26\126\uffff\1\25",
      "\1\26\126\uffff\1\25",
      "",
      "",
      "",
      "")

    private val DFA36_eot = DFA.unpackEncodedString(DFA36_eotS)
    private val DFA36_eof = DFA.unpackEncodedString(DFA36_eofS)
    private val DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS)
    private val DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS)
    private val DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS)
    private val DFA36_special = DFA.unpackEncodedString(DFA36_specialS)
    private val DFA36_transition = new Array[Array[Short]](DFA36_transitionS.length)
    for (i <- DFA36_transition.indices) {
      DFA36_transition(i) = DFA.unpackEncodedString(DFA36_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 36
    this.eot = DFA36_eot
    this.eof = DFA36_eof
    this.min = DFA36_min
    this.max = DFA36_max
    this.accept = DFA36_accept
    this.special = DFA36_special
    this.transition = DFA36_transition

    val description = "460:1: package_declarative_item returns [DeclarativeItem item] : ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA36_0 = input.LA(1)


          val index36_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA36_0 == FUNCTION || LA36_0 == IMPURE || LA36_0 == PROCEDURE || LA36_0 == PURE)) {
            s = 1
          }

          else if ((LA36_0 == TYPE)) {
            s = 2
          }

          else if ((LA36_0 == SUBTYPE)) {
            s = 3
          }

          else if ((LA36_0 == CONSTANT)) {
            s = 4
          }

          else if ((LA36_0 == SIGNAL)) {
            s = 5
          }

          else if ((LA36_0 == SHARED || LA36_0 == VARIABLE)) {
            s = 6
          }

          else if ((LA36_0 == FILE)) {
            s = 7
          }

          else if ((LA36_0 == ALIAS)) {
            s = 8
          }

          else if ((LA36_0 == COMPONENT)) {
            s = 9
          }

          else if ((LA36_0 == ATTRIBUTE)) {
            s = 10
          }

          else if ((LA36_0 == DISCONNECT)) {
            s = 11
          }

          else if ((LA36_0 == USE)) {
            s = 12
          }

          else if ((LA36_0 == GROUP)) {
            s = 13
          }

          else if (((LA36_0 >= NATURE && LA36_0 <= TERMINAL) || LA36_0 == SUBNATURE) && ((ams))) {
            s = 14
          }


          input_.seek(index36_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 36, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA40(rec: BaseRecognizer) extends DFA {
    private val DFA40_eotS = "\17\uffff"
    private val DFA40_eofS = "\17\uffff"
    private val DFA40_minS = "\1\7\11\uffff\1\u0094\2\52\2\uffff"
    private val DFA40_maxS = "\1\137\11\uffff\1\u0095\2\u0081\2\uffff"
    private val DFA40_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\11\3\uffff\1\12\1\13"
    private val DFA40_specialS = "\17\uffff}>"
    private val DFA40_transitionS = Array("\1\7\5\uffff\1\11\10\uffff\1" +
      "\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1\32\uffff\1\1\2\uffff" +
      "\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\10\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\13\1\14",
      "\1\15\126\uffff\1\16",
      "\1\15\126\uffff\1\16",
      "",
      "")

    private val DFA40_eot = DFA.unpackEncodedString(DFA40_eotS)
    private val DFA40_eof = DFA.unpackEncodedString(DFA40_eofS)
    private val DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS)
    private val DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS)
    private val DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS)
    private val DFA40_special = DFA.unpackEncodedString(DFA40_specialS)
    private val DFA40_transition = new Array[Array[Short]](DFA40_transitionS.length)
    for (i <- DFA40_transition.indices) {
      DFA40_transition(i) = DFA.unpackEncodedString(DFA40_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 40
    this.eot = DFA40_eot
    this.eof = DFA40_eof
    this.min = DFA40_min
    this.max = DFA40_max
    this.accept = DFA40_accept
    this.special = DFA40_special
    this.transition = DFA40_transition

    val description = "495:1: package_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration );"

  }

  final private class DFA50(rec: BaseRecognizer) extends DFA {
    private val DFA50_eotS = "\23\uffff"
    private val DFA50_eofS = "\23\uffff"
    private val DFA50_minS = "\1\7\7\uffff\1\u0094\1\uffff\1\u0094\2\70" +
      "\2\52\4\uffff"
    private val DFA50_maxS = "\1\137\7\uffff\1\u0095\1\uffff\1\u0095\4\u0081" +
      "\4\uffff"
    private val DFA50_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\uffff\1\12\5\uffff\1\11\1\10\1\14\1\13"
    private val DFA50_specialS = "\23\uffff}>"
    private val DFA50_transitionS = Array("\1\7\5\uffff\1\10\10\uffff\1" +
      "\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1\32\uffff\1\1\2\uffff" +
      "\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\11\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\13\1\14",
      "",
      "\1\15\1\16",
      "\1\17\110\uffff\1\20",
      "\1\17\110\uffff\1\20",
      "\1\22\126\uffff\1\21",
      "\1\22\126\uffff\1\21",
      "",
      "",
      "",
      "")

    private val DFA50_eot = DFA.unpackEncodedString(DFA50_eotS)
    private val DFA50_eof = DFA.unpackEncodedString(DFA50_eofS)
    private val DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS)
    private val DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS)
    private val DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS)
    private val DFA50_special = DFA.unpackEncodedString(DFA50_specialS)
    private val DFA50_transition = new Array[Array[Short]](DFA50_transitionS.length)
    for (i <- DFA50_transition.indices) {
      DFA50_transition(i) = DFA.unpackEncodedString(DFA50_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 50
    this.eot = DFA50_eot
    this.eof = DFA50_eof
    this.min = DFA50_min
    this.max = DFA50_max
    this.accept = DFA50_accept
    this.special = DFA50_special
    this.transition = DFA50_transition

    val description = "562:1: subprogram_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

  }

  final private class DFA52(rec: BaseRecognizer) extends DFA {
    private val DFA52_eotS = "\14\uffff"
    private val DFA52_eofS = "\14\uffff"
    private val DFA52_minS = "\1\5\1\uffff\1\0\4\uffff\1\0\4\uffff"
    private val DFA52_maxS = "\1\175\1\uffff\1\0\4\uffff\1\0\4\uffff"
    private val DFA52_acceptS = "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1" +
      "\uffff\1\2\1\3\1\10\1\11"
    private val DFA52_specialS = "\2\uffff\1\0\4\uffff\1\1\4\uffff}>"
    private val DFA52_transitionS = Array("\1\5\5\uffff\1\3\22\uffff\1\6" +
      "\44\uffff\1\7\1\uffff\1\2\1\4\66\uffff\1\1",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "\1\uffff",
      "",
      "",
      "",
      "")

    private val DFA52_eot = DFA.unpackEncodedString(DFA52_eotS)
    private val DFA52_eof = DFA.unpackEncodedString(DFA52_eofS)
    private val DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS)
    private val DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS)
    private val DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS)
    private val DFA52_special = DFA.unpackEncodedString(DFA52_specialS)
    private val DFA52_transition = new Array[Array[Short]](DFA52_transitionS.length)
    for (i <- DFA52_transition.indices) {
      DFA52_transition(i) = DFA.unpackEncodedString(DFA52_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 52
    this.eot = DFA52_eot
    this.eof = DFA52_eof
    this.min = DFA52_min
    this.max = DFA52_max
    this.accept = DFA52_accept
    this.special = DFA52_special
    this.transition = DFA52_transition

    val description = "593:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA52_2 = input.LA(1)


          val index52_2 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred3_VHDL())) {
            s = 8
          }

          else if ((true)) {
            s = 9
          }


          input_.seek(index52_2)
          if (s >= 0) return s
        case 1 =>
          val LA52_7 = input.LA(1)


          val index52_7 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred4_VHDL())) {
            s = 10
          }

          else if ((true)) {
            s = 11
          }


          input_.seek(index52_7)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 52, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA83(rec: BaseRecognizer) extends DFA {
    private val DFA83_eotS = "\23\uffff"
    private val DFA83_eofS = "\23\uffff"
    private val DFA83_minS = "\1\12\22\uffff"
    private val DFA83_maxS = "\1\155\22\uffff"
    private val DFA83_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
    private val DFA83_specialS = "\1\0\22\uffff}>"
    private val DFA83_transitionS = Array("\1\2\11\uffff\1\15\1\3\1\11\5" +
      "\uffff\1\1\1\uffff\1\14\1\uffff\1\6\2\uffff\1\21\7\uffff\1\16\2\uffff\1" +
      "\17\17\uffff\1\4\2\uffff\1\5\17\uffff\1\12\4\uffff\1\10\3\uffff\1\7\1\uffff" +
      "\1\20\2\uffff\1\13\6\uffff\3\22\4\uffff\1\22",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA83_eot = DFA.unpackEncodedString(DFA83_eotS)
    private val DFA83_eof = DFA.unpackEncodedString(DFA83_eofS)
    private val DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS)
    private val DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS)
    private val DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS)
    private val DFA83_special = DFA.unpackEncodedString(DFA83_specialS)
    private val DFA83_transition = new Array[Array[Short]](DFA83_transitionS.length)
    for (i <- DFA83_transition.indices) {
      DFA83_transition(i) = DFA.unpackEncodedString(DFA83_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 83
    this.eot = DFA83_eot
    this.eof = DFA83_eof
    this.min = DFA83_min
    this.max = DFA83_max
    this.accept = DFA83_accept
    this.special = DFA83_special
    this.transition = DFA83_transition

    val description = "721:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA83_0 = input.LA(1)


          val index83_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA83_0 == ENTITY)) {
            s = 1
          }

          else if ((LA83_0 == ARCHITECTURE)) {
            s = 2
          }

          else if ((LA83_0 == CONFIGURATION)) {
            s = 3
          }

          else if ((LA83_0 == PACKAGE)) {
            s = 4
          }

          else if ((LA83_0 == PROCEDURE)) {
            s = 5
          }

          else if ((LA83_0 == FUNCTION)) {
            s = 6
          }

          else if ((LA83_0 == TYPE)) {
            s = 7
          }

          else if ((LA83_0 == SUBTYPE)) {
            s = 8
          }

          else if ((LA83_0 == CONSTANT)) {
            s = 9
          }

          else if ((LA83_0 == SIGNAL)) {
            s = 10
          }

          else if ((LA83_0 == VARIABLE)) {
            s = 11
          }

          else if ((LA83_0 == FILE)) {
            s = 12
          }

          else if ((LA83_0 == COMPONENT)) {
            s = 13
          }

          else if ((LA83_0 == LABEL)) {
            s = 14
          }

          else if ((LA83_0 == LITERAL)) {
            s = 15
          }

          else if ((LA83_0 == UNITS)) {
            s = 16
          }

          else if ((LA83_0 == GROUP)) {
            s = 17
          }

          else if (((LA83_0 >= NATURE && LA83_0 <= QUANTITY) || LA83_0 == SUBNATURE) && ((ams))) {
            s = 18
          }


          input_.seek(index83_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 83, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA101(rec: BaseRecognizer) extends DFA {
    private val DFA101_eotS = "\16\uffff"
    private val DFA101_eofS = "\16\uffff"
    private val DFA101_minS = "\1\175\1\4\3\30\1\uffff\1\10\1\4\5\30\1\uffff"
    private val DFA101_maxS = "\1\175\4\u0095\1\uffff\7\u0095\1\uffff"
    private val DFA101_acceptS = "\5\uffff\1\2\7\uffff\1\1"
    private val DFA101_specialS = "\16\uffff}>"
    private val DFA101_transitionS = Array("\1\1",
      "\1\5\56\uffff\1\5\2\uffff\2\5\105\uffff\1\5\6\uffff\2\5\5\uffff\1\4\1" +
        "\uffff\1\5\2\uffff\4\5\1\2\1\3",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "",
      "\1\14\u0082\uffff\1\13\1\uffff\1\12\6\uffff\1\10\1\11",
      "\1\5\56\uffff\1\5\2\uffff\2\5\100\uffff\1\15\4\uffff\1\5\6\uffff\2\5\5" +
        "\uffff\1\5\1\uffff\1\5\2\uffff\6\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1\5\11" +
        "\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
      "")

    private val DFA101_eot = DFA.unpackEncodedString(DFA101_eotS)
    private val DFA101_eof = DFA.unpackEncodedString(DFA101_eofS)
    private val DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS)
    private val DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS)
    private val DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS)
    private val DFA101_special = DFA.unpackEncodedString(DFA101_specialS)
    private val DFA101_transition = new Array[Array[Short]](DFA101_transitionS.length)
    for (i <- DFA101_transition.indices) {
      DFA101_transition(i) = DFA.unpackEncodedString(DFA101_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 101
    this.eot = DFA101_eot
    this.eof = DFA101_eof
    this.min = DFA101_min
    this.max = DFA101_max
    this.accept = DFA101_accept
    this.special = DFA101_special
    this.transition = DFA101_transition

    val description = "856:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"

  }

  final private class DFA105(rec: BaseRecognizer) extends DFA {
    private val DFA105_eotS = "\16\uffff"
    private val DFA105_eofS = "\16\uffff"
    private val DFA105_minS = "\1\175\1\4\1\uffff\3\30\1\10\1\4\5\30\1\uffff"
    private val DFA105_maxS = "\1\175\1\u0095\1\uffff\12\u0095\1\uffff"
    private val DFA105_acceptS = "\2\uffff\1\2\12\uffff\1\1"
    private val DFA105_specialS = "\16\uffff}>"
    private val DFA105_transitionS = Array("\1\1",
      "\1\2\56\uffff\1\2\2\uffff\2\2\105\uffff\1\2\6\uffff\2\2\5\uffff\1\5\1" +
        "\uffff\1\2\2\uffff\4\2\1\3\1\4",
      "",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\14\u0082\uffff\1\13\1\uffff\1\12\6\uffff\1\10\1\11",
      "\1\2\56\uffff\1\2\2\uffff\2\2\100\uffff\1\15\4\uffff\1\2\6\uffff\2\2\5" +
        "\uffff\1\2\1\uffff\1\2\2\uffff\6\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "\1\2\30\uffff\1\2\23\uffff\1\7\3\uffff\1\2\16\uffff\1\2\30\uffff\1\2\11" +
        "\uffff\5\2\2\uffff\4\2\4\uffff\1\6\1\2\3\uffff\1\2\4\uffff\2\2",
      "")

    private val DFA105_eot = DFA.unpackEncodedString(DFA105_eotS)
    private val DFA105_eof = DFA.unpackEncodedString(DFA105_eofS)
    private val DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS)
    private val DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS)
    private val DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS)
    private val DFA105_special = DFA.unpackEncodedString(DFA105_specialS)
    private val DFA105_transition = new Array[Array[Short]](DFA105_transitionS.length)
    for (i <- DFA105_transition.indices) {
      DFA105_transition(i) = DFA.unpackEncodedString(DFA105_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 105
    this.eot = DFA105_eot
    this.eof = DFA105_eof
    this.min = DFA105_min
    this.max = DFA105_max
    this.accept = DFA105_accept
    this.special = DFA105_special
    this.transition = DFA105_transition

    val description = "894:8: ( LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN | index_constraint )"

  }

  final private class DFA115(rec: BaseRecognizer) extends DFA {
    private val DFA115_eotS = "\23\uffff"
    private val DFA115_eofS = "\23\uffff"
    private val DFA115_minS = "\1\7\7\uffff\1\u0094\1\uffff\1\u0094\2\70" +
      "\2\52\4\uffff"
    private val DFA115_maxS = "\1\137\7\uffff\1\u0095\1\uffff\1\u0095\4" +
      "\u0081\4\uffff"
    private val DFA115_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\uffff\1\12\5\uffff\1\10\1\11\1\13\1\14"
    private val DFA115_specialS = "\23\uffff}>"
    private val DFA115_transitionS = Array("\1\7\5\uffff\1\10\10\uffff\1" +
      "\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1\32\uffff\1\1\2\uffff" +
      "\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\11\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\13\1\14",
      "",
      "\1\15\1\16",
      "\1\20\110\uffff\1\17",
      "\1\20\110\uffff\1\17",
      "\1\21\126\uffff\1\22",
      "\1\21\126\uffff\1\22",
      "",
      "",
      "",
      "")

    private val DFA115_eot = DFA.unpackEncodedString(DFA115_eotS)
    private val DFA115_eof = DFA.unpackEncodedString(DFA115_eofS)
    private val DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS)
    private val DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS)
    private val DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS)
    private val DFA115_special = DFA.unpackEncodedString(DFA115_specialS)
    private val DFA115_transition = new Array[Array[Short]](DFA115_transitionS.length)
    for (i <- DFA115_transition.indices) {
      DFA115_transition(i) = DFA.unpackEncodedString(DFA115_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 115
    this.eot = DFA115_eot
    this.eof = DFA115_eof
    this.min = DFA115_min
    this.max = DFA115_max
    this.accept = DFA115_accept
    this.special = DFA115_special
    this.transition = DFA115_transition

    val description = "951:1: protected_type_body_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

  }

  final private class DFA120(rec: BaseRecognizer) extends DFA {
    private val DFA120_eotS = "\21\uffff"
    private val DFA120_eofS = "\21\uffff"
    private val DFA120_minS = "\1\4\2\uffff\3\0\13\uffff"
    private val DFA120_maxS = "\1\u0095\2\uffff\3\0\13\uffff"
    private val DFA120_acceptS = "\1\uffff\2\1\3\uffff\12\1\1\2"
    private val DFA120_specialS = "\1\0\2\uffff\1\1\1\2\1\3\13\uffff}>"
    private val DFA120_transitionS = Array("\1\16\56\uffff\1\14\2\uffff" +
      "\1\17\1\13\105\uffff\1\15\6\uffff\1\1\1\2\5\uffff\1\5\1\uffff\1\11\2\uffff" +
      "\1\6\1\7\1\10\1\12\1\3\1\4",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA120_eot = DFA.unpackEncodedString(DFA120_eotS)
    private val DFA120_eof = DFA.unpackEncodedString(DFA120_eofS)
    private val DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS)
    private val DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS)
    private val DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS)
    private val DFA120_special = DFA.unpackEncodedString(DFA120_specialS)
    private val DFA120_transition = new Array[Array[Short]](DFA120_transitionS.length)
    for (i <- DFA120_transition.indices) {
      DFA120_transition(i) = DFA.unpackEncodedString(DFA120_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 120
    this.eot = DFA120_eot
    this.eof = DFA120_eof
    this.min = DFA120_min
    this.max = DFA120_max
    this.accept = DFA120_accept
    this.special = DFA120_special
    this.transition = DFA120_transition

    val description = "993:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA120_0 = input.LA(1)


          val index120_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA120_0 == PLUS) && (synpred8_VHDL())) {
            s = 1
          }

          else if ((LA120_0 == MINUS) && (synpred8_VHDL())) {
            s = 2
          }

          else if ((LA120_0 == BASIC_IDENTIFIER)) {
            s = 3
          }

          else if ((LA120_0 == EXTENDED_IDENTIFIER)) {
            s = 4
          }

          else if ((LA120_0 == STRING_LITERAL)) {
            s = 5
          }

          else if ((LA120_0 == REAL_LITERAL) && (synpred8_VHDL())) {
            s = 6
          }

          else if ((LA120_0 == INTEGER_LITERAL) && (synpred8_VHDL())) {
            s = 7
          }

          else if ((LA120_0 == BASED_LITERAL) && (synpred8_VHDL())) {
            s = 8
          }

          else if ((LA120_0 == CHARACTER_LITERAL) && (synpred8_VHDL())) {
            s = 9
          }

          else if ((LA120_0 == BIT_STRING_LITERAL) && (synpred8_VHDL())) {
            s = 10
          }

          else if ((LA120_0 == NULL) && (synpred8_VHDL())) {
            s = 11
          }

          else if ((LA120_0 == NEW) && (synpred8_VHDL())) {
            s = 12
          }

          else if ((LA120_0 == LPAREN) && (synpred8_VHDL())) {
            s = 13
          }

          else if ((LA120_0 == ABS) && (synpred8_VHDL())) {
            s = 14
          }

          else if ((LA120_0 == NOT) && (synpred8_VHDL())) {
            s = 15
          }


          input_.seek(index120_0)
          if (s >= 0) return s
        case 1 =>
          val LA120_3 = input.LA(1)


          val index120_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred8_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index120_3)
          if (s >= 0) return s
        case 2 =>
          val LA120_4 = input.LA(1)


          val index120_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred8_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index120_4)
          if (s >= 0) return s
        case 3 =>
          val LA120_5 = input.LA(1)


          val index120_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred8_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index120_5)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 120, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA122(rec: BaseRecognizer) extends DFA {
    private val DFA122_eotS = "\21\uffff"
    private val DFA122_eofS = "\21\uffff"
    private val DFA122_minS = "\1\4\2\uffff\3\0\13\uffff"
    private val DFA122_maxS = "\1\u0095\2\uffff\3\0\13\uffff"
    private val DFA122_acceptS = "\1\uffff\2\1\3\uffff\12\1\1\2"
    private val DFA122_specialS = "\1\3\2\uffff\1\0\1\1\1\2\13\uffff}>"
    private val DFA122_transitionS = Array("\1\16\56\uffff\1\14\2\uffff" +
      "\1\17\1\13\105\uffff\1\15\6\uffff\1\1\1\2\5\uffff\1\5\1\uffff\1\11\2\uffff" +
      "\1\6\1\7\1\10\1\12\1\3\1\4",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA122_eot = DFA.unpackEncodedString(DFA122_eotS)
    private val DFA122_eof = DFA.unpackEncodedString(DFA122_eofS)
    private val DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS)
    private val DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS)
    private val DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS)
    private val DFA122_special = DFA.unpackEncodedString(DFA122_specialS)
    private val DFA122_transition = new Array[Array[Short]](DFA122_transitionS.length)
    for (i <- DFA122_transition.indices) {
      DFA122_transition(i) = DFA.unpackEncodedString(DFA122_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 122
    this.eot = DFA122_eot
    this.eof = DFA122_eof
    this.min = DFA122_min
    this.max = DFA122_max
    this.accept = DFA122_accept
    this.special = DFA122_special
    this.transition = DFA122_transition

    val description = "1008:1: discrete_range returns [DiscreteRange discreteRange] : ( ( range )=> range | subtype_indication );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA122_3 = input.LA(1)


          val index122_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred9_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index122_3)
          if (s >= 0) return s
        case 1 =>
          val LA122_4 = input.LA(1)


          val index122_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred9_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index122_4)
          if (s >= 0) return s
        case 2 =>
          val LA122_5 = input.LA(1)


          val index122_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred9_VHDL())) {
            s = 15
          }

          else if ((true)) {
            s = 16
          }


          input_.seek(index122_5)
          if (s >= 0) return s
        case 3 =>
          val LA122_0 = input.LA(1)


          val index122_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA122_0 == PLUS) && (synpred9_VHDL())) {
            s = 1
          }

          else if ((LA122_0 == MINUS) && (synpred9_VHDL())) {
            s = 2
          }

          else if ((LA122_0 == BASIC_IDENTIFIER)) {
            s = 3
          }

          else if ((LA122_0 == EXTENDED_IDENTIFIER)) {
            s = 4
          }

          else if ((LA122_0 == STRING_LITERAL)) {
            s = 5
          }

          else if ((LA122_0 == REAL_LITERAL) && (synpred9_VHDL())) {
            s = 6
          }

          else if ((LA122_0 == INTEGER_LITERAL) && (synpred9_VHDL())) {
            s = 7
          }

          else if ((LA122_0 == BASED_LITERAL) && (synpred9_VHDL())) {
            s = 8
          }

          else if ((LA122_0 == CHARACTER_LITERAL) && (synpred9_VHDL())) {
            s = 9
          }

          else if ((LA122_0 == BIT_STRING_LITERAL) && (synpred9_VHDL())) {
            s = 10
          }

          else if ((LA122_0 == NULL) && (synpred9_VHDL())) {
            s = 11
          }

          else if ((LA122_0 == NEW) && (synpred9_VHDL())) {
            s = 12
          }

          else if ((LA122_0 == LPAREN) && (synpred9_VHDL())) {
            s = 13
          }

          else if ((LA122_0 == ABS) && (synpred9_VHDL())) {
            s = 14
          }

          else if ((LA122_0 == NOT) && (synpred9_VHDL())) {
            s = 15
          }


          input_.seek(index122_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 122, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA124(rec: BaseRecognizer) extends DFA {
    private val DFA124_eotS = "\26\uffff"
    private val DFA124_eofS = "\26\uffff"
    private val DFA124_minS = "\1\14\1\uffff\3\42\7\uffff\1\10\1\uffff\1" +
      "\0\2\uffff\5\42"
    private val DFA124_maxS = "\1\u0095\1\uffff\3\u008f\7\uffff\1\u0095" +
      "\1\uffff\1\0\2\uffff\5\u008f"
    private val DFA124_acceptS = "\1\uffff\1\1\3\uffff\5\1\2\2\1\uffff\1" +
      "\2\1\uffff\2\1\5\uffff"
    private val DFA124_specialS = "\1\10\1\uffff\1\4\1\6\1\11\11\uffff\1" +
      "\0\2\uffff\1\3\1\1\1\7\1\5\1\2}>"
    private val DFA124_transitionS = Array("\1\12\2\uffff\1\7\4\uffff\1" +
      "\1\1\6\6\uffff\1\5\2\uffff\1\10\5\uffff\1\11\32\uffff\1\12\1\uffff\1\12" +
      "\40\uffff\1\12\31\uffff\1\12\15\uffff\1\4\2\uffff\1\13\5\uffff\1\2\1\3",
      "",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\25\u0082\uffff\1\24\1\uffff\1\23\6\uffff\1\21\1\22",
      "",
      "\1\uffff",
      "",
      "",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15",
      "\1\17\34\uffff\1\20\63\uffff\1\15\6\uffff\1\16\2\uffff\1\15\1\uffff\1" +
        "\15\12\uffff\1\14\4\uffff\1\15")

    private val DFA124_eot = DFA.unpackEncodedString(DFA124_eotS)
    private val DFA124_eof = DFA.unpackEncodedString(DFA124_eofS)
    private val DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS)
    private val DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS)
    private val DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS)
    private val DFA124_special = DFA.unpackEncodedString(DFA124_specialS)
    private val DFA124_transition = new Array[Array[Short]](DFA124_transitionS.length)
    for (i <- DFA124_transition.indices) {
      DFA124_transition(i) = DFA.unpackEncodedString(DFA124_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 124
    this.eot = DFA124_eot
    this.eof = DFA124_eof
    this.min = DFA124_min
    this.max = DFA124_max
    this.accept = DFA124_accept
    this.special = DFA124_special
    this.transition = DFA124_transition

    val description = "1026:22: ( ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] )=> concurrent_statement_with_label[$label.label] | concurrent_statement_optional_label[$label.label] )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA124_14 = input.LA(1)


          val index124_14 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred10_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 13
          }


          input_.seek(index124_14)
          if (s >= 0) return s
        case 1 =>
          val LA124_18 = input.LA(1)


          val index124_18 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_18 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_18 == PORT) && (synpred10_VHDL())) {
            s = 16
          }

          else if ((LA124_18 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_18 == DOT)) {
            s = 12
          }

          else if ((LA124_18 == LEQ || LA124_18 == LPAREN || LA124_18 == LBRACKET || LA124_18 == APOSTROPHE)) {
            s = 13
          }


          input_.seek(index124_18)
          if (s >= 0) return s
        case 2 =>
          val LA124_21 = input.LA(1)


          val index124_21 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_21 == LEQ || LA124_21 == LPAREN || LA124_21 == LBRACKET || LA124_21 == APOSTROPHE)) {
            s = 13
          }

          else if ((LA124_21 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_21 == DOT)) {
            s = 12
          }

          else if ((LA124_21 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_21 == PORT) && (synpred10_VHDL())) {
            s = 16
          }


          input_.seek(index124_21)
          if (s >= 0) return s
        case 3 =>
          val LA124_17 = input.LA(1)


          val index124_17 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_17 == LEQ || LA124_17 == LPAREN || LA124_17 == LBRACKET || LA124_17 == APOSTROPHE)) {
            s = 13
          }

          else if ((LA124_17 == DOT)) {
            s = 12
          }

          else if ((LA124_17 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_17 == PORT) && (synpred10_VHDL())) {
            s = 16
          }

          else if ((LA124_17 == SEMICOLON)) {
            s = 14
          }


          input_.seek(index124_17)
          if (s >= 0) return s
        case 4 =>
          val LA124_2 = input.LA(1)


          val index124_2 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_2 == DOT)) {
            s = 12
          }

          else if ((LA124_2 == LEQ || LA124_2 == LPAREN || LA124_2 == LBRACKET || LA124_2 == APOSTROPHE)) {
            s = 13
          }

          else if ((LA124_2 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_2 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_2 == PORT) && (synpred10_VHDL())) {
            s = 16
          }


          input_.seek(index124_2)
          if (s >= 0) return s
        case 5 =>
          val LA124_20 = input.LA(1)


          val index124_20 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_20 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_20 == PORT) && (synpred10_VHDL())) {
            s = 16
          }

          else if ((LA124_20 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_20 == DOT)) {
            s = 12
          }

          else if ((LA124_20 == LEQ || LA124_20 == LPAREN || LA124_20 == LBRACKET || LA124_20 == APOSTROPHE)) {
            s = 13
          }


          input_.seek(index124_20)
          if (s >= 0) return s
        case 6 =>
          val LA124_3 = input.LA(1)


          val index124_3 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_3 == DOT)) {
            s = 12
          }

          else if ((LA124_3 == LEQ || LA124_3 == LPAREN || LA124_3 == LBRACKET || LA124_3 == APOSTROPHE)) {
            s = 13
          }

          else if ((LA124_3 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_3 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_3 == PORT) && (synpred10_VHDL())) {
            s = 16
          }


          input_.seek(index124_3)
          if (s >= 0) return s
        case 7 =>
          val LA124_19 = input.LA(1)


          val index124_19 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_19 == LEQ || LA124_19 == LPAREN || LA124_19 == LBRACKET || LA124_19 == APOSTROPHE)) {
            s = 13
          }

          else if ((LA124_19 == DOT)) {
            s = 12
          }

          else if ((LA124_19 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_19 == PORT) && (synpred10_VHDL())) {
            s = 16
          }

          else if ((LA124_19 == SEMICOLON)) {
            s = 14
          }


          input_.seek(index124_19)
          if (s >= 0) return s
        case 8 =>
          val LA124_0 = input.LA(1)


          val index124_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_0 == COMPONENT) && (synpred10_VHDL())) {
            s = 1
          }

          else if ((LA124_0 == BASIC_IDENTIFIER)) {
            s = 2
          }

          else if ((LA124_0 == EXTENDED_IDENTIFIER)) {
            s = 3
          }

          else if ((LA124_0 == STRING_LITERAL)) {
            s = 4
          }

          else if ((LA124_0 == ENTITY) && (synpred10_VHDL())) {
            s = 5
          }

          else if ((LA124_0 == CONFIGURATION) && (synpred10_VHDL())) {
            s = 6
          }

          else if ((LA124_0 == BLOCK) && (synpred10_VHDL())) {
            s = 7
          }

          else if ((LA124_0 == FOR) && (synpred10_VHDL())) {
            s = 8
          }

          else if ((LA124_0 == IF) && (synpred10_VHDL())) {
            s = 9
          }

          else if ((LA124_0 == ASSERT || LA124_0 == POSTPONED || LA124_0 == PROCESS || LA124_0 == WITH || LA124_0 == LPAREN)) {
            s = 10
          }

          else if ((LA124_0 == BREAK) && ((ams))) {
            s = 11
          }


          input_.seek(index124_0)
          if (s >= 0) return s
        case 9 =>
          val LA124_4 = input.LA(1)


          val index124_4 = input_.index()
          input_.rewind()
          s = -1
          if ((LA124_4 == DOT)) {
            s = 12
          }

          else if ((LA124_4 == GENERIC) && (synpred10_VHDL())) {
            s = 15
          }

          else if ((LA124_4 == PORT) && (synpred10_VHDL())) {
            s = 16
          }

          else if ((LA124_4 == SEMICOLON)) {
            s = 14
          }

          else if ((LA124_4 == LEQ || LA124_4 == LPAREN || LA124_4 == LBRACKET || LA124_4 == APOSTROPHE)) {
            s = 13
          }


          input_.seek(index124_4)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 124, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA139(rec: BaseRecognizer) extends DFA {
    private val DFA139_eotS = "\30\uffff"
    private val DFA139_eofS = "\30\uffff"
    private val DFA139_minS = "\1\7\11\uffff\1\u0094\3\uffff\1\u0094\1\uffff" +
      "\2\70\2\52\4\uffff"
    private val DFA139_maxS = "\1\156\11\uffff\1\u0095\3\uffff\1\u0095\1" +
      "\uffff\4\u0081\4\uffff"
    private val DFA139_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\10\1\11\1\uffff\1\14\1\15\1\16\1\uffff\1\21\4\uffff\1\12\1\13\1\20" +
      "\1\17"
    private val DFA139_specialS = "\1\0\27\uffff}>"
    private val DFA139_transitionS = Array("\1\10\5\uffff\1\12\6\uffff\1" +
      "\11\1\uffff\1\4\1\14\6\uffff\1\7\1\13\1\1\2\uffff\1\16\2\uffff\1\1\32\uffff" +
      "\1\1\2\uffff\1\1\13\uffff\1\6\1\5\4\uffff\1\3\3\uffff\1\2\3\uffff\1\15\1" +
      "\6\6\uffff\3\17\4\uffff\2\17",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\20\1\21",
      "",
      "",
      "",
      "\1\22\1\23",
      "",
      "\1\25\110\uffff\1\24",
      "\1\25\110\uffff\1\24",
      "\1\27\126\uffff\1\26",
      "\1\27\126\uffff\1\26",
      "",
      "",
      "",
      "")

    private val DFA139_eot = DFA.unpackEncodedString(DFA139_eotS)
    private val DFA139_eof = DFA.unpackEncodedString(DFA139_eofS)
    private val DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS)
    private val DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS)
    private val DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS)
    private val DFA139_special = DFA.unpackEncodedString(DFA139_specialS)
    private val DFA139_transition = new Array[Array[Short]](DFA139_transitionS.length)
    for (i <- DFA139_transition.indices) {
      DFA139_transition(i) = DFA.unpackEncodedString(DFA139_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 139
    this.eot = DFA139_eot
    this.eof = DFA139_eof
    this.min = DFA139_min
    this.max = DFA139_max
    this.accept = DFA139_accept
    this.special = DFA139_special
    this.transition = DFA139_transition

    val description = "1075:1: block_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA139_0 = input.LA(1)


          val index139_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA139_0 == FUNCTION || LA139_0 == IMPURE || LA139_0 == PROCEDURE || LA139_0 == PURE)) {
            s = 1
          }

          else if ((LA139_0 == TYPE)) {
            s = 2
          }

          else if ((LA139_0 == SUBTYPE)) {
            s = 3
          }

          else if ((LA139_0 == CONSTANT)) {
            s = 4
          }

          else if ((LA139_0 == SIGNAL)) {
            s = 5
          }

          else if ((LA139_0 == SHARED || LA139_0 == VARIABLE)) {
            s = 6
          }

          else if ((LA139_0 == FILE)) {
            s = 7
          }

          else if ((LA139_0 == ALIAS)) {
            s = 8
          }

          else if ((LA139_0 == COMPONENT)) {
            s = 9
          }

          else if ((LA139_0 == ATTRIBUTE)) {
            s = 10
          }

          else if ((LA139_0 == FOR)) {
            s = 11
          }

          else if ((LA139_0 == DISCONNECT)) {
            s = 12
          }

          else if ((LA139_0 == USE)) {
            s = 13
          }

          else if ((LA139_0 == GROUP)) {
            s = 14
          }

          else if (((LA139_0 >= NATURE && LA139_0 <= QUANTITY) || (LA139_0 >= SUBNATURE && LA139_0 <= LIMIT)) && ((ams))) {
            s = 15
          }


          input_.seek(index139_0)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 139, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA145(rec: BaseRecognizer) extends DFA {
    private val DFA145_eotS = "\23\uffff"
    private val DFA145_eofS = "\23\uffff"
    private val DFA145_minS = "\1\7\7\uffff\1\u0094\1\uffff\1\u0094\2\70" +
      "\2\52\4\uffff"
    private val DFA145_maxS = "\1\137\7\uffff\1\u0095\1\uffff\1\u0095\4" +
      "\u0081\4\uffff"
    private val DFA145_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1" +
      "\uffff\1\12\5\uffff\1\10\1\11\1\13\1\14"
    private val DFA145_specialS = "\23\uffff}>"
    private val DFA145_transitionS = Array("\1\7\5\uffff\1\10\10\uffff\1" +
      "\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1\32\uffff\1\1\2\uffff" +
      "\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\11\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\13\1\14",
      "",
      "\1\15\1\16",
      "\1\20\110\uffff\1\17",
      "\1\20\110\uffff\1\17",
      "\1\21\126\uffff\1\22",
      "\1\21\126\uffff\1\22",
      "",
      "",
      "",
      "")

    private val DFA145_eot = DFA.unpackEncodedString(DFA145_eotS)
    private val DFA145_eof = DFA.unpackEncodedString(DFA145_eofS)
    private val DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS)
    private val DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS)
    private val DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS)
    private val DFA145_special = DFA.unpackEncodedString(DFA145_specialS)
    private val DFA145_transition = new Array[Array[Short]](DFA145_transitionS.length)
    for (i <- DFA145_transition.indices) {
      DFA145_transition(i) = DFA.unpackEncodedString(DFA145_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 145
    this.eot = DFA145_eot
    this.eof = DFA145_eof
    this.min = DFA145_min
    this.max = DFA145_max
    this.accept = DFA145_accept
    this.special = DFA145_special
    this.transition = DFA145_transition

    val description = "1116:1: process_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

  }

  final private class DFA183(rec: BaseRecognizer) extends DFA {
    private val DFA183_eotS = "\22\uffff"
    private val DFA183_eofS = "\22\uffff"
    private val DFA183_minS = "\1\7\6\uffff\1\u0094\1\uffff\1\u0094\2\70" +
      "\2\52\4\uffff"
    private val DFA183_maxS = "\1\137\6\uffff\1\u0095\1\uffff\1\u0095\4" +
      "\u0081\4\uffff"
    private val DFA183_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff" +
      "\1\11\5\uffff\1\7\1\10\1\13\1\12"
    private val DFA183_specialS = "\22\uffff}>"
    private val DFA183_transitionS = Array("\1\6\5\uffff\1\7\10\uffff\1" +
      "\4\11\uffff\1\1\2\uffff\1\11\2\uffff\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff" +
      "\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\10\1\5",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\12\1\13",
      "",
      "\1\14\1\15",
      "\1\17\110\uffff\1\16",
      "\1\17\110\uffff\1\16",
      "\1\21\126\uffff\1\20",
      "\1\21\126\uffff\1\20",
      "",
      "",
      "",
      "")

    private val DFA183_eot = DFA.unpackEncodedString(DFA183_eotS)
    private val DFA183_eof = DFA.unpackEncodedString(DFA183_eofS)
    private val DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS)
    private val DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS)
    private val DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS)
    private val DFA183_special = DFA.unpackEncodedString(DFA183_specialS)
    private val DFA183_transition = new Array[Array[Short]](DFA183_transitionS.length)
    for (i <- DFA183_transition.indices) {
      DFA183_transition(i) = DFA.unpackEncodedString(DFA183_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 183
    this.eot = DFA183_eot
    this.eof = DFA183_eof
    this.min = DFA183_min
    this.max = DFA183_max
    this.accept = DFA183_accept
    this.special = DFA183_special
    this.transition = DFA183_transition

    val description = "1291:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem item] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"

  }

  final private class DFA186(rec: BaseRecognizer) extends DFA {
    private val DFA186_eotS = "\25\uffff"
    private val DFA186_eofS = "\25\uffff"
    private val DFA186_minS = "\1\14\3\uffff\4\0\15\uffff"
    private val DFA186_maxS = "\1\u0095\3\uffff\4\0\15\uffff"
    private val DFA186_acceptS = "\1\uffff\1\1\1\2\1\3\4\uffff\1\6\1\7\1" +
      "\10\2\uffff\1\11\1\12\1\13\1\14\1\16\1\4\1\5\1\15"
    private val DFA186_specialS = "\1\0\3\uffff\1\1\1\2\1\3\1\4\15\uffff}>"
    private val DFA186_transitionS = Array("\1\2\6\uffff\1\11\11\uffff\1" +
      "\16\1\uffff\1\12\5\uffff\1\10\11\uffff\1\12\4\uffff\1\15\2\uffff\1\20\22" +
      "\uffff\1\3\1\17\24\uffff\1\1\1\uffff\1\12\32\uffff\1\7\15\uffff\1\6\2\uffff" +
      "\1\21\5\uffff\1\4\1\5",
      "",
      "",
      "",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA186_eot = DFA.unpackEncodedString(DFA186_eotS)
    private val DFA186_eof = DFA.unpackEncodedString(DFA186_eofS)
    private val DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS)
    private val DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS)
    private val DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS)
    private val DFA186_special = DFA.unpackEncodedString(DFA186_specialS)
    private val DFA186_transition = new Array[Array[Short]](DFA186_transitionS.length)
    for (i <- DFA186_transition.indices) {
      DFA186_transition(i) = DFA.unpackEncodedString(DFA186_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 186
    this.eot = DFA186_eot
    this.eof = DFA186_eof
    this.min = DFA186_min
    this.max = DFA186_max
    this.accept = DFA186_accept
    this.special = DFA186_special
    this.transition = DFA186_transition

    val description = "1318:2: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA186_0 = input.LA(1)


          val index186_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA186_0 == WAIT)) {
            s = 1
          }

          else if ((LA186_0 == ASSERT)) {
            s = 2
          }

          else if ((LA186_0 == REPORT)) {
            s = 3
          }

          else if ((LA186_0 == BASIC_IDENTIFIER)) {
            s = 4
          }

          else if ((LA186_0 == EXTENDED_IDENTIFIER)) {
            s = 5
          }

          else if ((LA186_0 == STRING_LITERAL)) {
            s = 6
          }

          else if ((LA186_0 == LPAREN)) {
            s = 7
          }

          else if ((LA186_0 == IF)) {
            s = 8
          }

          else if ((LA186_0 == CASE)) {
            s = 9
          }

          else if ((LA186_0 == FOR || LA186_0 == LOOP || LA186_0 == WHILE)) {
            s = 10
          }

          else if ((LA186_0 == NEXT)) {
            s = 13
          }

          else if ((LA186_0 == EXIT)) {
            s = 14
          }

          else if ((LA186_0 == RETURN)) {
            s = 15
          }

          else if ((LA186_0 == NULL)) {
            s = 16
          }

          else if ((LA186_0 == BREAK) && ((ams))) {
            s = 17
          }


          input_.seek(index186_0)
          if (s >= 0) return s
        case 1 =>
          val LA186_4 = input.LA(1)


          val index186_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred12_VHDL())) {
            s = 18
          }

          else if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((true)) {
            s = 20
          }


          input_.seek(index186_4)
          if (s >= 0) return s
        case 2 =>
          val LA186_5 = input.LA(1)


          val index186_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred12_VHDL())) {
            s = 18
          }

          else if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((true)) {
            s = 20
          }


          input_.seek(index186_5)
          if (s >= 0) return s
        case 3 =>
          val LA186_6 = input.LA(1)


          val index186_6 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred12_VHDL())) {
            s = 18
          }

          else if ((synpred13_VHDL())) {
            s = 19
          }

          else if ((true)) {
            s = 20
          }


          input_.seek(index186_6)
          if (s >= 0) return s
        case 4 =>
          val LA186_7 = input.LA(1)


          val index186_7 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred12_VHDL())) {
            s = 18
          }

          else if ((synpred13_VHDL())) {
            s = 19
          }


          input_.seek(index186_7)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 186, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA218(rec: BaseRecognizer) extends DFA {
    private val DFA218_eotS = "\27\uffff"
    private val DFA218_eofS = "\27\uffff"
    private val DFA218_minS = "\1\26\1\uffff\2\173\4\uffff\1\u0094\1\21" +
      "\2\173\5\u008b\6\0"
    private val DFA218_maxS = "\1\u0095\1\uffff\2\u0081\4\uffff\2\u0095" +
      "\2\u0081\5\u0095\6\0"
    private val DFA218_acceptS = "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\17" +
      "\uffff"
    private val DFA218_specialS = "\1\2\20\uffff\1\3\1\4\1\5\1\1\1\6\1\0}>"
    private val DFA218_transitionS = Array("\1\1\7\uffff\1\6\62\uffff\1" +
      "\5\15\uffff\1\4\7\uffff\2\7\53\uffff\1\2\1\3",
      "",
      "\1\10\5\uffff\1\11",
      "\1\10\5\uffff\1\11",
      "",
      "",
      "",
      "",
      "\1\12\1\13",
      "\1\17\25\uffff\1\14\1\uffff\1\16\3\uffff\1\20\17\uffff\1\15\115\uffff" +
        "\1\23\10\uffff\1\21\1\22",
      "\1\10\5\uffff\1\11",
      "\1\10\5\uffff\1\11",
      "\1\23\10\uffff\1\21\1\22",
      "\1\26\10\uffff\1\24\1\25",
      "\1\26\10\uffff\1\24\1\25",
      "\1\26\10\uffff\1\24\1\25",
      "\1\26\10\uffff\1\24\1\25",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff")

    private val DFA218_eot = DFA.unpackEncodedString(DFA218_eotS)
    private val DFA218_eof = DFA.unpackEncodedString(DFA218_eofS)
    private val DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS)
    private val DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS)
    private val DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS)
    private val DFA218_special = DFA.unpackEncodedString(DFA218_specialS)
    private val DFA218_transition = new Array[Array[Short]](DFA218_transitionS.length)
    for (i <- DFA218_transition.indices) {
      DFA218_transition(i) = DFA.unpackEncodedString(DFA218_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 218
    this.eot = DFA218_eot
    this.eof = DFA218_eof
    this.min = DFA218_min
    this.max = DFA218_max
    this.accept = DFA218_accept
    this.special = DFA218_special
    this.transition = DFA218_transition

    val description = "1519:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA218_22 = input.LA(1)


          val index218_22 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_22)
          if (s >= 0) return s
        case 1 =>
          val LA218_20 = input.LA(1)


          val index218_20 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_20)
          if (s >= 0) return s
        case 2 =>
          val LA218_0 = input.LA(1)


          val index218_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA218_0 == CONSTANT) && (synpred14_VHDL())) {
            s = 1
          }

          else if ((LA218_0 == BASIC_IDENTIFIER)) {
            s = 2
          }

          else if ((LA218_0 == EXTENDED_IDENTIFIER)) {
            s = 3
          }

          else if ((LA218_0 == VARIABLE) && (synpred15_VHDL())) {
            s = 4
          }

          else if ((LA218_0 == SIGNAL)) {
            s = 5
          }

          else if ((LA218_0 == FILE)) {
            s = 6
          }

          else if (((LA218_0 >= TERMINAL && LA218_0 <= QUANTITY)) && ((ams))) {
            s = 7
          }


          input_.seek(index218_0)
          if (s >= 0) return s
        case 3 =>
          val LA218_17 = input.LA(1)


          val index218_17 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred14_VHDL())) {
            s = 1
          }

          else if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_17)
          if (s >= 0) return s
        case 4 =>
          val LA218_18 = input.LA(1)


          val index218_18 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred14_VHDL())) {
            s = 1
          }

          else if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_18)
          if (s >= 0) return s
        case 5 =>
          val LA218_19 = input.LA(1)


          val index218_19 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred14_VHDL())) {
            s = 1
          }

          else if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_19)
          if (s >= 0) return s
        case 6 =>
          val LA218_21 = input.LA(1)


          val index218_21 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred15_VHDL())) {
            s = 4
          }

          else if ((true)) {
            s = 5
          }


          input_.seek(index218_21)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 218, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA239(rec: BaseRecognizer) extends DFA {
    private val DFA239_eotS = "\22\uffff"
    private val DFA239_eofS = "\22\uffff"
    private val DFA239_minS = "\1\4\3\0\16\uffff"
    private val DFA239_maxS = "\1\u0095\3\0\16\uffff"
    private val DFA239_acceptS = "\4\uffff\1\2\14\uffff\1\1"
    private val DFA239_specialS = "\1\uffff\1\0\1\1\1\2\16\uffff}>"
    private val DFA239_transitionS = Array("\1\4\56\uffff\1\4\2\uffff\2" +
      "\4\2\uffff\1\4\102\uffff\1\4\6\uffff\2\4\5\uffff\1\3\1\uffff\1\4\2\uffff" +
      "\4\4\1\1\1\2",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA239_eot = DFA.unpackEncodedString(DFA239_eotS)
    private val DFA239_eof = DFA.unpackEncodedString(DFA239_eofS)
    private val DFA239_min = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS)
    private val DFA239_max = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS)
    private val DFA239_accept = DFA.unpackEncodedString(DFA239_acceptS)
    private val DFA239_special = DFA.unpackEncodedString(DFA239_specialS)
    private val DFA239_transition = new Array[Array[Short]](DFA239_transitionS.length)
    for (i <- DFA239_transition.indices) {
      DFA239_transition(i) = DFA.unpackEncodedString(DFA239_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 239
    this.eot = DFA239_eot
    this.eof = DFA239_eof
    this.min = DFA239_min
    this.max = DFA239_max
    this.accept = DFA239_accept
    this.special = DFA239_special
    this.transition = DFA239_transition

    val description = "1614:2: ( ( formal_part ARROW )=> formal_part ARROW )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA239_1 = input.LA(1)


          val index239_1 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred16_VHDL())) {
            s = 17
          }

          else if ((true)) {
            s = 4
          }


          input_.seek(index239_1)
          if (s >= 0) return s
        case 1 =>
          val LA239_2 = input.LA(1)


          val index239_2 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred16_VHDL())) {
            s = 17
          }

          else if ((true)) {
            s = 4
          }


          input_.seek(index239_2)
          if (s >= 0) return s
        case 2 =>
          val LA239_3 = input.LA(1)


          val index239_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred16_VHDL())) {
            s = 17
          }

          else if ((true)) {
            s = 4
          }


          input_.seek(index239_3)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 239, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA260(rec: BaseRecognizer) extends DFA {
    private val DFA260_eotS = "\20\uffff"
    private val DFA260_eofS = "\1\uffff\3\10\6\uffff\5\10\1\uffff"
    private val DFA260_minS = "\1\63\3\6\3\uffff\1\10\1\uffff\1\105\5\6" +
      "\1\uffff"
    private val DFA260_maxS = "\1\u0095\3\u008f\3\uffff\1\u0095\1\uffff" +
      "\1\u0095\5\u008f\1\uffff"
    private val DFA260_acceptS = "\4\uffff\1\3\1\4\1\5\1\uffff\1\2\6\uffff" +
      "\1\1"
    private val DFA260_specialS = "\20\uffff}>"
    private val DFA260_transitionS = Array("\1\5\3\uffff\1\4\105\uffff\1" +
      "\6\15\uffff\1\3\1\uffff\1\4\2\uffff\4\4\1\1\1\2",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "",
      "",
      "",
      "\1\16\u0082\uffff\1\15\1\uffff\1\14\6\uffff\1\12\1\13",
      "",
      "\1\10\67\uffff\1\17\26\uffff\2\10",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "\1\10\2\uffff\1\10\10\uffff\1\10\5\uffff\2\10\5\uffff\1\10\1\uffff\1\10" +
        "\6\uffff\1\10\1\uffff\1\10\4\uffff\1\10\1\uffff\2\10\2\uffff\1\10\3\uffff" +
        "\3\10\13\uffff\1\10\1\uffff\2\10\1\uffff\4\10\2\uffff\4\10\1\uffff\2\10" +
        "\3\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\2\10\3\uffff\4\10\4\uffff" +
        "\7\10\2\uffff\6\10\2\uffff\10\10\1\7\1\uffff\1\10\2\uffff\1\11",
      "")

    private val DFA260_eot = DFA.unpackEncodedString(DFA260_eotS)
    private val DFA260_eof = DFA.unpackEncodedString(DFA260_eofS)
    private val DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS)
    private val DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS)
    private val DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS)
    private val DFA260_special = DFA.unpackEncodedString(DFA260_specialS)
    private val DFA260_transition = new Array[Array[Short]](DFA260_transitionS.length)
    for (i <- DFA260_transition.indices) {
      DFA260_transition(i) = DFA.unpackEncodedString(DFA260_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 260
    this.eot = DFA260_eot
    this.eof = DFA260_eof
    this.min = DFA260_min
    this.max = DFA260_max
    this.accept = DFA260_accept
    this.special = DFA260_special
    this.transition = DFA260_transition

    val description = "1734:1: primary returns [Expression obj] : ( selected_name qualified_expression[$selected_name.name_] | name | literal | allocator | aggregate );"

  }

  final private class DFA266(rec: BaseRecognizer) extends DFA {
    private val DFA266_eotS = "\42\uffff"
    private val DFA266_eofS = "\1\1\41\uffff"
    private val DFA266_minS = "\1\6\1\uffff\1\113\1\uffff\3\113\1\u008b" +
      "\1\172\1\10\1\u008b\3\u0080\10\113\2\10\5\u0080\5\113"
    private val DFA266_maxS = "\1\u008f\1\uffff\1\u0095\1\uffff\3\u008a" +
      "\1\u0095\1\u008f\2\u0095\13\u008a\2\u0095\12\u008a"
    private val DFA266_acceptS = "\1\uffff\1\2\1\uffff\1\1\36\uffff"
    private val DFA266_specialS = "\42\uffff}>"
    private val DFA266_transitionS = Array("\1\1\2\uffff\1\1\10\uffff\1" +
      "\1\5\uffff\2\1\5\uffff\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1" +
      "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\3\1\13\uffff\1\1\1\uffff\2\1\1\uffff" +
      "\4\1\2\uffff\4\1\1\uffff\2\1\3\uffff\3\1\2\uffff\1\1\2\uffff\2\1\3\uffff" +
      "\4\1\4\uffff\7\1\2\uffff\3\1\1\3\1\1\1\2\2\uffff\10\1\1\3\1\uffff\1\1\2" +
      "\uffff\1\3",
      "",
      "\1\7\64\uffff\1\10\12\uffff\1\6\10\uffff\1\4\1\5",
      "",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\15\10\uffff\1\13\1\14",
      "\1\1\24\uffff\1\3",
      "\1\22\u0082\uffff\1\21\1\uffff\1\20\6\uffff\1\16\1\17",
      "\1\25\10\uffff\1\23\1\24",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\34\u0082\uffff\1\33\1\uffff\1\32\6\uffff\1\30\1\31",
      "\1\41\u0082\uffff\1\40\1\uffff\1\37\6\uffff\1\35\1\36",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\10\11\uffff\1\26",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
      "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27")

    private val DFA266_eot = DFA.unpackEncodedString(DFA266_eotS)
    private val DFA266_eof = DFA.unpackEncodedString(DFA266_eofS)
    private val DFA266_min = DFA.unpackEncodedStringToUnsignedChars(DFA266_minS)
    private val DFA266_max = DFA.unpackEncodedStringToUnsignedChars(DFA266_maxS)
    private val DFA266_accept = DFA.unpackEncodedString(DFA266_acceptS)
    private val DFA266_special = DFA.unpackEncodedString(DFA266_specialS)
    private val DFA266_transition = new Array[Array[Short]](DFA266_transitionS.length)
    for (i <- DFA266_transition.indices) {
      DFA266_transition(i) = DFA.unpackEncodedString(DFA266_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 266
    this.eot = DFA266_eot
    this.eof = DFA266_eof
    this.min = DFA266_min
    this.max = DFA266_max
    this.accept = DFA266_accept
    this.special = DFA266_special
    this.transition = DFA266_transition

    val description = "()* loopback of 1776:14: ( name_part )*"

  }

  final private class DFA272(rec: BaseRecognizer) extends DFA {
    private val DFA272_eotS = "\102\uffff"
    private val DFA272_eofS = "\1\2\101\uffff"
    private val DFA272_minS = "\1\6\1\0\100\uffff"
    private val DFA272_maxS = "\1\u008f\1\0\100\uffff"
    private val DFA272_acceptS = "\2\uffff\1\2\76\uffff\1\1"
    private val DFA272_specialS = "\1\uffff\1\0\100\uffff}>"
    private val DFA272_transitionS = Array("\1\2\2\uffff\1\2\10\uffff\1" +
      "\2\5\uffff\2\2\5\uffff\1\2\1\uffff\1\2\6\uffff\1\2\1\uffff\1\2\4\uffff\1" +
      "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\3\2\13\uffff\1\2\1\uffff\2\2\1\uffff" +
      "\4\2\2\uffff\4\2\1\uffff\2\2\3\uffff\3\2\2\uffff\1\2\2\uffff\2\2\3\uffff" +
      "\4\2\4\uffff\7\2\2\uffff\3\2\1\1\2\2\2\uffff\11\2\1\uffff\1\2\2\uffff\1" +
      "\2",
      "\1\uffff",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA272_eot = DFA.unpackEncodedString(DFA272_eotS)
    private val DFA272_eof = DFA.unpackEncodedString(DFA272_eofS)
    private val DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS)
    private val DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS)
    private val DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS)
    private val DFA272_special = DFA.unpackEncodedString(DFA272_specialS)
    private val DFA272_transition = new Array[Array[Short]](DFA272_transitionS.length)
    for (i <- DFA272_transition.indices) {
      DFA272_transition(i) = DFA.unpackEncodedString(DFA272_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 272
    this.eot = DFA272_eot
    this.eof = DFA272_eof
    this.min = DFA272_min
    this.max = DFA272_max
    this.accept = DFA272_accept
    this.special = DFA272_special
    this.transition = DFA272_transition

    val description = "1806:2: ( ( LPAREN )=> LPAREN expression RPAREN )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA272_1 = input.LA(1)


          val index272_1 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred19_VHDL())) {
            s = 65
          }

          else if ((true)) {
            s = 2
          }


          input_.seek(index272_1)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 272, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA278(rec: BaseRecognizer) extends DFA {
    private val DFA278_eotS = "\22\uffff"
    private val DFA278_eofS = "\22\uffff"
    private val DFA278_minS = "\1\4\17\0\2\uffff"
    private val DFA278_maxS = "\1\u0095\17\0\2\uffff"
    private val DFA278_acceptS = "\20\uffff\1\1\1\2"
    private val DFA278_specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10" +
      "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\uffff}>"
    private val DFA278_transitionS = Array("\1\16\56\uffff\1\14\2\uffff" +
      "\1\17\1\13\4\uffff\1\20\100\uffff\1\15\6\uffff\1\3\1\4\5\uffff\1\5\1\uffff" +
      "\1\11\2\uffff\1\6\1\7\1\10\1\12\1\1\1\2",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "")

    private val DFA278_eot = DFA.unpackEncodedString(DFA278_eotS)
    private val DFA278_eof = DFA.unpackEncodedString(DFA278_eofS)
    private val DFA278_min = DFA.unpackEncodedStringToUnsignedChars(DFA278_minS)
    private val DFA278_max = DFA.unpackEncodedStringToUnsignedChars(DFA278_maxS)
    private val DFA278_accept = DFA.unpackEncodedString(DFA278_acceptS)
    private val DFA278_special = DFA.unpackEncodedString(DFA278_specialS)
    private val DFA278_transition = new Array[Array[Short]](DFA278_transitionS.length)
    for (i <- DFA278_transition.indices) {
      DFA278_transition(i) = DFA.unpackEncodedString(DFA278_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 278
    this.eot = DFA278_eot
    this.eof = DFA278_eof
    this.min = DFA278_min
    this.max = DFA278_max
    this.accept = DFA278_accept
    this.special = DFA278_special
    this.transition = DFA278_transition

    val description = "1865:2: ( ( choices ARROW )=> choices ARROW )?"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA278_0 = input.LA(1)


          val index278_0 = input_.index()
          input_.rewind()
          s = -1
          if ((LA278_0 == BASIC_IDENTIFIER)) {
            s = 1
          }

          else if ((LA278_0 == EXTENDED_IDENTIFIER)) {
            s = 2
          }

          else if ((LA278_0 == PLUS)) {
            s = 3
          }

          else if ((LA278_0 == MINUS)) {
            s = 4
          }

          else if ((LA278_0 == STRING_LITERAL)) {
            s = 5
          }

          else if ((LA278_0 == REAL_LITERAL)) {
            s = 6
          }

          else if ((LA278_0 == INTEGER_LITERAL)) {
            s = 7
          }

          else if ((LA278_0 == BASED_LITERAL)) {
            s = 8
          }

          else if ((LA278_0 == CHARACTER_LITERAL)) {
            s = 9
          }

          else if ((LA278_0 == BIT_STRING_LITERAL)) {
            s = 10
          }

          else if ((LA278_0 == NULL)) {
            s = 11
          }

          else if ((LA278_0 == NEW)) {
            s = 12
          }

          else if ((LA278_0 == LPAREN)) {
            s = 13
          }

          else if ((LA278_0 == ABS)) {
            s = 14
          }

          else if ((LA278_0 == NOT)) {
            s = 15
          }

          else if ((LA278_0 == OTHERS) && (synpred20_VHDL())) {
            s = 16
          }


          input_.seek(index278_0)
          if (s >= 0) return s
        case 1 =>
          val LA278_1 = input.LA(1)


          val index278_1 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_1)
          if (s >= 0) return s
        case 2 =>
          val LA278_2 = input.LA(1)


          val index278_2 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_2)
          if (s >= 0) return s
        case 3 =>
          val LA278_3 = input.LA(1)


          val index278_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_3)
          if (s >= 0) return s
        case 4 =>
          val LA278_4 = input.LA(1)


          val index278_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_4)
          if (s >= 0) return s
        case 5 =>
          val LA278_5 = input.LA(1)


          val index278_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_5)
          if (s >= 0) return s
        case 6 =>
          val LA278_6 = input.LA(1)


          val index278_6 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_6)
          if (s >= 0) return s
        case 7 =>
          val LA278_7 = input.LA(1)


          val index278_7 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_7)
          if (s >= 0) return s
        case 8 =>
          val LA278_8 = input.LA(1)


          val index278_8 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_8)
          if (s >= 0) return s
        case 9 =>
          val LA278_9 = input.LA(1)


          val index278_9 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_9)
          if (s >= 0) return s
        case 10 =>
          val LA278_10 = input.LA(1)


          val index278_10 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_10)
          if (s >= 0) return s
        case 11 =>
          val LA278_11 = input.LA(1)


          val index278_11 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_11)
          if (s >= 0) return s
        case 12 =>
          val LA278_12 = input.LA(1)


          val index278_12 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_12)
          if (s >= 0) return s
        case 13 =>
          val LA278_13 = input.LA(1)


          val index278_13 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_13)
          if (s >= 0) return s
        case 14 =>
          val LA278_14 = input.LA(1)


          val index278_14 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_14)
          if (s >= 0) return s
        case 15 =>
          val LA278_15 = input.LA(1)


          val index278_15 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred20_VHDL())) {
            s = 16
          }

          else if ((true)) {
            s = 17
          }


          input_.seek(index278_15)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 278, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA280(rec: BaseRecognizer) extends DFA {
    private val DFA280_eotS = "\24\uffff"
    private val DFA280_eofS = "\24\uffff"
    private val DFA280_minS = "\1\4\17\0\4\uffff"
    private val DFA280_maxS = "\1\u0095\17\0\4\uffff"
    private val DFA280_acceptS = "\20\uffff\1\4\1\1\1\2\1\3"
    private val DFA280_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6" +
      "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4\uffff}>"
    private val DFA280_transitionS = Array("\1\16\56\uffff\1\14\2\uffff" +
      "\1\17\1\13\4\uffff\1\20\100\uffff\1\15\6\uffff\1\3\1\4\5\uffff\1\5\1\uffff" +
      "\1\11\2\uffff\1\6\1\7\1\10\1\12\1\1\1\2",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "\1\uffff",
      "",
      "",
      "",
      "")

    private val DFA280_eot = DFA.unpackEncodedString(DFA280_eotS)
    private val DFA280_eof = DFA.unpackEncodedString(DFA280_eofS)
    private val DFA280_min = DFA.unpackEncodedStringToUnsignedChars(DFA280_minS)
    private val DFA280_max = DFA.unpackEncodedStringToUnsignedChars(DFA280_maxS)
    private val DFA280_accept = DFA.unpackEncodedString(DFA280_acceptS)
    private val DFA280_special = DFA.unpackEncodedString(DFA280_specialS)
    private val DFA280_transition = new Array[Array[Short]](DFA280_transitionS.length)
    for (i <- DFA280_transition.indices) {
      DFA280_transition(i) = DFA.unpackEncodedString(DFA280_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 280
    this.eot = DFA280_eot
    this.eof = DFA280_eof
    this.min = DFA280_min
    this.max = DFA280_max
    this.accept = DFA280_accept
    this.special = DFA280_special
    this.transition = DFA280_transition

    val description = "1875:1: choice returns [Choices.Choice choice_] : ( ( identifier ( BAR | ARROW | COMMA | SEMICOLON ) )=> identifier | ( simple_expression ( BAR | ARROW | COMMA | SEMICOLON ) )=> simple_expression | discrete_range | OTHERS );"

    @throws(classOf[NoViableAltException])
    override def specialStateTransition(__s: Int, _input: IntStream): Int = {
      var s = __s
      val input_ = _input.asInstanceOf[TokenStream]
      val _s = __s
      s match {
        case 0 =>
          val LA280_1 = input.LA(1)


          val index280_1 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred21_VHDL())) {
            s = 17
          }

          else if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_1)
          if (s >= 0) return s
        case 1 =>
          val LA280_2 = input.LA(1)


          val index280_2 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred21_VHDL())) {
            s = 17
          }

          else if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_2)
          if (s >= 0) return s
        case 2 =>
          val LA280_3 = input.LA(1)


          val index280_3 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_3)
          if (s >= 0) return s
        case 3 =>
          val LA280_4 = input.LA(1)


          val index280_4 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_4)
          if (s >= 0) return s
        case 4 =>
          val LA280_5 = input.LA(1)


          val index280_5 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_5)
          if (s >= 0) return s
        case 5 =>
          val LA280_6 = input.LA(1)


          val index280_6 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_6)
          if (s >= 0) return s
        case 6 =>
          val LA280_7 = input.LA(1)


          val index280_7 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_7)
          if (s >= 0) return s
        case 7 =>
          val LA280_8 = input.LA(1)


          val index280_8 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_8)
          if (s >= 0) return s
        case 8 =>
          val LA280_9 = input.LA(1)


          val index280_9 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_9)
          if (s >= 0) return s
        case 9 =>
          val LA280_10 = input.LA(1)


          val index280_10 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_10)
          if (s >= 0) return s
        case 10 =>
          val LA280_11 = input.LA(1)


          val index280_11 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_11)
          if (s >= 0) return s
        case 11 =>
          val LA280_12 = input.LA(1)


          val index280_12 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_12)
          if (s >= 0) return s
        case 12 =>
          val LA280_13 = input.LA(1)


          val index280_13 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_13)
          if (s >= 0) return s
        case 13 =>
          val LA280_14 = input.LA(1)


          val index280_14 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_14)
          if (s >= 0) return s
        case 14 =>
          val LA280_15 = input.LA(1)


          val index280_15 = input_.index()
          input_.rewind()
          s = -1
          if ((synpred22_VHDL())) {
            s = 18
          }

          else if ((true)) {
            s = 19
          }


          input_.seek(index280_15)
          if (s >= 0) return s
      }

      if (state.backtracking > 0) {
        state.failed = true; return -1
      }
      val nvae = new NoViableAltException(description, 280, __s, input)
      error(nvae)
      throw nvae
    }
  }

  final private class DFA284(rec: BaseRecognizer) extends DFA {
    private val DFA284_eotS = "\13\uffff"
    private val DFA284_eofS = "\1\uffff\1\10\1\11\1\12\7\uffff"
    private val DFA284_minS = "\1\17\3\u008b\7\uffff"
    private val DFA284_maxS = "\4\u0095\7\uffff"
    private val DFA284_acceptS = "\4\uffff\1\4\1\5\1\6\1\7\1\1\1\2\1\3"
    private val DFA284_specialS = "\13\uffff}>"
    private val DFA284_transitionS = Array("\1\4\4\uffff\1\1\1\3\6\uffff" +
      "\1\2\2\uffff\1\6\5\uffff\1\5\145\uffff\1\7\10\uffff\2\7",
      "\1\7\10\uffff\2\7",
      "\1\7\10\uffff\2\7",
      "\1\7\10\uffff\2\7",
      "",
      "",
      "",
      "",
      "",
      "",
      "")

    private val DFA284_eot = DFA.unpackEncodedString(DFA284_eotS)
    private val DFA284_eof = DFA.unpackEncodedString(DFA284_eofS)
    private val DFA284_min = DFA.unpackEncodedStringToUnsignedChars(DFA284_minS)
    private val DFA284_max = DFA.unpackEncodedStringToUnsignedChars(DFA284_maxS)
    private val DFA284_accept = DFA.unpackEncodedString(DFA284_acceptS)
    private val DFA284_special = DFA.unpackEncodedString(DFA284_specialS)
    private val DFA284_transition = new Array[Array[Short]](DFA284_transitionS.length)
    for (i <- DFA284_transition.indices) {
      DFA284_transition(i) = DFA.unpackEncodedString(DFA284_transitionS(i))
    }

    this.recognizer = rec
    this.decisionNumber = 284
    this.eot = DFA284_eot
    this.eof = DFA284_eof
    this.min = DFA284_min
    this.max = DFA284_max
    this.accept = DFA284_accept
    this.special = DFA284_special
    this.transition = DFA284_transition

    val description = "1027:4: synpred10_VHDL : ( COMPONENT | ENTITY | CONFIGURATION | BLOCK | IF | FOR | component_instantiation_statement[null] );"

  }

  private val dfa17 = new DFA17(this)
  private val dfa25 = new DFA25(this)
  private val dfa36 = new DFA36(this)
  private val dfa40 = new DFA40(this)
  private val dfa50 = new DFA50(this)
  private val dfa52 = new DFA52(this)
  private val dfa83 = new DFA83(this)
  private val dfa101 = new DFA101(this)
  private val dfa105 = new DFA105(this)
  private val dfa115 = new DFA115(this)
  private val dfa120 = new DFA120(this)
  private val dfa122 = new DFA122(this)
  private val dfa124 = new DFA124(this)
  private val dfa139 = new DFA139(this)
  private val dfa145 = new DFA145(this)
  private val dfa183 = new DFA183(this)
  private val dfa186 = new DFA186(this)
  private val dfa218 = new DFA218(this)
  private val dfa239 = new DFA239(this)
  private val dfa260 = new DFA260(this)
  private val dfa266 = new DFA266(this)
  private val dfa272 = new DFA272(this)
  private val dfa278 = new DFA278(this)
  private val dfa280 = new DFA280(this)
  private val dfa284 = new DFA284(this)
}