// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g 2010-10-08 16:27:59

/*
 *     OpenVC, an open source VHDL compiler/simulator
 *     Copyright (C) 2010  Christian Reisinger
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package at.jku.ssw.openvc.ast.parser

import at.jku.ssw.openvc._
import at.jku.ssw.openvc.ast._
import at.jku.ssw.openvc.ast.concurrentStatements._
import at.jku.ssw.openvc.ast.declarations._
import at.jku.ssw.openvc.ast.expressions._
import at.jku.ssw.openvc.ast.sequentialStatements._
import at.jku.ssw.openvc.ast.ams._


import org.antlr.runtime._

import scala.collection.mutable.Stack

object VHDLParser {
	val tokenNames = Array[String]("<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESS", "AFTER", "ALIAS", "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BUFFER", "BUS", "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", "DISCONNECT", "DOWNTO", "ELSE", "ELSIF", "END", "ENTITY", "EXIT", "FILE", "FOR", "FUNCTION", "GENERATE", "GENERIC", "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", "INOUT", "IS", "LABEL", "LIBRARY", "LINKAGE", "LITERAL", "LOOP", "MAP", "MOD", "NAND", "NEW", "NEXT", "NOR", "NOT", "NULL", "OF", "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", "POSTPONED", "PROCEDURE", "PROCESS", "PROTECTED", "PURE", "RANGE", "RECORD", "REGISTER", "REJECT", "REM", "REPORT", "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", "SIGNAL", "SLA", "SLL", "SRA", "SRL", "SUBTYPE", "THEN", "TO", "TRANSPORT", "TYPE", "UNAFFECTED", "UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WHEN", "WHILE", "WITH", "XNOR", "XOR", "NATURE", "TERMINAL", "QUANTITY", "ACROSS", "THROUGH", "SPECTRUM", "NOISE", "SUBNATURE", "LIMIT", "REFERENCE", "PROCEDURAL", "DOUBLESTAR", "AMS_ASSIGN", "LEQ", "GEQ", "ARROW", "NEQ", "VAR_ASSIGN", "BOX", "DBLQUOTE", "SEMICOLON", "COMMA", "AMPERSAND", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "MUL", "DIV", "PLUS", "MINUS", "LT", "GT", "EQ", "BAR", "DOT", "STRING_LITERAL", "TOLERANCE", "CHARACTER_LITERAL", "BREAK", "APOSTROPHE", "REAL_LITERAL", "INTEGER_LITERAL", "BASED_LITERAL", "BIT_STRING_LITERAL", "BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "NEWLINE", "WS", "NESTED_ML_COMMENT", "LINECOMMENT", "LETTER", "LETTER_OR_DIGIT", "GRAPHIC_CHARACTER", "INTEGER", "BASED_INTEGER", "EXPONENT", "BASE_SPECIFIER", "EXTENDED_DIGIT", "DIGIT", "UPPER_CASE_LETTER", "LOWER_CASE_LETTER", "SPECIAL_CHARACTER", "SPACE_CHARACTER", "OTHER_SPECIAL_CHARACTER")

    val BASIC_IDENTIFIER = 148
    val FUNCTION = 32
    val PACKAGE = 62
    val EXPONENT = 159
    val LT = 134
    val NAND = 50
    val INERTIAL = 40
    val SPACE_CHARACTER = 166
    val SEVERITY = 79
    val WHILE = 98
    val ROR = 77
    val GENERIC = 34
    val LETTER = 154
    val MOD = 49
    val CASE = 19
    val NEW = 51
    val NOR = 53
    val NOT = 54
    val POSTPONED = 64
    val LINECOMMENT = 153
    val SUBTYPE = 86
    val EOF = -1
    val BREAK = 142
    val ROL = 76
    val BASED_LITERAL = 146
    val QUANTITY = 104
    val TYPE = 90
    val LBRACKET = 127
    val UNITS = 92
    val RPAREN = 126
    val OTHER_SPECIAL_CHARACTER = 167
    val STRING_LITERAL = 139
    val DOWNTO = 24
    val BASED_INTEGER = 158
    val REAL_LITERAL = 144
    val BEGIN = 14
    val LOOP = 47
    val RETURN = 75
    val TRANSPORT = 89
    val IMPURE = 38
    val BODY = 16
    val APOSTROPHE = 143
    val GEQ = 116
    val GENERATE = 33
    val EQ = 136
    val LINKAGE = 45
    val SPECTRUM = 107
    val REGISTER = 71
    val SELECT = 78
    val ARRAY = 11
    val LOWER_CASE_LETTER = 164
    val TOLERANCE = 140
    val EXIT = 29
    val SHARED = 80
    val RECORD = 70
    val GUARDED = 36
    val SRL = 85
    val SRA = 84
    val LETTER_OR_DIGIT = 155
    val NESTED_ML_COMMENT = 152
    val AMS_ASSIGN = 114
    val NULL = 55
    val XNOR = 100
    val ELSE = 25
    val CHARACTER_LITERAL = 141
    val ON = 57
    val BUS = 18
    val SEMICOLON = 122
    val WAIT = 96
    val VAR_ASSIGN = 119
    val FILE = 30
    val OF = 56
    val MUL = 130
    val ASSERT = 12
    val PROCEDURAL = 112
    val ABS = 4
    val GROUP = 35
    val WS = 151
    val UPPER_CASE_LETTER = 163
    val VARIABLE = 95
    val OUT = 61
    val UNTIL = 93
    val GRAPHIC_CHARACTER = 156
    val EXTENDED_IDENTIFIER = 149
    val INTEGER_LITERAL = 145
    val EXTENDED_DIGIT = 161
    val DBLQUOTE = 121
    val OR = 59
    val ALIAS = 7
    val CONSTANT = 22
    val GT = 135
    val USE = 94
    val ELSIF = 26
    val END = 27
    val OTHERS = 60
    val PROTECTED = 67
    val REPORT = 74
    val DOUBLESTAR = 113
    val LIMIT = 110
    val ATTRIBUTE = 13
    val SLA = 82
    val FOR = 31
    val CONFIGURATION = 21
    val LIBRARY = 44
    val SLL = 83
    val ARCHITECTURE = 10
    val AND = 9
    val BIT_STRING_LITERAL = 147
    val LPAREN = 125
    val IF = 37
    val INOUT = 41
    val ENTITY = 28
    val BOX = 120
    val PURE = 68
    val IN = 39
    val THEN = 87
    val COMMA = 123
    val IS = 42
    val REJECT = 72
    val ALL = 8
    val SIGNAL = 81
    val ACCESS = 5
    val PLUS = 132
    val NEXT = 52
    val DIGIT = 162
    val RBRACKET = 128
    val DOT = 138
    val COMPONENT = 20
    val WITH = 99
    val INTEGER = 157
    val NATURE = 102
    val XOR = 101
    val TO = 88
    val TERMINAL = 103
    val SPECIAL_CHARACTER = 165
    val DISCONNECT = 23
    val AMPERSAND = 124
    val REFERENCE = 111
    val BUFFER = 17
    val PORT = 63
    val RANGE = 69
    val LITERAL = 46
    val MINUS = 133
    val AFTER = 6
    val REM = 73
    val PROCEDURE = 65
    val SUBNATURE = 109
    val COLON = 129
    val OPEN = 58
    val BASE_SPECIFIER = 160
    val NEQ = 118
    val NEWLINE = 150
    val LABEL = 43
    val WHEN = 97
    val ACROSS = 105
    val BLOCK = 15
    val MAP = 48
    val THROUGH = 106
    val ARROW = 117
    val DIV = 131
    val NOISE = 108
    val PROCESS = 66
    val UNAFFECTED = 91
    val BAR = 137
    val LEQ = 115
    private def createBitSet(v1:Long):BitSet = new BitSet(Array(v1))
    private def createBitSet(v1:Long,v2:Long):BitSet = new BitSet(Array(v1,v2))
    private def createBitSet(v1:Long,v2:Long,v3:Long):BitSet = new BitSet(Array(v1,v2,v3))
    private def createBitSet(v1:Long,v2:Long,v3:Long,v4:Long):BitSet = new BitSet(Array(v1,v2,v3,v4))
    private def createBitSet(v1:Long,v2:Long,v3:Long,v4:Long,v5:Long):BitSet = new BitSet(Array(v1,v2,v3,v4,v5))
    private val FOLLOW_design_unit_in_design_file1279 = createBitSet(0x4000100010200400L,0x0000000040000000L)
    private val FOLLOW_EOF_in_design_file1284 = createBitSet(0x0000000000000002L)
    private val FOLLOW_library_clause_in_design_unit1312 = createBitSet(0x4000100010200400L,0x0000000040000000L)
    private val FOLLOW_use_clause_in_design_unit1319 = createBitSet(0x4000100010200400L,0x0000000040000000L)
    private val FOLLOW_library_unit_in_design_unit1332 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_declaration_in_library_unit1354 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_body_in_library_unit1362 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_declaration_in_library_unit1370 = createBitSet(0x0000000000000002L)
    private val FOLLOW_package_body_in_library_unit1378 = createBitSet(0x0000000000000002L)
    private val FOLLOW_configuration_declaration_in_library_unit1390 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LIBRARY_in_library_clause1419 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_library_clause1421 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_library_clause1423 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GENERIC_in_generic_clause1448 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_generic_clause1450 = createBitSet(0x0000000000400000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_generic_interface_list_in_generic_clause1452 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_generic_clause1454 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_generic_clause1456 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_constant_declaration_in_generic_interface_list1490 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_generic_interface_list1496 = createBitSet(0x0000000000400000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_interface_constant_declaration_in_generic_interface_list1500 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_PORT_in_port_clause1535 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_port_clause1537 = createBitSet(0x0000000000000000L,0x0000000000020000L,0x0000000000300000L)
    private val FOLLOW_port_interface_list_in_port_clause1539 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_port_clause1541 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_port_clause1543 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1575 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_port_interface_list1581 = createBitSet(0x0000000000000000L,0x0000000000020000L,0x0000000000300000L)
    private val FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1585 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_ENTITY_in_entity_declaration1625 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_entity_declaration1629 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_entity_declaration1631 = createBitSet(0x8000104D48C06080L,0x000061C0C4430012L)
    private val FOLLOW_generic_clause_in_entity_declaration1636 = createBitSet(0x8000104948C06080L,0x000061C0C4430012L)
    private val FOLLOW_port_clause_in_entity_declaration1642 = createBitSet(0x0000104948C06080L,0x000061C0C4430012L)
    private val FOLLOW_entity_declarative_item_in_entity_declaration1649 = createBitSet(0x0000104948C06080L,0x000061C0C4430012L)
    private val FOLLOW_BEGIN_in_entity_declaration1658 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_label_colon_in_entity_declaration1666 = createBitSet(0x0000000000001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_POSTPONED_in_entity_declaration1671 = createBitSet(0x0000000000001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_concurrent_assertion_statement_in_entity_declaration1675 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1685 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_process_statement_in_entity_declaration1694 = createBitSet(0x0000000008001000L,0x0000000000000005L,0x0000000000300800L)
    private val FOLLOW_END_in_entity_declaration1715 = createBitSet(0x0000000010000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_ENTITY_in_entity_declaration1717 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_entity_declaration1722 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_entity_declaration1725 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1750 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_entity_declarative_item1762 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_entity_declarative_item1770 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_entity_declarative_item1778 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_entity_declarative_item1786 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_entity_declarative_item1794 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_entity_declarative_item1802 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_entity_declarative_item1810 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_entity_declarative_item1818 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_entity_declarative_item1826 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_entity_declarative_item1834 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_entity_declarative_item1842 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_entity_declarative_item1850 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_entity_declarative_item1858 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_step_limit_specification_in_entity_declarative_item1881 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_entity_declarative_item1889 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_entity_declarative_item1897 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_quantity_declaration_in_entity_declarative_item1905 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_entity_declarative_item1913 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARCHITECTURE_in_architecture_body1941 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_architecture_body1945 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_architecture_body1947 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_architecture_body1949 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_architecture_body1951 = createBitSet(0x00001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_block_declarative_item_in_architecture_body1957 = createBitSet(0x00001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_BEGIN_in_architecture_body1964 = createBitSet(0x0000000008001000L,0x2000000800000005L,0x0000000000304800L)
    private val FOLLOW_architecture_statement_list_in_architecture_body1969 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_architecture_body1973 = createBitSet(0x0000000000000400L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_ARCHITECTURE_in_architecture_body1975 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_architecture_body1980 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_architecture_body1983 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_configuration_declarative_item2005 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_configuration_declarative_item2013 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_configuration_declarative_item2021 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_configuration_declaration2045 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_configuration_declaration2049 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_configuration_declaration2051 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_configuration_declaration2053 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_configuration_declaration2055 = createBitSet(0x0000100880002000L,0x0000000040000000L)
    private val FOLLOW_configuration_declarative_item_in_configuration_declaration2061 = createBitSet(0x0000100880002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_configuration_declaration2073 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_configuration_declaration2077 = createBitSet(0x0000000000200000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_CONFIGURATION_in_configuration_declaration2079 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_configuration_declaration2084 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_configuration_declaration2087 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_block_configuration_index2113 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_block_configuration_index2122 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_block_specification2157 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_block_specification2160 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_block_configuration_index_in_block_specification2162 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_block_specification2164 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_block_specification2178 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_block_configuration2206 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_block_specification_in_block_configuration2208 = createBitSet(0x0000100888002000L,0x0000000040000000L)
    private val FOLLOW_use_clause_in_block_configuration2213 = createBitSet(0x0000100888002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_block_configuration2228 = createBitSet(0x0000100888002000L,0x0000000040000000L)
    private val FOLLOW_component_configuration_in_block_configuration2236 = createBitSet(0x0000100888002000L,0x0000000040000000L)
    private val FOLLOW_END_in_block_configuration2247 = createBitSet(0x0000000080000000L)
    private val FOLLOW_FOR_in_block_configuration2249 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_block_configuration2251 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_component_configuration2274 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_component_specification_in_component_configuration2276 = createBitSet(0x8000100C88002000L,0x0400000040000000L)
    private val FOLLOW_binding_indication_in_component_configuration2282 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_component_configuration2284 = createBitSet(0x0000100888002000L,0x0000000040000000L)
    private val FOLLOW_block_configuration_in_component_configuration2295 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_component_configuration2300 = createBitSet(0x0000000080000000L)
    private val FOLLOW_FOR_in_component_configuration2302 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_component_configuration2304 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_package_declaration2335 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_package_declaration2339 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_package_declaration2341 = createBitSet(0x0000104948D02080L,0x000061C0C4430012L)
    private val FOLLOW_package_declarative_item_in_package_declaration2352 = createBitSet(0x0000104948D02080L,0x000061C0C4430012L)
    private val FOLLOW_END_in_package_declaration2359 = createBitSet(0x4000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_PACKAGE_in_package_declaration2361 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_package_declaration2366 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_package_declaration2369 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declaration_in_package_declarative_item2391 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_package_declarative_item2403 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_package_declarative_item2411 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_package_declarative_item2419 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_package_declarative_item2427 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_package_declarative_item2435 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_package_declarative_item2443 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_package_declarative_item2451 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_declaration_in_package_declarative_item2459 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_package_declarative_item2467 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_package_declarative_item2475 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_package_declarative_item2483 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_package_declarative_item2491 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_package_declarative_item2499 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_package_declarative_item2507 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_package_declarative_item2525 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_package_declarative_item2533 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_package_declarative_item2541 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_package_body2570 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_package_body2572 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_package_body2576 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_package_body2578 = createBitSet(0x0000104948402080L,0x00000000C4410012L)
    private val FOLLOW_package_body_declarative_item_in_package_body2584 = createBitSet(0x0000104948402080L,0x00000000C4410012L)
    private val FOLLOW_END_in_package_body2591 = createBitSet(0x4000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_PACKAGE_in_package_body2594 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_package_body2596 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_package_body2602 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_package_body2605 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2629 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_package_body_declarative_item2641 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_package_body_declarative_item2649 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_package_body_declarative_item2657 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_package_body_declarative_item2665 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_package_body_declarative_item2673 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_package_body_declarative_item2681 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_package_body_declarative_item2692 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_package_body_declarative_item2700 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_package_body_declarative_item2709 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_package_body_declarative_item2717 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_designator2737 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_designator2746 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_subprogram_specification2770 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_designator_in_subprogram_specification2772 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_subprogram_specification2786 = createBitSet(0x0000000040400000L,0x0000018080020000L,0x0000000000300000L)
    private val FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2788 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_subprogram_specification2790 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PURE_in_subprogram_specification2807 = createBitSet(0x0000000100000000L)
    private val FOLLOW_IMPURE_in_subprogram_specification2813 = createBitSet(0x0000000100000000L)
    private val FOLLOW_FUNCTION_in_subprogram_specification2817 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_designator_in_subprogram_specification2819 = createBitSet(0x0000000000000000L,0x2000000000000800L)
    private val FOLLOW_LPAREN_in_subprogram_specification2832 = createBitSet(0x0000000040400000L,0x0000018080020000L,0x0000000000300000L)
    private val FOLLOW_parameter_interface_list_function_in_subprogram_specification2834 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_subprogram_specification2836 = createBitSet(0x0000000000000000L,0x0000000000000800L)
    private val FOLLOW_RETURN_in_subprogram_specification2841 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_subprogram_specification2843 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2866 = createBitSet(0x0000040000000000L,0x0400000000000000L)
    private val FOLLOW_subprogram_body_in_subprogram_declartion_or_body2869 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2874 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_specification_in_subprogram_declaration2898 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_subprogram_declaration2900 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IS_in_subprogram_body2924 = createBitSet(0x0000104940406080L,0x00000000C4410012L)
    private val FOLLOW_subprogram_declarative_item_in_subprogram_body2930 = createBitSet(0x0000104940406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_subprogram_body2938 = createBitSet(0x00908020A8081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_subprogram_body2943 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_subprogram_body2947 = createBitSet(0x0000000100000002L,0x0000000000000002L,0x0000000000300800L)
    private val FOLLOW_PROCEDURE_in_subprogram_body2952 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_FUNCTION_in_subprogram_body2958 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_designator_in_subprogram_body2964 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item2990 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_subprogram_declarative_item3002 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_subprogram_declarative_item3010 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_subprogram_declarative_item3018 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_subprogram_declarative_item3026 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_subprogram_declarative_item3034 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_subprogram_declarative_item3042 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_subprogram_declarative_item3050 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_subprogram_declarative_item3058 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_subprogram_declarative_item3066 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_subprogram_declarative_item3074 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_subprogram_declarative_item3082 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TYPE_in_type_declaration3101 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_type_declaration3103 = createBitSet(0x0000040000000000L,0x0400000000000000L)
    private val FOLLOW_IS_in_type_declaration3109 = createBitSet(0x0000000040000820L,0x2000000000000068L)
    private val FOLLOW_type_definition_in_type_declaration3111 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_type_declaration3114 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SEMICOLON_in_type_declaration3122 = createBitSet(0x0000000000000002L)
    private val FOLLOW_enumeration_type_definition_in_type_definition3146 = createBitSet(0x0000000000000002L)
    private val FOLLOW_physical_type_definition_in_type_definition3165 = createBitSet(0x0000000000000002L)
    private val FOLLOW_integer_or_floating_point_type_definition_in_type_definition3174 = createBitSet(0x0000000000000002L)
    private val FOLLOW_array_type_definition_in_type_definition3183 = createBitSet(0x0000000000000002L)
    private val FOLLOW_record_type_definition_in_type_definition3192 = createBitSet(0x0000000000000002L)
    private val FOLLOW_access_type_definition_in_type_definition3201 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_type_definition_in_type_definition3210 = createBitSet(0x0000000000000002L)
    private val FOLLOW_protected_type_body_in_type_definition3225 = createBitSet(0x0000000000000002L)
    private val FOLLOW_protected_type_declaration_in_type_definition3234 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NATURE_in_ams_nature_declaration3255 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_nature_declaration3257 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_ams_nature_declaration3259 = createBitSet(0x0000000000000800L,0x0000000000000040L,0x0000000000300800L)
    private val FOLLOW_ams_nature_definition_in_ams_nature_declaration3261 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_nature_declaration3264 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_ams_terminal_declaration3284 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_terminal_declaration3286 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_terminal_declaration3288 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3290 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_terminal_declaration3292 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3314 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_array_nature_definition_in_ams_nature_definition3323 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_record_nature_definition_in_ams_nature_definition3332 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_free_quantity_declaration_in_ams_quantity_declaration3357 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3370 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_source_quantity_declaration_in_ams_quantity_declaration3378 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_free_quantity_declaration3399 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_free_quantity_declaration3401 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_free_quantity_declaration3403 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_ams_free_quantity_declaration3405 = createBitSet(0x0000000000000000L,0x0480000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_free_quantity_declaration3408 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_free_quantity_declaration3410 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_free_quantity_declaration3414 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3439 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3450 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3456 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3461 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3463 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_source_quantity_declaration3488 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_source_quantity_declaration3490 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_source_quantity_declaration3492 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_ams_source_quantity_declaration3494 = createBitSet(0x0000000000000000L,0x0000180000000000L)
    private val FOLLOW_ams_source_aspect_in_ams_source_quantity_declaration3498 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_source_quantity_declaration3500 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_ams_across_aspect3524 = createBitSet(0x0000000000000000L,0x0080020000000000L,0x0000000000001000L)
    private val FOLLOW_TOLERANCE_in_ams_across_aspect3527 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_across_aspect3531 = createBitSet(0x0000000000000000L,0x0080020000000000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_across_aspect3536 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_across_aspect3540 = createBitSet(0x0000000000000000L,0x0000020000000000L)
    private val FOLLOW_ACROSS_in_ams_across_aspect3544 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_ams_through_aspect3565 = createBitSet(0x0000000000000000L,0x0080040000000000L,0x0000000000001000L)
    private val FOLLOW_TOLERANCE_in_ams_through_aspect3568 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_through_aspect3572 = createBitSet(0x0000000000000000L,0x0080040000000000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_through_aspect3577 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_through_aspect3581 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_THROUGH_in_ams_through_aspect3585 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_ams_terminal_aspect3608 = createBitSet(0x0000000000000002L,0x0000000001000000L)
    private val FOLLOW_TO_in_ams_terminal_aspect3611 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_in_ams_terminal_aspect3615 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SPECTRUM_in_ams_source_aspect3638 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_ams_source_aspect3642 = createBitSet(0x0000000000000000L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_ams_source_aspect3644 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_ams_source_aspect3648 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOISE_in_ams_source_aspect3655 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_ams_source_aspect3659 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_constant_declaration3681 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_constant_declaration3683 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_constant_declaration3685 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_constant_declaration3687 = createBitSet(0x0000000000000000L,0x0480000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_constant_declaration3690 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_constant_declaration3692 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_constant_declaration3696 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_signal_declaration3718 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_signal_declaration3720 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_signal_declaration3722 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_signal_declaration3724 = createBitSet(0x0000000000040000L,0x0480000000000080L)
    private val FOLLOW_REGISTER_in_signal_declaration3729 = createBitSet(0x0000000000000000L,0x0480000000000000L)
    private val FOLLOW_BUS_in_signal_declaration3733 = createBitSet(0x0000000000000000L,0x0480000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_signal_declaration3738 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_signal_declaration3740 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_signal_declaration3744 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SHARED_in_variable_declaration3765 = createBitSet(0x0000000000000000L,0x0000000080000000L)
    private val FOLLOW_VARIABLE_in_variable_declaration3768 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_variable_declaration3770 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_variable_declaration3772 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_variable_declaration3774 = createBitSet(0x0000000000000000L,0x0480000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_variable_declaration3777 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_variable_declaration3779 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_variable_declaration3783 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_file_declaration3804 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_file_declaration3806 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_file_declaration3808 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_file_declaration3810 = createBitSet(0x0400040000000000L,0x0400000000000000L)
    private val FOLLOW_OPEN_in_file_declaration3814 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_file_declaration3818 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_file_declaration3822 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_file_declaration3826 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_file_declaration3830 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALIAS_in_alias_declaration3851 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_alias_designator_in_alias_declaration3853 = createBitSet(0x0000040000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_alias_declaration3856 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_alias_declaration3858 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_alias_declaration3862 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_in_alias_declaration3864 = createBitSet(0x0000000000000000L,0x8400000000000000L)
    private val FOLLOW_signature_in_alias_declaration3866 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_alias_declaration3869 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_alias_designator3891 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_alias_designator3898 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_alias_designator3904 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_component_declaration3926 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_component_declaration3930 = createBitSet(0x8000040408000000L)
    private val FOLLOW_IS_in_component_declaration3932 = createBitSet(0x8000000408000000L)
    private val FOLLOW_generic_clause_in_component_declaration3938 = createBitSet(0x8000000008000000L)
    private val FOLLOW_port_clause_in_component_declaration3944 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_component_declaration3949 = createBitSet(0x0000000000100000L)
    private val FOLLOW_COMPONENT_in_component_declaration3951 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_component_declaration3955 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_component_declaration3958 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ATTRIBUTE_in_attribute_declaration3978 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_attribute_declaration3980 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_attribute_declaration3982 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_attribute_declaration3984 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_attribute_declaration3986 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ATTRIBUTE_in_attribute_specification4008 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_attribute_specification4010 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_attribute_specification4012 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_entity_name_list_in_attribute_specification4014 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_attribute_specification4016 = createBitSet(0x4000480950700400L,0x000021C094420002L)
    private val FOLLOW_entity_class_in_attribute_specification4018 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_attribute_specification4020 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_attribute_specification4022 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_attribute_specification4024 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_entity_designator4052 = createBitSet(0x0000000000000002L,0x8000000000000000L)
    private val FOLLOW_CHARACTER_LITERAL_in_entity_designator4059 = createBitSet(0x0000000000000002L,0x8000000000000000L)
    private val FOLLOW_STRING_LITERAL_in_entity_designator4065 = createBitSet(0x0000000000000002L,0x8000000000000000L)
    private val FOLLOW_signature_in_entity_designator4072 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_designator_in_entity_name_list4101 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_entity_name_list4105 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_entity_designator_in_entity_name_list4109 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_OTHERS_in_entity_name_list4121 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_entity_name_list4129 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ENTITY_in_entity_class4147 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARCHITECTURE_in_entity_class4155 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_entity_class4163 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PACKAGE_in_entity_class4171 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURE_in_entity_class4179 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FUNCTION_in_entity_class4187 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TYPE_in_entity_class4195 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBTYPE_in_entity_class4203 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_entity_class4211 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_entity_class4219 = createBitSet(0x0000000000000002L)
    private val FOLLOW_VARIABLE_in_entity_class4227 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_entity_class4235 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_entity_class4243 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LABEL_in_entity_class4251 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LITERAL_in_entity_class4259 = createBitSet(0x0000000000000002L)
    private val FOLLOW_UNITS_in_entity_class4267 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_entity_class4275 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NATURE_in_entity_class4292 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBNATURE_in_entity_class4300 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_entity_class4308 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_entity_class4316 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_configuration_specification4344 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_component_specification_in_configuration_specification4346 = createBitSet(0x8000000400000000L,0x0400000040000000L)
    private val FOLLOW_binding_indication_in_configuration_specification4351 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_configuration_specification4353 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_list_in_instantiation_list4384 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OTHERS_in_instantiation_list4392 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_instantiation_list4400 = createBitSet(0x0000000000000002L)
    private val FOLLOW_instantiation_list_in_component_specification4421 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_component_specification4423 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_component_specification4425 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ENTITY_in_entity_aspect4437 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_entity_aspect4441 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_entity_aspect4444 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_entity_aspect4448 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_entity_aspect4450 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONFIGURATION_in_entity_aspect4459 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_entity_aspect4464 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OPEN_in_entity_aspect4471 = createBitSet(0x0000000000000002L)
    private val FOLLOW_USE_in_binding_indication4491 = createBitSet(0x0400000010200000L)
    private val FOLLOW_entity_aspect_in_binding_indication4493 = createBitSet(0x8000000400000002L)
    private val FOLLOW_generic_map_aspect_in_binding_indication4499 = createBitSet(0x8000000000000002L)
    private val FOLLOW_port_map_aspect_in_binding_indication4504 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DISCONNECT_in_disconnection_specification4521 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_list_in_disconnection_specification4524 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_OTHERS_in_disconnection_specification4530 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_ALL_in_disconnection_specification4536 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_disconnection_specification4539 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_disconnection_specification4541 = createBitSet(0x0000000000000040L)
    private val FOLLOW_AFTER_in_disconnection_specification4543 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_disconnection_specification4545 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_disconnection_specification4547 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LIMIT_in_ams_step_limit_specification4567 = createBitSet(0x1000000000000100L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_list_in_ams_step_limit_specification4570 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_OTHERS_in_ams_step_limit_specification4576 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_ALL_in_ams_step_limit_specification4582 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_step_limit_specification4586 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_ams_step_limit_specification4588 = createBitSet(0x0000000000000000L,0x0000000800000000L)
    private val FOLLOW_WITH_in_ams_step_limit_specification4590 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_step_limit_specification4592 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_step_limit_specification4594 = createBitSet(0x0000000000000002L)
    private val FOLLOW_entity_class_in_entity_class_entry4617 = createBitSet(0x0000000000000002L,0x0100000000000000L)
    private val FOLLOW_BOX_in_entity_class_entry4619 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_group_template_declaration4646 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_group_template_declaration4648 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_group_template_declaration4650 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_group_template_declaration4652 = createBitSet(0x4000480950700400L,0x000021C094420002L)
    private val FOLLOW_entity_class_entry_in_group_template_declaration4656 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_group_template_declaration4660 = createBitSet(0x4000480950700400L,0x000021C094420002L)
    private val FOLLOW_entity_class_entry_in_group_template_declaration4664 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_group_template_declaration4671 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_group_template_declaration4673 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GROUP_in_group_declaration4698 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_group_declaration4700 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_group_declaration4702 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_group_declaration4704 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_group_declaration4706 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_group_constituent_list_in_group_declaration4708 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_group_declaration4710 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_group_declaration4712 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_group_constituent4738 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_group_constituent4750 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_constituent_in_group_constituent_list4780 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_group_constituent_list4785 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_group_constituent_in_group_constituent_list4789 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_USE_in_use_clause4822 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_list_in_use_clause4824 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_use_clause4826 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_enumeration_literal4850 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4857 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_enumeration_type_definition4881 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302000L)
    private val FOLLOW_enumeration_literal_in_enumeration_type_definition4885 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_enumeration_type_definition4889 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000302000L)
    private val FOLLOW_enumeration_literal_in_enumeration_type_definition4893 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_enumeration_type_definition4899 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RANGE_in_integer_or_floating_point_type_definition4921 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_range_in_integer_or_floating_point_type_definition4923 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RANGE_in_physical_type_definition4951 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_range_in_physical_type_definition4955 = createBitSet(0x0000000000000000L,0x0000000010000000L)
    private val FOLLOW_UNITS_in_physical_type_definition4959 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_physical_type_definition4966 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_physical_type_definition4968 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_physical_type_definition4980 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000100L)
    private val FOLLOW_EQ_in_physical_type_definition4982 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000030000L)
    private val FOLLOW_physical_literal_in_physical_type_definition4984 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_physical_type_definition4986 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_END_in_physical_type_definition5002 = createBitSet(0x0000000000000000L,0x0000000010000000L)
    private val FOLLOW_UNITS_in_physical_type_definition5004 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_physical_type_definition5008 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_mark_in_index_subtype_definition5032 = createBitSet(0x0000000000000000L,0x0000000000000020L)
    private val FOLLOW_RANGE_in_index_subtype_definition5034 = createBitSet(0x0000000000000000L,0x0100000000000000L)
    private val FOLLOW_BOX_in_index_subtype_definition5036 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARRAY_in_array_type_definition5063 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_array_type_definition5075 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_array_type_definition5079 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_array_type_definition5084 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_array_type_definition5088 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_array_type_definition5094 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_array_type_definition5096 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_array_type_definition5100 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_array_type_definition5106 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_array_type_definition5108 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_array_type_definition5112 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RECORD_in_record_type_definition5143 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_record_type_definition5154 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_record_type_definition5156 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_record_type_definition5158 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_record_type_definition5160 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_END_in_record_type_definition5175 = createBitSet(0x0000000000000000L,0x0000000000000040L)
    private val FOLLOW_RECORD_in_record_type_definition5177 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_record_type_definition5179 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ACCESS_in_access_type_definition5201 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_access_type_definition5203 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_file_type_definition5226 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_file_type_definition5228 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_file_type_definition5230 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_mark_in_ams_scalar_nature_definition5254 = createBitSet(0x0000000000000000L,0x0000020000000000L)
    private val FOLLOW_ACROSS_in_ams_scalar_nature_definition5256 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_ams_scalar_nature_definition5260 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_THROUGH_in_ams_scalar_nature_definition5262 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_scalar_nature_definition5264 = createBitSet(0x0000000000000000L,0x0000800000000000L)
    private val FOLLOW_REFERENCE_in_ams_scalar_nature_definition5266 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ARRAY_in_ams_array_nature_definition5291 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_ams_array_nature_definition5303 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition5307 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_ams_array_nature_definition5312 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_ams_array_nature_definition5316 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_ams_array_nature_definition5322 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_ams_array_nature_definition5324 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5328 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_ams_array_nature_definition5334 = createBitSet(0x0100000000000000L)
    private val FOLLOW_OF_in_ams_array_nature_definition5336 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5340 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RECORD_in_ams_record_nature_definition5369 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_record_nature_definition5379 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_record_nature_definition5381 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_record_nature_definition5383 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_record_nature_definition5385 = createBitSet(0x0000000008000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_END_in_ams_record_nature_definition5400 = createBitSet(0x0000000000000000L,0x0000000000000040L)
    private val FOLLOW_RECORD_in_ams_record_nature_definition5402 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_record_nature_definition5404 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBNATURE_in_ams_subnature_declaration5426 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_subnature_declaration5428 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_ams_subnature_declaration5430 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_subnature_declaration5432 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_subnature_declaration5434 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_mark_in_ams_subnature_indication5457 = createBitSet(0x0000000000000002L,0x2000000000000000L,0x0000000000001000L)
    private val FOLLOW_index_constraint_in_ams_subnature_indication5459 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000001000L)
    private val FOLLOW_TOLERANCE_in_ams_subnature_indication5463 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_subnature_indication5467 = createBitSet(0x0000000000000000L,0x0000020000000000L)
    private val FOLLOW_ACROSS_in_ams_subnature_indication5469 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_subnature_indication5473 = createBitSet(0x0000000000000000L,0x0000040000000000L)
    private val FOLLOW_THROUGH_in_ams_subnature_indication5475 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_ams_nature_mark5499 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROTECTED_in_protected_type_declaration5524 = createBitSet(0x0000104108002000L,0x0000000040000012L)
    private val FOLLOW_protected_type_declarative_item_in_protected_type_declaration5530 = createBitSet(0x0000104108002000L,0x0000000040000012L)
    private val FOLLOW_END_in_protected_type_declaration5537 = createBitSet(0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_PROTECTED_in_protected_type_declaration5539 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_protected_type_declaration5541 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declaration_in_protected_type_declarative_item5564 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_protected_type_declarative_item5575 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_protected_type_declarative_item5583 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROTECTED_in_protected_type_body5606 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_protected_type_body5608 = createBitSet(0x0000104948402080L,0x00000000C4410012L)
    private val FOLLOW_protected_type_body_declarative_item_in_protected_type_body5614 = createBitSet(0x0000104948402080L,0x00000000C4410012L)
    private val FOLLOW_END_in_protected_type_body5621 = createBitSet(0x0000000000000000L,0x0000000000000008L)
    private val FOLLOW_PROTECTED_in_protected_type_body5623 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_protected_type_body5625 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_protected_type_body5627 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5650 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_protected_type_body_declarative_item5662 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5670 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_protected_type_body_declarative_item5678 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_protected_type_body_declarative_item5686 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_protected_type_body_declarative_item5693 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_protected_type_body_declarative_item5701 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5709 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_protected_type_body_declarative_item5717 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_protected_type_body_declarative_item5725 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5733 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_protected_type_body_declarative_item5741 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SUBTYPE_in_subtype_declaration5761 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_subtype_declaration5763 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_subtype_declaration5765 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_subtype_declaration5767 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_subtype_declaration5769 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_subtype_indication5793 = createBitSet(0x0000000000000002L,0x2000000000000020L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_subtype_indication5797 = createBitSet(0x0000000000000002L,0x2000000000000020L)
    private val FOLLOW_constraint_in_subtype_indication5800 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TO_in_direction5825 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DOWNTO_in_direction5832 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RANGE_in_range_constraint5850 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_range_in_range_constraint5852 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_index_constraint5874 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_discrete_range_in_index_constraint5878 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_index_constraint5882 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_discrete_range_in_index_constraint5887 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_index_constraint5893 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_range5928 = createBitSet(0x0000000001000000L,0x0000000001000000L)
    private val FOLLOW_direction_in_range5930 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_range5934 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_range5941 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_constraint_in_constraint5965 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_constraint5973 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_indication_in_discrete_range6007 = createBitSet(0x0000000000000002L)
    private val FOLLOW_range_in_discrete_range6015 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_type_mark6035 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_statement_in_architecture_statement_list6062 = createBitSet(0x0000000000001002L,0x2000000800000005L,0x0000000000304800L)
    private val FOLLOW_label_colon_in_architecture_statement6091 = createBitSet(0x0000002090309000L,0x2000000800000005L,0x0000000000304800L)
    private val FOLLOW_architecture_statement_with_label_in_architecture_statement6103 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_statement_optional_label_in_architecture_statement6112 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_statement_optional_label_in_architecture_statement6126 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_instantiation_statement_in_architecture_statement_with_label6146 = createBitSet(0x0000000000000002L)
    private val FOLLOW_block_statement_in_architecture_statement_with_label6155 = createBitSet(0x0000000000000002L)
    private val FOLLOW_generate_statement_in_architecture_statement_with_label6164 = createBitSet(0x0000000000000002L)
    private val FOLLOW_POSTPONED_in_architecture_statement_optional_label6194 = createBitSet(0x0000000000001000L,0x2000000800000005L,0x0000000000300800L)
    private val FOLLOW_process_statement_in_architecture_statement_optional_label6198 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_assertion_statement_in_architecture_statement_optional_label6207 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_signal_assignment_statement_in_architecture_statement_optional_label6226 = createBitSet(0x0000000000000002L)
    private val FOLLOW_concurrent_procedure_call_statement_in_architecture_statement_optional_label6235 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_concurrent_break_statement_in_architecture_statement_optional_label6256 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GENERIC_in_generic_map_aspect6294 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_generic_map_aspect6296 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_generic_map_aspect6298 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_generic_map_aspect6300 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_generic_map_aspect6302 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PORT_in_port_map_aspect6324 = createBitSet(0x0001000000000000L)
    private val FOLLOW_MAP_in_port_map_aspect6326 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_port_map_aspect6328 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_port_map_aspect6330 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_port_map_aspect6332 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BLOCK_in_block_statement6364 = createBitSet(0x8000144DC0D06080L,0x200061C0C4430012L)
    private val FOLLOW_LPAREN_in_block_statement6367 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_block_statement6371 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_block_statement6373 = createBitSet(0x8000144DC0D06080L,0x000061C0C4430012L)
    private val FOLLOW_IS_in_block_statement6377 = createBitSet(0x8000104DC0D06080L,0x000061C0C4430012L)
    private val FOLLOW_generic_clause_in_block_statement6384 = createBitSet(0x8000104DC0D06080L,0x000061C0C4430012L)
    private val FOLLOW_generic_map_aspect_in_block_statement6387 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement6389 = createBitSet(0x80001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_port_clause_in_block_statement6399 = createBitSet(0x80001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_port_map_aspect_in_block_statement6402 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement6404 = createBitSet(0x00001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_block_declarative_item_in_block_statement6414 = createBitSet(0x00001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_BEGIN_in_block_statement6421 = createBitSet(0x0000000008001000L,0x2000000800000005L,0x0000000000304800L)
    private val FOLLOW_architecture_statement_list_in_block_statement6426 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_block_statement6430 = createBitSet(0x0000000000008000L)
    private val FOLLOW_BLOCK_in_block_statement6432 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_block_statement6436 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_block_statement6439 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_block_declarative_item6464 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_block_declarative_item6476 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_block_declarative_item6484 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_block_declarative_item6492 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_declaration_in_block_declarative_item6500 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_block_declarative_item6508 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_block_declarative_item6516 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_block_declarative_item6524 = createBitSet(0x0000000000000002L)
    private val FOLLOW_component_declaration_in_block_declarative_item6532 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_block_declarative_item6540 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_block_declarative_item6548 = createBitSet(0x0000000000000002L)
    private val FOLLOW_configuration_specification_in_block_declarative_item6556 = createBitSet(0x0000000000000002L)
    private val FOLLOW_disconnection_specification_in_block_declarative_item6564 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_block_declarative_item6572 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_block_declarative_item6580 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_block_declarative_item6588 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_step_limit_specification_in_block_declarative_item6608 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_nature_declaration_in_block_declarative_item6616 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_subnature_declaration_in_block_declarative_item6624 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_quantity_declaration_in_block_declarative_item6632 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_terminal_declaration_in_block_declarative_item6640 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCESS_in_process_statement6671 = createBitSet(0x0000144940406080L,0x20000000C4410012L)
    private val FOLLOW_LPAREN_in_process_statement6674 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_list_in_process_statement6676 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_process_statement6678 = createBitSet(0x0000144940406080L,0x00000000C4410012L)
    private val FOLLOW_IS_in_process_statement6682 = createBitSet(0x0000104940406080L,0x00000000C4410012L)
    private val FOLLOW_process_declarative_item_in_process_statement6689 = createBitSet(0x0000104940406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_process_statement6697 = createBitSet(0x00908020A8081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_process_statement6702 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_process_statement6706 = createBitSet(0x0000000000000000L,0x0000000000000005L)
    private val FOLLOW_POSTPONED_in_process_statement6708 = createBitSet(0x0000000000000000L,0x0000000000000004L)
    private val FOLLOW_PROCESS_in_process_statement6711 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_process_statement6715 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_process_statement6718 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6743 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_process_declarative_item6760 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_process_declarative_item6768 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_process_declarative_item6776 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_process_declarative_item6784 = createBitSet(0x0000000000000002L)
    private val FOLLOW_file_declaration_in_process_declarative_item6792 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_process_declarative_item6800 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_process_declarative_item6808 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_process_declarative_item6816 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_process_declarative_item6824 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_process_declarative_item6832 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_process_declarative_item6840 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_concurrent_procedure_call_statement6863 = createBitSet(0x0000000000000000L,0x2400000000000000L)
    private val FOLLOW_LPAREN_in_concurrent_procedure_call_statement6866 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_concurrent_procedure_call_statement6868 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_concurrent_procedure_call_statement6870 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6874 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ASSERT_in_concurrent_assertion_statement6897 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_concurrent_assertion_statement6899 = createBitSet(0x0000000000000000L,0x0400000000008400L)
    private val FOLLOW_REPORT_in_concurrent_assertion_statement6903 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_concurrent_assertion_statement6907 = createBitSet(0x0000000000000000L,0x0400000000008000L)
    private val FOLLOW_SEVERITY_in_concurrent_assertion_statement6912 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_concurrent_assertion_statement6916 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_concurrent_assertion_statement6920 = createBitSet(0x0000000000000002L)
    private val FOLLOW_conditional_signal_assignment_in_concurrent_signal_assignment_statement6949 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_signal_assignment_in_concurrent_signal_assignment_statement6956 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_conditional_signal_assignment6984 = createBitSet(0x0000000000000000L,0x0008000000000000L)
    private val FOLLOW_LEQ_in_conditional_signal_assignment6986 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_GUARDED_in_conditional_signal_assignment6988 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_delay_mechanism_in_conditional_signal_assignment6991 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_conditional_waveforms_in_conditional_signal_assignment6999 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_conditional_signal_assignment7005 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_in_conditional_waveforms7028 = createBitSet(0x0000000000000002L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_conditional_waveforms7032 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_conditional_waveforms7034 = createBitSet(0x0000000002000002L)
    private val FOLLOW_ELSE_in_conditional_waveforms7038 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_conditional_waveforms_in_conditional_waveforms7040 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_in_selected_waveform7069 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_selected_waveform7071 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_choices_in_selected_waveform7073 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WITH_in_selected_signal_assignment7103 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_selected_signal_assignment7105 = createBitSet(0x0000000000000000L,0x0000000000004000L)
    private val FOLLOW_SELECT_in_selected_signal_assignment7107 = createBitSet(0x0000000000000000L,0x2000000000000000L,0x0000000000300800L)
    private val FOLLOW_target_in_selected_signal_assignment7114 = createBitSet(0x0000000000000000L,0x0008000000000000L)
    private val FOLLOW_LEQ_in_selected_signal_assignment7116 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_GUARDED_in_selected_signal_assignment7118 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_delay_mechanism_in_selected_signal_assignment7121 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_selected_waveform_in_selected_signal_assignment7130 = createBitSet(0x0000000000000000L,0x0C00000000000000L)
    private val FOLLOW_COMMA_in_selected_signal_assignment7134 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_selected_waveform_in_selected_signal_assignment7138 = createBitSet(0x0000000000000000L,0x0C00000000000000L)
    private val FOLLOW_SEMICOLON_in_selected_signal_assignment7143 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_target7169 = createBitSet(0x0000000000000002L)
    private val FOLLOW_aggregate_in_target7177 = createBitSet(0x0000000000000002L)
    private val FOLLOW_COMPONENT_in_component_instantiation_statement7208 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_component_instantiation_statement7213 = createBitSet(0x8000000400000000L,0x0400000000000000L)
    private val FOLLOW_ENTITY_in_component_instantiation_statement7223 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_component_instantiation_statement7227 = createBitSet(0x8000000400000000L,0x2400000000000000L)
    private val FOLLOW_LPAREN_in_component_instantiation_statement7230 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_component_instantiation_statement7234 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_component_instantiation_statement7236 = createBitSet(0x8000000400000000L,0x0400000000000000L)
    private val FOLLOW_CONFIGURATION_in_component_instantiation_statement7248 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_component_instantiation_statement7252 = createBitSet(0x8000000400000000L,0x0400000000000000L)
    private val FOLLOW_generic_map_aspect_in_component_instantiation_statement7259 = createBitSet(0x8000000000000000L,0x0400000000000000L)
    private val FOLLOW_port_map_aspect_in_component_instantiation_statement7264 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_component_instantiation_statement7267 = createBitSet(0x0000000000000002L)
    private val FOLLOW_for_generate_statement_in_generate_statement7291 = createBitSet(0x0000000000000002L)
    private val FOLLOW_if_generate_statement_in_generate_statement7300 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_for_generate_statement7323 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_for_generate_statement7327 = createBitSet(0x0000008000000000L)
    private val FOLLOW_IN_in_for_generate_statement7329 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_discrete_range_in_for_generate_statement7331 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_for_generate_statement7333 = createBitSet(0x00001049C0D07080L,0x200061C8C4430017L,0x0000000000304800L)
    private val FOLLOW_generate_statement_body_in_for_generate_statement7340 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_for_generate_statement7344 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_for_generate_statement7346 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_for_generate_statement7350 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_for_generate_statement7353 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_if_generate_statement7376 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_if_generate_statement7380 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement7382 = createBitSet(0x00001049C0D07080L,0x200061C8C4430017L,0x0000000000304800L)
    private val FOLLOW_generate_statement_body_in_if_generate_statement7389 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_if_generate_statement7397 = createBitSet(0x0000000200000000L)
    private val FOLLOW_GENERATE_in_if_generate_statement7399 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_if_generate_statement7403 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_if_generate_statement7406 = createBitSet(0x0000000000000002L)
    private val FOLLOW_block_declarative_item_in_generate_statement_body7437 = createBitSet(0x00001049C0D06080L,0x000061C0C4430012L)
    private val FOLLOW_BEGIN_in_generate_statement_body7448 = createBitSet(0x0000000000001000L,0x2000000800000005L,0x0000000000304800L)
    private val FOLLOW_architecture_statement_list_in_generate_statement_body7457 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BREAK_in_ams_concurrent_break_statement7488 = createBitSet(0x0200000080000000L,0x0400000200000000L,0x0000000000300800L)
    private val FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement7490 = createBitSet(0x0200000000000000L,0x0400000200000000L)
    private val FOLLOW_ON_in_ams_concurrent_break_statement7494 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_list_in_ams_concurrent_break_statement7496 = createBitSet(0x0000000000000000L,0x0400000200000000L)
    private val FOLLOW_WHEN_in_ams_concurrent_break_statement7501 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_concurrent_break_statement7503 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_concurrent_break_statement7507 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement7529 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement7538 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement7547 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement7556 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement7565 = createBitSet(0x0000000000000002L)
    private val FOLLOW_label_colon_in_ams_simultaneous_statement_list7589 = createBitSet(0x00C8002000080010L,0x2001000000000000L,0x00000000003F2830L)
    private val FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list7592 = createBitSet(0x00C8002000080012L,0x2001000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7622 = createBitSet(0x0000000000000000L,0x0004000000000000L)
    private val FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement7624 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7628 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000001000L)
    private val FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement7631 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_simple_simultaneous_statement7635 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement7639 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_ams_simultaneous_if_statement7671 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_ams_simultaneous_if_statement7675 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement7677 = createBitSet(0x00C800200E080010L,0x2001000000000000L,0x00000000003F2830L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7684 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSIF_in_ams_simultaneous_if_statement7691 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_ams_simultaneous_if_statement7695 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement7697 = createBitSet(0x00C800200E080010L,0x2001000000000000L,0x00000000003F2830L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7704 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSE_in_ams_simultaneous_if_statement7720 = createBitSet(0x00C8002008080010L,0x2001000000000000L,0x00000000003F2830L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7727 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_ams_simultaneous_if_statement7733 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_if_statement7735 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_simultaneous_if_statement7739 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement7742 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_ams_simultaneous_case_statement7775 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_simultaneous_case_statement7777 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_simultaneous_case_statement7779 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_ams_simultaneous_case_statement7785 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_choices_in_ams_simultaneous_case_statement7787 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_ams_simultaneous_case_statement7789 = createBitSet(0x00C8002008080010L,0x2001000200000000L,0x00000000003F2830L)
    private val FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement7791 = createBitSet(0x0000000008000000L,0x0000000200000000L)
    private val FOLLOW_END_in_ams_simultaneous_case_statement7799 = createBitSet(0x0000000000080000L)
    private val FOLLOW_CASE_in_ams_simultaneous_case_statement7801 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_simultaneous_case_statement7805 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement7808 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7837 = createBitSet(0x0000144900406080L,0x00000000C4410012L)
    private val FOLLOW_IS_in_ams_simultaneous_procedural_statement7839 = createBitSet(0x0000104900406080L,0x00000000C4410012L)
    private val FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7846 = createBitSet(0x0000104900406080L,0x00000000C4410012L)
    private val FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7853 = createBitSet(0x00908020A8081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7858 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_ams_simultaneous_procedural_statement7862 = createBitSet(0x0000000000000000L,0x0001000000000000L)
    private val FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7864 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_ams_simultaneous_procedural_statement7868 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7871 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7893 = createBitSet(0x0000000000000002L)
    private val FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7901 = createBitSet(0x0000000000000002L)
    private val FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7909 = createBitSet(0x0000000000000002L)
    private val FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7917 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7925 = createBitSet(0x0000000000000002L)
    private val FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7933 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7941 = createBitSet(0x0000000000000002L)
    private val FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7949 = createBitSet(0x0000000000000002L)
    private val FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7957 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7965 = createBitSet(0x0000000000000002L)
    private val FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7973 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NULL_in_ams_simultaneous_null_statement7993 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7995 = createBitSet(0x0000000000000002L)
    private val FOLLOW_sequential_statement_in_sequence_of_statements8021 = createBitSet(0x00908020A0081002L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_label_colon_in_sequential_statement8046 = createBitSet(0x00908020A0081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_wait_statement_in_sequential_statement8053 = createBitSet(0x0000000000000002L)
    private val FOLLOW_assertion_statement_in_sequential_statement8062 = createBitSet(0x0000000000000002L)
    private val FOLLOW_report_statement_in_sequential_statement8071 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signal_assignment_statement_in_sequential_statement8086 = createBitSet(0x0000000000000002L)
    private val FOLLOW_variable_assignment_statement_in_sequential_statement8101 = createBitSet(0x0000000000000002L)
    private val FOLLOW_if_statement_in_sequential_statement8110 = createBitSet(0x0000000000000002L)
    private val FOLLOW_case_statement_in_sequential_statement8119 = createBitSet(0x0000000000000002L)
    private val FOLLOW_loop_statement_in_sequential_statement8128 = createBitSet(0x0000000000000002L)
    private val FOLLOW_next_statement_in_sequential_statement8137 = createBitSet(0x0000000000000002L)
    private val FOLLOW_exit_statement_in_sequential_statement8146 = createBitSet(0x0000000000000002L)
    private val FOLLOW_return_statement_in_sequential_statement8155 = createBitSet(0x0000000000000002L)
    private val FOLLOW_null_statement_in_sequential_statement8164 = createBitSet(0x0000000000000002L)
    private val FOLLOW_procedure_call_statement_in_sequential_statement8173 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_break_statement_in_sequential_statement8184 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WAIT_in_wait_statement8210 = createBitSet(0x0200000080000000L,0x0400000020000000L)
    private val FOLLOW_ON_in_wait_statement8213 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_list_in_wait_statement8215 = createBitSet(0x0000000080000000L,0x0400000020000000L)
    private val FOLLOW_UNTIL_in_wait_statement8220 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_wait_statement8222 = createBitSet(0x0000000080000000L,0x0400000000000000L)
    private val FOLLOW_FOR_in_wait_statement8227 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_wait_statement8229 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_wait_statement8233 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ASSERT_in_assertion_statement8258 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_assertion_statement8260 = createBitSet(0x0000000000000000L,0x0400000000008400L)
    private val FOLLOW_REPORT_in_assertion_statement8263 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_assertion_statement8267 = createBitSet(0x0000000000000000L,0x0400000000008000L)
    private val FOLLOW_SEVERITY_in_assertion_statement8272 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_assertion_statement8276 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_assertion_statement8280 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REPORT_in_report_statement8309 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_report_statement8313 = createBitSet(0x0000000000000000L,0x0400000000008000L)
    private val FOLLOW_SEVERITY_in_report_statement8316 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_report_statement8320 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_report_statement8324 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_signal_assignment_in_signal_assignment_statement8357 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_simple_signal_assignment8389 = createBitSet(0x0000000000000000L,0x0008000000000000L)
    private val FOLLOW_LEQ_in_simple_signal_assignment8391 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_delay_mechanism_in_simple_signal_assignment8393 = createBitSet(0x00C8011000000010L,0x200000000A000100L,0x00000000003F2830L)
    private val FOLLOW_waveform_in_simple_signal_assignment8396 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_simple_signal_assignment8398 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TRANSPORT_in_delay_mechanism8436 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REJECT_in_delay_mechanism8444 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_delay_mechanism8448 = createBitSet(0x0000010000000000L)
    private val FOLLOW_INERTIAL_in_delay_mechanism8452 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_waveform_element8471 = createBitSet(0x0000000000000042L)
    private val FOLLOW_AFTER_in_waveform_element8474 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_waveform_element8478 = createBitSet(0x0000000000000002L)
    private val FOLLOW_waveform_element_in_waveform8509 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_waveform8513 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_waveform_element_in_waveform8517 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_UNAFFECTED_in_waveform8526 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_variable_assignment_in_variable_assignment_statement8551 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_simple_variable_assignment8587 = createBitSet(0x0000000000000000L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_simple_variable_assignment8589 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_simple_variable_assignment8591 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_simple_variable_assignment8593 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_procedure_call_statement8621 = createBitSet(0x0000000000000000L,0x2400000000000000L)
    private val FOLLOW_LPAREN_in_procedure_call_statement8624 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_procedure_call_statement8626 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_procedure_call_statement8628 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_procedure_call_statement8632 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IF_in_if_statement8660 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_if_statement8664 = createBitSet(0x0000000000000000L,0x0000000000800000L)
    private val FOLLOW_THEN_in_if_statement8666 = createBitSet(0x00908020AE081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_if_statement8673 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSIF_in_if_statement8680 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_if_statement8684 = createBitSet(0x0000000000000000L,0x0000000000800000L)
    private val FOLLOW_THEN_in_if_statement8686 = createBitSet(0x00908020AE081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_if_statement8694 = createBitSet(0x000000000E000000L)
    private val FOLLOW_ELSE_in_if_statement8712 = createBitSet(0x00908020A8081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_if_statement8720 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_if_statement8726 = createBitSet(0x0000002000000000L)
    private val FOLLOW_IF_in_if_statement8728 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_if_statement8732 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_if_statement8735 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CASE_in_case_statement8763 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_case_statement8767 = createBitSet(0x0000040000000000L)
    private val FOLLOW_IS_in_case_statement8769 = createBitSet(0x0000000000000000L,0x0000000200000000L)
    private val FOLLOW_WHEN_in_case_statement8775 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_choices_in_case_statement8777 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_case_statement8779 = createBitSet(0x00908020A8081000L,0x2000000700000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_case_statement8781 = createBitSet(0x0000000008000000L,0x0000000200000000L)
    private val FOLLOW_END_in_case_statement8789 = createBitSet(0x0000000000080000L)
    private val FOLLOW_CASE_in_case_statement8791 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_case_statement8797 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_case_statement8800 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WHILE_in_iteration_scheme8820 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_iteration_scheme8822 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FOR_in_iteration_scheme8830 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_iteration_scheme8832 = createBitSet(0x0000008000000000L)
    private val FOLLOW_IN_in_iteration_scheme8834 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_discrete_range_in_iteration_scheme8836 = createBitSet(0x0000000000000002L)
    private val FOLLOW_iteration_scheme_in_loop_statement8865 = createBitSet(0x0000800000000000L)
    private val FOLLOW_LOOP_in_loop_statement8868 = createBitSet(0x00908020A8081000L,0x2000000500000C00L,0x0000000000304800L)
    private val FOLLOW_sequence_of_statements_in_loop_statement8873 = createBitSet(0x0000000008000000L)
    private val FOLLOW_END_in_loop_statement8877 = createBitSet(0x0000800000000000L)
    private val FOLLOW_LOOP_in_loop_statement8879 = createBitSet(0x0000000000000000L,0x0400000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_loop_statement8883 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_loop_statement8886 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEXT_in_next_statement8907 = createBitSet(0x0000000000000000L,0x0400000200000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_next_statement8909 = createBitSet(0x0000000000000000L,0x0400000200000000L)
    private val FOLLOW_WHEN_in_next_statement8913 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_next_statement8915 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_next_statement8919 = createBitSet(0x0000000000000002L)
    private val FOLLOW_EXIT_in_exit_statement8941 = createBitSet(0x0000000000000000L,0x0400000200000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_exit_statement8943 = createBitSet(0x0000000000000000L,0x0400000200000000L)
    private val FOLLOW_WHEN_in_exit_statement8947 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_condition_in_exit_statement8949 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_exit_statement8953 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RETURN_in_return_statement8975 = createBitSet(0x00C8000000000010L,0x2400000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_return_statement8977 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_return_statement8980 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NULL_in_null_statement9003 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_null_statement9005 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BREAK_in_ams_break_statement9026 = createBitSet(0x0000000080000000L,0x0400000200000000L,0x0000000000300800L)
    private val FOLLOW_ams_break_element_list_in_ams_break_statement9028 = createBitSet(0x0000000000000000L,0x0400000200000000L)
    private val FOLLOW_WHEN_in_ams_break_statement9032 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_break_statement9034 = createBitSet(0x0000000000000000L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_ams_break_statement9038 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_break_element_in_ams_break_element_list9064 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_ams_break_element_list9068 = createBitSet(0x0000000080000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_break_element_in_ams_break_element_list9072 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_FOR_in_ams_break_element9101 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_in_ams_break_element9105 = createBitSet(0x0000000000000000L,0x0000000040000000L)
    private val FOLLOW_USE_in_ams_break_element9107 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_in_ams_break_element9113 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_ams_break_element9115 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_break_element9119 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_constant_declaration_in_interface_element_procedure9155 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_variable_declaration_in_interface_element_procedure9180 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure9189 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_file_declaration_in_interface_element_procedure9197 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure9213 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure9220 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_constant_declaration_in_interface_element_function9253 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_signal_declaration_function_in_interface_element_function9262 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_file_declaration_in_interface_element_function9270 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_terminal_declaration_in_interface_element_function9286 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_interface_quantity_declaration_in_interface_element_function9293 = createBitSet(0x0000000000000002L)
    private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9332 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_parameter_interface_list_procedure9336 = createBitSet(0x0000000040400000L,0x0000018080020000L,0x0000000000300000L)
    private val FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9340 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_interface_element_function_in_parameter_interface_list_function9373 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_SEMICOLON_in_parameter_interface_list_function9378 = createBitSet(0x0000000040400000L,0x0000018080020000L,0x0000000000300000L)
    private val FOLLOW_interface_element_function_in_parameter_interface_list_function9382 = createBitSet(0x0000000000000002L,0x0400000000000000L)
    private val FOLLOW_CONSTANT_in_interface_constant_declaration9409 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_interface_constant_declaration9412 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_interface_constant_declaration9414 = createBitSet(0x0000008000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_IN_in_interface_constant_declaration9416 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_interface_constant_declaration9419 = createBitSet(0x0000000000000002L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_constant_declaration9422 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_interface_constant_declaration9424 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_interface_signal_declaration_procedure9447 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_interface_signal_declaration_procedure9450 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_interface_signal_declaration_procedure9452 = createBitSet(0x2000228000020000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_interface_mode_in_interface_signal_declaration_procedure9454 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_interface_signal_declaration_procedure9457 = createBitSet(0x0000000000040002L,0x0080000000000000L)
    private val FOLLOW_BUS_in_interface_signal_declaration_procedure9459 = createBitSet(0x0000000000000002L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure9463 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_interface_signal_declaration_procedure9465 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SIGNAL_in_interface_signal_declaration_function9489 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_interface_signal_declaration_function9491 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_interface_signal_declaration_function9493 = createBitSet(0x0000008000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_IN_in_interface_signal_declaration_function9495 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_interface_signal_declaration_function9498 = createBitSet(0x0000000000040002L,0x0080000000000000L)
    private val FOLLOW_BUS_in_interface_signal_declaration_function9500 = createBitSet(0x0000000000000002L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function9504 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_interface_signal_declaration_function9506 = createBitSet(0x0000000000000002L)
    private val FOLLOW_VARIABLE_in_interface_variable_declaration9529 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_interface_variable_declaration9532 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_interface_variable_declaration9534 = createBitSet(0x2000228000020000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_interface_mode_in_interface_variable_declaration9536 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_interface_variable_declaration9539 = createBitSet(0x0000000000000002L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_interface_variable_declaration9542 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_interface_variable_declaration9544 = createBitSet(0x0000000000000002L)
    private val FOLLOW_IN_in_interface_mode9568 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OUT_in_interface_mode9575 = createBitSet(0x0000000000000002L)
    private val FOLLOW_INOUT_in_interface_mode9582 = createBitSet(0x0000000000000002L)
    private val FOLLOW_BUFFER_in_interface_mode9589 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LINKAGE_in_interface_mode9596 = createBitSet(0x0000000000000002L)
    private val FOLLOW_FILE_in_interface_file_declaration9614 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_interface_file_declaration9616 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_interface_file_declaration9618 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_interface_file_declaration9620 = createBitSet(0x0000000000000002L)
    private val FOLLOW_TERMINAL_in_ams_interface_terminal_declaration9642 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_interface_terminal_declaration9644 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_interface_terminal_declaration9646 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration9648 = createBitSet(0x0000000000000002L)
    private val FOLLOW_QUANTITY_in_ams_interface_quantity_declaration9668 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_ams_interface_quantity_declaration9670 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_ams_interface_quantity_declaration9672 = createBitSet(0x2000008000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_IN_in_ams_interface_quantity_declaration9675 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_OUT_in_ams_interface_quantity_declaration9679 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_subtype_indication_in_ams_interface_quantity_declaration9683 = createBitSet(0x0000000000000002L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration9686 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_ams_interface_quantity_declaration9688 = createBitSet(0x0000000000000002L)
    private val FOLLOW_formal_part_in_association_element9719 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_association_element9721 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_actual_part_in_association_element9725 = createBitSet(0x0000000000000002L)
    private val FOLLOW_association_element_in_association_list9756 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_association_list9761 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_element_in_association_list9765 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_name_in_formal_part9798 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_actual_part9828 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OPEN_in_actual_part9839 = createBitSet(0x0000000000000002L)
    private val FOLLOW_expression_in_condition9859 = createBitSet(0x0000000000000002L)
    private val FOLLOW_relation_in_expression9888 = createBitSet(0x0824000000000202L,0x0000003000000000L)
    private val FOLLOW_NAND_in_expression9899 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_NOR_in_expression9903 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_relation_in_expression9908 = createBitSet(0x0000000000000002L)
    private val FOLLOW_logical_operator_in_expression9921 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_relation_in_expression9925 = createBitSet(0x0800000000000202L,0x0000003000000000L)
    private val FOLLOW_AND_in_logical_operator9957 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OR_in_logical_operator9964 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XOR_in_logical_operator9971 = createBitSet(0x0000000000000002L)
    private val FOLLOW_XNOR_in_logical_operator9978 = createBitSet(0x0000000000000002L)
    private val FOLLOW_shift_expression_in_relation10002 = createBitSet(0x0000000000000002L,0x0058000000000000L,0x00000000000001C0L)
    private val FOLLOW_relational_operator_in_relation10013 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_shift_expression_in_relation10017 = createBitSet(0x0000000000000002L)
    private val FOLLOW_EQ_in_relational_operator10045 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEQ_in_relational_operator10054 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LT_in_relational_operator10063 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LEQ_in_relational_operator10072 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GT_in_relational_operator10081 = createBitSet(0x0000000000000002L)
    private val FOLLOW_GEQ_in_relational_operator10090 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_shift_expression10114 = createBitSet(0x0000000000000002L,0x00000000003C3000L)
    private val FOLLOW_shift_operator_in_shift_expression10125 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_simple_expression_in_shift_expression10129 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SLL_in_shift_operator10153 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SRL_in_shift_operator10160 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SLA_in_shift_operator10167 = createBitSet(0x0000000000000002L)
    private val FOLLOW_SRA_in_shift_operator10174 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ROL_in_shift_operator10181 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ROR_in_shift_operator10188 = createBitSet(0x0000000000000002L)
    private val FOLLOW_sign_in_simple_expression10212 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_term_in_simple_expression10217 = createBitSet(0x0000000000000002L,0x1000000000000000L,0x0000000000000030L)
    private val FOLLOW_adding_operator_in_simple_expression10232 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_term_in_simple_expression10236 = createBitSet(0x0000000000000002L,0x1000000000000000L,0x0000000000000030L)
    private val FOLLOW_PLUS_in_sign10261 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MINUS_in_sign10268 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PLUS_in_adding_operator10293 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MINUS_in_adding_operator10300 = createBitSet(0x0000000000000002L)
    private val FOLLOW_AMPERSAND_in_adding_operator10307 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MUL_in_multiplying_operator10329 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DIV_in_multiplying_operator10336 = createBitSet(0x0000000000000002L)
    private val FOLLOW_MOD_in_multiplying_operator10343 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REM_in_multiplying_operator10350 = createBitSet(0x0000000000000002L)
    private val FOLLOW_factor_in_term10372 = createBitSet(0x0002000000000002L,0x0000000000000200L,0x000000000000000CL)
    private val FOLLOW_multiplying_operator_in_term10381 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_factor_in_term10385 = createBitSet(0x0002000000000002L,0x0000000000000200L,0x000000000000000CL)
    private val FOLLOW_primary_in_factor10409 = createBitSet(0x0000000000000002L,0x0002000000000000L)
    private val FOLLOW_DOUBLESTAR_in_factor10412 = createBitSet(0x0088000000000000L,0x2000000000000000L,0x00000000003F2800L)
    private val FOLLOW_primary_in_factor10416 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ABS_in_factor10425 = createBitSet(0x0088000000000000L,0x2000000000000000L,0x00000000003F2800L)
    private val FOLLOW_primary_in_factor10427 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NOT_in_factor10434 = createBitSet(0x0088000000000000L,0x2000000000000000L,0x00000000003F2800L)
    private val FOLLOW_primary_in_factor10436 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_primary10467 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000008000L)
    private val FOLLOW_qualified_expression_in_primary10469 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_primary10482 = createBitSet(0x0000000000000002L)
    private val FOLLOW_function_call_in_primary10502 = createBitSet(0x0000000000000002L)
    private val FOLLOW_literal_in_primary10510 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_primary10528 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_primary10530 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_primary10532 = createBitSet(0x0000000000000002L)
    private val FOLLOW_allocator_in_primary10540 = createBitSet(0x0000000000000002L)
    private val FOLLOW_aggregate_in_primary10548 = createBitSet(0x0000000000000002L)
    private val FOLLOW_NEW_in_allocator10566 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_allocator10568 = createBitSet(0x0000000000000002L,0x2000000000000000L,0x0000000000008000L)
    private val FOLLOW_qualified_expression_in_allocator10576 = createBitSet(0x0000000000000002L)
    private val FOLLOW_index_constraint_in_allocator10586 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_function_call10611 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_function_call10614 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_function_call10618 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_function_call10620 = createBitSet(0x0000000000000002L)
    private val FOLLOW_APOSTROPHE_in_qualified_expression10644 = createBitSet(0x0000000000000000L,0x2000000000000000L,0x0000000000300800L)
    private val FOLLOW_aggregate_in_qualified_expression10646 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_selected_name_list10672 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_selected_name_list10677 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_selected_name_in_selected_name_list10681 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_name_prefix_in_selected_name10712 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000000400L)
    private val FOLLOW_name_selected_part_in_selected_name10716 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000000400L)
    private val FOLLOW_name_in_name_list10746 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_name_list10751 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_name_in_name_list10755 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_name_prefix_in_name10787 = createBitSet(0x0000000000000002L,0xA000000000000000L,0x0000000000008400L)
    private val FOLLOW_name_part_in_name10790 = createBitSet(0x0000000000000002L,0xA000000000000000L,0x0000000000008400L)
    private val FOLLOW_identifier_in_name_prefix10819 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_name_prefix10827 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_selected_part_in_name_part10853 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_attribute_part_in_name_part10864 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_indexed_part_in_name_part10879 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_slice_part_in_name_part10889 = createBitSet(0x0000000000000002L)
    private val FOLLOW_DOT_in_name_selected_part10914 = createBitSet(0x0000000000000100L,0x0000000000000000L,0x0000000000302800L)
    private val FOLLOW_identifier_in_name_selected_part10920 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CHARACTER_LITERAL_in_name_selected_part10926 = createBitSet(0x0000000000000002L)
    private val FOLLOW_STRING_LITERAL_in_name_selected_part10933 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ALL_in_name_selected_part10939 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_name_slice_part10962 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_discrete_range_in_name_slice_part10964 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_name_slice_part10966 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_name_indexed_part10994 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_name_indexed_part10998 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_name_indexed_part11002 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_name_indexed_part11006 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_name_indexed_part11012 = createBitSet(0x0000000000000002L)
    private val FOLLOW_signature_in_name_attribute_part11031 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000008000L)
    private val FOLLOW_APOSTROPHE_in_name_attribute_part11034 = createBitSet(0x0000000000000000L,0x0000000000000020L,0x0000000000300000L)
    private val FOLLOW_identifier_in_name_attribute_part11039 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_RANGE_in_name_attribute_part11041 = createBitSet(0x0000000000000002L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_name_attribute_part11058 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_name_attribute_part11060 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_name_attribute_part11062 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LBRACKET_in_signature11083 = createBitSet(0x0000000000000000L,0x0000000000000800L,0x0000000000300801L)
    private val FOLLOW_selected_name_list_in_signature11085 = createBitSet(0x0000000000000000L,0x0000000000000800L,0x0000000000000001L)
    private val FOLLOW_RETURN_in_signature11089 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_type_mark_in_signature11091 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000001L)
    private val FOLLOW_RBRACKET_in_signature11095 = createBitSet(0x0000000000000002L)
    private val FOLLOW_REAL_LITERAL_in_literal11128 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_INTEGER_LITERAL_in_literal11136 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_BASED_LITERAL_in_literal11144 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_CHARACTER_LITERAL_in_literal11152 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_STRING_LITERAL_in_literal11160 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_BIT_STRING_LITERAL_in_literal11168 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_NULL_in_literal11176 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_literal11194 = createBitSet(0x0000000000000002L)
    private val FOLLOW_INTEGER_LITERAL_in_physical_literal11220 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_REAL_LITERAL_in_physical_literal11227 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_physical_literal11242 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choices_in_element_association11274 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_element_association11276 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_element_association11281 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_aggregate11311 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_element_association_in_aggregate11316 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_COMMA_in_aggregate11320 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_element_association_in_aggregate11324 = createBitSet(0x0000000000000000L,0x4800000000000000L)
    private val FOLLOW_RPAREN_in_aggregate11330 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_choice11367 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_choice11377 = createBitSet(0x0000000000000002L)
    private val FOLLOW_OTHERS_in_choice11385 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choice_in_choices11409 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000000200L)
    private val FOLLOW_BAR_in_choices11414 = createBitSet(0x10C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_choice_in_choices11418 = createBitSet(0x0000000000000002L,0x0000000000000000L,0x0000000000000200L)
    private val FOLLOW_identifier_in_identifier_list11453 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_COMMA_in_identifier_list11458 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_in_identifier_list11462 = createBitSet(0x0000000000000002L,0x0800000000000000L)
    private val FOLLOW_BASIC_IDENTIFIER_in_identifier11491 = createBitSet(0x0000000000000002L)
    private val FOLLOW_EXTENDED_IDENTIFIER_in_identifier11500 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_label_colon11521 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_label_colon11523 = createBitSet(0x0000000000000002L)
    private val FOLLOW_discrete_range_in_synpred1_VHDL2110 = createBitSet(0x0000000000000002L)
    private val FOLLOW_identifier_in_synpred2_VHDL2154 = createBitSet(0x0000000000000002L)
    private val FOLLOW_RANGE_in_synpred3_VHDL3156 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_range_in_synpred3_VHDL3158 = createBitSet(0x0000000000000000L,0x0000000010000000L)
    private val FOLLOW_UNITS_in_synpred3_VHDL3160 = createBitSet(0x0000000000000002L)
    private val FOLLOW_PROTECTED_in_synpred4_VHDL3220 = createBitSet(0x0000000000010000L)
    private val FOLLOW_BODY_in_synpred4_VHDL3222 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_free_quantity_declaration_in_synpred5_VHDL3353 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_branch_quantity_declaration_in_synpred6_VHDL3366 = createBitSet(0x0000000000000002L)
    private val FOLLOW_ams_across_aspect_in_synpred7_VHDL3444 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_synpred8_VHDL5070 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_synpred8_VHDL5072 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_synpred9_VHDL5298 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300800L)
    private val FOLLOW_index_subtype_definition_in_synpred9_VHDL5300 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_synpred10_VHDL5920 = createBitSet(0x0000000001000000L,0x0000000001000000L)
    private val FOLLOW_direction_in_synpred10_VHDL5922 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_synpred11_VHDL6000 = createBitSet(0x0000000000000000L,0x0000000000000020L)
    private val FOLLOW_RANGE_in_synpred11_VHDL6002 = createBitSet(0x0000000000000002L)
    private val FOLLOW_architecture_statement_with_label_in_synpred12_VHDL6099 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_synpred13_VHDL6217 = createBitSet(0x0000000000000000L,0x0008000000000000L)
    private val FOLLOW_LEQ_in_synpred13_VHDL6219 = createBitSet(0x0000000000000002L)
    private val FOLLOW_WITH_in_synpred13_VHDL6223 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_synpred14_VHDL8081 = createBitSet(0x0000000000000000L,0x0008000000000000L)
    private val FOLLOW_LEQ_in_synpred14_VHDL8083 = createBitSet(0x0000000000000002L)
    private val FOLLOW_target_in_synpred15_VHDL8096 = createBitSet(0x0000000000000000L,0x0080000000000000L)
    private val FOLLOW_VAR_ASSIGN_in_synpred15_VHDL8098 = createBitSet(0x0000000000000002L)
    private val FOLLOW_CONSTANT_in_synpred16_VHDL9143 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_synpred16_VHDL9146 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_synpred16_VHDL9148 = createBitSet(0x0000008000000002L)
    private val FOLLOW_IN_in_synpred16_VHDL9150 = createBitSet(0x0000000000000002L)
    private val FOLLOW_VARIABLE_in_synpred17_VHDL9165 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000300000L)
    private val FOLLOW_identifier_list_in_synpred17_VHDL9168 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000000002L)
    private val FOLLOW_COLON_in_synpred17_VHDL9170 = createBitSet(0x2000020000000002L)
    private val FOLLOW_set_in_synpred17_VHDL9172 = createBitSet(0x0000000000000002L)
    private val FOLLOW_formal_part_in_synpred18_VHDL9714 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_synpred18_VHDL9716 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_synpred19_VHDL10459 = createBitSet(0x0000000000000000L,0x0000000000000000L,0x0000000000008000L)
    private val FOLLOW_APOSTROPHE_in_synpred19_VHDL10461 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_synpred19_VHDL10463 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_in_synpred20_VHDL10479 = createBitSet(0x0000000000000002L)
    private val FOLLOW_selected_name_in_synpred21_VHDL10493 = createBitSet(0x0000000000000000L,0x2000000000000000L)
    private val FOLLOW_LPAREN_in_synpred21_VHDL10495 = createBitSet(0x04C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_association_list_in_synpred21_VHDL10497 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_synpred21_VHDL10499 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_synpred22_VHDL10520 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_synpred22_VHDL10522 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_synpred22_VHDL10524 = createBitSet(0x0000000000000002L)
    private val FOLLOW_name_indexed_part_in_synpred23_VHDL10876 = createBitSet(0x0000000000000002L)
    private val FOLLOW_LPAREN_in_synpred24_VHDL11050 = createBitSet(0x00C8000000000010L,0x2000000000000000L,0x00000000003F2830L)
    private val FOLLOW_expression_in_synpred24_VHDL11052 = createBitSet(0x0000000000000000L,0x4000000000000000L)
    private val FOLLOW_RPAREN_in_synpred24_VHDL11054 = createBitSet(0x0000000000000002L)
    private val FOLLOW_choices_in_synpred25_VHDL11268 = createBitSet(0x0000000000000000L,0x0020000000000000L)
    private val FOLLOW_ARROW_in_synpred25_VHDL11270 = createBitSet(0x0000000000000002L)
    private val FOLLOW_simple_expression_in_synpred26_VHDL11359 = createBitSet(0x0000000001000000L,0x0000000001000000L)
    private val FOLLOW_direction_in_synpred26_VHDL11361 = createBitSet(0x0000000000000002L)

    final class generate_statement_body_return extends ParserRuleReturnScope {
        var blockItems:Seq[DeclarativeItem] = null
        var statementList:Seq[ConcurrentStatement] = null
    }
    final class logical_operator_return extends ParserRuleReturnScope {
        var logOp:LogicalExpression.Operator.Value = null
        var pos:Position = null
    }
    final class relational_operator_return extends ParserRuleReturnScope {
        var relOp:Relation.Operator.Value = null
        var pos:Position = null
    }
    final class shift_operator_return extends ParserRuleReturnScope {
        var shiftOp:ShiftExpression.Operator.Value = null
        var pos:Position = null
    }
    final class sign_return extends ParserRuleReturnScope {
        var signOp:SimpleExpression.SignOperator.Value = null
        var pos:Position = null
    }
    final class adding_operator_return extends ParserRuleReturnScope {
        var addOp:SimpleExpression.AddOperator.Value = null
        var pos:Position = null
    }
    final class multiplying_operator_return extends ParserRuleReturnScope {
        var mulOp:Term.Operator.Value = null
        var pos:Position = null
    }

}
final class VHDLParser(input:TokenStream, state:RecognizerSharedState) extends Parser(input, state) {
    import VHDLParser._
    import org.antlr.runtime.BaseRecognizer._
     // delegates
    // delegators


        def this(input:TokenStream) = this(input, new RecognizerSharedState())
        
     
            this.state.ruleMemo = new Array[java.util.Map[_,_]](228+1)
             
             
        
        

    override def getTokenNames :Array[String] = VHDLParser.tokenNames
    override def getGrammarFileName :String = "C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g"


    	var ams=false
    	
    	type Buffer[A] = scala.collection.mutable.ListBuffer[A]
    	
    	private val syntaxErrorList = new Buffer[CompilerMessage]()
    	
        	def syntaxErrors :Seq[CompilerMessage] = this.syntaxErrorList.toList

            private def toPosition(token:Token):Position = new Position(line=token.getLine(),charPosition=token.getCharPositionInLine())       
            	
    	private def toIdentifier(token:Token,toLowerCase:Boolean=true):Identifier = 
        		if (token.getType()!=STRING_LITERAL && token.getType()!=CHARACTER_LITERAL){
        			new Identifier(toPosition(token),if (toLowerCase) token.getText().toLowerCase() else token.getText().replace("""\\""","\\"))   
        		}else{
        			new Identifier(toPosition(token),token.getText())
        		}

            override def displayRecognitionError(tokenNames:Array[String],e:RecognitionException) =     
          		syntaxErrorList += new CompilerMessage(position=toPosition(e.token),message=super.getErrorMessage(e, tokenNames) )

            private implicit def anyToOption[A](value:A):Option[A] = Option(value)


    // $ANTLR start "design_file"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:266:1: design_file returns [DesignFile designFile] : ( design_unit )+ EOF ;
    @throws(classOf[RecognitionException])
    def design_file():DesignFile = {
         var designFile :DesignFile = null;val design_file_StartIndex:Int = input.index()
        var design_unit1:DesignUnit = null



        	val units=new Buffer[DesignUnit]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return designFile }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:270:2: ( ( design_unit )+ EOF )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:270:4: ( design_unit )+ EOF
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:270:4: ( design_unit )+
            	var cnt1:Int=0
            	var loop1 = true
            	do {
            	    var alt1:Int=2
            	    val LA1_0:Int = input.LA(1)

            	    if ( (LA1_0==ARCHITECTURE||LA1_0==CONFIGURATION||LA1_0==ENTITY||LA1_0==LIBRARY||LA1_0==PACKAGE||LA1_0==USE) ) {
            	        alt1=1
            	    }


            	    alt1 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:270:5: design_unit
            		    {
            		    	pushFollow(FOLLOW_design_unit_in_design_file1279)
            		    	design_unit1=design_unit();

            		    	state._fsp-=1
            		    	if (state.failed) return designFile;
            		    	if ( state.backtracking==0 ) {
            		    	  units += design_unit1
            		    	}

            		    }
            		case _ =>
            		    if ( cnt1 >= 1 ) loop1=false
            		    else {
            		    	    if (state.backtracking>0) {state.failed=true; return designFile}
            	            	    val eee = new EarlyExitException(1, input)
            	            	    throw eee
            		    }
            	    }
            	    cnt1 += 1
            	} while (loop1);

            	`match`(input,EOF,FOLLOW_EOF_in_design_file1284); if (state.failed) return designFile;
            	if ( state.backtracking==0 ) {
            	  designFile=new DesignFile(units.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, design_file_StartIndex) }
        }
        return designFile
    }
    // $ANTLR end "design_file"

    // $ANTLR start "design_unit"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:274:1: design_unit returns [DesignUnit designUnit] : ( library_clause | use_clause )* library_unit ;
    @throws(classOf[RecognitionException])
    def design_unit():DesignUnit = {
         var designUnit :DesignUnit = null;val design_unit_StartIndex:Int = input.index()
        var library_clause2:Seq[Identifier] = null

        var use_clause3:UseClause = null

        var library_unit4:LibraryUnit = null



        	val libraries=new Buffer[Identifier]()
        	val useClauses=new Buffer[UseClause]()
        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return designUnit }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:280:2: ( ( library_clause | use_clause )* library_unit )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:280:4: ( library_clause | use_clause )* library_unit
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:280:4: ( library_clause | use_clause )*
            	var loop2=true
            	do {
            	    var alt2:Int=3
            	    val LA2_0:Int = input.LA(1)

            	    if ( (LA2_0==LIBRARY) ) {
            	        alt2=1
            	    }
            	    else if ( (LA2_0==USE) ) {
            	        alt2=2
            	    }


            	    alt2 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:281:3: library_clause
            		    {
            		    	pushFollow(FOLLOW_library_clause_in_design_unit1312)
            		    	library_clause2=library_clause();

            		    	state._fsp-=1
            		    	if (state.failed) return designUnit;
            		    	if ( state.backtracking==0 ) {
            		    	  libraries ++= library_clause2
            		    	}

            		    }case 2 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:282:4: use_clause
            		    {
            		    	pushFollow(FOLLOW_use_clause_in_design_unit1319)
            		    	use_clause3=use_clause();

            		    	state._fsp-=1
            		    	if (state.failed) return designUnit;
            		    	if ( state.backtracking==0 ) {
            		    	  useClauses += use_clause3
            		    	}

            		    }
            		case _ => loop2=false
            	    }
            	} while (loop2);

            	pushFollow(FOLLOW_library_unit_in_design_unit1332)
            	library_unit4=library_unit();

            	state._fsp-=1
            	if (state.failed) return designUnit;
            	if ( state.backtracking==0 ) {
            	  designUnit=new DesignUnit(toPosition(firstToken),libraries.toList,useClauses.toList,library_unit4)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, design_unit_StartIndex) }
        }
        return designUnit
    }
    // $ANTLR end "design_unit"

    // $ANTLR start "library_unit"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:288:1: library_unit returns [LibraryUnit libraryUnit] : ( entity_declaration | architecture_body | package_declaration | package_body | configuration_declaration );
    @throws(classOf[RecognitionException])
    def library_unit():LibraryUnit = {
         var libraryUnit :LibraryUnit = null;val library_unit_StartIndex:Int = input.index()
        var entity_declaration5:EntityDeclaration = null

        var architecture_body6:ArchitectureDeclaration = null

        var package_declaration7:PackageDeclaration = null

        var package_body8:PackageBodyDeclaration = null

        var configuration_declaration9:ConfigurationDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return libraryUnit }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:289:2: ( entity_declaration | architecture_body | package_declaration | package_body | configuration_declaration )
            var alt3 :Int=5
            input.LA(1) match {
            case ENTITY => {
                 alt3=1
            }

            case ARCHITECTURE => {
                 alt3=2
            }

            case PACKAGE => {
                 val LA3_3:Int = input.LA(2)

                 if ( (LA3_3==BODY) ) {
                     alt3=4
                 }
                 else if ( ((LA3_3>=BASIC_IDENTIFIER && LA3_3<=EXTENDED_IDENTIFIER)) ) {
                     alt3=3
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return libraryUnit}
                     val nvae = new NoViableAltException("", 3, 3, input)

                     throw nvae
                 }
            }

            case CONFIGURATION => {
                 alt3=5
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return libraryUnit}
                val nvae = new NoViableAltException("", 3, 0, input)

                throw nvae
            }

            alt3 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:289:4: entity_declaration
                    {
                    	pushFollow(FOLLOW_entity_declaration_in_library_unit1354)
                    	entity_declaration5=entity_declaration();

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit;
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=entity_declaration5
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:290:5: architecture_body
                    {
                    	pushFollow(FOLLOW_architecture_body_in_library_unit1362)
                    	architecture_body6=architecture_body();

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit;
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=architecture_body6
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:291:5: package_declaration
                    {
                    	pushFollow(FOLLOW_package_declaration_in_library_unit1370)
                    	package_declaration7=package_declaration();

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit;
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=package_declaration7
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:292:5: package_body
                    {
                    	pushFollow(FOLLOW_package_body_in_library_unit1378)
                    	package_body8=package_body();

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit;
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=package_body8
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:294:5: configuration_declaration
                    {
                    	pushFollow(FOLLOW_configuration_declaration_in_library_unit1390)
                    	configuration_declaration9=configuration_declaration();

                    	state._fsp-=1
                    	if (state.failed) return libraryUnit;
                    	if ( state.backtracking==0 ) {
                    	  libraryUnit=configuration_declaration9
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, library_unit_StartIndex) }
        }
        return libraryUnit
    }
    // $ANTLR end "library_unit"

    // $ANTLR start "library_clause"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:299:1: library_clause returns [Seq[Identifier] identifierList] : LIBRARY identifier_list SEMICOLON ;
    @throws(classOf[RecognitionException])
    def library_clause():Seq[Identifier] = {
         var identifierList :Seq[Identifier] = null;val library_clause_StartIndex:Int = input.index()
        var identifier_list10:Seq[Identifier] = null



        	identifierList=Seq()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return identifierList }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:303:2: ( LIBRARY identifier_list SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:303:4: LIBRARY identifier_list SEMICOLON
            {
            	`match`(input,LIBRARY,FOLLOW_LIBRARY_in_library_clause1419); if (state.failed) return identifierList;
            	pushFollow(FOLLOW_identifier_list_in_library_clause1421)
            	identifier_list10=identifier_list();

            	state._fsp-=1
            	if (state.failed) return identifierList;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_library_clause1423); if (state.failed) return identifierList;
            	if ( state.backtracking==0 ) {
            	  identifierList=identifier_list10
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, library_clause_StartIndex) }
        }
        return identifierList
    }
    // $ANTLR end "library_clause"

    // $ANTLR start "generic_clause"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:314:1: generic_clause returns [InterfaceList list] : ( GENERIC LPAREN generic_interface_list RPAREN SEMICOLON ) ;
    @throws(classOf[RecognitionException])
    def generic_clause():InterfaceList = {
         var list :InterfaceList = null;val generic_clause_StartIndex:Int = input.index()
        var generic_interface_list11:InterfaceList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:315:2: ( ( GENERIC LPAREN generic_interface_list RPAREN SEMICOLON ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:315:4: ( GENERIC LPAREN generic_interface_list RPAREN SEMICOLON )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:315:4: ( GENERIC LPAREN generic_interface_list RPAREN SEMICOLON )
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:315:5: GENERIC LPAREN generic_interface_list RPAREN SEMICOLON
            	{
            		`match`(input,GENERIC,FOLLOW_GENERIC_in_generic_clause1448); if (state.failed) return list;
            		`match`(input,LPAREN,FOLLOW_LPAREN_in_generic_clause1450); if (state.failed) return list;
            		pushFollow(FOLLOW_generic_interface_list_in_generic_clause1452)
            		generic_interface_list11=generic_interface_list();

            		state._fsp-=1
            		if (state.failed) return list;
            		`match`(input,RPAREN,FOLLOW_RPAREN_in_generic_clause1454); if (state.failed) return list;
            		`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_generic_clause1456); if (state.failed) return list;

            	}

            	if ( state.backtracking==0 ) {
            	  list = generic_interface_list11 
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, generic_clause_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_clause"

    // $ANTLR start "generic_interface_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:319:1: generic_interface_list returns [InterfaceList list] : decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* ;
    @throws(classOf[RecognitionException])
    def generic_interface_list():InterfaceList = {
         var list :InterfaceList = null;val generic_interface_list_StartIndex:Int = input.index()
        var decl1:InterfaceList.InterfaceConstantDeclaration = null

        var decl2:InterfaceList.InterfaceConstantDeclaration = null



        	val elements=new Buffer[InterfaceList.InterfaceConstantDeclaration]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:323:5: (decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:323:9: decl1= interface_constant_declaration ( SEMICOLON decl2= interface_constant_declaration )*
            {
            	pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1490)
            	decl1=interface_constant_declaration();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += decl1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:323:80: ( SEMICOLON decl2= interface_constant_declaration )*
            	var loop4=true
            	do {
            	    var alt4:Int=2
            	    val LA4_0:Int = input.LA(1)

            	    if ( (LA4_0==SEMICOLON) ) {
            	        alt4=1
            	    }


            	    alt4 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:323:82: SEMICOLON decl2= interface_constant_declaration
            		    {
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_generic_interface_list1496); if (state.failed) return list;
            		    	pushFollow(FOLLOW_interface_constant_declaration_in_generic_interface_list1500)
            		    	decl2=interface_constant_declaration();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += decl2
            		    	}

            		    }
            		case _ => loop4=false
            	    }
            	} while (loop4);

            	if ( state.backtracking==0 ) {
            	  list=new InterfaceList(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, generic_interface_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_interface_list"

    // $ANTLR start "port_clause"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:327:1: port_clause returns [InterfaceList list] : ( PORT LPAREN port_interface_list RPAREN SEMICOLON ) ;
    @throws(classOf[RecognitionException])
    def port_clause():InterfaceList = {
         var list :InterfaceList = null;val port_clause_StartIndex:Int = input.index()
        var port_interface_list12:InterfaceList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:328:2: ( ( PORT LPAREN port_interface_list RPAREN SEMICOLON ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:328:4: ( PORT LPAREN port_interface_list RPAREN SEMICOLON )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:328:4: ( PORT LPAREN port_interface_list RPAREN SEMICOLON )
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:328:5: PORT LPAREN port_interface_list RPAREN SEMICOLON
            	{
            		`match`(input,PORT,FOLLOW_PORT_in_port_clause1535); if (state.failed) return list;
            		`match`(input,LPAREN,FOLLOW_LPAREN_in_port_clause1537); if (state.failed) return list;
            		pushFollow(FOLLOW_port_interface_list_in_port_clause1539)
            		port_interface_list12=port_interface_list();

            		state._fsp-=1
            		if (state.failed) return list;
            		`match`(input,RPAREN,FOLLOW_RPAREN_in_port_clause1541); if (state.failed) return list;
            		`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_port_clause1543); if (state.failed) return list;

            	}

            	if ( state.backtracking==0 ) {
            	  list = port_interface_list12 
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, port_clause_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_clause"

    // $ANTLR start "port_interface_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:332:1: port_interface_list returns [InterfaceList list] : decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )* ;
    @throws(classOf[RecognitionException])
    def port_interface_list():InterfaceList = {
         var list :InterfaceList = null;val port_interface_list_StartIndex:Int = input.index()
        var decl1:InterfaceList.InterfaceSignalDeclaration = null

        var decl2:InterfaceList.InterfaceSignalDeclaration = null



        	val elements=new Buffer[InterfaceList.InterfaceSignalDeclaration]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:336:5: (decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:336:9: decl1= interface_signal_declaration_procedure ( SEMICOLON decl2= interface_signal_declaration_procedure )*
            {
            	pushFollow(FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1575)
            	decl1=interface_signal_declaration_procedure();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += decl1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:336:89: ( SEMICOLON decl2= interface_signal_declaration_procedure )*
            	var loop5=true
            	do {
            	    var alt5:Int=2
            	    val LA5_0:Int = input.LA(1)

            	    if ( (LA5_0==SEMICOLON) ) {
            	        alt5=1
            	    }


            	    alt5 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:336:91: SEMICOLON decl2= interface_signal_declaration_procedure
            		    {
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_port_interface_list1581); if (state.failed) return list;
            		    	pushFollow(FOLLOW_interface_signal_declaration_procedure_in_port_interface_list1585)
            		    	decl2=interface_signal_declaration_procedure();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += decl2
            		    	}

            		    }
            		case _ => loop5=false
            	    }
            	} while (loop5);

            	if ( state.backtracking==0 ) {
            	  list=new InterfaceList(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, port_interface_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_interface_list"

    // $ANTLR start "entity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:340:1: entity_declaration returns [EntityDeclaration entityDecl] : ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def entity_declaration():EntityDeclaration = {
         var entityDecl :EntityDeclaration = null;val entity_declaration_StartIndex:Int = input.index()
        var postponed :Token=null
        var start_identifier:Identifier = null

        var label:Identifier = null

        var end_identifier:Identifier = null

        var entity_declarative_item13:DeclarativeItem = null

        var concurrent_assertion_statement14:ConcurrentAssertionStatement = null

        var concurrent_procedure_call_statement15:ConcurrentProcedureCallStatement = null

        var process_statement16:ProcessStatement = null

        var generic_clause17:InterfaceList = null

        var port_clause18:InterfaceList = null



         	val declarativeItems=new Buffer[DeclarativeItem]()
         	val concurrentStmt=new Buffer[ConcurrentStatement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return entityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:345:2: ( ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:345:4: ENTITY start_identifier= identifier IS ( generic_clause )? ( port_clause )? ( entity_declarative_item )* ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )? END ( ENTITY )? (end_identifier= identifier )? SEMICOLON
            {
            	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_declaration1625); if (state.failed) return entityDecl;
            	pushFollow(FOLLOW_identifier_in_entity_declaration1629)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return entityDecl;
            	`match`(input,IS,FOLLOW_IS_in_entity_declaration1631); if (state.failed) return entityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:346:4: ( generic_clause )?
            	var alt6 :Int=2
            	val LA6_0:Int = input.LA(1)

            	if ( (LA6_0==GENERIC) ) {
            	    alt6=1
            	}
            	alt6 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:346:4: generic_clause
            	        {
            	        	pushFollow(FOLLOW_generic_clause_in_entity_declaration1636)
            	        	generic_clause17=generic_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:347:4: ( port_clause )?
            	var alt7 :Int=2
            	val LA7_0:Int = input.LA(1)

            	if ( (LA7_0==PORT) ) {
            	    alt7=1
            	}
            	alt7 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:347:4: port_clause
            	        {
            	        	pushFollow(FOLLOW_port_clause_in_entity_declaration1642)
            	        	port_clause18=port_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:348:4: ( entity_declarative_item )*
            	var loop8=true
            	do {
            	    var alt8:Int=2
            	    val LA8_0:Int = input.LA(1)

            	    if ( (LA8_0==ALIAS||LA8_0==ATTRIBUTE||(LA8_0>=CONSTANT && LA8_0<=DISCONNECT)||LA8_0==FILE||LA8_0==FUNCTION||LA8_0==GROUP||LA8_0==IMPURE||LA8_0==PROCEDURE||LA8_0==PURE||(LA8_0>=SHARED && LA8_0<=SIGNAL)||LA8_0==SUBTYPE||LA8_0==TYPE||(LA8_0>=USE && LA8_0<=VARIABLE)) ) {
            	        alt8=1
            	    }
            	    else if ( ((LA8_0>=NATURE && LA8_0<=QUANTITY)||(LA8_0>=SUBNATURE && LA8_0<=LIMIT)) && ((ams))) {
            	        alt8=1
            	    }


            	    alt8 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:348:5: entity_declarative_item
            		    {
            		    	pushFollow(FOLLOW_entity_declarative_item_in_entity_declaration1649)
            		    	entity_declarative_item13=entity_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return entityDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += entity_declarative_item13
            		    	}

            		    }
            		case _ => loop8=false
            	    }
            	} while (loop8);

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:349:3: ( BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )* )?
            	var alt13 :Int=2
            	val LA13_0:Int = input.LA(1)

            	if ( (LA13_0==BEGIN) ) {
            	    alt13=1
            	}
            	alt13 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:349:4: BEGIN ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
            	        {
            	        	`match`(input,BEGIN,FOLLOW_BEGIN_in_entity_declaration1658); if (state.failed) return entityDecl;
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:4: ( (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] ) )*
            	        	var loop12=true
            	        	do {
            	        	    var alt12:Int=2
            	        	    val LA12_0:Int = input.LA(1)

            	        	    if ( (LA12_0==ASSERT||LA12_0==POSTPONED||LA12_0==PROCESS||LA12_0==STRING_LITERAL||(LA12_0>=BASIC_IDENTIFIER && LA12_0<=EXTENDED_IDENTIFIER)) ) {
            	        	        alt12=1
            	        	    }


            	        	    alt12 match {
            	        		case 1 =>
            	        		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:5: (label= label_colon )? (postponed= POSTPONED )? ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
            	        		    {
            	        		    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:10: (label= label_colon )?
            	        		    	var alt9 :Int=2
            	        		    	val LA9_0:Int = input.LA(1)

            	        		    	if ( (LA9_0==BASIC_IDENTIFIER) ) {
            	        		    	    val LA9_1:Int = input.LA(2)

            	        		    	    if ( (LA9_1==COLON) ) {
            	        		    	        alt9=1
            	        		    	    }
            	        		    	}
            	        		    	else if ( (LA9_0==EXTENDED_IDENTIFIER) ) {
            	        		    	    val LA9_2:Int = input.LA(2)

            	        		    	    if ( (LA9_2==COLON) ) {
            	        		    	        alt9=1
            	        		    	    }
            	        		    	}
            	        		    	alt9 match {
            	        		    	    case 1 =>
            	        		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:10: label= label_colon
            	        		    	        {
            	        		    	        	pushFollow(FOLLOW_label_colon_in_entity_declaration1666)
            	        		    	        	label=label_colon();

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl;

            	        		    	        }
            	        		    	    case _ => 
            	        		    	}

            	        		    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:33: (postponed= POSTPONED )?
            	        		    	var alt10 :Int=2
            	        		    	val LA10_0:Int = input.LA(1)

            	        		    	if ( (LA10_0==POSTPONED) ) {
            	        		    	    alt10=1
            	        		    	}
            	        		    	alt10 match {
            	        		    	    case 1 =>
            	        		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:33: postponed= POSTPONED
            	        		    	        {
            	        		    	        	postponed=`match`(input,POSTPONED,FOLLOW_POSTPONED_in_entity_declaration1671).asInstanceOf[Token]; if (state.failed) return entityDecl;

            	        		    	        }
            	        		    	    case _ => 
            	        		    	}

            	        		    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:45: ( concurrent_assertion_statement[$label.label,postponed!=null] | concurrent_procedure_call_statement[$label.label,postponed!=null] | process_statement[$label.label,postponed!=null] )
            	        		    	var alt11 :Int=3
            	        		    	input.LA(1) match {
            	        		    	case ASSERT => {
            	        		    	     alt11=1
            	        		    	}

            	        		    	case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	        		    	     alt11=2
            	        		    	}

            	        		    	case PROCESS => {
            	        		    	     alt11=3
            	        		    	}

            	        		    	case _ =>
            	        		    	    if (state.backtracking>0) {state.failed=true; return entityDecl}
            	        		    	    val nvae = new NoViableAltException("", 11, 0, input)

            	        		    	    throw nvae
            	        		    	}

            	        		    	alt11 match {
            	        		    	    case 1 =>
            	        		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:350:46: concurrent_assertion_statement[$label.label,postponed!=null]
            	        		    	        {
            	        		    	        	pushFollow(FOLLOW_concurrent_assertion_statement_in_entity_declaration1675)
            	        		    	        	concurrent_assertion_statement14=concurrent_assertion_statement(label, postponed!=null);

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl;
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += concurrent_assertion_statement14
            	        		    	        	}

            	        		    	        }case 2 =>
            	        		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:351:6: concurrent_procedure_call_statement[$label.label,postponed!=null]
            	        		    	        {
            	        		    	        	pushFollow(FOLLOW_concurrent_procedure_call_statement_in_entity_declaration1685)
            	        		    	        	concurrent_procedure_call_statement15=concurrent_procedure_call_statement(label, postponed!=null);

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl;
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += concurrent_procedure_call_statement15
            	        		    	        	}

            	        		    	        }case 3 =>
            	        		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:352:6: process_statement[$label.label,postponed!=null]
            	        		    	        {
            	        		    	        	pushFollow(FOLLOW_process_statement_in_entity_declaration1694)
            	        		    	        	process_statement16=process_statement(label, postponed!=null);

            	        		    	        	state._fsp-=1
            	        		    	        	if (state.failed) return entityDecl;
            	        		    	        	if ( state.backtracking==0 ) {
            	        		    	        	  concurrentStmt += process_statement16
            	        		    	        	}

            	        		    	        }
            	        		    	    case _ => 
            	        		    	}


            	        		    }
            	        		case _ => loop12=false
            	        	    }
            	        	} while (loop12);


            	        }
            	    case _ => 
            	}

            	`match`(input,END,FOLLOW_END_in_entity_declaration1715); if (state.failed) return entityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:355:7: ( ENTITY )?
            	var alt14 :Int=2
            	val LA14_0:Int = input.LA(1)

            	if ( (LA14_0==ENTITY) ) {
            	    alt14=1
            	}
            	alt14 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:355:7: ENTITY
            	        {
            	        	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_declaration1717); if (state.failed) return entityDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:355:29: (end_identifier= identifier )?
            	var alt15 :Int=2
            	val LA15_0:Int = input.LA(1)

            	if ( ((LA15_0>=BASIC_IDENTIFIER && LA15_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt15=1
            	}
            	alt15 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:355:29: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_entity_declaration1722)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return entityDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_entity_declaration1725); if (state.failed) return entityDecl;
            	if ( state.backtracking==0 ) {
            	  entityDecl=new EntityDeclaration(start_identifier,generic_clause17,port_clause18,declarativeItems.toList,concurrentStmt.toList,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, entity_declaration_StartIndex) }
        }
        return entityDecl
    }
    // $ANTLR end "entity_declaration"

    // $ANTLR start "entity_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:359:1: entity_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    def entity_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val entity_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body19:DeclarativeItem = null

        var type_declaration20:AbstractTypeDeclaration = null

        var subtype_declaration21:SubTypeDeclaration = null

        var constant_declaration22:ConstantDeclaration = null

        var signal_declaration23:SignalDeclaration = null

        var variable_declaration24:VariableDeclaration = null

        var file_declaration25:FileDeclaration = null

        var alias_declaration26:AliasDeclaration = null

        var attribute_declaration27:AttributeDeclaration = null

        var attribute_specification28:AttributeSpecification = null

        var disconnection_specification29:DisconnectionSpecification = null

        var use_clause30:UseClause = null

        var group_template_declaration31:GroupTemplateDeclaration = null

        var group_declaration32:GroupDeclaration = null

        var ams_step_limit_specification33:StepLimitSpecification = null

        var ams_nature_declaration34:AbstractTypeDeclaration = null

        var ams_subnature_declaration35:SubNatureDeclaration = null

        var ams_quantity_declaration36:AbstractQuantityDeclaration = null

        var ams_terminal_declaration37:TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:360:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
            var alt17 :Int=15
             alt17 = dfa17.predict(input)
            alt17 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:361:3: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_entity_declarative_item1750)
                    	subprogram_declartion_or_body19=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body19
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:365:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_entity_declarative_item1762)
                    	type_declaration20=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration20
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:366:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_entity_declarative_item1770)
                    	subtype_declaration21=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration21
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:367:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_entity_declarative_item1778)
                    	constant_declaration22=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration22
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:368:5: signal_declaration
                    {
                    	pushFollow(FOLLOW_signal_declaration_in_entity_declarative_item1786)
                    	signal_declaration23=signal_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=signal_declaration23
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:369:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_entity_declarative_item1794)
                    	variable_declaration24=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration24
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:370:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_entity_declarative_item1802)
                    	file_declaration25=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration25
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:371:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_entity_declarative_item1810)
                    	alias_declaration26=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration26
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:372:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_entity_declarative_item1818)
                    	attribute_declaration27=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration27
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:373:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_entity_declarative_item1826)
                    	attribute_specification28=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification28
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:374:5: disconnection_specification
                    {
                    	pushFollow(FOLLOW_disconnection_specification_in_entity_declarative_item1834)
                    	disconnection_specification29=disconnection_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=disconnection_specification29
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:375:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_entity_declarative_item1842)
                    	use_clause30=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause30
                    	}

                    }case 13 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:376:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_entity_declarative_item1850)
                    	group_template_declaration31=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration31
                    	}

                    }case 14 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:377:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_entity_declarative_item1858)
                    	group_declaration32=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration32
                    	}

                    }case 15 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:380:5: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    throw new FailedPredicateException(input, "entity_declarative_item", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:381:3: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	var alt16 :Int=5
                    	input.LA(1) match {
                    	case LIMIT => {
                    	     alt16=1
                    	}

                    	case NATURE => {
                    	     alt16=2
                    	}

                    	case SUBNATURE => {
                    	     alt16=3
                    	}

                    	case QUANTITY => {
                    	     alt16=4
                    	}

                    	case TERMINAL => {
                    	     alt16=5
                    	}

                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    val nvae = new NoViableAltException("", 16, 0, input)

                    	    throw nvae
                    	}

                    	alt16 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:382:3: ams_step_limit_specification
                    	        {
                    	        	pushFollow(FOLLOW_ams_step_limit_specification_in_entity_declarative_item1881)
                    	        	ams_step_limit_specification33=ams_step_limit_specification();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_step_limit_specification33
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:383:5: ams_nature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_entity_declarative_item1889)
                    	        	ams_nature_declaration34=ams_nature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_nature_declaration34
                    	        	}

                    	        }case 3 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:384:5: ams_subnature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_entity_declarative_item1897)
                    	        	ams_subnature_declaration35=ams_subnature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_subnature_declaration35
                    	        	}

                    	        }case 4 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:385:5: ams_quantity_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_quantity_declaration_in_entity_declarative_item1905)
                    	        	ams_quantity_declaration36=ams_quantity_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_quantity_declaration36
                    	        	}

                    	        }case 5 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:386:5: ams_terminal_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_entity_declarative_item1913)
                    	        	ams_terminal_declaration37=ams_terminal_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_terminal_declaration37
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, entity_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "entity_declarative_item"

    // $ANTLR start "architecture_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:390:1: architecture_body returns [ArchitectureDeclaration archDecl] : ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN architecture_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def architecture_body():ArchitectureDeclaration = {
         var archDecl :ArchitectureDeclaration = null;val architecture_body_StartIndex:Int = input.index()
        var start_identifier:Identifier = null

        var end_identifier:Identifier = null

        var block_declarative_item38:DeclarativeItem = null

        var selected_name39:SelectedName = null

        var architecture_statement_list40:Seq[ConcurrentStatement] = null



        	val declarativeItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return archDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:394:2: ( ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN architecture_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:394:4: ARCHITECTURE start_identifier= identifier OF selected_name IS ( block_declarative_item )* BEGIN architecture_statement_list END ( ARCHITECTURE )? (end_identifier= identifier )? SEMICOLON
            {
            	`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_architecture_body1941); if (state.failed) return archDecl;
            	pushFollow(FOLLOW_identifier_in_architecture_body1945)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return archDecl;
            	`match`(input,OF,FOLLOW_OF_in_architecture_body1947); if (state.failed) return archDecl;
            	pushFollow(FOLLOW_selected_name_in_architecture_body1949)
            	selected_name39=selected_name();

            	state._fsp-=1
            	if (state.failed) return archDecl;
            	`match`(input,IS,FOLLOW_IS_in_architecture_body1951); if (state.failed) return archDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:395:4: ( block_declarative_item )*
            	var loop18=true
            	do {
            	    var alt18:Int=2
            	    val LA18_0:Int = input.LA(1)

            	    if ( (LA18_0==ALIAS||LA18_0==ATTRIBUTE||LA18_0==COMPONENT||(LA18_0>=CONSTANT && LA18_0<=DISCONNECT)||(LA18_0>=FILE && LA18_0<=FUNCTION)||LA18_0==GROUP||LA18_0==IMPURE||LA18_0==PROCEDURE||LA18_0==PURE||(LA18_0>=SHARED && LA18_0<=SIGNAL)||LA18_0==SUBTYPE||LA18_0==TYPE||(LA18_0>=USE && LA18_0<=VARIABLE)) ) {
            	        alt18=1
            	    }
            	    else if ( ((LA18_0>=NATURE && LA18_0<=QUANTITY)||(LA18_0>=SUBNATURE && LA18_0<=LIMIT)) && ((ams))) {
            	        alt18=1
            	    }


            	    alt18 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:395:5: block_declarative_item
            		    {
            		    	pushFollow(FOLLOW_block_declarative_item_in_architecture_body1957)
            		    	block_declarative_item38=block_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return archDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += block_declarative_item38
            		    	}

            		    }
            		case _ => loop18=false
            	    }
            	} while (loop18);

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_architecture_body1964); if (state.failed) return archDecl;
            	pushFollow(FOLLOW_architecture_statement_list_in_architecture_body1969)
            	architecture_statement_list40=architecture_statement_list();

            	state._fsp-=1
            	if (state.failed) return archDecl;
            	`match`(input,END,FOLLOW_END_in_architecture_body1973); if (state.failed) return archDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:398:7: ( ARCHITECTURE )?
            	var alt19 :Int=2
            	val LA19_0:Int = input.LA(1)

            	if ( (LA19_0==ARCHITECTURE) ) {
            	    alt19=1
            	}
            	alt19 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:398:7: ARCHITECTURE
            	        {
            	        	`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_architecture_body1975); if (state.failed) return archDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:398:35: (end_identifier= identifier )?
            	var alt20 :Int=2
            	val LA20_0:Int = input.LA(1)

            	if ( ((LA20_0>=BASIC_IDENTIFIER && LA20_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt20=1
            	}
            	alt20 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:398:35: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_architecture_body1980)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return archDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_architecture_body1983); if (state.failed) return archDecl;
            	if ( state.backtracking==0 ) {
            	  archDecl=new ArchitectureDeclaration(start_identifier,declarativeItems.toList,selected_name39,architecture_statement_list40,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, architecture_body_StartIndex) }
        }
        return archDecl
    }
    // $ANTLR end "architecture_body"

    // $ANTLR start "configuration_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:402:1: configuration_declarative_item returns [DeclarativeItem node] : ( use_clause | attribute_specification | group_declaration );
    @throws(classOf[RecognitionException])
    def configuration_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val configuration_declarative_item_StartIndex:Int = input.index()
        var use_clause41:UseClause = null

        var attribute_specification42:AttributeSpecification = null

        var group_declaration43:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:403:2: ( use_clause | attribute_specification | group_declaration )
            var alt21 :Int=3
            input.LA(1) match {
            case USE => {
                 alt21=1
            }

            case ATTRIBUTE => {
                 alt21=2
            }

            case GROUP => {
                 alt21=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return node}
                val nvae = new NoViableAltException("", 21, 0, input)

                throw nvae
            }

            alt21 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:403:4: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_configuration_declarative_item2005)
                    	use_clause41=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause41
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:404:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_configuration_declarative_item2013)
                    	attribute_specification42=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification42
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:405:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_configuration_declarative_item2021)
                    	group_declaration43=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration43
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, configuration_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "configuration_declarative_item"

    // $ANTLR start "configuration_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:408:1: configuration_declaration returns [ConfigurationDeclaration configDecl] : CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def configuration_declaration():ConfigurationDeclaration = {
         var configDecl :ConfigurationDeclaration = null;val configuration_declaration_StartIndex:Int = input.index()
        var start_identifier:Identifier = null

        var end_identifier:Identifier = null

        var configuration_declarative_item44:DeclarativeItem = null

        var selected_name45:SelectedName = null

        var block_configuration46:BlockConfiguration = null



         	val declarativeItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return configDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:412:2: ( CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:412:4: CONFIGURATION start_identifier= identifier OF selected_name IS ( configuration_declarative_item )* block_configuration END ( CONFIGURATION )? (end_identifier= identifier )? SEMICOLON
            {
            	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_configuration_declaration2045); if (state.failed) return configDecl;
            	pushFollow(FOLLOW_identifier_in_configuration_declaration2049)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return configDecl;
            	`match`(input,OF,FOLLOW_OF_in_configuration_declaration2051); if (state.failed) return configDecl;
            	pushFollow(FOLLOW_selected_name_in_configuration_declaration2053)
            	selected_name45=selected_name();

            	state._fsp-=1
            	if (state.failed) return configDecl;
            	`match`(input,IS,FOLLOW_IS_in_configuration_declaration2055); if (state.failed) return configDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:413:4: ( configuration_declarative_item )*
            	var loop22=true
            	do {
            	    var alt22:Int=2
            	    val LA22_0:Int = input.LA(1)

            	    if ( (LA22_0==ATTRIBUTE||LA22_0==GROUP||LA22_0==USE) ) {
            	        alt22=1
            	    }


            	    alt22 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:413:5: configuration_declarative_item
            		    {
            		    	pushFollow(FOLLOW_configuration_declarative_item_in_configuration_declaration2061)
            		    	configuration_declarative_item44=configuration_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return configDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += configuration_declarative_item44
            		    	}

            		    }
            		case _ => loop22=false
            	    }
            	} while (loop22);

            	pushFollow(FOLLOW_block_configuration_in_configuration_declaration2073)
            	block_configuration46=block_configuration();

            	state._fsp-=1
            	if (state.failed) return configDecl;
            	`match`(input,END,FOLLOW_END_in_configuration_declaration2077); if (state.failed) return configDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:416:7: ( CONFIGURATION )?
            	var alt23 :Int=2
            	val LA23_0:Int = input.LA(1)

            	if ( (LA23_0==CONFIGURATION) ) {
            	    alt23=1
            	}
            	alt23 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:416:7: CONFIGURATION
            	        {
            	        	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_configuration_declaration2079); if (state.failed) return configDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:416:36: (end_identifier= identifier )?
            	var alt24 :Int=2
            	val LA24_0:Int = input.LA(1)

            	if ( ((LA24_0>=BASIC_IDENTIFIER && LA24_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt24=1
            	}
            	alt24 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:416:36: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_configuration_declaration2084)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return configDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_configuration_declaration2087); if (state.failed) return configDecl;
            	if ( state.backtracking==0 ) {
            	  configDecl=new ConfigurationDeclaration(start_identifier,declarativeItems.toList,selected_name45,block_configuration46,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, configuration_declaration_StartIndex) }
        }
        return configDecl
    }
    // $ANTLR end "configuration_declaration"

    // $ANTLR start "block_configuration_index"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:420:1: block_configuration_index returns [Either[DiscreteRange,Expression] node] : ( ( discrete_range )=> discrete_range | expression );
    @throws(classOf[RecognitionException])
    def block_configuration_index():Either[DiscreteRange,Expression] = {
         var node :Either[DiscreteRange,Expression] = null;val block_configuration_index_StartIndex:Int = input.index()
        var discrete_range47:DiscreteRange = null

        var expression48:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:421:2: ( ( discrete_range )=> discrete_range | expression )
            var alt25 :Int=2
             alt25 = dfa25.predict(input)
            alt25 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:421:6: ( discrete_range )=> discrete_range
                    {
                    	pushFollow(FOLLOW_discrete_range_in_block_configuration_index2113)
                    	discrete_range47=discrete_range();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=Left(discrete_range47)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:422:6: expression
                    {
                    	pushFollow(FOLLOW_expression_in_block_configuration_index2122)
                    	expression48=expression();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=Right(expression48)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, block_configuration_index_StartIndex) }
        }
        return node
    }
    // $ANTLR end "block_configuration_index"

    // $ANTLR start "block_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:426:1: block_specification returns [BlockConfigurationSpecification blockConfig] : ( ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name );
    @throws(classOf[RecognitionException])
    def block_specification():BlockConfigurationSpecification = {
         var blockConfig :BlockConfigurationSpecification = null;val block_specification_StartIndex:Int = input.index()
        var identifier49:Identifier = null

        var block_configuration_index50:Either[DiscreteRange,Expression] = null

        var selected_name51:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return blockConfig }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:2: ( ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )? | selected_name )
            var alt27 :Int=2
            input.LA(1) match {
            case BASIC_IDENTIFIER => {
                 val LA27_1:Int = input.LA(2)

                 if ( (synpred2_VHDL()) ) {
                     alt27=1
                 }
                 else if ( (true) ) {
                     alt27=2
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return blockConfig}
                     val nvae = new NoViableAltException("", 27, 1, input)

                     throw nvae
                 }
            }

            case EXTENDED_IDENTIFIER => {
                 val LA27_2:Int = input.LA(2)

                 if ( (synpred2_VHDL()) ) {
                     alt27=1
                 }
                 else if ( (true) ) {
                     alt27=2
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return blockConfig}
                     val nvae = new NoViableAltException("", 27, 2, input)

                     throw nvae
                 }
            }

            case STRING_LITERAL => {
                 alt27=2
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return blockConfig}
                val nvae = new NoViableAltException("", 27, 0, input)

                throw nvae
            }

            alt27 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:5: ( identifier )=> identifier ( LPAREN block_configuration_index RPAREN )?
                    {
                    	pushFollow(FOLLOW_identifier_in_block_specification2157)
                    	identifier49=identifier();

                    	state._fsp-=1
                    	if (state.failed) return blockConfig;
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:30: ( LPAREN block_configuration_index RPAREN )?
                    	var alt26 :Int=2
                    	val LA26_0:Int = input.LA(1)

                    	if ( (LA26_0==LPAREN) ) {
                    	    alt26=1
                    	}
                    	alt26 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:31: LPAREN block_configuration_index RPAREN
                    	        {
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_block_specification2160); if (state.failed) return blockConfig;
                    	        	pushFollow(FOLLOW_block_configuration_index_in_block_specification2162)
                    	        	block_configuration_index50=block_configuration_index();

                    	        	state._fsp-=1
                    	        	if (state.failed) return blockConfig;
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_block_specification2164); if (state.failed) return blockConfig;

                    	        }
                    	    case _ => 
                    	}

                    	if ( state.backtracking==0 ) {
                    	  new BlockConfigurationSpecification(Right((identifier49,block_configuration_index50)))
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:430:6: selected_name
                    {
                    	pushFollow(FOLLOW_selected_name_in_block_specification2178)
                    	selected_name51=selected_name();

                    	state._fsp-=1
                    	if (state.failed) return blockConfig;
                    	if ( state.backtracking==0 ) {
                    	  blockConfig=new BlockConfigurationSpecification(Left(selected_name51))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, block_specification_StartIndex) }
        }
        return blockConfig
    }
    // $ANTLR end "block_specification"

    // $ANTLR start "block_configuration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:433:1: block_configuration returns [BlockConfiguration blockConfig] : FOR block_specification ( use_clause )* (blockConfiguration= block_configuration | component_configuration )* END FOR SEMICOLON ;
    @throws(classOf[RecognitionException])
    def block_configuration():BlockConfiguration = {
         var blockConfig :BlockConfiguration = null;val block_configuration_StartIndex:Int = input.index()
        var blockConfiguration:BlockConfiguration = null

        var use_clause52:UseClause = null

        var component_configuration53:ComponentConfiguration = null

        var block_specification54:BlockConfigurationSpecification = null



        	val useClauses=new Buffer[UseClause]()
        	val configurations=new Buffer[AnyRef]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return blockConfig }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:438:2: ( FOR block_specification ( use_clause )* (blockConfiguration= block_configuration | component_configuration )* END FOR SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:438:4: FOR block_specification ( use_clause )* (blockConfiguration= block_configuration | component_configuration )* END FOR SEMICOLON
            {
            	`match`(input,FOR,FOLLOW_FOR_in_block_configuration2206); if (state.failed) return blockConfig;
            	pushFollow(FOLLOW_block_specification_in_block_configuration2208)
            	block_specification54=block_specification();

            	state._fsp-=1
            	if (state.failed) return blockConfig;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:439:3: ( use_clause )*
            	var loop28=true
            	do {
            	    var alt28:Int=2
            	    val LA28_0:Int = input.LA(1)

            	    if ( (LA28_0==USE) ) {
            	        alt28=1
            	    }


            	    alt28 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:439:4: use_clause
            		    {
            		    	pushFollow(FOLLOW_use_clause_in_block_configuration2213)
            		    	use_clause52=use_clause();

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig;
            		    	if ( state.backtracking==0 ) {
            		    	  useClauses += use_clause52
            		    	}

            		    }
            		case _ => loop28=false
            	    }
            	} while (loop28);

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:440:3: (blockConfiguration= block_configuration | component_configuration )*
            	var loop29=true
            	do {
            	    var alt29:Int=3
            	    val LA29_0:Int = input.LA(1)

            	    if ( (LA29_0==FOR) ) {
            	        input.LA(2) match {
            	        case BASIC_IDENTIFIER => {
            	             val LA29_3:Int = input.LA(3)

            	             if ( (LA29_3==END||LA29_3==FOR||LA29_3==USE||LA29_3==LPAREN||LA29_3==DOT) ) {
            	                 alt29=1
            	             }
            	             else if ( (LA29_3==COMMA||LA29_3==COLON) ) {
            	                 alt29=2
            	             }


            	        }

            	        case EXTENDED_IDENTIFIER => {
            	             val LA29_4:Int = input.LA(3)

            	             if ( (LA29_4==END||LA29_4==FOR||LA29_4==USE||LA29_4==LPAREN||LA29_4==DOT) ) {
            	                 alt29=1
            	             }
            	             else if ( (LA29_4==COMMA||LA29_4==COLON) ) {
            	                 alt29=2
            	             }


            	        }

            	        case STRING_LITERAL => {
            	             alt29=1
            	        }

            	        case ALL | OTHERS => {
            	             alt29=2
            	        }


            	        case _ =>
            	        }

            	    }


            	    alt29 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:441:4: blockConfiguration= block_configuration
            		    {
            		    	pushFollow(FOLLOW_block_configuration_in_block_configuration2228)
            		    	blockConfiguration=block_configuration();

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig;
            		    	if ( state.backtracking==0 ) {
            		    	  configurations += blockConfiguration
            		    	}

            		    }case 2 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:442:5: component_configuration
            		    {
            		    	pushFollow(FOLLOW_component_configuration_in_block_configuration2236)
            		    	component_configuration53=component_configuration();

            		    	state._fsp-=1
            		    	if (state.failed) return blockConfig;
            		    	if ( state.backtracking==0 ) {
            		    	  configurations += component_configuration53
            		    	}

            		    }
            		case _ => loop29=false
            	    }
            	} while (loop29);

            	`match`(input,END,FOLLOW_END_in_block_configuration2247); if (state.failed) return blockConfig;
            	`match`(input,FOR,FOLLOW_FOR_in_block_configuration2249); if (state.failed) return blockConfig;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_configuration2251); if (state.failed) return blockConfig;
            	if ( state.backtracking==0 ) {
            	  blockConfig=new BlockConfiguration(block_specification54,useClauses.toList,configurations.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, block_configuration_StartIndex) }
        }
        return blockConfig
    }
    // $ANTLR end "block_configuration"

    // $ANTLR start "component_configuration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:448:1: component_configuration returns [ComponentConfiguration componentConfig] : FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON ;
    @throws(classOf[RecognitionException])
    def component_configuration():ComponentConfiguration = {
         var componentConfig :ComponentConfiguration = null;val component_configuration_StartIndex:Int = input.index()
        var component_specification55:AnyRef = null

        var binding_indication56:AnyRef = null

        var block_configuration57:BlockConfiguration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return componentConfig }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:449:2: ( FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:449:4: FOR component_specification ( binding_indication SEMICOLON )? ( block_configuration )? END FOR SEMICOLON
            {
            	`match`(input,FOR,FOLLOW_FOR_in_component_configuration2274); if (state.failed) return componentConfig;
            	pushFollow(FOLLOW_component_specification_in_component_configuration2276)
            	component_specification55=component_specification();

            	state._fsp-=1
            	if (state.failed) return componentConfig;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:450:4: ( binding_indication SEMICOLON )?
            	var alt30 :Int=2
            	val LA30_0:Int = input.LA(1)

            	if ( (LA30_0==GENERIC||LA30_0==PORT||LA30_0==USE||LA30_0==SEMICOLON) ) {
            	    alt30=1
            	}
            	alt30 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:450:5: binding_indication SEMICOLON
            	        {
            	        	pushFollow(FOLLOW_binding_indication_in_component_configuration2282)
            	        	binding_indication56=binding_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return componentConfig;
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_configuration2284); if (state.failed) return componentConfig;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:452:4: ( block_configuration )?
            	var alt31 :Int=2
            	val LA31_0:Int = input.LA(1)

            	if ( (LA31_0==FOR) ) {
            	    alt31=1
            	}
            	alt31 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:452:4: block_configuration
            	        {
            	        	pushFollow(FOLLOW_block_configuration_in_component_configuration2295)
            	        	block_configuration57=block_configuration();

            	        	state._fsp-=1
            	        	if (state.failed) return componentConfig;

            	        }
            	    case _ => 
            	}

            	`match`(input,END,FOLLOW_END_in_component_configuration2300); if (state.failed) return componentConfig;
            	`match`(input,FOR,FOLLOW_FOR_in_component_configuration2302); if (state.failed) return componentConfig;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_configuration2304); if (state.failed) return componentConfig;
            	if ( state.backtracking==0 ) {
            	  componentConfig=new ComponentConfiguration(component_specification55,binding_indication56,block_configuration57)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, component_configuration_StartIndex) }
        }
        return componentConfig
    }
    // $ANTLR end "component_configuration"

    // $ANTLR start "package_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:466:1: package_declaration returns [PackageDeclaration packageDecl] : PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def package_declaration():PackageDeclaration = {
         var packageDecl :PackageDeclaration = null;val package_declaration_StartIndex:Int = input.index()
        var start_identifier:Identifier = null

        var end_identifier:Identifier = null

        var package_declarative_item58:DeclarativeItem = null



        	val declarativeItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return packageDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:470:2: ( PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:470:4: PACKAGE start_identifier= identifier IS ( package_declarative_item )* END ( PACKAGE )? (end_identifier= identifier )? SEMICOLON
            {
            	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_declaration2335); if (state.failed) return packageDecl;
            	pushFollow(FOLLOW_identifier_in_package_declaration2339)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return packageDecl;
            	`match`(input,IS,FOLLOW_IS_in_package_declaration2341); if (state.failed) return packageDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:473:4: ( package_declarative_item )*
            	var loop32=true
            	do {
            	    var alt32:Int=2
            	    val LA32_0:Int = input.LA(1)

            	    if ( (LA32_0==ALIAS||LA32_0==ATTRIBUTE||LA32_0==COMPONENT||(LA32_0>=CONSTANT && LA32_0<=DISCONNECT)||LA32_0==FILE||LA32_0==FUNCTION||LA32_0==GROUP||LA32_0==IMPURE||LA32_0==PROCEDURE||LA32_0==PURE||(LA32_0>=SHARED && LA32_0<=SIGNAL)||LA32_0==SUBTYPE||LA32_0==TYPE||(LA32_0>=USE && LA32_0<=VARIABLE)) ) {
            	        alt32=1
            	    }
            	    else if ( ((LA32_0>=NATURE && LA32_0<=TERMINAL)||LA32_0==SUBNATURE) && ((ams))) {
            	        alt32=1
            	    }


            	    alt32 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:473:5: package_declarative_item
            		    {
            		    	pushFollow(FOLLOW_package_declarative_item_in_package_declaration2352)
            		    	package_declarative_item58=package_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return packageDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += package_declarative_item58
            		    	}

            		    }
            		case _ => loop32=false
            	    }
            	} while (loop32);

            	`match`(input,END,FOLLOW_END_in_package_declaration2359); if (state.failed) return packageDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:474:7: ( PACKAGE )?
            	var alt33 :Int=2
            	val LA33_0:Int = input.LA(1)

            	if ( (LA33_0==PACKAGE) ) {
            	    alt33=1
            	}
            	alt33 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:474:7: PACKAGE
            	        {
            	        	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_declaration2361); if (state.failed) return packageDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:474:30: (end_identifier= identifier )?
            	var alt34 :Int=2
            	val LA34_0:Int = input.LA(1)

            	if ( ((LA34_0>=BASIC_IDENTIFIER && LA34_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt34=1
            	}
            	alt34 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:474:30: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_package_declaration2366)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return packageDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_declaration2369); if (state.failed) return packageDecl;
            	if ( state.backtracking==0 ) {
            	  packageDecl=new PackageDeclaration(start_identifier,declarativeItems.toList,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, package_declaration_StartIndex) }
        }
        return packageDecl
    }
    // $ANTLR end "package_declaration"

    // $ANTLR start "package_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:478:1: package_declarative_item returns [DeclarativeItem node] : ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    def package_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val package_declarative_item_StartIndex:Int = input.index()
        var subprogram_declaration59:DeclarativeItem = null

        var type_declaration60:AbstractTypeDeclaration = null

        var subtype_declaration61:SubTypeDeclaration = null

        var constant_declaration62:ConstantDeclaration = null

        var signal_declaration63:SignalDeclaration = null

        var variable_declaration64:VariableDeclaration = null

        var file_declaration65:FileDeclaration = null

        var alias_declaration66:AliasDeclaration = null

        var component_declaration67:ComponentDeclaration = null

        var attribute_declaration68:AttributeDeclaration = null

        var attribute_specification69:AttributeSpecification = null

        var disconnection_specification70:DisconnectionSpecification = null

        var use_clause71:UseClause = null

        var group_template_declaration72:GroupTemplateDeclaration = null

        var group_declaration73:GroupDeclaration = null

        var ams_nature_declaration74:AbstractTypeDeclaration = null

        var ams_subnature_declaration75:SubNatureDeclaration = null

        var ams_terminal_declaration76:TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:479:2: ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) )
            var alt36 :Int=16
             alt36 = dfa36.predict(input)
            alt36 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:479:4: subprogram_declaration
                    {
                    	pushFollow(FOLLOW_subprogram_declaration_in_package_declarative_item2391)
                    	subprogram_declaration59=subprogram_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declaration59
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:483:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_package_declarative_item2403)
                    	type_declaration60=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration60
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:484:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_package_declarative_item2411)
                    	subtype_declaration61=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration61
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:485:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_package_declarative_item2419)
                    	constant_declaration62=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration62
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:486:5: signal_declaration
                    {
                    	pushFollow(FOLLOW_signal_declaration_in_package_declarative_item2427)
                    	signal_declaration63=signal_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=signal_declaration63
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:487:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_package_declarative_item2435)
                    	variable_declaration64=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration64
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:488:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_package_declarative_item2443)
                    	file_declaration65=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration65
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:489:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_package_declarative_item2451)
                    	alias_declaration66=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration66
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:490:5: component_declaration
                    {
                    	pushFollow(FOLLOW_component_declaration_in_package_declarative_item2459)
                    	component_declaration67=component_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=component_declaration67
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:491:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_package_declarative_item2467)
                    	attribute_declaration68=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration68
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:492:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_package_declarative_item2475)
                    	attribute_specification69=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification69
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:493:5: disconnection_specification
                    {
                    	pushFollow(FOLLOW_disconnection_specification_in_package_declarative_item2483)
                    	disconnection_specification70=disconnection_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=disconnection_specification70
                    	}

                    }case 13 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:494:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_package_declarative_item2491)
                    	use_clause71=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause71
                    	}

                    }case 14 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:495:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_package_declarative_item2499)
                    	group_template_declaration72=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration72
                    	}

                    }case 15 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:496:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_package_declarative_item2507)
                    	group_declaration73=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration73
                    	}

                    }case 16 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:497:5: {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    throw new FailedPredicateException(input, "package_declarative_item", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:498:3: ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration )
                    	var alt35 :Int=3
                    	input.LA(1) match {
                    	case NATURE => {
                    	     alt35=1
                    	}

                    	case SUBNATURE => {
                    	     alt35=2
                    	}

                    	case TERMINAL => {
                    	     alt35=3
                    	}

                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    val nvae = new NoViableAltException("", 35, 0, input)

                    	    throw nvae
                    	}

                    	alt35 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:499:4: ams_nature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_package_declarative_item2525)
                    	        	ams_nature_declaration74=ams_nature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_nature_declaration74
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:500:5: ams_subnature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_package_declarative_item2533)
                    	        	ams_subnature_declaration75=ams_subnature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_subnature_declaration75
                    	        	}

                    	        }case 3 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:501:5: ams_terminal_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_package_declarative_item2541)
                    	        	ams_terminal_declaration76=ams_terminal_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_terminal_declaration76
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, package_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "package_declarative_item"

    // $ANTLR start "package_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:506:1: package_body returns [PackageBodyDeclaration packageBody] : PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def package_body():PackageBodyDeclaration = {
         var packageBody :PackageBodyDeclaration = null;val package_body_StartIndex:Int = input.index()
        var start_identifier:Identifier = null

        var end_identifier:Identifier = null

        var package_body_declarative_item77:DeclarativeItem = null



        	val declarativeItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return packageBody }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:510:2: ( PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:510:4: PACKAGE BODY start_identifier= identifier IS ( package_body_declarative_item )* END ( PACKAGE BODY )? (end_identifier= identifier )? SEMICOLON
            {
            	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_body2570); if (state.failed) return packageBody;
            	`match`(input,BODY,FOLLOW_BODY_in_package_body2572); if (state.failed) return packageBody;
            	pushFollow(FOLLOW_identifier_in_package_body2576)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return packageBody;
            	`match`(input,IS,FOLLOW_IS_in_package_body2578); if (state.failed) return packageBody;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:511:4: ( package_body_declarative_item )*
            	var loop37=true
            	do {
            	    var alt37:Int=2
            	    val LA37_0:Int = input.LA(1)

            	    if ( (LA37_0==ALIAS||LA37_0==ATTRIBUTE||LA37_0==CONSTANT||LA37_0==FILE||LA37_0==FUNCTION||LA37_0==GROUP||LA37_0==IMPURE||LA37_0==PROCEDURE||LA37_0==PURE||LA37_0==SHARED||LA37_0==SUBTYPE||LA37_0==TYPE||(LA37_0>=USE && LA37_0<=VARIABLE)) ) {
            	        alt37=1
            	    }


            	    alt37 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:511:5: package_body_declarative_item
            		    {
            		    	pushFollow(FOLLOW_package_body_declarative_item_in_package_body2584)
            		    	package_body_declarative_item77=package_body_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return packageBody;
            		    	if ( state.backtracking==0 ) {
            		    	  declarativeItems += package_body_declarative_item77
            		    	}

            		    }
            		case _ => loop37=false
            	    }
            	} while (loop37);

            	`match`(input,END,FOLLOW_END_in_package_body2591); if (state.failed) return packageBody;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:512:7: ( PACKAGE BODY )?
            	var alt38 :Int=2
            	val LA38_0:Int = input.LA(1)

            	if ( (LA38_0==PACKAGE) ) {
            	    alt38=1
            	}
            	alt38 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:512:8: PACKAGE BODY
            	        {
            	        	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_package_body2594); if (state.failed) return packageBody;
            	        	`match`(input,BODY,FOLLOW_BODY_in_package_body2596); if (state.failed) return packageBody;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:512:37: (end_identifier= identifier )?
            	var alt39 :Int=2
            	val LA39_0:Int = input.LA(1)

            	if ( ((LA39_0>=BASIC_IDENTIFIER && LA39_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt39=1
            	}
            	alt39 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:512:37: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_package_body2602)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return packageBody;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_body2605); if (state.failed) return packageBody;
            	if ( state.backtracking==0 ) {
            	  packageBody = new PackageBodyDeclaration(start_identifier,declarativeItems.toList,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, package_body_StartIndex) }
        }
        return packageBody
    }
    // $ANTLR end "package_body"

    // $ANTLR start "package_body_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:516:1: package_body_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    def package_body_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val package_body_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body78:DeclarativeItem = null

        var type_declaration79:AbstractTypeDeclaration = null

        var subtype_declaration80:SubTypeDeclaration = null

        var constant_declaration81:ConstantDeclaration = null

        var variable_declaration82:VariableDeclaration = null

        var file_declaration83:FileDeclaration = null

        var alias_declaration84:AliasDeclaration = null

        var use_clause85:UseClause = null

        var attribute_specification86:AttributeSpecification = null

        var group_template_declaration87:GroupTemplateDeclaration = null

        var group_declaration88:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:517:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration )
            var alt40 :Int=11
             alt40 = dfa40.predict(input)
            alt40 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:517:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_package_body_declarative_item2629)
                    	subprogram_declartion_or_body78=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body78
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:521:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_package_body_declarative_item2641)
                    	type_declaration79=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration79
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:522:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_package_body_declarative_item2649)
                    	subtype_declaration80=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration80
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:523:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_package_body_declarative_item2657)
                    	constant_declaration81=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration81
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:524:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_package_body_declarative_item2665)
                    	variable_declaration82=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration82
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:525:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_package_body_declarative_item2673)
                    	file_declaration83=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration83
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:526:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_package_body_declarative_item2681)
                    	alias_declaration84=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration84
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:528:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_package_body_declarative_item2692)
                    	use_clause85=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause85
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:529:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_package_body_declarative_item2700)
                    	attribute_specification86=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification86
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:530:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_package_body_declarative_item2709)
                    	group_template_declaration87=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration87
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:531:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_package_body_declarative_item2717)
                    	group_declaration88=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration88
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, package_body_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "package_body_declarative_item"

    // $ANTLR start "designator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:539:1: designator returns [Identifier id] : ( identifier | STRING_LITERAL );
    @throws(classOf[RecognitionException])
    def designator():Identifier = {
         var id :Identifier = null;val designator_StartIndex:Int = input.index()
        var STRING_LITERAL90 :Token=null
        var identifier89:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return id }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:540:2: ( identifier | STRING_LITERAL )
            var alt41 :Int=2
            val LA41_0:Int = input.LA(1)

            if ( ((LA41_0>=BASIC_IDENTIFIER && LA41_0<=EXTENDED_IDENTIFIER)) ) {
                alt41=1
            }
            else if ( (LA41_0==STRING_LITERAL) ) {
                alt41=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 41, 0, input)

                throw nvae
            }
            alt41 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:540:4: identifier
                    {
                    	pushFollow(FOLLOW_identifier_in_designator2737)
                    	identifier89=identifier();

                    	state._fsp-=1
                    	if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=identifier89
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:541:6: STRING_LITERAL
                    {
                    	STRING_LITERAL90=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_designator2746).asInstanceOf[Token]; if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(STRING_LITERAL90)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, designator_StartIndex) }
        }
        return id
    }
    // $ANTLR end "designator"

    // $ANTLR start "subprogram_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:544:1: subprogram_specification returns [SubProgramDeclaration decl] : ( PROCEDURE designator ( LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark );
    @throws(classOf[RecognitionException])
    def subprogram_specification():SubProgramDeclaration = {
         var decl :SubProgramDeclaration = null;val subprogram_specification_StartIndex:Int = input.index()
        var i :Token=null
        var PROCEDURE91 :Token=null
        var FUNCTION94 :Token=null
        var designator92:Identifier = null

        var parameter_interface_list_procedure93:InterfaceList = null

        var designator95:Identifier = null

        var parameter_interface_list_function96:InterfaceList = null

        var type_mark97:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return decl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:545:2: ( PROCEDURE designator ( LPAREN parameter_interface_list_procedure RPAREN )? | ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark )
            var alt45 :Int=2
            val LA45_0:Int = input.LA(1)

            if ( (LA45_0==PROCEDURE) ) {
                alt45=1
            }
            else if ( (LA45_0==FUNCTION||LA45_0==IMPURE||LA45_0==PURE) ) {
                alt45=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return decl}
                val nvae = new NoViableAltException("", 45, 0, input)

                throw nvae
            }
            alt45 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:545:5: PROCEDURE designator ( LPAREN parameter_interface_list_procedure RPAREN )?
                    {
                    	PROCEDURE91=`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_subprogram_specification2770).asInstanceOf[Token]; if (state.failed) return decl;
                    	pushFollow(FOLLOW_designator_in_subprogram_specification2772)
                    	designator92=designator();

                    	state._fsp-=1
                    	if (state.failed) return decl;
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:548:4: ( LPAREN parameter_interface_list_procedure RPAREN )?
                    	var alt42 :Int=2
                    	val LA42_0:Int = input.LA(1)

                    	if ( (LA42_0==LPAREN) ) {
                    	    alt42=1
                    	}
                    	alt42 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:548:33: LPAREN parameter_interface_list_procedure RPAREN
                    	        {
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_subprogram_specification2786); if (state.failed) return decl;
                    	        	pushFollow(FOLLOW_parameter_interface_list_procedure_in_subprogram_specification2788)
                    	        	parameter_interface_list_procedure93=parameter_interface_list_procedure();

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl;
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_subprogram_specification2790); if (state.failed) return decl;

                    	        }
                    	    case _ => 
                    	}

                    	if ( state.backtracking==0 ) {
                    	  decl=new ProcedureDeclaration(toPosition(PROCEDURE91),designator92,parameter_interface_list_procedure93)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:550:6: ( PURE | i= IMPURE )? FUNCTION designator ( LPAREN parameter_interface_list_function RPAREN )? RETURN type_mark
                    {
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:550:6: ( PURE | i= IMPURE )?
                    	var alt43 :Int=3
                    	val LA43_0:Int = input.LA(1)

                    	if ( (LA43_0==PURE) ) {
                    	    alt43=1
                    	}
                    	else if ( (LA43_0==IMPURE) ) {
                    	    alt43=2
                    	}
                    	alt43 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:550:7: PURE
                    	        {
                    	        	`match`(input,PURE,FOLLOW_PURE_in_subprogram_specification2807); if (state.failed) return decl;

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:550:14: i= IMPURE
                    	        {
                    	        	i=`match`(input,IMPURE,FOLLOW_IMPURE_in_subprogram_specification2813).asInstanceOf[Token]; if (state.failed) return decl;

                    	        }
                    	    case _ => 
                    	}

                    	FUNCTION94=`match`(input,FUNCTION,FOLLOW_FUNCTION_in_subprogram_specification2817).asInstanceOf[Token]; if (state.failed) return decl;
                    	pushFollow(FOLLOW_designator_in_subprogram_specification2819)
                    	designator95=designator();

                    	state._fsp-=1
                    	if (state.failed) return decl;
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:553:4: ( LPAREN parameter_interface_list_function RPAREN )?
                    	var alt44 :Int=2
                    	val LA44_0:Int = input.LA(1)

                    	if ( (LA44_0==LPAREN) ) {
                    	    alt44=1
                    	}
                    	alt44 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:553:33: LPAREN parameter_interface_list_function RPAREN
                    	        {
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_subprogram_specification2832); if (state.failed) return decl;
                    	        	pushFollow(FOLLOW_parameter_interface_list_function_in_subprogram_specification2834)
                    	        	parameter_interface_list_function96=parameter_interface_list_function();

                    	        	state._fsp-=1
                    	        	if (state.failed) return decl;
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_subprogram_specification2836); if (state.failed) return decl;

                    	        }
                    	    case _ => 
                    	}

                    	`match`(input,RETURN,FOLLOW_RETURN_in_subprogram_specification2841); if (state.failed) return decl;
                    	pushFollow(FOLLOW_type_mark_in_subprogram_specification2843)
                    	type_mark97=type_mark();

                    	state._fsp-=1
                    	if (state.failed) return decl;
                    	if ( state.backtracking==0 ) {
                    	  decl=new FunctionDeclaration(toPosition(FUNCTION94),i==null,designator95,parameter_interface_list_function96,type_mark97)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, subprogram_specification_StartIndex) }
        }
        return decl
    }
    // $ANTLR end "subprogram_specification"

    // $ANTLR start "subprogram_declartion_or_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:557:1: subprogram_declartion_or_body returns [DeclarativeItem declOrBody] : subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def subprogram_declartion_or_body():DeclarativeItem = {
         var declOrBody :DeclarativeItem = null;val subprogram_declartion_or_body_StartIndex:Int = input.index()
        var subprogram_specification98:SubProgramDeclaration = null

        var subprogram_body99:SubProgramDefinition = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return declOrBody }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:558:2: ( subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:558:4: subprogram_specification ( subprogram_body[$subprogram_specification.decl] )? SEMICOLON
            {
            	pushFollow(FOLLOW_subprogram_specification_in_subprogram_declartion_or_body2866)
            	subprogram_specification98=subprogram_specification();

            	state._fsp-=1
            	if (state.failed) return declOrBody;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:558:29: ( subprogram_body[$subprogram_specification.decl] )?
            	var alt46 :Int=2
            	val LA46_0:Int = input.LA(1)

            	if ( (LA46_0==IS) ) {
            	    alt46=1
            	}
            	alt46 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:558:30: subprogram_body[$subprogram_specification.decl]
            	        {
            	        	pushFollow(FOLLOW_subprogram_body_in_subprogram_declartion_or_body2869)
            	        	subprogram_body99=subprogram_body(subprogram_specification98);

            	        	state._fsp-=1
            	        	if (state.failed) return declOrBody;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subprogram_declartion_or_body2874); if (state.failed) return declOrBody;
            	if ( state.backtracking==0 ) {
            	  declOrBody=if (subprogram_body99!=null) subprogram_body99 else subprogram_specification98
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, subprogram_declartion_or_body_StartIndex) }
        }
        return declOrBody
    }
    // $ANTLR end "subprogram_declartion_or_body"

    // $ANTLR start "subprogram_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:562:1: subprogram_declaration returns [DeclarativeItem subprogramDecl] : subprogram_specification SEMICOLON ;
    @throws(classOf[RecognitionException])
    def subprogram_declaration():DeclarativeItem = {
         var subprogramDecl :DeclarativeItem = null;val subprogram_declaration_StartIndex:Int = input.index()
        var subprogram_specification100:SubProgramDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return subprogramDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:563:2: ( subprogram_specification SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:563:4: subprogram_specification SEMICOLON
            {
            	pushFollow(FOLLOW_subprogram_specification_in_subprogram_declaration2898)
            	subprogram_specification100=subprogram_specification();

            	state._fsp-=1
            	if (state.failed) return subprogramDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subprogram_declaration2900); if (state.failed) return subprogramDecl;
            	if ( state.backtracking==0 ) {
            	  subprogramDecl=subprogram_specification100
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, subprogram_declaration_StartIndex) }
        }
        return subprogramDecl
    }
    // $ANTLR end "subprogram_declaration"

    // $ANTLR start "subprogram_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:567:1: subprogram_body[SubProgramDeclaration subprogramDecl] returns [SubProgramDefinition subProgramDef] : IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? ;
    @throws(classOf[RecognitionException])
    def subprogram_body(subprogramDecl:SubProgramDeclaration):SubProgramDefinition = {
         var subProgramDef :SubProgramDefinition = null;val subprogram_body_StartIndex:Int = input.index()
        var endIdent:Identifier = null

        var subprogram_declarative_item101:DeclarativeItem = null

        var sequence_of_statements102:Seq[SequentialStatement] = null



        	val declItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return subProgramDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:571:2: ( IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:571:4: IS ( subprogram_declarative_item )* BEGIN sequence_of_statements END ({...}? => PROCEDURE | {...}? => FUNCTION )? (endIdent= designator )?
            {
            	`match`(input,IS,FOLLOW_IS_in_subprogram_body2924); if (state.failed) return subProgramDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:572:4: ( subprogram_declarative_item )*
            	var loop47=true
            	do {
            	    var alt47:Int=2
            	    val LA47_0:Int = input.LA(1)

            	    if ( (LA47_0==ALIAS||LA47_0==ATTRIBUTE||LA47_0==CONSTANT||LA47_0==FILE||LA47_0==FUNCTION||LA47_0==GROUP||LA47_0==IMPURE||LA47_0==PROCEDURE||LA47_0==PURE||LA47_0==SHARED||LA47_0==SUBTYPE||LA47_0==TYPE||(LA47_0>=USE && LA47_0<=VARIABLE)) ) {
            	        alt47=1
            	    }


            	    alt47 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:572:5: subprogram_declarative_item
            		    {
            		    	pushFollow(FOLLOW_subprogram_declarative_item_in_subprogram_body2930)
            		    	subprogram_declarative_item101=subprogram_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return subProgramDef;
            		    	if ( state.backtracking==0 ) {
            		    	  declItems += subprogram_declarative_item101
            		    	}

            		    }
            		case _ => loop47=false
            	    }
            	} while (loop47);

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_subprogram_body2938); if (state.failed) return subProgramDef;
            	pushFollow(FOLLOW_sequence_of_statements_in_subprogram_body2943)
            	sequence_of_statements102=sequence_of_statements();

            	state._fsp-=1
            	if (state.failed) return subProgramDef;
            	`match`(input,END,FOLLOW_END_in_subprogram_body2947); if (state.failed) return subProgramDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:575:7: ({...}? => PROCEDURE | {...}? => FUNCTION )?
            	var alt48 :Int=3
            	val LA48_0:Int = input.LA(1)

            	if ( (LA48_0==PROCEDURE) && ((subprogramDecl.isInstanceOf[ProcedureDeclaration]))) {
            	    alt48=1
            	}
            	else if ( (LA48_0==FUNCTION) && ((subprogramDecl.isInstanceOf[FunctionDeclaration]))) {
            	    alt48=2
            	}
            	alt48 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:575:8: {...}? => PROCEDURE
            	        {
            	        	if ( !((subprogramDecl.isInstanceOf[ProcedureDeclaration])) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return subProgramDef}
            	        	    throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[ProcedureDeclaration]")
            	        	}
            	        	`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_subprogram_body2952); if (state.failed) return subProgramDef;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:575:75: {...}? => FUNCTION
            	        {
            	        	if ( !((subprogramDecl.isInstanceOf[FunctionDeclaration])) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return subProgramDef}
            	        	    throw new FailedPredicateException(input, "subprogram_body", "$subprogramDecl.isInstanceOf[FunctionDeclaration]")
            	        	}
            	        	`match`(input,FUNCTION,FOLLOW_FUNCTION_in_subprogram_body2958); if (state.failed) return subProgramDef;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:575:148: (endIdent= designator )?
            	var alt49 :Int=2
            	val LA49_0:Int = input.LA(1)

            	if ( (LA49_0==STRING_LITERAL||(LA49_0>=BASIC_IDENTIFIER && LA49_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt49=1
            	}
            	alt49 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:575:148: endIdent= designator
            	        {
            	        	pushFollow(FOLLOW_designator_in_subprogram_body2964)
            	        	endIdent=designator();

            	        	state._fsp-=1
            	        	if (state.failed) return subProgramDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {

            	  			subProgramDef = subprogramDecl match {
            	  				case procDecl : ProcedureDeclaration => 
            	  					new ProcedureDefinition(subprogramDecl.position,procDecl.identifier,procDecl.parameterInterfaceList,declItems.toList,sequence_of_statements102,endIdent)
            	  				case funcDecl : FunctionDeclaration =>
            	  					new FunctionDefinition(subprogramDecl.position,funcDecl.pure,funcDecl.identifier,funcDecl.parameterInterfaceList,funcDecl.returnType,declItems.toList,sequence_of_statements102,endIdent)
            	  			}	
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, subprogram_body_StartIndex) }
        }
        return subProgramDef
    }
    // $ANTLR end "subprogram_body"

    // $ANTLR start "subprogram_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:586:1: subprogram_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    def subprogram_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val subprogram_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body103:DeclarativeItem = null

        var type_declaration104:AbstractTypeDeclaration = null

        var subtype_declaration105:SubTypeDeclaration = null

        var constant_declaration106:ConstantDeclaration = null

        var variable_declaration107:VariableDeclaration = null

        var file_declaration108:FileDeclaration = null

        var alias_declaration109:AliasDeclaration = null

        var attribute_declaration110:AttributeDeclaration = null

        var attribute_specification111:AttributeSpecification = null

        var use_clause112:UseClause = null

        var group_template_declaration113:GroupTemplateDeclaration = null

        var group_declaration114:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:587:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            var alt50 :Int=12
             alt50 = dfa50.predict(input)
            alt50 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:587:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_subprogram_declarative_item2990)
                    	subprogram_declartion_or_body103=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body103
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:591:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_subprogram_declarative_item3002)
                    	type_declaration104=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration104
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:592:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_subprogram_declarative_item3010)
                    	subtype_declaration105=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration105
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:593:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_subprogram_declarative_item3018)
                    	constant_declaration106=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration106
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:594:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_subprogram_declarative_item3026)
                    	variable_declaration107=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration107
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:595:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_subprogram_declarative_item3034)
                    	file_declaration108=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration108
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:596:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_subprogram_declarative_item3042)
                    	alias_declaration109=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration109
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:597:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_subprogram_declarative_item3050)
                    	attribute_declaration110=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration110
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:598:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_subprogram_declarative_item3058)
                    	attribute_specification111=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification111
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:599:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_subprogram_declarative_item3066)
                    	use_clause112=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause112
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:600:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_subprogram_declarative_item3074)
                    	group_template_declaration113=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration113
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:601:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_subprogram_declarative_item3082)
                    	group_declaration114=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration114
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, subprogram_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "subprogram_declarative_item"

    // $ANTLR start "type_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:609:1: type_declaration returns [AbstractTypeDeclaration typeDecl] : TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] SEMICOLON | SEMICOLON ) ;
    @throws(classOf[RecognitionException])
    def type_declaration():AbstractTypeDeclaration = {
         var typeDecl :AbstractTypeDeclaration = null;val type_declaration_StartIndex:Int = input.index()
        var TYPE116 :Token=null
        var identifier115:Identifier = null

        var type_definition117:AbstractTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return typeDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:610:2: ( TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] SEMICOLON | SEMICOLON ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:610:4: TYPE identifier ( IS type_definition[$identifier.id,toPosition($TYPE)] SEMICOLON | SEMICOLON )
            {
            	TYPE116=`match`(input,TYPE,FOLLOW_TYPE_in_type_declaration3101).asInstanceOf[Token]; if (state.failed) return typeDecl;
            	pushFollow(FOLLOW_identifier_in_type_declaration3103)
            	identifier115=identifier();

            	state._fsp-=1
            	if (state.failed) return typeDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:610:20: ( IS type_definition[$identifier.id,toPosition($TYPE)] SEMICOLON | SEMICOLON )
            	var alt51 :Int=2
            	val LA51_0:Int = input.LA(1)

            	if ( (LA51_0==IS) ) {
            	    alt51=1
            	}
            	else if ( (LA51_0==SEMICOLON) ) {
            	    alt51=2
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return typeDecl}
            	    val nvae = new NoViableAltException("", 51, 0, input)

            	    throw nvae
            	}
            	alt51 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:611:3: IS type_definition[$identifier.id,toPosition($TYPE)] SEMICOLON
            	        {
            	        	`match`(input,IS,FOLLOW_IS_in_type_declaration3109); if (state.failed) return typeDecl;
            	        	pushFollow(FOLLOW_type_definition_in_type_declaration3111)
            	        	type_definition117=type_definition(identifier115, toPosition(TYPE116));

            	        	state._fsp-=1
            	        	if (state.failed) return typeDecl;
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration3114); if (state.failed) return typeDecl;
            	        	if ( state.backtracking==0 ) {
            	        	  typeDecl=type_definition117
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:612:5: SEMICOLON
            	        {
            	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration3122); if (state.failed) return typeDecl;
            	        	if ( state.backtracking==0 ) {
            	        	  typeDecl=new IncompleteTypeDeclaration(toPosition(TYPE116),identifier115)
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, type_declaration_StartIndex) }
        }
        return typeDecl
    }
    // $ANTLR end "type_declaration"

    // $ANTLR start "type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:616:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );
    @throws(classOf[RecognitionException])
    def type_definition(id:Identifier, pos:Position):AbstractTypeDeclaration = {
         var typeDef :AbstractTypeDeclaration = null;val type_definition_StartIndex:Int = input.index()
        var enumeration_type_definition118:EnumerationTypeDefinition = null

        var physical_type_definition119:PhysicalTypeDefinition = null

        var integer_or_floating_point_type_definition120:IntegerOrFloatingPointTypeDefinition = null

        var array_type_definition121:AbstractArrayTypeDefinition = null

        var record_type_definition122:RecordTypeDefinition = null

        var access_type_definition123:AccessTypeDefinition = null

        var file_type_definition124:FileTypeDefinition = null

        var protected_type_body125:ProtectedTypeBodyDeclaration = null

        var protected_type_declaration126:ProtectedTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return typeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:617:2: ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] )
            var alt52 :Int=9
             alt52 = dfa52.predict(input)
            alt52 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:617:4: enumeration_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_enumeration_type_definition_in_type_definition3146)
                    	enumeration_type_definition118=enumeration_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=enumeration_type_definition118
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:618:5: ( RANGE range UNITS )=> physical_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_physical_type_definition_in_type_definition3165)
                    	physical_type_definition119=physical_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=physical_type_definition119
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:619:5: integer_or_floating_point_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_integer_or_floating_point_type_definition_in_type_definition3174)
                    	integer_or_floating_point_type_definition120=integer_or_floating_point_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=integer_or_floating_point_type_definition120
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:620:5: array_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_array_type_definition_in_type_definition3183)
                    	array_type_definition121=array_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=array_type_definition121
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:621:5: record_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_record_type_definition_in_type_definition3192)
                    	record_type_definition122=record_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=record_type_definition122
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:622:5: access_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_access_type_definition_in_type_definition3201)
                    	access_type_definition123=access_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=access_type_definition123
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:623:5: file_type_definition[$id,$pos]
                    {
                    	pushFollow(FOLLOW_file_type_definition_in_type_definition3210)
                    	file_type_definition124=file_type_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=file_type_definition124
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:624:5: ( PROTECTED BODY )=> protected_type_body[$id,$pos]
                    {
                    	pushFollow(FOLLOW_protected_type_body_in_type_definition3225)
                    	protected_type_body125=protected_type_body(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=protected_type_body125
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:625:5: protected_type_declaration[$id,$pos]
                    {
                    	pushFollow(FOLLOW_protected_type_declaration_in_type_definition3234)
                    	protected_type_declaration126=protected_type_declaration(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return typeDef;
                    	if ( state.backtracking==0 ) {
                    	  typeDef=protected_type_declaration126
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, type_definition_StartIndex) }
        }
        return typeDef
    }
    // $ANTLR end "type_definition"

    // $ANTLR start "ams_nature_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:628:1: ams_nature_declaration returns [AbstractTypeDeclaration natureDecl] : NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_nature_declaration():AbstractTypeDeclaration = {
         var natureDecl :AbstractTypeDeclaration = null;val ams_nature_declaration_StartIndex:Int = input.index()
        var NATURE128 :Token=null
        var identifier127:Identifier = null

        var ams_nature_definition129:AbstractTypeDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return natureDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:629:2: ( NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:629:4: NATURE identifier IS ams_nature_definition[$identifier.id,toPosition($NATURE)] SEMICOLON
            {
            	NATURE128=`match`(input,NATURE,FOLLOW_NATURE_in_ams_nature_declaration3255).asInstanceOf[Token]; if (state.failed) return natureDecl;
            	pushFollow(FOLLOW_identifier_in_ams_nature_declaration3257)
            	identifier127=identifier();

            	state._fsp-=1
            	if (state.failed) return natureDecl;
            	`match`(input,IS,FOLLOW_IS_in_ams_nature_declaration3259); if (state.failed) return natureDecl;
            	pushFollow(FOLLOW_ams_nature_definition_in_ams_nature_declaration3261)
            	ams_nature_definition129=ams_nature_definition(identifier127, toPosition(NATURE128));

            	state._fsp-=1
            	if (state.failed) return natureDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_nature_declaration3264); if (state.failed) return natureDecl;
            	if ( state.backtracking==0 ) {
            	  natureDecl=ams_nature_definition129
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, ams_nature_declaration_StartIndex) }
        }
        return natureDecl
    }
    // $ANTLR end "ams_nature_declaration"

    // $ANTLR start "ams_terminal_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:633:1: ams_terminal_declaration returns [TerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_terminal_declaration():TerminalDeclaration = {
         var terminalDecl :TerminalDeclaration = null;val ams_terminal_declaration_StartIndex:Int = input.index()
        var TERMINAL130 :Token=null
        var identifier_list131:Seq[Identifier] = null

        var ams_subnature_indication132:SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return terminalDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:634:2: ( TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:634:4: TERMINAL identifier_list COLON ams_subnature_indication SEMICOLON
            {
            	TERMINAL130=`match`(input,TERMINAL,FOLLOW_TERMINAL_in_ams_terminal_declaration3284).asInstanceOf[Token]; if (state.failed) return terminalDecl;
            	pushFollow(FOLLOW_identifier_list_in_ams_terminal_declaration3286)
            	identifier_list131=identifier_list();

            	state._fsp-=1
            	if (state.failed) return terminalDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_ams_terminal_declaration3288); if (state.failed) return terminalDecl;
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_terminal_declaration3290)
            	ams_subnature_indication132=ams_subnature_indication();

            	state._fsp-=1
            	if (state.failed) return terminalDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_terminal_declaration3292); if (state.failed) return terminalDecl;
            	if ( state.backtracking==0 ) {
            	  terminalDecl=new TerminalDeclaration(toPosition(TERMINAL130),identifier_list131,ams_subnature_indication132)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, ams_terminal_declaration_StartIndex) }
        }
        return terminalDecl
    }
    // $ANTLR end "ams_terminal_declaration"

    // $ANTLR start "ams_nature_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:638:1: ams_nature_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration natureDef] : ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] );
    @throws(classOf[RecognitionException])
    def ams_nature_definition(id:Identifier, pos:Position):AbstractTypeDeclaration = {
         var natureDef :AbstractTypeDeclaration = null;val ams_nature_definition_StartIndex:Int = input.index()
        var ams_scalar_nature_definition133:ScalarNatureDefinition = null

        var ams_array_nature_definition134:AbstractArrayNatureTypeDefinition = null

        var ams_record_nature_definition135:RecordNatureDefinition = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return natureDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:639:2: ( ams_scalar_nature_definition[$id,pos] | ams_array_nature_definition[$id,pos] | ams_record_nature_definition[$id,pos] )
            var alt53 :Int=3
            input.LA(1) match {
            case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt53=1
            }

            case ARRAY => {
                 alt53=2
            }

            case RECORD => {
                 alt53=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return natureDef}
                val nvae = new NoViableAltException("", 53, 0, input)

                throw nvae
            }

            alt53 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:639:4: ams_scalar_nature_definition[$id,pos]
                    {
                    	pushFollow(FOLLOW_ams_scalar_nature_definition_in_ams_nature_definition3314)
                    	ams_scalar_nature_definition133=ams_scalar_nature_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return natureDef;
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_scalar_nature_definition133
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:640:5: ams_array_nature_definition[$id,pos]
                    {
                    	pushFollow(FOLLOW_ams_array_nature_definition_in_ams_nature_definition3323)
                    	ams_array_nature_definition134=ams_array_nature_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return natureDef;
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_array_nature_definition134
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:641:5: ams_record_nature_definition[$id,pos]
                    {
                    	pushFollow(FOLLOW_ams_record_nature_definition_in_ams_nature_definition3332)
                    	ams_record_nature_definition135=ams_record_nature_definition(id, pos);

                    	state._fsp-=1
                    	if (state.failed) return natureDef;
                    	if ( state.backtracking==0 ) {
                    	  natureDef=ams_record_nature_definition135
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, ams_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_nature_definition"

    // $ANTLR start "ams_quantity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:644:1: ams_quantity_declaration returns [AbstractQuantityDeclaration quantityDecl] : ( ( ams_free_quantity_declaration )=> ams_free_quantity_declaration | ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration | ams_source_quantity_declaration );
    @throws(classOf[RecognitionException])
    def ams_quantity_declaration():AbstractQuantityDeclaration = {
         var quantityDecl :AbstractQuantityDeclaration = null;val ams_quantity_declaration_StartIndex:Int = input.index()
        var ams_free_quantity_declaration136:FreeQuantityDeclaration = null

        var ams_branch_quantity_declaration137:BranchQuantityDeclaration = null

        var ams_source_quantity_declaration138:SourceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return quantityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:645:3: ( ( ams_free_quantity_declaration )=> ams_free_quantity_declaration | ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration | ams_source_quantity_declaration )
            var alt54 :Int=3
            val LA54_0:Int = input.LA(1)

            if ( (LA54_0==QUANTITY) ) {
                val LA54_1:Int = input.LA(2)

                if ( (synpred5_VHDL()) ) {
                    alt54=1
                }
                else if ( (synpred6_VHDL()) ) {
                    alt54=2
                }
                else if ( (true) ) {
                    alt54=3
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return quantityDecl}
                    val nvae = new NoViableAltException("", 54, 1, input)

                    throw nvae
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return quantityDecl}
                val nvae = new NoViableAltException("", 54, 0, input)

                throw nvae
            }
            alt54 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:645:5: ( ams_free_quantity_declaration )=> ams_free_quantity_declaration
                    {
                    	pushFollow(FOLLOW_ams_free_quantity_declaration_in_ams_quantity_declaration3357)
                    	ams_free_quantity_declaration136=ams_free_quantity_declaration();

                    	state._fsp-=1
                    	if (state.failed) return quantityDecl;
                    	if ( state.backtracking==0 ) {
                    	  quantityDecl=ams_free_quantity_declaration136
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:646:5: ( ams_branch_quantity_declaration )=> ams_branch_quantity_declaration
                    {
                    	pushFollow(FOLLOW_ams_branch_quantity_declaration_in_ams_quantity_declaration3370)
                    	ams_branch_quantity_declaration137=ams_branch_quantity_declaration();

                    	state._fsp-=1
                    	if (state.failed) return quantityDecl;
                    	if ( state.backtracking==0 ) {
                    	  quantityDecl=ams_branch_quantity_declaration137
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:647:5: ams_source_quantity_declaration
                    {
                    	pushFollow(FOLLOW_ams_source_quantity_declaration_in_ams_quantity_declaration3378)
                    	ams_source_quantity_declaration138=ams_source_quantity_declaration();

                    	state._fsp-=1
                    	if (state.failed) return quantityDecl;
                    	if ( state.backtracking==0 ) {
                    	  quantityDecl=ams_source_quantity_declaration138
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, ams_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_quantity_declaration"

    // $ANTLR start "ams_free_quantity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:650:2: ams_free_quantity_declaration returns [FreeQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_free_quantity_declaration():FreeQuantityDeclaration = {
         var quantityDecl :FreeQuantityDeclaration = null;val ams_free_quantity_declaration_StartIndex:Int = input.index()
        var QUANTITY139 :Token=null
        var identifier_list140:Seq[Identifier] = null

        var subtype_indication141:SubTypeIndication = null

        var expression142:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return quantityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:651:3: ( QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:651:5: QUANTITY identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
            {
            	QUANTITY139=`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_free_quantity_declaration3399).asInstanceOf[Token]; if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_identifier_list_in_ams_free_quantity_declaration3401)
            	identifier_list140=identifier_list();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_ams_free_quantity_declaration3403); if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_subtype_indication_in_ams_free_quantity_declaration3405)
            	subtype_indication141=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:651:55: ( VAR_ASSIGN expression )?
            	var alt55 :Int=2
            	val LA55_0:Int = input.LA(1)

            	if ( (LA55_0==VAR_ASSIGN) ) {
            	    alt55=1
            	}
            	alt55 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:651:56: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_free_quantity_declaration3408); if (state.failed) return quantityDecl;
            	        	pushFollow(FOLLOW_expression_in_ams_free_quantity_declaration3410)
            	        	expression142=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_free_quantity_declaration3414); if (state.failed) return quantityDecl;
            	if ( state.backtracking==0 ) {
            	  quantityDecl=new FreeQuantityDeclaration(toPosition(QUANTITY139),identifier_list140,subtype_indication141,expression142)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, ams_free_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_free_quantity_declaration"

    // $ANTLR start "ams_branch_quantity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:655:1: ams_branch_quantity_declaration returns [BranchQuantityDeclaration quantityDecl] : QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_branch_quantity_declaration():BranchQuantityDeclaration = {
         var quantityDecl :BranchQuantityDeclaration = null;val ams_branch_quantity_declaration_StartIndex:Int = input.index()
        var QUANTITY143 :Token=null
        var across_aspect:Tuple3[Seq[Identifier],Expression,Expression] = null

        var through_aspect:Tuple3[Seq[Identifier],Expression,Expression] = null

        var terminal_aspect:Tuple2[Name,Name] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return quantityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:2: ( QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:4: QUANTITY ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )? (through_aspect= ams_through_aspect )? terminal_aspect= ams_terminal_aspect SEMICOLON
            {
            	QUANTITY143=`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_branch_quantity_declaration3439).asInstanceOf[Token]; if (state.failed) return quantityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:13: ( ( ams_across_aspect )=>across_aspect= ams_across_aspect )?
            	var alt56 :Int=2
            	val LA56_0:Int = input.LA(1)

            	if ( (LA56_0==BASIC_IDENTIFIER) ) {
            	    val LA56_1:Int = input.LA(2)

            	    if ( (synpred7_VHDL()) ) {
            	        alt56=1
            	    }
            	}
            	else if ( (LA56_0==EXTENDED_IDENTIFIER) ) {
            	    val LA56_2:Int = input.LA(2)

            	    if ( (synpred7_VHDL()) ) {
            	        alt56=1
            	    }
            	}
            	alt56 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:15: ( ams_across_aspect )=>across_aspect= ams_across_aspect
            	        {
            	        	pushFollow(FOLLOW_ams_across_aspect_in_ams_branch_quantity_declaration3450)
            	        	across_aspect=ams_across_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:85: (through_aspect= ams_through_aspect )?
            	var alt57 :Int=2
            	val LA57_0:Int = input.LA(1)

            	if ( (LA57_0==BASIC_IDENTIFIER) ) {
            	    val LA57_1:Int = input.LA(2)

            	    if ( (LA57_1==THROUGH||LA57_1==VAR_ASSIGN||LA57_1==COMMA||LA57_1==TOLERANCE) ) {
            	        alt57=1
            	    }
            	}
            	else if ( (LA57_0==EXTENDED_IDENTIFIER) ) {
            	    val LA57_2:Int = input.LA(2)

            	    if ( (LA57_2==THROUGH||LA57_2==VAR_ASSIGN||LA57_2==COMMA||LA57_2==TOLERANCE) ) {
            	        alt57=1
            	    }
            	}
            	alt57 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:85: through_aspect= ams_through_aspect
            	        {
            	        	pushFollow(FOLLOW_ams_through_aspect_in_ams_branch_quantity_declaration3456)
            	        	through_aspect=ams_through_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_ams_terminal_aspect_in_ams_branch_quantity_declaration3461)
            	terminal_aspect=ams_terminal_aspect();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_branch_quantity_declaration3463); if (state.failed) return quantityDecl;
            	if ( state.backtracking==0 ) {

            	   		quantityDecl=new BranchQuantityDeclaration(toPosition(QUANTITY143),across_aspect._1,across_aspect._2,across_aspect._3,
            	   				through_aspect._1,through_aspect._2,through_aspect._3,
            	   				terminal_aspect._1,terminal_aspect._2)
            	  	 
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, ams_branch_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_branch_quantity_declaration"

    // $ANTLR start "ams_source_quantity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:664:1: ams_source_quantity_declaration returns [SourceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_source_quantity_declaration():SourceQuantityDeclaration = {
         var quantityDecl :SourceQuantityDeclaration = null;val ams_source_quantity_declaration_StartIndex:Int = input.index()
        var QUANTITY144 :Token=null
        var source_aspect:Tuple3[Expression,Expression,Expression] = null

        var identifier_list145:Seq[Identifier] = null

        var subtype_indication146:SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return quantityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:665:4: ( QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:665:7: QUANTITY identifier_list COLON subtype_indication source_aspect= ams_source_aspect SEMICOLON
            {
            	QUANTITY144=`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_source_quantity_declaration3488).asInstanceOf[Token]; if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_identifier_list_in_ams_source_quantity_declaration3490)
            	identifier_list145=identifier_list();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_ams_source_quantity_declaration3492); if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_subtype_indication_in_ams_source_quantity_declaration3494)
            	subtype_indication146=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_ams_source_aspect_in_ams_source_quantity_declaration3498)
            	source_aspect=ams_source_aspect();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_source_quantity_declaration3500); if (state.failed) return quantityDecl;
            	if ( state.backtracking==0 ) {
            	  quantityDecl=new SourceQuantityDeclaration(toPosition(QUANTITY144),identifier_list145,subtype_indication146,source_aspect._1,source_aspect._2,source_aspect._3)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, ams_source_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_source_quantity_declaration"

    // $ANTLR start "ams_across_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:669:1: ams_across_aspect returns [Tuple3[Seq[Identifier],Expression,Expression] across_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS ;
    @throws(classOf[RecognitionException])
    def ams_across_aspect():Tuple3[Seq[Identifier],Expression,Expression] = {
         var across_aspect :Tuple3[Seq[Identifier],Expression,Expression] = null;val ams_across_aspect_StartIndex:Int = input.index()
        var toleranceExpression:Expression = null

        var defaultExpression:Expression = null

        var identifier_list147:Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return across_aspect }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:2: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:4: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? ACROSS
            {
            	pushFollow(FOLLOW_identifier_list_in_ams_across_aspect3524)
            	identifier_list147=identifier_list();

            	state._fsp-=1
            	if (state.failed) return across_aspect;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:20: ( TOLERANCE toleranceExpression= expression )?
            	var alt58 :Int=2
            	val LA58_0:Int = input.LA(1)

            	if ( (LA58_0==TOLERANCE) ) {
            	    alt58=1
            	}
            	alt58 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:21: TOLERANCE toleranceExpression= expression
            	        {
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_across_aspect3527); if (state.failed) return across_aspect;
            	        	pushFollow(FOLLOW_expression_in_ams_across_aspect3531)
            	        	toleranceExpression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return across_aspect;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:64: ( VAR_ASSIGN defaultExpression= expression )?
            	var alt59 :Int=2
            	val LA59_0:Int = input.LA(1)

            	if ( (LA59_0==VAR_ASSIGN) ) {
            	    alt59=1
            	}
            	alt59 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:670:65: VAR_ASSIGN defaultExpression= expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_across_aspect3536); if (state.failed) return across_aspect;
            	        	pushFollow(FOLLOW_expression_in_ams_across_aspect3540)
            	        	defaultExpression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return across_aspect;

            	        }
            	    case _ => 
            	}

            	`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_across_aspect3544); if (state.failed) return across_aspect;
            	if ( state.backtracking==0 ) {
            	  across_aspect=(identifier_list147,toleranceExpression,defaultExpression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, ams_across_aspect_StartIndex) }
        }
        return across_aspect
    }
    // $ANTLR end "ams_across_aspect"

    // $ANTLR start "ams_through_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:674:1: ams_through_aspect returns [Tuple3[Seq[Identifier],Expression,Expression] through_aspect] : identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH ;
    @throws(classOf[RecognitionException])
    def ams_through_aspect():Tuple3[Seq[Identifier],Expression,Expression] = {
         var through_aspect :Tuple3[Seq[Identifier],Expression,Expression] = null;val ams_through_aspect_StartIndex:Int = input.index()
        var toleranceExpression:Expression = null

        var defaultExpression:Expression = null

        var identifier_list148:Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return through_aspect }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:2: ( identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:4: identifier_list ( TOLERANCE toleranceExpression= expression )? ( VAR_ASSIGN defaultExpression= expression )? THROUGH
            {
            	pushFollow(FOLLOW_identifier_list_in_ams_through_aspect3565)
            	identifier_list148=identifier_list();

            	state._fsp-=1
            	if (state.failed) return through_aspect;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:20: ( TOLERANCE toleranceExpression= expression )?
            	var alt60 :Int=2
            	val LA60_0:Int = input.LA(1)

            	if ( (LA60_0==TOLERANCE) ) {
            	    alt60=1
            	}
            	alt60 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:21: TOLERANCE toleranceExpression= expression
            	        {
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_through_aspect3568); if (state.failed) return through_aspect;
            	        	pushFollow(FOLLOW_expression_in_ams_through_aspect3572)
            	        	toleranceExpression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return through_aspect;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:64: ( VAR_ASSIGN defaultExpression= expression )?
            	var alt61 :Int=2
            	val LA61_0:Int = input.LA(1)

            	if ( (LA61_0==VAR_ASSIGN) ) {
            	    alt61=1
            	}
            	alt61 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:675:65: VAR_ASSIGN defaultExpression= expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_through_aspect3577); if (state.failed) return through_aspect;
            	        	pushFollow(FOLLOW_expression_in_ams_through_aspect3581)
            	        	defaultExpression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return through_aspect;

            	        }
            	    case _ => 
            	}

            	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_through_aspect3585); if (state.failed) return through_aspect;
            	if ( state.backtracking==0 ) {
            	  through_aspect=(identifier_list148,toleranceExpression,defaultExpression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, ams_through_aspect_StartIndex) }
        }
        return through_aspect
    }
    // $ANTLR end "ams_through_aspect"

    // $ANTLR start "ams_terminal_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:679:1: ams_terminal_aspect returns [Tuple2[Name,Name] terminal_aspect] : plus_terminal_name= name ( TO minus_terminal_name= name )? ;
    @throws(classOf[RecognitionException])
    def ams_terminal_aspect():Tuple2[Name,Name] = {
         var terminal_aspect :Tuple2[Name,Name] = null;val ams_terminal_aspect_StartIndex:Int = input.index()
        var plus_terminal_name:Name = null

        var minus_terminal_name:Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return terminal_aspect }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:680:2: (plus_terminal_name= name ( TO minus_terminal_name= name )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:680:4: plus_terminal_name= name ( TO minus_terminal_name= name )?
            {
            	pushFollow(FOLLOW_name_in_ams_terminal_aspect3608)
            	plus_terminal_name=name();

            	state._fsp-=1
            	if (state.failed) return terminal_aspect;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:680:28: ( TO minus_terminal_name= name )?
            	var alt62 :Int=2
            	val LA62_0:Int = input.LA(1)

            	if ( (LA62_0==TO) ) {
            	    alt62=1
            	}
            	alt62 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:680:29: TO minus_terminal_name= name
            	        {
            	        	`match`(input,TO,FOLLOW_TO_in_ams_terminal_aspect3611); if (state.failed) return terminal_aspect;
            	        	pushFollow(FOLLOW_name_in_ams_terminal_aspect3615)
            	        	minus_terminal_name=name();

            	        	state._fsp-=1
            	        	if (state.failed) return terminal_aspect;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  terminal_aspect=(plus_terminal_name,minus_terminal_name)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, ams_terminal_aspect_StartIndex) }
        }
        return terminal_aspect
    }
    // $ANTLR end "ams_terminal_aspect"

    // $ANTLR start "ams_source_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:684:1: ams_source_aspect returns [Tuple3[Expression,Expression,Expression] source_aspect] : ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression );
    @throws(classOf[RecognitionException])
    def ams_source_aspect():Tuple3[Expression,Expression,Expression] = {
         var source_aspect :Tuple3[Expression,Expression,Expression] = null;val ams_source_aspect_StartIndex:Int = input.index()
        var magnitude_simple_expression:Expression = null

        var phase_simple_expression:Expression = null

        var power_simple_expression:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return source_aspect }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:685:2: ( SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression | NOISE power_simple_expression= simple_expression )
            var alt63 :Int=2
            val LA63_0:Int = input.LA(1)

            if ( (LA63_0==SPECTRUM) ) {
                alt63=1
            }
            else if ( (LA63_0==NOISE) ) {
                alt63=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return source_aspect}
                val nvae = new NoViableAltException("", 63, 0, input)

                throw nvae
            }
            alt63 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:685:4: SPECTRUM magnitude_simple_expression= simple_expression COMMA phase_simple_expression= simple_expression
                    {
                    	`match`(input,SPECTRUM,FOLLOW_SPECTRUM_in_ams_source_aspect3638); if (state.failed) return source_aspect;
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3642)
                    	magnitude_simple_expression=simple_expression();

                    	state._fsp-=1
                    	if (state.failed) return source_aspect;
                    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_source_aspect3644); if (state.failed) return source_aspect;
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3648)
                    	phase_simple_expression=simple_expression();

                    	state._fsp-=1
                    	if (state.failed) return source_aspect;

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:686:5: NOISE power_simple_expression= simple_expression
                    {
                    	`match`(input,NOISE,FOLLOW_NOISE_in_ams_source_aspect3655); if (state.failed) return source_aspect;
                    	pushFollow(FOLLOW_simple_expression_in_ams_source_aspect3659)
                    	power_simple_expression=simple_expression();

                    	state._fsp-=1
                    	if (state.failed) return source_aspect;
                    	if ( state.backtracking==0 ) {
                    	  source_aspect=(magnitude_simple_expression,phase_simple_expression,power_simple_expression)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, ams_source_aspect_StartIndex) }
        }
        return source_aspect
    }
    // $ANTLR end "ams_source_aspect"

    // $ANTLR start "constant_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:691:1: constant_declaration returns [ConstantDeclaration constantDecl] : CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def constant_declaration():ConstantDeclaration = {
         var constantDecl :ConstantDeclaration = null;val constant_declaration_StartIndex:Int = input.index()
        var CONSTANT149 :Token=null
        var identifier_list150:Seq[Identifier] = null

        var subtype_indication151:SubTypeIndication = null

        var expression152:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return constantDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:692:2: ( CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:692:4: CONSTANT identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
            {
            	CONSTANT149=`match`(input,CONSTANT,FOLLOW_CONSTANT_in_constant_declaration3681).asInstanceOf[Token]; if (state.failed) return constantDecl;
            	pushFollow(FOLLOW_identifier_list_in_constant_declaration3683)
            	identifier_list150=identifier_list();

            	state._fsp-=1
            	if (state.failed) return constantDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_constant_declaration3685); if (state.failed) return constantDecl;
            	pushFollow(FOLLOW_subtype_indication_in_constant_declaration3687)
            	subtype_indication151=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return constantDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:692:54: ( VAR_ASSIGN expression )?
            	var alt64 :Int=2
            	val LA64_0:Int = input.LA(1)

            	if ( (LA64_0==VAR_ASSIGN) ) {
            	    alt64=1
            	}
            	alt64 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:692:55: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_constant_declaration3690); if (state.failed) return constantDecl;
            	        	pushFollow(FOLLOW_expression_in_constant_declaration3692)
            	        	expression152=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return constantDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_constant_declaration3696); if (state.failed) return constantDecl;
            	if ( state.backtracking==0 ) {
            	  constantDecl=new ConstantDeclaration(toPosition(CONSTANT149),identifier_list150,subtype_indication151,expression152)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, constant_declaration_StartIndex) }
        }
        return constantDecl
    }
    // $ANTLR end "constant_declaration"

    // $ANTLR start "signal_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:696:1: signal_declaration returns [SignalDeclaration signalDecl] : SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def signal_declaration():SignalDeclaration = {
         var signalDecl :SignalDeclaration = null;val signal_declaration_StartIndex:Int = input.index()
        var reg :Token=null
        var bus :Token=null
        var SIGNAL153 :Token=null
        var identifier_list154:Seq[Identifier] = null

        var subtype_indication155:SubTypeIndication = null

        var expression156:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return signalDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:2: ( SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:4: SIGNAL identifier_list COLON subtype_indication (reg= REGISTER | bus= BUS )? ( VAR_ASSIGN expression )? SEMICOLON
            {
            	SIGNAL153=`match`(input,SIGNAL,FOLLOW_SIGNAL_in_signal_declaration3718).asInstanceOf[Token]; if (state.failed) return signalDecl;
            	pushFollow(FOLLOW_identifier_list_in_signal_declaration3720)
            	identifier_list154=identifier_list();

            	state._fsp-=1
            	if (state.failed) return signalDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_signal_declaration3722); if (state.failed) return signalDecl;
            	pushFollow(FOLLOW_subtype_indication_in_signal_declaration3724)
            	subtype_indication155=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return signalDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:52: (reg= REGISTER | bus= BUS )?
            	var alt65 :Int=3
            	val LA65_0:Int = input.LA(1)

            	if ( (LA65_0==REGISTER) ) {
            	    alt65=1
            	}
            	else if ( (LA65_0==BUS) ) {
            	    alt65=2
            	}
            	alt65 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:53: reg= REGISTER
            	        {
            	        	reg=`match`(input,REGISTER,FOLLOW_REGISTER_in_signal_declaration3729).asInstanceOf[Token]; if (state.failed) return signalDecl;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:66: bus= BUS
            	        {
            	        	bus=`match`(input,BUS,FOLLOW_BUS_in_signal_declaration3733).asInstanceOf[Token]; if (state.failed) return signalDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:76: ( VAR_ASSIGN expression )?
            	var alt66 :Int=2
            	val LA66_0:Int = input.LA(1)

            	if ( (LA66_0==VAR_ASSIGN) ) {
            	    alt66=1
            	}
            	alt66 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:697:77: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_signal_declaration3738); if (state.failed) return signalDecl;
            	        	pushFollow(FOLLOW_expression_in_signal_declaration3740)
            	        	expression156=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return signalDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_signal_declaration3744); if (state.failed) return signalDecl;
            	if ( state.backtracking==0 ) {

            	  			val signalType=
            	  				if(reg!=null) Some(SignalDeclaration.Type.REGISTER)
            	  				else if (bus!=null) Some(SignalDeclaration.Type.BUS)
            	  				else None
            	  			signalDecl=new SignalDeclaration(toPosition(SIGNAL153),identifier_list154,subtype_indication155,signalType,expression156)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, signal_declaration_StartIndex) }
        }
        return signalDecl
    }
    // $ANTLR end "signal_declaration"

    // $ANTLR start "variable_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:707:1: variable_declaration returns [VariableDeclaration varDecl] : ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def variable_declaration():VariableDeclaration = {
         var varDecl :VariableDeclaration = null;val variable_declaration_StartIndex:Int = input.index()
        var VARIABLE157 :Token=null
        var SHARED158 :Token=null
        var identifier_list159:Seq[Identifier] = null

        var subtype_indication160:SubTypeIndication = null

        var expression161:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return varDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:2: ( ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:4: ( SHARED )? VARIABLE identifier_list COLON subtype_indication ( VAR_ASSIGN expression )? SEMICOLON
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:4: ( SHARED )?
            	var alt67 :Int=2
            	val LA67_0:Int = input.LA(1)

            	if ( (LA67_0==SHARED) ) {
            	    alt67=1
            	}
            	alt67 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:4: SHARED
            	        {
            	        	SHARED158=`match`(input,SHARED,FOLLOW_SHARED_in_variable_declaration3765).asInstanceOf[Token]; if (state.failed) return varDecl;

            	        }
            	    case _ => 
            	}

            	VARIABLE157=`match`(input,VARIABLE,FOLLOW_VARIABLE_in_variable_declaration3768).asInstanceOf[Token]; if (state.failed) return varDecl;
            	pushFollow(FOLLOW_identifier_list_in_variable_declaration3770)
            	identifier_list159=identifier_list();

            	state._fsp-=1
            	if (state.failed) return varDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_variable_declaration3772); if (state.failed) return varDecl;
            	pushFollow(FOLLOW_subtype_indication_in_variable_declaration3774)
            	subtype_indication160=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return varDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:62: ( VAR_ASSIGN expression )?
            	var alt68 :Int=2
            	val LA68_0:Int = input.LA(1)

            	if ( (LA68_0==VAR_ASSIGN) ) {
            	    alt68=1
            	}
            	alt68 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:708:63: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_variable_declaration3777); if (state.failed) return varDecl;
            	        	pushFollow(FOLLOW_expression_in_variable_declaration3779)
            	        	expression161=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return varDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration3783); if (state.failed) return varDecl;
            	if ( state.backtracking==0 ) {
            	  varDecl=new VariableDeclaration(toPosition(VARIABLE157),SHARED158!=null,identifier_list159,subtype_indication160,expression161)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, variable_declaration_StartIndex) }
        }
        return varDecl
    }
    // $ANTLR end "variable_declaration"

    // $ANTLR start "file_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:712:1: file_declaration returns [FileDeclaration fileDecl] : FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def file_declaration():FileDeclaration = {
         var fileDecl :FileDeclaration = null;val file_declaration_StartIndex:Int = input.index()
        var FILE162 :Token=null
        var file_open_kind_expression:Expression = null

        var file_logical_name:Expression = null

        var identifier_list163:Seq[Identifier] = null

        var subtype_indication164:SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return fileDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:2: ( FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:4: FILE identifier_list COLON subtype_indication ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )? SEMICOLON
            {
            	FILE162=`match`(input,FILE,FOLLOW_FILE_in_file_declaration3804).asInstanceOf[Token]; if (state.failed) return fileDecl;
            	pushFollow(FOLLOW_identifier_list_in_file_declaration3806)
            	identifier_list163=identifier_list();

            	state._fsp-=1
            	if (state.failed) return fileDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_file_declaration3808); if (state.failed) return fileDecl;
            	pushFollow(FOLLOW_subtype_indication_in_file_declaration3810)
            	subtype_indication164=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return fileDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:50: ( ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression )?
            	var alt70 :Int=2
            	val LA70_0:Int = input.LA(1)

            	if ( (LA70_0==IS||LA70_0==OPEN) ) {
            	    alt70=1
            	}
            	alt70 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:51: ( OPEN file_open_kind_expression= expression )? IS file_logical_name= expression
            	        {
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:51: ( OPEN file_open_kind_expression= expression )?
            	        	var alt69 :Int=2
            	        	val LA69_0:Int = input.LA(1)

            	        	if ( (LA69_0==OPEN) ) {
            	        	    alt69=1
            	        	}
            	        	alt69 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:713:52: OPEN file_open_kind_expression= expression
            	        	        {
            	        	        	`match`(input,OPEN,FOLLOW_OPEN_in_file_declaration3814); if (state.failed) return fileDecl;
            	        	        	pushFollow(FOLLOW_expression_in_file_declaration3818)
            	        	        	file_open_kind_expression=expression();

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return fileDecl;

            	        	        }
            	        	    case _ => 
            	        	}

            	        	`match`(input,IS,FOLLOW_IS_in_file_declaration3822); if (state.failed) return fileDecl;
            	        	pushFollow(FOLLOW_expression_in_file_declaration3826)
            	        	file_logical_name=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return fileDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_file_declaration3830); if (state.failed) return fileDecl;
            	if ( state.backtracking==0 ) {
            	  fileDecl=new FileDeclaration(toPosition(FILE162),identifier_list163,subtype_indication164,file_open_kind_expression,file_logical_name)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, file_declaration_StartIndex) }
        }
        return fileDecl
    }
    // $ANTLR end "file_declaration"

    // $ANTLR start "alias_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:717:1: alias_declaration returns [AliasDeclaration aliasDecl] : ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def alias_declaration():AliasDeclaration = {
         var aliasDecl :AliasDeclaration = null;val alias_declaration_StartIndex:Int = input.index()
        var ALIAS165 :Token=null
        var alias_designator166:Identifier = null

        var subtype_indication167:SubTypeIndication = null

        var name168:Name = null

        var signature169:Signature = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return aliasDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:2: ( ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:4: ALIAS alias_designator ( COLON subtype_indication )? IS name ( signature )? SEMICOLON
            {
            	ALIAS165=`match`(input,ALIAS,FOLLOW_ALIAS_in_alias_declaration3851).asInstanceOf[Token]; if (state.failed) return aliasDecl;
            	pushFollow(FOLLOW_alias_designator_in_alias_declaration3853)
            	alias_designator166=alias_designator();

            	state._fsp-=1
            	if (state.failed) return aliasDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:27: ( COLON subtype_indication )?
            	var alt71 :Int=2
            	val LA71_0:Int = input.LA(1)

            	if ( (LA71_0==COLON) ) {
            	    alt71=1
            	}
            	alt71 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:28: COLON subtype_indication
            	        {
            	        	`match`(input,COLON,FOLLOW_COLON_in_alias_declaration3856); if (state.failed) return aliasDecl;
            	        	pushFollow(FOLLOW_subtype_indication_in_alias_declaration3858)
            	        	subtype_indication167=subtype_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return aliasDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,IS,FOLLOW_IS_in_alias_declaration3862); if (state.failed) return aliasDecl;
            	pushFollow(FOLLOW_name_in_alias_declaration3864)
            	name168=name();

            	state._fsp-=1
            	if (state.failed) return aliasDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:63: ( signature )?
            	var alt72 :Int=2
            	val LA72_0:Int = input.LA(1)

            	if ( (LA72_0==LBRACKET) ) {
            	    alt72=1
            	}
            	alt72 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:718:63: signature
            	        {
            	        	pushFollow(FOLLOW_signature_in_alias_declaration3866)
            	        	signature169=signature();

            	        	state._fsp-=1
            	        	if (state.failed) return aliasDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_alias_declaration3869); if (state.failed) return aliasDecl;
            	if ( state.backtracking==0 ) {
            	  aliasDecl=new AliasDeclaration(toPosition(ALIAS165),alias_designator166,subtype_indication167,name168,signature169)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, alias_declaration_StartIndex) }
        }
        return aliasDecl
    }
    // $ANTLR end "alias_declaration"

    // $ANTLR start "alias_designator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:722:1: alias_designator returns [Identifier id] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ;
    @throws(classOf[RecognitionException])
    def alias_designator():Identifier = {
         var id :Identifier = null;val alias_designator_StartIndex:Int = input.index()
        var CHARACTER_LITERAL171 :Token=null
        var STRING_LITERAL172 :Token=null
        var identifier170:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return id }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:723:2: ( ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:723:4: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:723:4: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
            	var alt73 :Int=3
            	input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt73=1
            	}

            	case CHARACTER_LITERAL => {
            	     alt73=2
            	}

            	case STRING_LITERAL => {
            	     alt73=3
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return id}
            	    val nvae = new NoViableAltException("", 73, 0, input)

            	    throw nvae
            	}

            	alt73 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:723:5: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_alias_designator3891)
            	        	identifier170=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return id;
            	        	if ( state.backtracking==0 ) {
            	        	  id=identifier170
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:724:4: CHARACTER_LITERAL
            	        {
            	        	CHARACTER_LITERAL171=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_alias_designator3898).asInstanceOf[Token]; if (state.failed) return id;
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(CHARACTER_LITERAL171)
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:725:4: STRING_LITERAL
            	        {
            	        	STRING_LITERAL172=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_alias_designator3904).asInstanceOf[Token]; if (state.failed) return id;
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(STRING_LITERAL172)
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, alias_designator_StartIndex) }
        }
        return id
    }
    // $ANTLR end "alias_designator"

    // $ANTLR start "component_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:728:1: component_declaration returns [ComponentDeclaration componentDecl] : component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def component_declaration():ComponentDeclaration = {
         var componentDecl :ComponentDeclaration = null;val component_declaration_StartIndex:Int = input.index()
        var component :Token=null
        var start_identifier:Identifier = null

        var end_identifier:Identifier = null

        var generic_clause173:InterfaceList = null

        var port_clause174:InterfaceList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return componentDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:729:2: (component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:729:4: component= COMPONENT start_identifier= identifier ( IS )? ( generic_clause )? ( port_clause )? END COMPONENT (end_identifier= identifier )? SEMICOLON
            {
            	component=`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_declaration3926).asInstanceOf[Token]; if (state.failed) return componentDecl;
            	pushFollow(FOLLOW_identifier_in_component_declaration3930)
            	start_identifier=identifier();

            	state._fsp-=1
            	if (state.failed) return componentDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:729:52: ( IS )?
            	var alt74 :Int=2
            	val LA74_0:Int = input.LA(1)

            	if ( (LA74_0==IS) ) {
            	    alt74=1
            	}
            	alt74 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:729:52: IS
            	        {
            	        	`match`(input,IS,FOLLOW_IS_in_component_declaration3932); if (state.failed) return componentDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:730:4: ( generic_clause )?
            	var alt75 :Int=2
            	val LA75_0:Int = input.LA(1)

            	if ( (LA75_0==GENERIC) ) {
            	    alt75=1
            	}
            	alt75 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:730:4: generic_clause
            	        {
            	        	pushFollow(FOLLOW_generic_clause_in_component_declaration3938)
            	        	generic_clause173=generic_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:731:4: ( port_clause )?
            	var alt76 :Int=2
            	val LA76_0:Int = input.LA(1)

            	if ( (LA76_0==PORT) ) {
            	    alt76=1
            	}
            	alt76 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:731:4: port_clause
            	        {
            	        	pushFollow(FOLLOW_port_clause_in_component_declaration3944)
            	        	port_clause174=port_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,END,FOLLOW_END_in_component_declaration3949); if (state.failed) return componentDecl;
            	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_declaration3951); if (state.failed) return componentDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:732:31: (end_identifier= identifier )?
            	var alt77 :Int=2
            	val LA77_0:Int = input.LA(1)

            	if ( ((LA77_0>=BASIC_IDENTIFIER && LA77_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt77=1
            	}
            	alt77 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:732:31: end_identifier= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_component_declaration3955)
            	        	end_identifier=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return componentDecl;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_declaration3958); if (state.failed) return componentDecl;
            	if ( state.backtracking==0 ) {
            	  componentDecl=new ComponentDeclaration(toPosition(component),start_identifier,generic_clause173,port_clause174,end_identifier)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, component_declaration_StartIndex) }
        }
        return componentDecl
    }
    // $ANTLR end "component_declaration"

    // $ANTLR start "attribute_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:736:1: attribute_declaration returns [AttributeDeclaration attributeDecl] : ATTRIBUTE identifier COLON type_mark SEMICOLON ;
    @throws(classOf[RecognitionException])
    def attribute_declaration():AttributeDeclaration = {
         var attributeDecl :AttributeDeclaration = null;val attribute_declaration_StartIndex:Int = input.index()
        var ATTRIBUTE175 :Token=null
        var identifier176:Identifier = null

        var type_mark177:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return attributeDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:737:2: ( ATTRIBUTE identifier COLON type_mark SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:737:4: ATTRIBUTE identifier COLON type_mark SEMICOLON
            {
            	ATTRIBUTE175=`match`(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_declaration3978).asInstanceOf[Token]; if (state.failed) return attributeDecl;
            	pushFollow(FOLLOW_identifier_in_attribute_declaration3980)
            	identifier176=identifier();

            	state._fsp-=1
            	if (state.failed) return attributeDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_attribute_declaration3982); if (state.failed) return attributeDecl;
            	pushFollow(FOLLOW_type_mark_in_attribute_declaration3984)
            	type_mark177=type_mark();

            	state._fsp-=1
            	if (state.failed) return attributeDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute_declaration3986); if (state.failed) return attributeDecl;
            	if ( state.backtracking==0 ) {
            	  attributeDecl=new AttributeDeclaration(toPosition(ATTRIBUTE175),identifier176,type_mark177)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, attribute_declaration_StartIndex) }
        }
        return attributeDecl
    }
    // $ANTLR end "attribute_declaration"

    // $ANTLR start "attribute_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:741:1: attribute_specification returns [AttributeSpecification node] : ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    def attribute_specification():AttributeSpecification = {
         var node :AttributeSpecification = null;val attribute_specification_StartIndex:Int = input.index()
        var ATTRIBUTE178 :Token=null
        var identifier179:Identifier = null

        var entity_name_list180:Either[Seq[(Identifier,Option[Signature])],Identifier] = null

        var entity_class181:EntityClass.Value = null

        var expression182:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:742:2: ( ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:742:4: ATTRIBUTE identifier OF entity_name_list COLON entity_class IS expression SEMICOLON
            {
            	ATTRIBUTE178=`match`(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_specification4008).asInstanceOf[Token]; if (state.failed) return node;
            	pushFollow(FOLLOW_identifier_in_attribute_specification4010)
            	identifier179=identifier();

            	state._fsp-=1
            	if (state.failed) return node;
            	`match`(input,OF,FOLLOW_OF_in_attribute_specification4012); if (state.failed) return node;
            	pushFollow(FOLLOW_entity_name_list_in_attribute_specification4014)
            	entity_name_list180=entity_name_list();

            	state._fsp-=1
            	if (state.failed) return node;
            	`match`(input,COLON,FOLLOW_COLON_in_attribute_specification4016); if (state.failed) return node;
            	pushFollow(FOLLOW_entity_class_in_attribute_specification4018)
            	entity_class181=entity_class();

            	state._fsp-=1
            	if (state.failed) return node;
            	`match`(input,IS,FOLLOW_IS_in_attribute_specification4020); if (state.failed) return node;
            	pushFollow(FOLLOW_expression_in_attribute_specification4022)
            	expression182=expression();

            	state._fsp-=1
            	if (state.failed) return node;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute_specification4024); if (state.failed) return node;
            	if ( state.backtracking==0 ) {
            	  node=new AttributeSpecification(toPosition(ATTRIBUTE178),identifier179,entity_name_list180,entity_class181,expression182)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, attribute_specification_StartIndex) }
        }
        return node
    }
    // $ANTLR end "attribute_specification"

    // $ANTLR start "entity_designator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:746:1: entity_designator returns [(Identifier,Option[Signature]) designator] : ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? ;
    @throws(classOf[RecognitionException])
    def entity_designator():(Identifier,Option[Signature]) = {
         var designator :(Identifier,Option[Signature]) = null;val entity_designator_StartIndex:Int = input.index()
        var CHARACTER_LITERAL184 :Token=null
        var STRING_LITERAL185 :Token=null
        var identifier183:Identifier = null

        var signature186:Signature = null



        	var id:Identifier=null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return designator }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:750:2: ( ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:750:4: ( identifier | CHARACTER_LITERAL | STRING_LITERAL ) ( signature )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:750:4: ( identifier | CHARACTER_LITERAL | STRING_LITERAL )
            	var alt78 :Int=3
            	input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt78=1
            	}

            	case CHARACTER_LITERAL => {
            	     alt78=2
            	}

            	case STRING_LITERAL => {
            	     alt78=3
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return designator}
            	    val nvae = new NoViableAltException("", 78, 0, input)

            	    throw nvae
            	}

            	alt78 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:750:5: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_entity_designator4052)
            	        	identifier183=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return designator;
            	        	if ( state.backtracking==0 ) {
            	        	  id=identifier183
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:751:4: CHARACTER_LITERAL
            	        {
            	        	CHARACTER_LITERAL184=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_entity_designator4059).asInstanceOf[Token]; if (state.failed) return designator;
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(CHARACTER_LITERAL184)
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:752:4: STRING_LITERAL
            	        {
            	        	STRING_LITERAL185=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_entity_designator4065).asInstanceOf[Token]; if (state.failed) return designator;
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(STRING_LITERAL185)
            	        	}

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:753:5: ( signature )?
            	var alt79 :Int=2
            	val LA79_0:Int = input.LA(1)

            	if ( (LA79_0==LBRACKET) ) {
            	    alt79=1
            	}
            	alt79 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:753:5: signature
            	        {
            	        	pushFollow(FOLLOW_signature_in_entity_designator4072)
            	        	signature186=signature();

            	        	state._fsp-=1
            	        	if (state.failed) return designator;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  designator=(id,Option(signature186))
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, entity_designator_StartIndex) }
        }
        return designator
    }
    // $ANTLR end "entity_designator"

    // $ANTLR start "entity_name_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:757:1: entity_name_list returns [Either[Seq[(Identifier,Option[Signature])],Identifier] list] : (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL );
    @throws(classOf[RecognitionException])
    def entity_name_list():Either[Seq[(Identifier,Option[Signature])],Identifier] = {
         var list :Either[Seq[(Identifier,Option[Signature])],Identifier] = null;val entity_name_list_StartIndex:Int = input.index()
        var OTHERS187 :Token=null
        var ALL188 :Token=null
        var e1:(Identifier,Option[Signature]) = null

        var e2:(Identifier,Option[Signature]) = null



        	val elements=new Buffer[(Identifier,Option[Signature])]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:761:2: (e1= entity_designator ( COMMA e2= entity_designator )* | OTHERS | ALL )
            var alt81 :Int=3
            input.LA(1) match {
            case STRING_LITERAL | CHARACTER_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt81=1
            }

            case OTHERS => {
                 alt81=2
            }

            case ALL => {
                 alt81=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return list}
                val nvae = new NoViableAltException("", 81, 0, input)

                throw nvae
            }

            alt81 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:761:5: e1= entity_designator ( COMMA e2= entity_designator )*
                    {
                    	pushFollow(FOLLOW_entity_designator_in_entity_name_list4101)
                    	e1=entity_designator();

                    	state._fsp-=1
                    	if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  elements += e1
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:761:54: ( COMMA e2= entity_designator )*
                    	var loop80=true
                    	do {
                    	    var alt80:Int=2
                    	    val LA80_0:Int = input.LA(1)

                    	    if ( (LA80_0==COMMA) ) {
                    	        alt80=1
                    	    }


                    	    alt80 match {
                    		case 1 =>
                    		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:761:55: COMMA e2= entity_designator
                    		    {
                    		    	`match`(input,COMMA,FOLLOW_COMMA_in_entity_name_list4105); if (state.failed) return list;
                    		    	pushFollow(FOLLOW_entity_designator_in_entity_name_list4109)
                    		    	e2=entity_designator();

                    		    	state._fsp-=1
                    		    	if (state.failed) return list;
                    		    	if ( state.backtracking==0 ) {
                    		    	  elements += e2
                    		    	}

                    		    }
                    		case _ => loop80=false
                    	    }
                    	} while (loop80);

                    	if ( state.backtracking==0 ) {
                    	  list=Left(elements.toList)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:762:5: OTHERS
                    {
                    	OTHERS187=`match`(input,OTHERS,FOLLOW_OTHERS_in_entity_name_list4121).asInstanceOf[Token]; if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(OTHERS187))
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:763:5: ALL
                    {
                    	ALL188=`match`(input,ALL,FOLLOW_ALL_in_entity_name_list4129).asInstanceOf[Token]; if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(ALL188))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, entity_name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "entity_name_list"

    // $ANTLR start "entity_class"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:766:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );
    @throws(classOf[RecognitionException])
    def entity_class():EntityClass.Value = {
         var entityClass :EntityClass.Value = null;val entity_class_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return entityClass }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:767:2: ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) )
            var alt83 :Int=18
             alt83 = dfa83.predict(input)
            alt83 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:767:4: ENTITY
                    {
                    	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_class4147); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.ENTITY
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:768:5: ARCHITECTURE
                    {
                    	`match`(input,ARCHITECTURE,FOLLOW_ARCHITECTURE_in_entity_class4155); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.ARCHITECTURE
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:769:5: CONFIGURATION
                    {
                    	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_entity_class4163); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.CONFIGURATION
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:770:5: PACKAGE
                    {
                    	`match`(input,PACKAGE,FOLLOW_PACKAGE_in_entity_class4171); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.PACKAGE
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:771:5: PROCEDURE
                    {
                    	`match`(input,PROCEDURE,FOLLOW_PROCEDURE_in_entity_class4179); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.PROCEDURE
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:772:5: FUNCTION
                    {
                    	`match`(input,FUNCTION,FOLLOW_FUNCTION_in_entity_class4187); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.FUNCTION
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:773:5: TYPE
                    {
                    	`match`(input,TYPE,FOLLOW_TYPE_in_entity_class4195); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.TYPE
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:774:5: SUBTYPE
                    {
                    	`match`(input,SUBTYPE,FOLLOW_SUBTYPE_in_entity_class4203); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.SUBTYPE
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:775:5: CONSTANT
                    {
                    	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_entity_class4211); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.CONSTANT
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:776:5: SIGNAL
                    {
                    	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_entity_class4219); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.SIGNAL
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:777:5: VARIABLE
                    {
                    	`match`(input,VARIABLE,FOLLOW_VARIABLE_in_entity_class4227); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.VARIABLE
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:778:5: FILE
                    {
                    	`match`(input,FILE,FOLLOW_FILE_in_entity_class4235); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.FILE
                    	}

                    }case 13 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:779:5: COMPONENT
                    {
                    	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_entity_class4243); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.COMPONENT
                    	}

                    }case 14 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:780:5: LABEL
                    {
                    	`match`(input,LABEL,FOLLOW_LABEL_in_entity_class4251); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.LABEL
                    	}

                    }case 15 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:781:5: LITERAL
                    {
                    	`match`(input,LITERAL,FOLLOW_LITERAL_in_entity_class4259); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.LITERAL
                    	}

                    }case 16 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:782:5: UNITS
                    {
                    	`match`(input,UNITS,FOLLOW_UNITS_in_entity_class4267); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.UNITS
                    	}

                    }case 17 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:783:5: GROUP
                    {
                    	`match`(input,GROUP,FOLLOW_GROUP_in_entity_class4275); if (state.failed) return entityClass;
                    	if ( state.backtracking==0 ) {
                    	  entityClass=EntityClass.GROUP
                    	}

                    }case 18 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:784:5: {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return entityClass}
                    	    throw new FailedPredicateException(input, "entity_class", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:784:13: ( NATURE | SUBNATURE | QUANTITY | TERMINAL )
                    	var alt82 :Int=4
                    	input.LA(1) match {
                    	case NATURE => {
                    	     alt82=1
                    	}

                    	case SUBNATURE => {
                    	     alt82=2
                    	}

                    	case QUANTITY => {
                    	     alt82=3
                    	}

                    	case TERMINAL => {
                    	     alt82=4
                    	}

                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return entityClass}
                    	    val nvae = new NoViableAltException("", 82, 0, input)

                    	    throw nvae
                    	}

                    	alt82 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:785:5: NATURE
                    	        {
                    	        	`match`(input,NATURE,FOLLOW_NATURE_in_entity_class4292); if (state.failed) return entityClass;
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.NATURE
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:786:5: SUBNATURE
                    	        {
                    	        	`match`(input,SUBNATURE,FOLLOW_SUBNATURE_in_entity_class4300); if (state.failed) return entityClass;
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.SUBNATURE
                    	        	}

                    	        }case 3 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:787:5: QUANTITY
                    	        {
                    	        	`match`(input,QUANTITY,FOLLOW_QUANTITY_in_entity_class4308); if (state.failed) return entityClass;
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.QUANTITY
                    	        	}

                    	        }case 4 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:788:5: TERMINAL
                    	        {
                    	        	`match`(input,TERMINAL,FOLLOW_TERMINAL_in_entity_class4316); if (state.failed) return entityClass;
                    	        	if ( state.backtracking==0 ) {
                    	        	  entityClass=EntityClass.TERMINAL
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, entity_class_StartIndex) }
        }
        return entityClass
    }
    // $ANTLR end "entity_class"

    // $ANTLR start "configuration_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:794:1: configuration_specification returns [ConfigurationSpecification configSpec] : FOR component_specification binding_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    def configuration_specification():ConfigurationSpecification = {
         var configSpec :ConfigurationSpecification = null;val configuration_specification_StartIndex:Int = input.index()
        var FOR189 :Token=null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return configSpec }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:795:2: ( FOR component_specification binding_indication SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:795:4: FOR component_specification binding_indication SEMICOLON
            {
            	FOR189=`match`(input,FOR,FOLLOW_FOR_in_configuration_specification4344).asInstanceOf[Token]; if (state.failed) return configSpec;
            	pushFollow(FOLLOW_component_specification_in_configuration_specification4346)
            	component_specification();

            	state._fsp-=1
            	if (state.failed) return configSpec;
            	pushFollow(FOLLOW_binding_indication_in_configuration_specification4351)
            	binding_indication();

            	state._fsp-=1
            	if (state.failed) return configSpec;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_configuration_specification4353); if (state.failed) return configSpec;
            	if ( state.backtracking==0 ) {
            	  configSpec= new ConfigurationSpecification(toPosition(FOR189))
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, configuration_specification_StartIndex) }
        }
        return configSpec
    }
    // $ANTLR end "configuration_specification"

    // $ANTLR start "instantiation_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:802:1: instantiation_list returns [Either[Seq[Identifier],Identifier] list] : ( identifier_list | OTHERS | ALL );
    @throws(classOf[RecognitionException])
    def instantiation_list():Either[Seq[Identifier],Identifier] = {
         var list :Either[Seq[Identifier],Identifier] = null;val instantiation_list_StartIndex:Int = input.index()
        var OTHERS191 :Token=null
        var ALL192 :Token=null
        var identifier_list190:Seq[Identifier] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:803:2: ( identifier_list | OTHERS | ALL )
            var alt84 :Int=3
            input.LA(1) match {
            case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt84=1
            }

            case OTHERS => {
                 alt84=2
            }

            case ALL => {
                 alt84=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return list}
                val nvae = new NoViableAltException("", 84, 0, input)

                throw nvae
            }

            alt84 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:803:4: identifier_list
                    {
                    	pushFollow(FOLLOW_identifier_list_in_instantiation_list4384)
                    	identifier_list190=identifier_list();

                    	state._fsp-=1
                    	if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  list=Left(identifier_list190)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:804:5: OTHERS
                    {
                    	OTHERS191=`match`(input,OTHERS,FOLLOW_OTHERS_in_instantiation_list4392).asInstanceOf[Token]; if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(OTHERS191))
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:805:5: ALL
                    {
                    	ALL192=`match`(input,ALL,FOLLOW_ALL_in_instantiation_list4400).asInstanceOf[Token]; if (state.failed) return list;
                    	if ( state.backtracking==0 ) {
                    	  list=Right(toIdentifier(ALL192))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, instantiation_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "instantiation_list"

    // $ANTLR start "component_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:808:1: component_specification returns [AnyRef spec] : instantiation_list COLON selected_name ;
    @throws(classOf[RecognitionException])
    def component_specification():AnyRef = {
         var spec :AnyRef = null;val component_specification_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return spec }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:809:2: ( instantiation_list COLON selected_name )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:809:4: instantiation_list COLON selected_name
            {
            	pushFollow(FOLLOW_instantiation_list_in_component_specification4421)
            	instantiation_list();

            	state._fsp-=1
            	if (state.failed) return spec;
            	`match`(input,COLON,FOLLOW_COLON_in_component_specification4423); if (state.failed) return spec;
            	pushFollow(FOLLOW_selected_name_in_component_specification4425)
            	selected_name();

            	state._fsp-=1
            	if (state.failed) return spec;

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, component_specification_StartIndex) }
        }
        return spec
    }
    // $ANTLR end "component_specification"

    // $ANTLR start "entity_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:812:1: entity_aspect : ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN );
    @throws(classOf[RecognitionException])
    def entity_aspect():Unit = {
        val entity_aspect_StartIndex:Int = input.index()
        var entity_name:SelectedName = null

        var architecture_identifier:Identifier = null

        var configuration_name:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return  }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:813:2: ( ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION configuration_name= selected_name | OPEN )
            var alt86 :Int=3
            input.LA(1) match {
            case ENTITY => {
                 alt86=1
            }

            case CONFIGURATION => {
                 alt86=2
            }

            case OPEN => {
                 alt86=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return }
                val nvae = new NoViableAltException("", 86, 0, input)

                throw nvae
            }

            alt86 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:813:4: ENTITY entity_name= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
                    {
                    	`match`(input,ENTITY,FOLLOW_ENTITY_in_entity_aspect4437); if (state.failed) return ;
                    	pushFollow(FOLLOW_selected_name_in_entity_aspect4441)
                    	entity_name=selected_name();

                    	state._fsp-=1
                    	if (state.failed) return ;
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:813:37: ( LPAREN architecture_identifier= identifier RPAREN )?
                    	var alt85 :Int=2
                    	val LA85_0:Int = input.LA(1)

                    	if ( (LA85_0==LPAREN) ) {
                    	    alt85=1
                    	}
                    	alt85 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:813:38: LPAREN architecture_identifier= identifier RPAREN
                    	        {
                    	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_entity_aspect4444); if (state.failed) return ;
                    	        	pushFollow(FOLLOW_identifier_in_entity_aspect4448)
                    	        	architecture_identifier=identifier();

                    	        	state._fsp-=1
                    	        	if (state.failed) return ;
                    	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_entity_aspect4450); if (state.failed) return ;

                    	        }
                    	    case _ => 
                    	}


                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:814:5: CONFIGURATION configuration_name= selected_name
                    {
                    	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_entity_aspect4459); if (state.failed) return ;
                    	pushFollow(FOLLOW_selected_name_in_entity_aspect4464)
                    	configuration_name=selected_name();

                    	state._fsp-=1
                    	if (state.failed) return ;

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:815:5: OPEN
                    {
                    	`match`(input,OPEN,FOLLOW_OPEN_in_entity_aspect4471); if (state.failed) return ;

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, entity_aspect_StartIndex) }
        }
        return 
    }
    // $ANTLR end "entity_aspect"

    // $ANTLR start "binding_indication"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:818:1: binding_indication returns [AnyRef indication] : ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? ;
    @throws(classOf[RecognitionException])
    def binding_indication():AnyRef = {
         var indication :AnyRef = null;val binding_indication_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return indication }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:819:2: ( ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:819:4: ( USE entity_aspect )? ( generic_map_aspect )? ( port_map_aspect )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:819:4: ( USE entity_aspect )?
            	var alt87 :Int=2
            	val LA87_0:Int = input.LA(1)

            	if ( (LA87_0==USE) ) {
            	    alt87=1
            	}
            	alt87 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:819:5: USE entity_aspect
            	        {
            	        	`match`(input,USE,FOLLOW_USE_in_binding_indication4491); if (state.failed) return indication;
            	        	pushFollow(FOLLOW_entity_aspect_in_binding_indication4493)
            	        	entity_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return indication;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:820:3: ( generic_map_aspect )?
            	var alt88 :Int=2
            	val LA88_0:Int = input.LA(1)

            	if ( (LA88_0==GENERIC) ) {
            	    alt88=1
            	}
            	alt88 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:820:3: generic_map_aspect
            	        {
            	        	pushFollow(FOLLOW_generic_map_aspect_in_binding_indication4499)
            	        	generic_map_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return indication;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:821:3: ( port_map_aspect )?
            	var alt89 :Int=2
            	val LA89_0:Int = input.LA(1)

            	if ( (LA89_0==PORT) ) {
            	    alt89=1
            	}
            	alt89 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:821:3: port_map_aspect
            	        {
            	        	pushFollow(FOLLOW_port_map_aspect_in_binding_indication4504)
            	        	port_map_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return indication;

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, binding_indication_StartIndex) }
        }
        return indication
    }
    // $ANTLR end "binding_indication"

    // $ANTLR start "disconnection_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:824:1: disconnection_specification returns [DisconnectionSpecification disconnectSpec] : DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    def disconnection_specification():DisconnectionSpecification = {
         var disconnectSpec :DisconnectionSpecification = null;val disconnection_specification_StartIndex:Int = input.index()
        var id :Token=null
        var DISCONNECT194 :Token=null
        var selected_name_list193:Seq[SelectedName] = null

        var type_mark195:SelectedName = null

        var expression196:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return disconnectSpec }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:2: ( DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:4: DISCONNECT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark AFTER expression SEMICOLON
            {
            	DISCONNECT194=`match`(input,DISCONNECT,FOLLOW_DISCONNECT_in_disconnection_specification4521).asInstanceOf[Token]; if (state.failed) return disconnectSpec;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:15: ( selected_name_list | id= OTHERS | id= ALL )
            	var alt90 :Int=3
            	input.LA(1) match {
            	case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt90=1
            	}

            	case OTHERS => {
            	     alt90=2
            	}

            	case ALL => {
            	     alt90=3
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return disconnectSpec}
            	    val nvae = new NoViableAltException("", 90, 0, input)

            	    throw nvae
            	}

            	alt90 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:16: selected_name_list
            	        {
            	        	pushFollow(FOLLOW_selected_name_list_in_disconnection_specification4524)
            	        	selected_name_list193=selected_name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return disconnectSpec;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:37: id= OTHERS
            	        {
            	        	id=`match`(input,OTHERS,FOLLOW_OTHERS_in_disconnection_specification4530).asInstanceOf[Token]; if (state.failed) return disconnectSpec;

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:825:49: id= ALL
            	        {
            	        	id=`match`(input,ALL,FOLLOW_ALL_in_disconnection_specification4536).asInstanceOf[Token]; if (state.failed) return disconnectSpec;

            	        }
            	    case _ => 
            	}

            	`match`(input,COLON,FOLLOW_COLON_in_disconnection_specification4539); if (state.failed) return disconnectSpec;
            	pushFollow(FOLLOW_type_mark_in_disconnection_specification4541)
            	type_mark195=type_mark();

            	state._fsp-=1
            	if (state.failed) return disconnectSpec;
            	`match`(input,AFTER,FOLLOW_AFTER_in_disconnection_specification4543); if (state.failed) return disconnectSpec;
            	pushFollow(FOLLOW_expression_in_disconnection_specification4545)
            	expression196=expression();

            	state._fsp-=1
            	if (state.failed) return disconnectSpec;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_disconnection_specification4547); if (state.failed) return disconnectSpec;
            	if ( state.backtracking==0 ) {

            	  			val signal_list = if (id==null) Left(selected_name_list193) else Right(toIdentifier(id))
            	  			disconnectSpec= new DisconnectionSpecification(toPosition(DISCONNECT194),signal_list,type_mark195,expression196)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, disconnection_specification_StartIndex) }
        }
        return disconnectSpec
    }
    // $ANTLR end "disconnection_specification"

    // $ANTLR start "ams_step_limit_specification"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:832:1: ams_step_limit_specification returns [StepLimitSpecification stepLimitSpec] : LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_step_limit_specification():StepLimitSpecification = {
         var stepLimitSpec :StepLimitSpecification = null;val ams_step_limit_specification_StartIndex:Int = input.index()
        var id :Token=null
        var LIMIT198 :Token=null
        var selected_name_list197:Seq[SelectedName] = null

        var type_mark199:SelectedName = null

        var expression200:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return stepLimitSpec }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:2: ( LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:4: LIMIT ( selected_name_list | id= OTHERS | id= ALL ) COLON type_mark WITH expression SEMICOLON
            {
            	LIMIT198=`match`(input,LIMIT,FOLLOW_LIMIT_in_ams_step_limit_specification4567).asInstanceOf[Token]; if (state.failed) return stepLimitSpec;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:10: ( selected_name_list | id= OTHERS | id= ALL )
            	var alt91 :Int=3
            	input.LA(1) match {
            	case STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt91=1
            	}

            	case OTHERS => {
            	     alt91=2
            	}

            	case ALL => {
            	     alt91=3
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return stepLimitSpec}
            	    val nvae = new NoViableAltException("", 91, 0, input)

            	    throw nvae
            	}

            	alt91 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:11: selected_name_list
            	        {
            	        	pushFollow(FOLLOW_selected_name_list_in_ams_step_limit_specification4570)
            	        	selected_name_list197=selected_name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return stepLimitSpec;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:32: id= OTHERS
            	        {
            	        	id=`match`(input,OTHERS,FOLLOW_OTHERS_in_ams_step_limit_specification4576).asInstanceOf[Token]; if (state.failed) return stepLimitSpec;

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:833:44: id= ALL
            	        {
            	        	id=`match`(input,ALL,FOLLOW_ALL_in_ams_step_limit_specification4582).asInstanceOf[Token]; if (state.failed) return stepLimitSpec;

            	        }
            	    case _ => 
            	}

            	`match`(input,COLON,FOLLOW_COLON_in_ams_step_limit_specification4586); if (state.failed) return stepLimitSpec;
            	pushFollow(FOLLOW_type_mark_in_ams_step_limit_specification4588)
            	type_mark199=type_mark();

            	state._fsp-=1
            	if (state.failed) return stepLimitSpec;
            	`match`(input,WITH,FOLLOW_WITH_in_ams_step_limit_specification4590); if (state.failed) return stepLimitSpec;
            	pushFollow(FOLLOW_expression_in_ams_step_limit_specification4592)
            	expression200=expression();

            	state._fsp-=1
            	if (state.failed) return stepLimitSpec;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_step_limit_specification4594); if (state.failed) return stepLimitSpec;
            	if ( state.backtracking==0 ) {

            	  			val signal_list = if (id==null) Left(selected_name_list197) else Right(toIdentifier(id))
            	  			stepLimitSpec= new StepLimitSpecification(toPosition(LIMIT198),signal_list,type_mark199,expression200)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, ams_step_limit_specification_StartIndex) }
        }
        return stepLimitSpec
    }
    // $ANTLR end "ams_step_limit_specification"

    // $ANTLR start "entity_class_entry"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:840:1: entity_class_entry returns [GroupTemplateDeclaration.Element entry] : entity_class ( BOX )? ;
    @throws(classOf[RecognitionException])
    def entity_class_entry():GroupTemplateDeclaration.Element = {
         var entry :GroupTemplateDeclaration.Element = null;val entity_class_entry_StartIndex:Int = input.index()
        var BOX202 :Token=null
        var entity_class201:EntityClass.Value = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return entry }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:841:3: ( entity_class ( BOX )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:841:6: entity_class ( BOX )?
            {
            	pushFollow(FOLLOW_entity_class_in_entity_class_entry4617)
            	entity_class201=entity_class();

            	state._fsp-=1
            	if (state.failed) return entry;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:841:19: ( BOX )?
            	var alt92 :Int=2
            	val LA92_0:Int = input.LA(1)

            	if ( (LA92_0==BOX) ) {
            	    alt92=1
            	}
            	alt92 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:841:19: BOX
            	        {
            	        	BOX202=`match`(input,BOX,FOLLOW_BOX_in_entity_class_entry4619).asInstanceOf[Token]; if (state.failed) return entry;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  entry = new GroupTemplateDeclaration.Element(entity_class201,BOX202!=null)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, entity_class_entry_StartIndex) }
        }
        return entry
    }
    // $ANTLR end "entity_class_entry"

    // $ANTLR start "group_template_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:845:1: group_template_declaration returns [GroupTemplateDeclaration groupTemplateDecl] : GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON ;
    @throws(classOf[RecognitionException])
    def group_template_declaration():GroupTemplateDeclaration = {
         var groupTemplateDecl :GroupTemplateDeclaration = null;val group_template_declaration_StartIndex:Int = input.index()
        var GROUP203 :Token=null
        var e1:GroupTemplateDeclaration.Element = null

        var e2:GroupTemplateDeclaration.Element = null

        var identifier204:Identifier = null



        	val elements=new Buffer[GroupTemplateDeclaration.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return groupTemplateDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:849:2: ( GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:849:4: GROUP identifier IS LPAREN e1= entity_class_entry ( COMMA e2= entity_class_entry )* RPAREN SEMICOLON
            {
            	GROUP203=`match`(input,GROUP,FOLLOW_GROUP_in_group_template_declaration4646).asInstanceOf[Token]; if (state.failed) return groupTemplateDecl;
            	pushFollow(FOLLOW_identifier_in_group_template_declaration4648)
            	identifier204=identifier();

            	state._fsp-=1
            	if (state.failed) return groupTemplateDecl;
            	`match`(input,IS,FOLLOW_IS_in_group_template_declaration4650); if (state.failed) return groupTemplateDecl;
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_group_template_declaration4652); if (state.failed) return groupTemplateDecl;
            	pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4656)
            	e1=entity_class_entry();

            	state._fsp-=1
            	if (state.failed) return groupTemplateDecl;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:849:76: ( COMMA e2= entity_class_entry )*
            	var loop93=true
            	do {
            	    var alt93:Int=2
            	    val LA93_0:Int = input.LA(1)

            	    if ( (LA93_0==COMMA) ) {
            	        alt93=1
            	    }


            	    alt93 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:849:77: COMMA e2= entity_class_entry
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_group_template_declaration4660); if (state.failed) return groupTemplateDecl;
            		    	pushFollow(FOLLOW_entity_class_entry_in_group_template_declaration4664)
            		    	e2=entity_class_entry();

            		    	state._fsp-=1
            		    	if (state.failed) return groupTemplateDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop93=false
            	    }
            	} while (loop93);

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_group_template_declaration4671); if (state.failed) return groupTemplateDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_group_template_declaration4673); if (state.failed) return groupTemplateDecl;
            	if ( state.backtracking==0 ) {
            	  groupTemplateDecl=new GroupTemplateDeclaration(toPosition(GROUP203),identifier204,elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, group_template_declaration_StartIndex) }
        }
        return groupTemplateDecl
    }
    // $ANTLR end "group_template_declaration"

    // $ANTLR start "group_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:854:1: group_declaration returns [GroupDeclaration groupDecl] : GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON ;
    @throws(classOf[RecognitionException])
    def group_declaration():GroupDeclaration = {
         var groupDecl :GroupDeclaration = null;val group_declaration_StartIndex:Int = input.index()
        var GROUP205 :Token=null
        var identifier206:Identifier = null

        var selected_name207:SelectedName = null

        var group_constituent_list208:Seq[Either[Name,Identifier]] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return groupDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:855:2: ( GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:855:4: GROUP identifier COLON selected_name LPAREN group_constituent_list RPAREN SEMICOLON
            {
            	GROUP205=`match`(input,GROUP,FOLLOW_GROUP_in_group_declaration4698).asInstanceOf[Token]; if (state.failed) return groupDecl;
            	pushFollow(FOLLOW_identifier_in_group_declaration4700)
            	identifier206=identifier();

            	state._fsp-=1
            	if (state.failed) return groupDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_group_declaration4702); if (state.failed) return groupDecl;
            	pushFollow(FOLLOW_selected_name_in_group_declaration4704)
            	selected_name207=selected_name();

            	state._fsp-=1
            	if (state.failed) return groupDecl;
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_group_declaration4706); if (state.failed) return groupDecl;
            	pushFollow(FOLLOW_group_constituent_list_in_group_declaration4708)
            	group_constituent_list208=group_constituent_list();

            	state._fsp-=1
            	if (state.failed) return groupDecl;
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_group_declaration4710); if (state.failed) return groupDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_group_declaration4712); if (state.failed) return groupDecl;
            	if ( state.backtracking==0 ) {
            	  groupDecl=new GroupDeclaration(toPosition(GROUP205),identifier206,selected_name207,group_constituent_list208)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, group_declaration_StartIndex) }
        }
        return groupDecl
    }
    // $ANTLR end "group_declaration"

    // $ANTLR start "group_constituent"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:859:1: group_constituent returns [Either[Name,Identifier] constituent] : ( name | CHARACTER_LITERAL );
    @throws(classOf[RecognitionException])
    def group_constituent():Either[Name,Identifier] = {
         var constituent :Either[Name,Identifier] = null;val group_constituent_StartIndex:Int = input.index()
        var CHARACTER_LITERAL210 :Token=null
        var name209:Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return constituent }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:860:5: ( name | CHARACTER_LITERAL )
            var alt94 :Int=2
            val LA94_0:Int = input.LA(1)

            if ( (LA94_0==STRING_LITERAL||(LA94_0>=BASIC_IDENTIFIER && LA94_0<=EXTENDED_IDENTIFIER)) ) {
                alt94=1
            }
            else if ( (LA94_0==CHARACTER_LITERAL) ) {
                alt94=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return constituent}
                val nvae = new NoViableAltException("", 94, 0, input)

                throw nvae
            }
            alt94 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:860:9: name
                    {
                    	pushFollow(FOLLOW_name_in_group_constituent4738)
                    	name209=name();

                    	state._fsp-=1
                    	if (state.failed) return constituent;
                    	if ( state.backtracking==0 ) {
                    	  constituent=Left(name209)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:861:9: CHARACTER_LITERAL
                    {
                    	CHARACTER_LITERAL210=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_group_constituent4750).asInstanceOf[Token]; if (state.failed) return constituent;
                    	if ( state.backtracking==0 ) {
                    	  constituent=Right(toIdentifier(CHARACTER_LITERAL210))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, group_constituent_StartIndex) }
        }
        return constituent
    }
    // $ANTLR end "group_constituent"

    // $ANTLR start "group_constituent_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:864:1: group_constituent_list returns [Seq[Either[Name,Identifier]] list] : c1= group_constituent ( COMMA c2= group_constituent )* ;
    @throws(classOf[RecognitionException])
    def group_constituent_list():Seq[Either[Name,Identifier]] = {
         var list :Seq[Either[Name,Identifier]] = null;val group_constituent_list_StartIndex:Int = input.index()
        var c1:Either[Name,Identifier] = null

        var c2:Either[Name,Identifier] = null



        	val elements=new Buffer[Either[Name,Identifier]]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:868:5: (c1= group_constituent ( COMMA c2= group_constituent )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:868:9: c1= group_constituent ( COMMA c2= group_constituent )*
            {
            	pushFollow(FOLLOW_group_constituent_in_group_constituent_list4780)
            	c1=group_constituent();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += c1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:868:59: ( COMMA c2= group_constituent )*
            	var loop95=true
            	do {
            	    var alt95:Int=2
            	    val LA95_0:Int = input.LA(1)

            	    if ( (LA95_0==COMMA) ) {
            	        alt95=1
            	    }


            	    alt95 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:868:61: COMMA c2= group_constituent
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_group_constituent_list4785); if (state.failed) return list;
            		    	pushFollow(FOLLOW_group_constituent_in_group_constituent_list4789)
            		    	c2=group_constituent();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += c2
            		    	}

            		    }
            		case _ => loop95=false
            	    }
            	} while (loop95);

            	if ( state.backtracking==0 ) {
            	  list=elements.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, group_constituent_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "group_constituent_list"

    // $ANTLR start "use_clause"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:872:1: use_clause returns [UseClause useClause] : USE selected_name_list SEMICOLON ;
    @throws(classOf[RecognitionException])
    def use_clause():UseClause = {
         var useClause :UseClause = null;val use_clause_StartIndex:Int = input.index()
        var USE211 :Token=null
        var selected_name_list212:Seq[SelectedName] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return useClause }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:873:2: ( USE selected_name_list SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:873:4: USE selected_name_list SEMICOLON
            {
            	USE211=`match`(input,USE,FOLLOW_USE_in_use_clause4822).asInstanceOf[Token]; if (state.failed) return useClause;
            	pushFollow(FOLLOW_selected_name_list_in_use_clause4824)
            	selected_name_list212=selected_name_list();

            	state._fsp-=1
            	if (state.failed) return useClause;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_use_clause4826); if (state.failed) return useClause;
            	if ( state.backtracking==0 ) {
            	  useClause=new UseClause(toPosition(USE211),selected_name_list212)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, use_clause_StartIndex) }
        }
        return useClause
    }
    // $ANTLR end "use_clause"

    // $ANTLR start "enumeration_literal"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:879:1: enumeration_literal returns [Identifier id] : ( identifier | CHARACTER_LITERAL );
    @throws(classOf[RecognitionException])
    def enumeration_literal():Identifier = {
         var id :Identifier = null;val enumeration_literal_StartIndex:Int = input.index()
        var CHARACTER_LITERAL214 :Token=null
        var identifier213:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return id }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:880:2: ( identifier | CHARACTER_LITERAL )
            var alt96 :Int=2
            val LA96_0:Int = input.LA(1)

            if ( ((LA96_0>=BASIC_IDENTIFIER && LA96_0<=EXTENDED_IDENTIFIER)) ) {
                alt96=1
            }
            else if ( (LA96_0==CHARACTER_LITERAL) ) {
                alt96=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 96, 0, input)

                throw nvae
            }
            alt96 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:880:4: identifier
                    {
                    	pushFollow(FOLLOW_identifier_in_enumeration_literal4850)
                    	identifier213=identifier();

                    	state._fsp-=1
                    	if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=identifier213
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:881:4: CHARACTER_LITERAL
                    {
                    	CHARACTER_LITERAL214=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_enumeration_literal4857).asInstanceOf[Token]; if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(CHARACTER_LITERAL214)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, enumeration_literal_StartIndex) }
        }
        return id
    }
    // $ANTLR end "enumeration_literal"

    // $ANTLR start "enumeration_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:884:1: enumeration_type_definition[Identifier id,Position pos] returns [EnumerationTypeDefinition enumTypeDef] : LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN ;
    @throws(classOf[RecognitionException])
    def enumeration_type_definition(id:Identifier, pos:Position):EnumerationTypeDefinition = {
         var enumTypeDef :EnumerationTypeDefinition = null;val enumeration_type_definition_StartIndex:Int = input.index()
        var e1:Identifier = null

        var e2:Identifier = null



        	val elements=new Buffer[Identifier]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return enumTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:888:2: ( LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:888:4: LPAREN e1= enumeration_literal ( COMMA e2= enumeration_literal )* RPAREN
            {
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_enumeration_type_definition4881); if (state.failed) return enumTypeDef;
            	pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4885)
            	e1=enumeration_literal();

            	state._fsp-=1
            	if (state.failed) return enumTypeDef;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:888:54: ( COMMA e2= enumeration_literal )*
            	var loop97=true
            	do {
            	    var alt97:Int=2
            	    val LA97_0:Int = input.LA(1)

            	    if ( (LA97_0==COMMA) ) {
            	        alt97=1
            	    }


            	    alt97 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:888:55: COMMA e2= enumeration_literal
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_enumeration_type_definition4889); if (state.failed) return enumTypeDef;
            		    	pushFollow(FOLLOW_enumeration_literal_in_enumeration_type_definition4893)
            		    	e2=enumeration_literal();

            		    	state._fsp-=1
            		    	if (state.failed) return enumTypeDef;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop97=false
            	    }
            	} while (loop97);

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_enumeration_type_definition4899); if (state.failed) return enumTypeDef;
            	if ( state.backtracking==0 ) {
            	  enumTypeDef=new EnumerationTypeDefinition(pos,id,elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, enumeration_type_definition_StartIndex) }
        }
        return enumTypeDef
    }
    // $ANTLR end "enumeration_type_definition"

    // $ANTLR start "integer_or_floating_point_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:892:1: integer_or_floating_point_type_definition[Identifier id,Position pos] returns [IntegerOrFloatingPointTypeDefinition scalarTypeDef] : RANGE range ;
    @throws(classOf[RecognitionException])
    def integer_or_floating_point_type_definition(id:Identifier, pos:Position):IntegerOrFloatingPointTypeDefinition = {
         var scalarTypeDef :IntegerOrFloatingPointTypeDefinition = null;val integer_or_floating_point_type_definition_StartIndex:Int = input.index()
        var range215:Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return scalarTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:893:2: ( RANGE range )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:893:4: RANGE range
            {
            	`match`(input,RANGE,FOLLOW_RANGE_in_integer_or_floating_point_type_definition4921); if (state.failed) return scalarTypeDef;
            	pushFollow(FOLLOW_range_in_integer_or_floating_point_type_definition4923)
            	range215=range();

            	state._fsp-=1
            	if (state.failed) return scalarTypeDef;
            	if ( state.backtracking==0 ) {
            	  scalarTypeDef=new IntegerOrFloatingPointTypeDefinition(pos,id,range215)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, integer_or_floating_point_type_definition_StartIndex) }
        }
        return scalarTypeDef
    }
    // $ANTLR end "integer_or_floating_point_type_definition"

    // $ANTLR start "physical_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:897:1: physical_type_definition[Identifier id,Position pos] returns [PhysicalTypeDefinition physicalTypeDef] : RANGE r= range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? ;
    @throws(classOf[RecognitionException])
    def physical_type_definition(id:Identifier, pos:Position):PhysicalTypeDefinition = {
         var physicalTypeDef :PhysicalTypeDefinition = null;val physical_type_definition_StartIndex:Int = input.index()
        var r:Range = null

        var baseIdent:Identifier = null

        var idx:Identifier = null

        var endIdent:Identifier = null

        var physical_literal216:PhysicalLiteral = null



        	val elements=new Buffer[PhysicalTypeDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return physicalTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:901:2: ( RANGE r= range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:901:4: RANGE r= range UNITS baseIdent= identifier SEMICOLON (idx= identifier EQ physical_literal SEMICOLON )* END UNITS (endIdent= identifier )?
            {
            	`match`(input,RANGE,FOLLOW_RANGE_in_physical_type_definition4951); if (state.failed) return physicalTypeDef;
            	pushFollow(FOLLOW_range_in_physical_type_definition4955)
            	r=range();

            	state._fsp-=1
            	if (state.failed) return physicalTypeDef;
            	`match`(input,UNITS,FOLLOW_UNITS_in_physical_type_definition4959); if (state.failed) return physicalTypeDef;
            	pushFollow(FOLLOW_identifier_in_physical_type_definition4966)
            	baseIdent=identifier();

            	state._fsp-=1
            	if (state.failed) return physicalTypeDef;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_physical_type_definition4968); if (state.failed) return physicalTypeDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:904:4: (idx= identifier EQ physical_literal SEMICOLON )*
            	var loop98=true
            	do {
            	    var alt98:Int=2
            	    val LA98_0:Int = input.LA(1)

            	    if ( ((LA98_0>=BASIC_IDENTIFIER && LA98_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt98=1
            	    }


            	    alt98 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:905:4: idx= identifier EQ physical_literal SEMICOLON
            		    {
            		    	pushFollow(FOLLOW_identifier_in_physical_type_definition4980)
            		    	idx=identifier();

            		    	state._fsp-=1
            		    	if (state.failed) return physicalTypeDef;
            		    	`match`(input,EQ,FOLLOW_EQ_in_physical_type_definition4982); if (state.failed) return physicalTypeDef;
            		    	pushFollow(FOLLOW_physical_literal_in_physical_type_definition4984)
            		    	physical_literal216=physical_literal();

            		    	state._fsp-=1
            		    	if (state.failed) return physicalTypeDef;
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_physical_type_definition4986); if (state.failed) return physicalTypeDef;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += new PhysicalTypeDefinition.Element(idx,physical_literal216)
            		    	}

            		    }
            		case _ => loop98=false
            	    }
            	} while (loop98);

            	`match`(input,END,FOLLOW_END_in_physical_type_definition5002); if (state.failed) return physicalTypeDef;
            	`match`(input,UNITS,FOLLOW_UNITS_in_physical_type_definition5004); if (state.failed) return physicalTypeDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:908:21: (endIdent= identifier )?
            	var alt99 :Int=2
            	val LA99_0:Int = input.LA(1)

            	if ( ((LA99_0>=BASIC_IDENTIFIER && LA99_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt99=1
            	}
            	alt99 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:908:21: endIdent= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_physical_type_definition5008)
            	        	endIdent=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return physicalTypeDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  physicalTypeDef=new PhysicalTypeDefinition(pos,id,r,baseIdent,elements.toList,endIdent)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, physical_type_definition_StartIndex) }
        }
        return physicalTypeDef
    }
    // $ANTLR end "physical_type_definition"

    // $ANTLR start "index_subtype_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:912:1: index_subtype_definition returns [SelectedName typeMark] : type_mark RANGE BOX ;
    @throws(classOf[RecognitionException])
    def index_subtype_definition():SelectedName = {
         var typeMark :SelectedName = null;val index_subtype_definition_StartIndex:Int = input.index()
        var type_mark217:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return typeMark }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:913:2: ( type_mark RANGE BOX )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:913:5: type_mark RANGE BOX
            {
            	pushFollow(FOLLOW_type_mark_in_index_subtype_definition5032)
            	type_mark217=type_mark();

            	state._fsp-=1
            	if (state.failed) return typeMark;
            	`match`(input,RANGE,FOLLOW_RANGE_in_index_subtype_definition5034); if (state.failed) return typeMark;
            	`match`(input,BOX,FOLLOW_BOX_in_index_subtype_definition5036); if (state.failed) return typeMark;
            	if ( state.backtracking==0 ) {
            	  typeMark=type_mark217
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, index_subtype_definition_StartIndex) }
        }
        return typeMark
    }
    // $ANTLR end "index_subtype_definition"

    // $ANTLR start "array_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:916:1: array_type_definition[Identifier id,Position pos] returns [AbstractArrayTypeDefinition arrayTypeDef] : ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication | index_constraint OF subType= subtype_indication ) ;
    @throws(classOf[RecognitionException])
    def array_type_definition(id:Identifier, pos:Position):AbstractArrayTypeDefinition = {
         var arrayTypeDef :AbstractArrayTypeDefinition = null;val array_type_definition_StartIndex:Int = input.index()
        var type1:SelectedName = null

        var type2:SelectedName = null

        var subType:SubTypeIndication = null

        var index_constraint218:Seq[DiscreteRange] = null



        	val unConstraintList=new Buffer[SelectedName]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return arrayTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:920:2: ( ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication | index_constraint OF subType= subtype_indication ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:920:4: ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication | index_constraint OF subType= subtype_indication )
            {
            	`match`(input,ARRAY,FOLLOW_ARRAY_in_array_type_definition5063); if (state.failed) return arrayTypeDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:920:10: ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication | index_constraint OF subType= subtype_indication )
            	var alt101 :Int=2
            	 alt101 = dfa101.predict(input)
            	alt101 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:921:3: ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_array_type_definition5075); if (state.failed) return arrayTypeDef;
            	        	pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition5079)
            	        	type1=index_subtype_definition();

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef;
            	        	if ( state.backtracking==0 ) {
            	        	  unConstraintList += type1
            	        	}
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:921:114: ( COMMA type2= index_subtype_definition )*
            	        	var loop100=true
            	        	do {
            	        	    var alt100:Int=2
            	        	    val LA100_0:Int = input.LA(1)

            	        	    if ( (LA100_0==COMMA) ) {
            	        	        alt100=1
            	        	    }


            	        	    alt100 match {
            	        		case 1 =>
            	        		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:921:115: COMMA type2= index_subtype_definition
            	        		    {
            	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_array_type_definition5084); if (state.failed) return arrayTypeDef;
            	        		    	pushFollow(FOLLOW_index_subtype_definition_in_array_type_definition5088)
            	        		    	type2=index_subtype_definition();

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return arrayTypeDef;
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  unConstraintList += type2
            	        		    	}

            	        		    }
            	        		case _ => loop100=false
            	        	    }
            	        	} while (loop100);

            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_array_type_definition5094); if (state.failed) return arrayTypeDef;
            	        	`match`(input,OF,FOLLOW_OF_in_array_type_definition5096); if (state.failed) return arrayTypeDef;
            	        	pushFollow(FOLLOW_subtype_indication_in_array_type_definition5100)
            	        	subType=subtype_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:922:5: index_constraint OF subType= subtype_indication
            	        {
            	        	pushFollow(FOLLOW_index_constraint_in_array_type_definition5106)
            	        	index_constraint218=index_constraint();

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef;
            	        	`match`(input,OF,FOLLOW_OF_in_array_type_definition5108); if (state.failed) return arrayTypeDef;
            	        	pushFollow(FOLLOW_subtype_indication_in_array_type_definition5112)
            	        	subType=subtype_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return arrayTypeDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {

            	  			if (unConstraintList.isEmpty) arrayTypeDef=new ConstrainedArrayTypeDefinition(pos,id,index_constraint218,subType)
            	  			else arrayTypeDef=new UnconstrainedArrayTypeDefinition(pos,id,unConstraintList.toList,subType)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, array_type_definition_StartIndex) }
        }
        return arrayTypeDef
    }
    // $ANTLR end "array_type_definition"

    // $ANTLR start "record_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:930:1: record_type_definition[Identifier id,Position pos] returns [RecordTypeDefinition recordTypeDef] : RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? ;
    @throws(classOf[RecognitionException])
    def record_type_definition(id:Identifier, pos:Position):RecordTypeDefinition = {
         var recordTypeDef :RecordTypeDefinition = null;val record_type_definition_StartIndex:Int = input.index()
        var identifier_list219:Seq[Identifier] = null

        var subtype_indication220:SubTypeIndication = null

        var identifier221:Identifier = null



        	val elements=new Buffer[RecordTypeDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return recordTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:934:2: ( RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:934:4: RECORD ( identifier_list COLON subtype_indication SEMICOLON )+ END RECORD ( identifier )?
            {
            	`match`(input,RECORD,FOLLOW_RECORD_in_record_type_definition5143); if (state.failed) return recordTypeDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:935:4: ( identifier_list COLON subtype_indication SEMICOLON )+
            	var cnt102:Int=0
            	var loop102 = true
            	do {
            	    var alt102:Int=2
            	    val LA102_0:Int = input.LA(1)

            	    if ( ((LA102_0>=BASIC_IDENTIFIER && LA102_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt102=1
            	    }


            	    alt102 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:936:4: identifier_list COLON subtype_indication SEMICOLON
            		    {
            		    	pushFollow(FOLLOW_identifier_list_in_record_type_definition5154)
            		    	identifier_list219=identifier_list();

            		    	state._fsp-=1
            		    	if (state.failed) return recordTypeDef;
            		    	`match`(input,COLON,FOLLOW_COLON_in_record_type_definition5156); if (state.failed) return recordTypeDef;
            		    	pushFollow(FOLLOW_subtype_indication_in_record_type_definition5158)
            		    	subtype_indication220=subtype_indication();

            		    	state._fsp-=1
            		    	if (state.failed) return recordTypeDef;
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_definition5160); if (state.failed) return recordTypeDef;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += new RecordTypeDefinition.Element(identifier_list219, subtype_indication220)
            		    	}

            		    }
            		case _ =>
            		    if ( cnt102 >= 1 ) loop102=false
            		    else {
            		    	    if (state.backtracking>0) {state.failed=true; return recordTypeDef}
            	            	    val eee = new EarlyExitException(102, input)
            	            	    throw eee
            		    }
            	    }
            	    cnt102 += 1
            	} while (loop102);

            	`match`(input,END,FOLLOW_END_in_record_type_definition5175); if (state.failed) return recordTypeDef;
            	`match`(input,RECORD,FOLLOW_RECORD_in_record_type_definition5177); if (state.failed) return recordTypeDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:939:14: ( identifier )?
            	var alt103 :Int=2
            	val LA103_0:Int = input.LA(1)

            	if ( ((LA103_0>=BASIC_IDENTIFIER && LA103_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt103=1
            	}
            	alt103 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:939:14: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_record_type_definition5179)
            	        	identifier221=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return recordTypeDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  recordTypeDef=new RecordTypeDefinition(pos,id,elements.toList,identifier221)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, record_type_definition_StartIndex) }
        }
        return recordTypeDef
    }
    // $ANTLR end "record_type_definition"

    // $ANTLR start "access_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:943:1: access_type_definition[Identifier id,Position pos] returns [AccessTypeDefinition accessTypeDef] : ACCESS subtype_indication ;
    @throws(classOf[RecognitionException])
    def access_type_definition(id:Identifier, pos:Position):AccessTypeDefinition = {
         var accessTypeDef :AccessTypeDefinition = null;val access_type_definition_StartIndex:Int = input.index()
        var subtype_indication222:SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return accessTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:944:2: ( ACCESS subtype_indication )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:944:4: ACCESS subtype_indication
            {
            	`match`(input,ACCESS,FOLLOW_ACCESS_in_access_type_definition5201); if (state.failed) return accessTypeDef;
            	pushFollow(FOLLOW_subtype_indication_in_access_type_definition5203)
            	subtype_indication222=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return accessTypeDef;
            	if ( state.backtracking==0 ) {
            	  accessTypeDef=new AccessTypeDefinition(pos,id,subtype_indication222)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, access_type_definition_StartIndex) }
        }
        return accessTypeDef
    }
    // $ANTLR end "access_type_definition"

    // $ANTLR start "file_type_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:948:1: file_type_definition[Identifier id,Position pos] returns [FileTypeDefinition fileTypeDef] : FILE OF type_mark ;
    @throws(classOf[RecognitionException])
    def file_type_definition(id:Identifier, pos:Position):FileTypeDefinition = {
         var fileTypeDef :FileTypeDefinition = null;val file_type_definition_StartIndex:Int = input.index()
        var type_mark223:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return fileTypeDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:949:2: ( FILE OF type_mark )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:949:4: FILE OF type_mark
            {
            	`match`(input,FILE,FOLLOW_FILE_in_file_type_definition5226); if (state.failed) return fileTypeDef;
            	`match`(input,OF,FOLLOW_OF_in_file_type_definition5228); if (state.failed) return fileTypeDef;
            	pushFollow(FOLLOW_type_mark_in_file_type_definition5230)
            	type_mark223=type_mark();

            	state._fsp-=1
            	if (state.failed) return fileTypeDef;
            	if ( state.backtracking==0 ) {
            	  fileTypeDef=new FileTypeDefinition(pos,id,type_mark223)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, file_type_definition_StartIndex) }
        }
        return fileTypeDef
    }
    // $ANTLR end "file_type_definition"

    // $ANTLR start "ams_scalar_nature_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:953:1: ams_scalar_nature_definition[Identifier id,Position pos] returns [ScalarNatureDefinition natureDef] : t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE ;
    @throws(classOf[RecognitionException])
    def ams_scalar_nature_definition(id:Identifier, pos:Position):ScalarNatureDefinition = {
         var natureDef :ScalarNatureDefinition = null;val ams_scalar_nature_definition_StartIndex:Int = input.index()
        var t1:SelectedName = null

        var t2:SelectedName = null

        var identifier224:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return natureDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:954:2: (t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:954:4: t1= type_mark ACROSS t2= type_mark THROUGH identifier REFERENCE
            {
            	pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition5254)
            	t1=type_mark();

            	state._fsp-=1
            	if (state.failed) return natureDef;
            	`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_scalar_nature_definition5256); if (state.failed) return natureDef;
            	pushFollow(FOLLOW_type_mark_in_ams_scalar_nature_definition5260)
            	t2=type_mark();

            	state._fsp-=1
            	if (state.failed) return natureDef;
            	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_scalar_nature_definition5262); if (state.failed) return natureDef;
            	pushFollow(FOLLOW_identifier_in_ams_scalar_nature_definition5264)
            	identifier224=identifier();

            	state._fsp-=1
            	if (state.failed) return natureDef;
            	`match`(input,REFERENCE,FOLLOW_REFERENCE_in_ams_scalar_nature_definition5266); if (state.failed) return natureDef;
            	if ( state.backtracking==0 ) {
            	  natureDef=new ScalarNatureDefinition(pos,id,t1,t2,identifier224)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, ams_scalar_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_scalar_nature_definition"

    // $ANTLR start "ams_array_nature_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:958:1: ams_array_nature_definition[Identifier id,Position pos] returns [AbstractArrayNatureTypeDefinition natureDef] : ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication | index_constraint OF subNature= ams_subnature_indication ) ;
    @throws(classOf[RecognitionException])
    def ams_array_nature_definition(id:Identifier, pos:Position):AbstractArrayNatureTypeDefinition = {
         var natureDef :AbstractArrayNatureTypeDefinition = null;val ams_array_nature_definition_StartIndex:Int = input.index()
        var type1:SelectedName = null

        var type2:SelectedName = null

        var subType:SubNatureIndication = null

        var subNature:SubNatureIndication = null

        var index_constraint225:Seq[DiscreteRange] = null



        	val unConstraintList=new Buffer[SelectedName]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return natureDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:962:2: ( ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication | index_constraint OF subNature= ams_subnature_indication ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:962:4: ARRAY ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication | index_constraint OF subNature= ams_subnature_indication )
            {
            	`match`(input,ARRAY,FOLLOW_ARRAY_in_ams_array_nature_definition5291); if (state.failed) return natureDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:962:10: ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication | index_constraint OF subNature= ams_subnature_indication )
            	var alt105 :Int=2
            	 alt105 = dfa105.predict(input)
            	alt105 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:963:3: ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_ams_array_nature_definition5303); if (state.failed) return natureDef;
            	        	pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition5307)
            	        	type1=index_subtype_definition();

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef;
            	        	if ( state.backtracking==0 ) {
            	        	  unConstraintList += type1
            	        	}
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:963:114: ( COMMA type2= index_subtype_definition )*
            	        	var loop104=true
            	        	do {
            	        	    var alt104:Int=2
            	        	    val LA104_0:Int = input.LA(1)

            	        	    if ( (LA104_0==COMMA) ) {
            	        	        alt104=1
            	        	    }


            	        	    alt104 match {
            	        		case 1 =>
            	        		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:963:115: COMMA type2= index_subtype_definition
            	        		    {
            	        		    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_array_nature_definition5312); if (state.failed) return natureDef;
            	        		    	pushFollow(FOLLOW_index_subtype_definition_in_ams_array_nature_definition5316)
            	        		    	type2=index_subtype_definition();

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return natureDef;
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  unConstraintList += type2
            	        		    	}

            	        		    }
            	        		case _ => loop104=false
            	        	    }
            	        	} while (loop104);

            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_ams_array_nature_definition5322); if (state.failed) return natureDef;
            	        	`match`(input,OF,FOLLOW_OF_in_ams_array_nature_definition5324); if (state.failed) return natureDef;
            	        	pushFollow(FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5328)
            	        	subType=ams_subnature_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:964:5: index_constraint OF subNature= ams_subnature_indication
            	        {
            	        	pushFollow(FOLLOW_index_constraint_in_ams_array_nature_definition5334)
            	        	index_constraint225=index_constraint();

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef;
            	        	`match`(input,OF,FOLLOW_OF_in_ams_array_nature_definition5336); if (state.failed) return natureDef;
            	        	pushFollow(FOLLOW_ams_subnature_indication_in_ams_array_nature_definition5340)
            	        	subNature=ams_subnature_indication();

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {

            	  			if (unConstraintList.isEmpty) natureDef=new ConstrainedArrayNatureTypeDefinition(pos,id,index_constraint225,subNature)
            	  			else natureDef=new UnconstrainedArrayNatureTypeDefinition(pos,id,unConstraintList.toList,subNature)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, ams_array_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_array_nature_definition"

    // $ANTLR start "ams_record_nature_definition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:972:1: ams_record_nature_definition[Identifier id,Position pos] returns [RecordNatureDefinition natureDef] : RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? ;
    @throws(classOf[RecognitionException])
    def ams_record_nature_definition(id:Identifier, pos:Position):RecordNatureDefinition = {
         var natureDef :RecordNatureDefinition = null;val ams_record_nature_definition_StartIndex:Int = input.index()
        var identifier_list226:Seq[Identifier] = null

        var ams_subnature_indication227:SubNatureIndication = null

        var identifier228:Identifier = null



        	val elements=new Buffer[RecordNatureDefinition.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return natureDef }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:976:2: ( RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:976:4: RECORD ( identifier_list COLON ams_subnature_indication SEMICOLON )+ END RECORD ( identifier )?
            {
            	`match`(input,RECORD,FOLLOW_RECORD_in_ams_record_nature_definition5369); if (state.failed) return natureDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:977:4: ( identifier_list COLON ams_subnature_indication SEMICOLON )+
            	var cnt106:Int=0
            	var loop106 = true
            	do {
            	    var alt106:Int=2
            	    val LA106_0:Int = input.LA(1)

            	    if ( ((LA106_0>=BASIC_IDENTIFIER && LA106_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt106=1
            	    }


            	    alt106 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:978:4: identifier_list COLON ams_subnature_indication SEMICOLON
            		    {
            		    	pushFollow(FOLLOW_identifier_list_in_ams_record_nature_definition5379)
            		    	identifier_list226=identifier_list();

            		    	state._fsp-=1
            		    	if (state.failed) return natureDef;
            		    	`match`(input,COLON,FOLLOW_COLON_in_ams_record_nature_definition5381); if (state.failed) return natureDef;
            		    	pushFollow(FOLLOW_ams_subnature_indication_in_ams_record_nature_definition5383)
            		    	ams_subnature_indication227=ams_subnature_indication();

            		    	state._fsp-=1
            		    	if (state.failed) return natureDef;
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_record_nature_definition5385); if (state.failed) return natureDef;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += new RecordNatureDefinition.Element(identifier_list226, ams_subnature_indication227)
            		    	}

            		    }
            		case _ =>
            		    if ( cnt106 >= 1 ) loop106=false
            		    else {
            		    	    if (state.backtracking>0) {state.failed=true; return natureDef}
            	            	    val eee = new EarlyExitException(106, input)
            	            	    throw eee
            		    }
            	    }
            	    cnt106 += 1
            	} while (loop106);

            	`match`(input,END,FOLLOW_END_in_ams_record_nature_definition5400); if (state.failed) return natureDef;
            	`match`(input,RECORD,FOLLOW_RECORD_in_ams_record_nature_definition5402); if (state.failed) return natureDef;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:981:14: ( identifier )?
            	var alt107 :Int=2
            	val LA107_0:Int = input.LA(1)

            	if ( ((LA107_0>=BASIC_IDENTIFIER && LA107_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt107=1
            	}
            	alt107 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:981:14: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_ams_record_nature_definition5404)
            	        	identifier228=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return natureDef;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  natureDef=new RecordNatureDefinition(pos,id,elements.toList,identifier228)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, ams_record_nature_definition_StartIndex) }
        }
        return natureDef
    }
    // $ANTLR end "ams_record_nature_definition"

    // $ANTLR start "ams_subnature_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:985:1: ams_subnature_declaration returns [SubNatureDeclaration subnatureDecl] : SUBNATURE identifier IS ams_subnature_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_subnature_declaration():SubNatureDeclaration = {
         var subnatureDecl :SubNatureDeclaration = null;val ams_subnature_declaration_StartIndex:Int = input.index()
        var SUBNATURE229 :Token=null
        var identifier230:Identifier = null

        var ams_subnature_indication231:SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return subnatureDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:986:2: ( SUBNATURE identifier IS ams_subnature_indication SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:986:5: SUBNATURE identifier IS ams_subnature_indication SEMICOLON
            {
            	SUBNATURE229=`match`(input,SUBNATURE,FOLLOW_SUBNATURE_in_ams_subnature_declaration5426).asInstanceOf[Token]; if (state.failed) return subnatureDecl;
            	pushFollow(FOLLOW_identifier_in_ams_subnature_declaration5428)
            	identifier230=identifier();

            	state._fsp-=1
            	if (state.failed) return subnatureDecl;
            	`match`(input,IS,FOLLOW_IS_in_ams_subnature_declaration5430); if (state.failed) return subnatureDecl;
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_subnature_declaration5432)
            	ams_subnature_indication231=ams_subnature_indication();

            	state._fsp-=1
            	if (state.failed) return subnatureDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_subnature_declaration5434); if (state.failed) return subnatureDecl;
            	if ( state.backtracking==0 ) {
            	  subnatureDecl= new SubNatureDeclaration(toPosition(SUBNATURE229),identifier230,ams_subnature_indication231)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, ams_subnature_declaration_StartIndex) }
        }
        return subnatureDecl
    }
    // $ANTLR end "ams_subnature_declaration"

    // $ANTLR start "ams_subnature_indication"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:990:1: ams_subnature_indication returns [SubNatureIndication subNature] : ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? ;
    @throws(classOf[RecognitionException])
    def ams_subnature_indication():SubNatureIndication = {
         var subNature :SubNatureIndication = null;val ams_subnature_indication_StartIndex:Int = input.index()
        var e1:Expression = null

        var e2:Expression = null

        var ams_nature_mark232:SelectedName = null

        var index_constraint233:Seq[DiscreteRange] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return subNature }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:2: ( ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:4: ams_nature_mark ( index_constraint )? ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
            {
            	pushFollow(FOLLOW_ams_nature_mark_in_ams_subnature_indication5457)
            	ams_nature_mark232=ams_nature_mark();

            	state._fsp-=1
            	if (state.failed) return subNature;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:20: ( index_constraint )?
            	var alt108 :Int=2
            	val LA108_0:Int = input.LA(1)

            	if ( (LA108_0==LPAREN) ) {
            	    alt108=1
            	}
            	alt108 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:20: index_constraint
            	        {
            	        	pushFollow(FOLLOW_index_constraint_in_ams_subnature_indication5459)
            	        	index_constraint233=index_constraint();

            	        	state._fsp-=1
            	        	if (state.failed) return subNature;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:38: ( TOLERANCE e1= expression ACROSS e2= expression THROUGH )?
            	var alt109 :Int=2
            	val LA109_0:Int = input.LA(1)

            	if ( (LA109_0==TOLERANCE) ) {
            	    alt109=1
            	}
            	alt109 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:991:39: TOLERANCE e1= expression ACROSS e2= expression THROUGH
            	        {
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_subnature_indication5463); if (state.failed) return subNature;
            	        	pushFollow(FOLLOW_expression_in_ams_subnature_indication5467)
            	        	e1=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return subNature;
            	        	`match`(input,ACROSS,FOLLOW_ACROSS_in_ams_subnature_indication5469); if (state.failed) return subNature;
            	        	pushFollow(FOLLOW_expression_in_ams_subnature_indication5473)
            	        	e2=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return subNature;
            	        	`match`(input,THROUGH,FOLLOW_THROUGH_in_ams_subnature_indication5475); if (state.failed) return subNature;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  subNature=new SubNatureIndication(ams_nature_mark232,index_constraint233,e1,e2)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, ams_subnature_indication_StartIndex) }
        }
        return subNature
    }
    // $ANTLR end "ams_subnature_indication"

    // $ANTLR start "ams_nature_mark"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:995:1: ams_nature_mark returns [SelectedName typeName] : selected_name ;
    @throws(classOf[RecognitionException])
    def ams_nature_mark():SelectedName = {
         var typeName :SelectedName = null;val ams_nature_mark_StartIndex:Int = input.index()
        var selected_name234:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return typeName }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:996:2: ( selected_name )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:996:5: selected_name
            {
            	pushFollow(FOLLOW_selected_name_in_ams_nature_mark5499)
            	selected_name234=selected_name();

            	state._fsp-=1
            	if (state.failed) return typeName;
            	if ( state.backtracking==0 ) {
            	  typeName=selected_name234
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, ams_nature_mark_StartIndex) }
        }
        return typeName
    }
    // $ANTLR end "ams_nature_mark"

    // $ANTLR start "protected_type_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:999:1: protected_type_declaration[Identifier id,Position pos] returns [ProtectedTypeDeclaration protectedTypeDecl] : PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? ;
    @throws(classOf[RecognitionException])
    def protected_type_declaration(id:Identifier, pos:Position):ProtectedTypeDeclaration = {
         var protectedTypeDecl :ProtectedTypeDeclaration = null;val protected_type_declaration_StartIndex:Int = input.index()
        var protected_type_declarative_item235:DeclarativeItem = null

        var identifier236:Identifier = null



        	val items=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return protectedTypeDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1003:2: ( PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1003:4: PROTECTED ( protected_type_declarative_item )* END PROTECTED ( identifier )?
            {
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_declaration5524); if (state.failed) return protectedTypeDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1004:4: ( protected_type_declarative_item )*
            	var loop110=true
            	do {
            	    var alt110:Int=2
            	    val LA110_0:Int = input.LA(1)

            	    if ( (LA110_0==ATTRIBUTE||LA110_0==FUNCTION||LA110_0==IMPURE||LA110_0==PROCEDURE||LA110_0==PURE||LA110_0==USE) ) {
            	        alt110=1
            	    }


            	    alt110 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1004:5: protected_type_declarative_item
            		    {
            		    	pushFollow(FOLLOW_protected_type_declarative_item_in_protected_type_declaration5530)
            		    	protected_type_declarative_item235=protected_type_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeDecl;
            		    	if ( state.backtracking==0 ) {
            		    	  items += protected_type_declarative_item235
            		    	}

            		    }
            		case _ => loop110=false
            	    }
            	} while (loop110);

            	`match`(input,END,FOLLOW_END_in_protected_type_declaration5537); if (state.failed) return protectedTypeDecl;
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_declaration5539); if (state.failed) return protectedTypeDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1005:17: ( identifier )?
            	var alt111 :Int=2
            	val LA111_0:Int = input.LA(1)

            	if ( ((LA111_0>=BASIC_IDENTIFIER && LA111_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt111=1
            	}
            	alt111 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1005:17: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_protected_type_declaration5541)
            	        	identifier236=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return protectedTypeDecl;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  protectedTypeDecl=new ProtectedTypeDeclaration(pos,id,items.toList,identifier236)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, protected_type_declaration_StartIndex) }
        }
        return protectedTypeDecl
    }
    // $ANTLR end "protected_type_declaration"

    // $ANTLR start "protected_type_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1009:1: protected_type_declarative_item returns [DeclarativeItem node] : ( subprogram_declaration | attribute_specification | use_clause );
    @throws(classOf[RecognitionException])
    def protected_type_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val protected_type_declarative_item_StartIndex:Int = input.index()
        var subprogram_declaration237:DeclarativeItem = null

        var attribute_specification238:AttributeSpecification = null

        var use_clause239:UseClause = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1010:2: ( subprogram_declaration | attribute_specification | use_clause )
            var alt112 :Int=3
            input.LA(1) match {
            case FUNCTION | IMPURE | PROCEDURE | PURE => {
                 alt112=1
            }

            case ATTRIBUTE => {
                 alt112=2
            }

            case USE => {
                 alt112=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return node}
                val nvae = new NoViableAltException("", 112, 0, input)

                throw nvae
            }

            alt112 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1010:4: subprogram_declaration
                    {
                    	pushFollow(FOLLOW_subprogram_declaration_in_protected_type_declarative_item5564)
                    	subprogram_declaration237=subprogram_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declaration237
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1012:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_protected_type_declarative_item5575)
                    	attribute_specification238=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification238
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1013:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_protected_type_declarative_item5583)
                    	use_clause239=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause239
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, protected_type_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "protected_type_declarative_item"

    // $ANTLR start "protected_type_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1016:1: protected_type_body[Identifier id,Position pos] returns [ProtectedTypeBodyDeclaration protectedTypeBody] : PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? ;
    @throws(classOf[RecognitionException])
    def protected_type_body(id:Identifier, pos:Position):ProtectedTypeBodyDeclaration = {
         var protectedTypeBody :ProtectedTypeBodyDeclaration = null;val protected_type_body_StartIndex:Int = input.index()
        var protected_type_body_declarative_item240:DeclarativeItem = null

        var identifier241:Identifier = null



        	val items=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return protectedTypeBody }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1020:2: ( PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1020:4: PROTECTED BODY ( protected_type_body_declarative_item )* END PROTECTED BODY ( identifier )?
            {
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_body5606); if (state.failed) return protectedTypeBody;
            	`match`(input,BODY,FOLLOW_BODY_in_protected_type_body5608); if (state.failed) return protectedTypeBody;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1021:4: ( protected_type_body_declarative_item )*
            	var loop113=true
            	do {
            	    var alt113:Int=2
            	    val LA113_0:Int = input.LA(1)

            	    if ( (LA113_0==ALIAS||LA113_0==ATTRIBUTE||LA113_0==CONSTANT||LA113_0==FILE||LA113_0==FUNCTION||LA113_0==GROUP||LA113_0==IMPURE||LA113_0==PROCEDURE||LA113_0==PURE||LA113_0==SHARED||LA113_0==SUBTYPE||LA113_0==TYPE||(LA113_0>=USE && LA113_0<=VARIABLE)) ) {
            	        alt113=1
            	    }


            	    alt113 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1021:5: protected_type_body_declarative_item
            		    {
            		    	pushFollow(FOLLOW_protected_type_body_declarative_item_in_protected_type_body5614)
            		    	protected_type_body_declarative_item240=protected_type_body_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return protectedTypeBody;
            		    	if ( state.backtracking==0 ) {
            		    	  items += protected_type_body_declarative_item240
            		    	}

            		    }
            		case _ => loop113=false
            	    }
            	} while (loop113);

            	`match`(input,END,FOLLOW_END_in_protected_type_body5621); if (state.failed) return protectedTypeBody;
            	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_protected_type_body5623); if (state.failed) return protectedTypeBody;
            	`match`(input,BODY,FOLLOW_BODY_in_protected_type_body5625); if (state.failed) return protectedTypeBody;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1022:22: ( identifier )?
            	var alt114 :Int=2
            	val LA114_0:Int = input.LA(1)

            	if ( ((LA114_0>=BASIC_IDENTIFIER && LA114_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt114=1
            	}
            	alt114 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1022:22: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_protected_type_body5627)
            	        	identifier241=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return protectedTypeBody;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  protectedTypeBody=new ProtectedTypeBodyDeclaration(pos,id,items.toList,identifier241)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, protected_type_body_StartIndex) }
        }
        return protectedTypeBody
    }
    // $ANTLR end "protected_type_body"

    // $ANTLR start "protected_type_body_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1026:1: protected_type_body_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    def protected_type_body_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val protected_type_body_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body242:DeclarativeItem = null

        var type_declaration243:AbstractTypeDeclaration = null

        var subtype_declaration244:SubTypeDeclaration = null

        var constant_declaration245:ConstantDeclaration = null

        var variable_declaration246:VariableDeclaration = null

        var file_declaration247:FileDeclaration = null

        var alias_declaration248:AliasDeclaration = null

        var attribute_declaration249:AttributeDeclaration = null

        var attribute_specification250:AttributeSpecification = null

        var use_clause251:UseClause = null

        var group_template_declaration252:GroupTemplateDeclaration = null

        var group_declaration253:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1027:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            var alt115 :Int=12
             alt115 = dfa115.predict(input)
            alt115 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1027:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_protected_type_body_declarative_item5650)
                    	subprogram_declartion_or_body242=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body242
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1031:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_protected_type_body_declarative_item5662)
                    	type_declaration243=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration243
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1032:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_protected_type_body_declarative_item5670)
                    	subtype_declaration244=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration244
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1033:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_protected_type_body_declarative_item5678)
                    	constant_declaration245=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration245
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1034:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_protected_type_body_declarative_item5686)
                    	variable_declaration246=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration246
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1035:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_protected_type_body_declarative_item5693)
                    	file_declaration247=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration247
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1036:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_protected_type_body_declarative_item5701)
                    	alias_declaration248=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration248
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1037:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_protected_type_body_declarative_item5709)
                    	attribute_declaration249=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration249
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1038:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_protected_type_body_declarative_item5717)
                    	attribute_specification250=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification250
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1039:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_protected_type_body_declarative_item5725)
                    	use_clause251=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause251
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1040:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_protected_type_body_declarative_item5733)
                    	group_template_declaration252=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration252
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1041:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_protected_type_body_declarative_item5741)
                    	group_declaration253=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration253
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, protected_type_body_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "protected_type_body_declarative_item"

    // $ANTLR start "subtype_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1044:1: subtype_declaration returns [SubTypeDeclaration subTypeDecl] : SUBTYPE identifier IS subtype_indication SEMICOLON ;
    @throws(classOf[RecognitionException])
    def subtype_declaration():SubTypeDeclaration = {
         var subTypeDecl :SubTypeDeclaration = null;val subtype_declaration_StartIndex:Int = input.index()
        var SUBTYPE254 :Token=null
        var identifier255:Identifier = null

        var subtype_indication256:SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return subTypeDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1045:2: ( SUBTYPE identifier IS subtype_indication SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1045:4: SUBTYPE identifier IS subtype_indication SEMICOLON
            {
            	SUBTYPE254=`match`(input,SUBTYPE,FOLLOW_SUBTYPE_in_subtype_declaration5761).asInstanceOf[Token]; if (state.failed) return subTypeDecl;
            	pushFollow(FOLLOW_identifier_in_subtype_declaration5763)
            	identifier255=identifier();

            	state._fsp-=1
            	if (state.failed) return subTypeDecl;
            	`match`(input,IS,FOLLOW_IS_in_subtype_declaration5765); if (state.failed) return subTypeDecl;
            	pushFollow(FOLLOW_subtype_indication_in_subtype_declaration5767)
            	subtype_indication256=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return subTypeDecl;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration5769); if (state.failed) return subTypeDecl;
            	if ( state.backtracking==0 ) {
            	  subTypeDecl=new SubTypeDeclaration(toPosition(SUBTYPE254),identifier255,subtype_indication256)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, subtype_declaration_StartIndex) }
        }
        return subTypeDecl
    }
    // $ANTLR end "subtype_declaration"

    // $ANTLR start "subtype_indication"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1049:1: subtype_indication returns [SubTypeIndication subType] : n1= selected_name (n2= selected_name )? ( constraint )? ;
    @throws(classOf[RecognitionException])
    def subtype_indication():SubTypeIndication = {
         var subType :SubTypeIndication = null;val subtype_indication_StartIndex:Int = input.index()
        var n1:SelectedName = null

        var n2:SelectedName = null

        var constraint257:Either[Range,Seq[DiscreteRange]] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return subType }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:2: (n1= selected_name (n2= selected_name )? ( constraint )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:4: n1= selected_name (n2= selected_name )? ( constraint )?
            {
            	pushFollow(FOLLOW_selected_name_in_subtype_indication5793)
            	n1=selected_name();

            	state._fsp-=1
            	if (state.failed) return subType;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:23: (n2= selected_name )?
            	var alt116 :Int=2
            	val LA116_0:Int = input.LA(1)

            	if ( (LA116_0==STRING_LITERAL||(LA116_0>=BASIC_IDENTIFIER && LA116_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt116=1
            	}
            	alt116 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:23: n2= selected_name
            	        {
            	        	pushFollow(FOLLOW_selected_name_in_subtype_indication5797)
            	        	n2=selected_name();

            	        	state._fsp-=1
            	        	if (state.failed) return subType;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:39: ( constraint )?
            	var alt117 :Int=2
            	val LA117_0:Int = input.LA(1)

            	if ( (LA117_0==RANGE||LA117_0==LPAREN) ) {
            	    alt117=1
            	}
            	alt117 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1050:39: constraint
            	        {
            	        	pushFollow(FOLLOW_constraint_in_subtype_indication5800)
            	        	constraint257=constraint();

            	        	state._fsp-=1
            	        	if (state.failed) return subType;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {

            	  			subType=if (n2!=null) new SubTypeIndication(n1,n2,constraint257)
            	  				else new SubTypeIndication(None,n1,constraint257)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, subtype_indication_StartIndex) }
        }
        return subType
    }
    // $ANTLR end "subtype_indication"

    // $ANTLR start "direction"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1058:1: direction returns [Range.Direction.Value rangeDirection] : ( TO | DOWNTO );
    @throws(classOf[RecognitionException])
    def direction():Range.Direction.Value = {
         var rangeDirection :Range.Direction.Value = null;val direction_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return rangeDirection }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1059:2: ( TO | DOWNTO )
            var alt118 :Int=2
            val LA118_0:Int = input.LA(1)

            if ( (LA118_0==TO) ) {
                alt118=1
            }
            else if ( (LA118_0==DOWNTO) ) {
                alt118=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return rangeDirection}
                val nvae = new NoViableAltException("", 118, 0, input)

                throw nvae
            }
            alt118 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1059:4: TO
                    {
                    	`match`(input,TO,FOLLOW_TO_in_direction5825); if (state.failed) return rangeDirection;
                    	if ( state.backtracking==0 ) {
                    	  rangeDirection=Range.Direction.To
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1060:4: DOWNTO
                    {
                    	`match`(input,DOWNTO,FOLLOW_DOWNTO_in_direction5832); if (state.failed) return rangeDirection;
                    	if ( state.backtracking==0 ) {
                    	  rangeDirection=Range.Direction.Downto
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, direction_StartIndex) }
        }
        return rangeDirection
    }
    // $ANTLR end "direction"

    // $ANTLR start "range_constraint"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1063:1: range_constraint returns [Range rangeContraint] : RANGE range ;
    @throws(classOf[RecognitionException])
    def range_constraint():Range = {
         var rangeContraint :Range = null;val range_constraint_StartIndex:Int = input.index()
        var range258:Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return rangeContraint }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1064:2: ( RANGE range )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1064:4: RANGE range
            {
            	`match`(input,RANGE,FOLLOW_RANGE_in_range_constraint5850); if (state.failed) return rangeContraint;
            	pushFollow(FOLLOW_range_in_range_constraint5852)
            	range258=range();

            	state._fsp-=1
            	if (state.failed) return rangeContraint;
            	if ( state.backtracking==0 ) {
            	  rangeContraint=range258
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, range_constraint_StartIndex) }
        }
        return rangeContraint
    }
    // $ANTLR end "range_constraint"

    // $ANTLR start "index_constraint"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1067:1: index_constraint returns [Seq[DiscreteRange] ranges] : LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN ;
    @throws(classOf[RecognitionException])
    def index_constraint():Seq[DiscreteRange] = {
         var ranges :Seq[DiscreteRange] = null;val index_constraint_StartIndex:Int = input.index()
        var d1:DiscreteRange = null

        var d2:DiscreteRange = null



        	val list=new Buffer[DiscreteRange]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return ranges }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1071:2: ( LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1071:4: LPAREN d1= discrete_range ( COMMA d2= discrete_range )* RPAREN
            {
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_index_constraint5874); if (state.failed) return ranges;
            	pushFollow(FOLLOW_discrete_range_in_index_constraint5878)
            	d1=discrete_range();

            	state._fsp-=1
            	if (state.failed) return ranges;
            	if ( state.backtracking==0 ) {
            	  list += d1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1071:41: ( COMMA d2= discrete_range )*
            	var loop119=true
            	do {
            	    var alt119:Int=2
            	    val LA119_0:Int = input.LA(1)

            	    if ( (LA119_0==COMMA) ) {
            	        alt119=1
            	    }


            	    alt119 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1071:42: COMMA d2= discrete_range
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_index_constraint5882); if (state.failed) return ranges;
            		    	pushFollow(FOLLOW_discrete_range_in_index_constraint5887)
            		    	d2=discrete_range();

            		    	state._fsp-=1
            		    	if (state.failed) return ranges;
            		    	if ( state.backtracking==0 ) {
            		    	  list += d2
            		    	}

            		    }
            		case _ => loop119=false
            	    }
            	} while (loop119);

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_index_constraint5893); if (state.failed) return ranges;
            	if ( state.backtracking==0 ) {
            	  ranges = list.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, index_constraint_StartIndex) }
        }
        return ranges
    }
    // $ANTLR end "index_constraint"

    // $ANTLR start "range"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1075:1: range returns [Range range_] : ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name ) ;
    @throws(classOf[RecognitionException])
    def range():Range = {
         var range_ :Range = null;val range_StartIndex:Int = input.index()
        var from:Expression = null

        var to:Expression = null

        var direction259:Range.Direction.Value = null

        var name260:Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return range_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1076:2: ( ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1076:4: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1076:4: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )
            	var alt120 :Int=2
            	 alt120 = dfa120.predict(input)
            	alt120 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1077:3: ( simple_expression direction )=>from= simple_expression direction to= simple_expression
            	        {
            	        	pushFollow(FOLLOW_simple_expression_in_range5928)
            	        	from=simple_expression();

            	        	state._fsp-=1
            	        	if (state.failed) return range_;
            	        	pushFollow(FOLLOW_direction_in_range5930)
            	        	direction259=direction();

            	        	state._fsp-=1
            	        	if (state.failed) return range_;
            	        	pushFollow(FOLLOW_simple_expression_in_range5934)
            	        	to=simple_expression();

            	        	state._fsp-=1
            	        	if (state.failed) return range_;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1078:5: name
            	        {
            	        	pushFollow(FOLLOW_name_in_range5941)
            	        	name260=name();

            	        	state._fsp-=1
            	        	if (state.failed) return range_;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  range_ =new Range(from,direction259,to,name260)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, range_StartIndex) }
        }
        return range_
    }
    // $ANTLR end "range"

    // $ANTLR start "constraint"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1083:1: constraint returns [Either[Range,Seq[DiscreteRange]] constraint_] : ( range_constraint | index_constraint );
    @throws(classOf[RecognitionException])
    def constraint():Either[Range,Seq[DiscreteRange]] = {
         var constraint_ :Either[Range,Seq[DiscreteRange]] = null;val constraint_StartIndex:Int = input.index()
        var range_constraint261:Range = null

        var index_constraint262:Seq[DiscreteRange] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return constraint_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1084:2: ( range_constraint | index_constraint )
            var alt121 :Int=2
            val LA121_0:Int = input.LA(1)

            if ( (LA121_0==RANGE) ) {
                alt121=1
            }
            else if ( (LA121_0==LPAREN) ) {
                alt121=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return constraint_}
                val nvae = new NoViableAltException("", 121, 0, input)

                throw nvae
            }
            alt121 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1084:4: range_constraint
                    {
                    	pushFollow(FOLLOW_range_constraint_in_constraint5965)
                    	range_constraint261=range_constraint();

                    	state._fsp-=1
                    	if (state.failed) return constraint_;
                    	if ( state.backtracking==0 ) {
                    	  constraint_ =Left(range_constraint261)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1085:5: index_constraint
                    {
                    	pushFollow(FOLLOW_index_constraint_in_constraint5973)
                    	index_constraint262=index_constraint();

                    	state._fsp-=1
                    	if (state.failed) return constraint_;
                    	if ( state.backtracking==0 ) {
                    	  constraint_ =Right(index_constraint262)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, constraint_StartIndex) }
        }
        return constraint_
    }
    // $ANTLR end "constraint"

    // $ANTLR start "discrete_range"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1095:1: discrete_range returns [DiscreteRange discreteRange] : ( ( selected_name RANGE )=>discrete_subtype_indication= subtype_indication | range );
    @throws(classOf[RecognitionException])
    def discrete_range():DiscreteRange = {
         var discreteRange :DiscreteRange = null;val discrete_range_StartIndex:Int = input.index()
        var discrete_subtype_indication:SubTypeIndication = null

        var range263:Range = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return discreteRange }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1096:2: ( ( selected_name RANGE )=>discrete_subtype_indication= subtype_indication | range )
            var alt122 :Int=2
            input.LA(1) match {
            case BASIC_IDENTIFIER => {
                 val LA122_1:Int = input.LA(2)

                 if ( (synpred11_VHDL()) ) {
                     alt122=1
                 }
                 else if ( (true) ) {
                     alt122=2
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return discreteRange}
                     val nvae = new NoViableAltException("", 122, 1, input)

                     throw nvae
                 }
            }

            case EXTENDED_IDENTIFIER => {
                 val LA122_2:Int = input.LA(2)

                 if ( (synpred11_VHDL()) ) {
                     alt122=1
                 }
                 else if ( (true) ) {
                     alt122=2
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return discreteRange}
                     val nvae = new NoViableAltException("", 122, 2, input)

                     throw nvae
                 }
            }

            case STRING_LITERAL => {
                 val LA122_3:Int = input.LA(2)

                 if ( (synpred11_VHDL()) ) {
                     alt122=1
                 }
                 else if ( (true) ) {
                     alt122=2
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return discreteRange}
                     val nvae = new NoViableAltException("", 122, 3, input)

                     throw nvae
                 }
            }

            case ABS | NEW | NOT | NULL | LPAREN | PLUS | MINUS | CHARACTER_LITERAL | REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | BIT_STRING_LITERAL => {
                 alt122=2
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return discreteRange}
                val nvae = new NoViableAltException("", 122, 0, input)

                throw nvae
            }

            alt122 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1097:3: ( selected_name RANGE )=>discrete_subtype_indication= subtype_indication
                    {
                    	pushFollow(FOLLOW_subtype_indication_in_discrete_range6007)
                    	discrete_subtype_indication=subtype_indication();

                    	state._fsp-=1
                    	if (state.failed) return discreteRange;
                    	if ( state.backtracking==0 ) {
                    	  discreteRange=new DiscreteRange(Right(discrete_subtype_indication))
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1098:5: range
                    {
                    	pushFollow(FOLLOW_range_in_discrete_range6015)
                    	range263=range();

                    	state._fsp-=1
                    	if (state.failed) return discreteRange;
                    	if ( state.backtracking==0 ) {
                    	  discreteRange=new DiscreteRange(Left(range263))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, discrete_range_StartIndex) }
        }
        return discreteRange
    }
    // $ANTLR end "discrete_range"

    // $ANTLR start "type_mark"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1101:1: type_mark returns [SelectedName typeName] : selected_name ;
    @throws(classOf[RecognitionException])
    def type_mark():SelectedName = {
         var typeName :SelectedName = null;val type_mark_StartIndex:Int = input.index()
        var selected_name264:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return typeName }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1102:2: ( selected_name )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1102:4: selected_name
            {
            	pushFollow(FOLLOW_selected_name_in_type_mark6035)
            	selected_name264=selected_name();

            	state._fsp-=1
            	if (state.failed) return typeName;
            	if ( state.backtracking==0 ) {
            	  typeName=selected_name264
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, type_mark_StartIndex) }
        }
        return typeName
    }
    // $ANTLR end "type_mark"

    // $ANTLR start "architecture_statement_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1107:1: architecture_statement_list returns [Seq[ConcurrentStatement] list] : ( architecture_statement )* ;
    @throws(classOf[RecognitionException])
    def architecture_statement_list():Seq[ConcurrentStatement] = {
         var list :Seq[ConcurrentStatement] = null;val architecture_statement_list_StartIndex:Int = input.index()
        var architecture_statement265:ConcurrentStatement = null



        	val statementList=new Buffer[ConcurrentStatement]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1112:2: ( ( architecture_statement )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1112:4: ( architecture_statement )*
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1112:4: ( architecture_statement )*
            	var loop123=true
            	do {
            	    var alt123:Int=2
            	    val LA123_0:Int = input.LA(1)

            	    if ( (LA123_0==ASSERT||LA123_0==POSTPONED||LA123_0==PROCESS||LA123_0==WITH||LA123_0==LPAREN||LA123_0==STRING_LITERAL||(LA123_0>=BASIC_IDENTIFIER && LA123_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt123=1
            	    }
            	    else if ( (LA123_0==BREAK) && ((ams))) {
            	        alt123=1
            	    }


            	    alt123 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1112:5: architecture_statement
            		    {
            		    	pushFollow(FOLLOW_architecture_statement_in_architecture_statement_list6062)
            		    	architecture_statement265=architecture_statement();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  statementList += architecture_statement265
            		    	}

            		    }
            		case _ => loop123=false
            	    }
            	} while (loop123);

            	if ( state.backtracking==0 ) {
            	  list=statementList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, architecture_statement_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "architecture_statement_list"

    // $ANTLR start "architecture_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1116:1: architecture_statement returns [ConcurrentStatement stmt] : (label= label_colon ( ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label] | architecture_statement_optional_label[$label.label] ) | architecture_statement_optional_label[$label.label] );
    @throws(classOf[RecognitionException])
    def architecture_statement():ConcurrentStatement = {
         var stmt :ConcurrentStatement = null;val architecture_statement_StartIndex:Int = input.index()
        var label:Identifier = null

        var architecture_statement_with_label266:ConcurrentStatement = null

        var architecture_statement_optional_label267:ConcurrentStatement = null

        var architecture_statement_optional_label268:ConcurrentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1117:2: (label= label_colon ( ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label] | architecture_statement_optional_label[$label.label] ) | architecture_statement_optional_label[$label.label] )
            var alt125 :Int=2
            val LA125_0:Int = input.LA(1)

            if ( (LA125_0==BASIC_IDENTIFIER) ) {
                val LA125_1:Int = input.LA(2)

                if ( (LA125_1==LEQ||LA125_1==SEMICOLON||LA125_1==LPAREN||LA125_1==LBRACKET||LA125_1==DOT||LA125_1==APOSTROPHE) ) {
                    alt125=2
                }
                else if ( (LA125_1==COLON) ) {
                    alt125=1
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return stmt}
                    val nvae = new NoViableAltException("", 125, 1, input)

                    throw nvae
                }
            }
            else if ( (LA125_0==EXTENDED_IDENTIFIER) ) {
                val LA125_2:Int = input.LA(2)

                if ( (LA125_2==LEQ||LA125_2==SEMICOLON||LA125_2==LPAREN||LA125_2==LBRACKET||LA125_2==DOT||LA125_2==APOSTROPHE) ) {
                    alt125=2
                }
                else if ( (LA125_2==COLON) ) {
                    alt125=1
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return stmt}
                    val nvae = new NoViableAltException("", 125, 2, input)

                    throw nvae
                }
            }
            else if ( (LA125_0==ASSERT||LA125_0==POSTPONED||LA125_0==PROCESS||LA125_0==WITH||LA125_0==LPAREN||LA125_0==STRING_LITERAL) ) {
                alt125=2
            }
            else if ( (LA125_0==BREAK) && ((ams))) {
                alt125=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 125, 0, input)

                throw nvae
            }
            alt125 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1117:6: label= label_colon ( ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label] | architecture_statement_optional_label[$label.label] )
                    {
                    	pushFollow(FOLLOW_label_colon_in_architecture_statement6091)
                    	label=label_colon();

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1117:24: ( ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label] | architecture_statement_optional_label[$label.label] )
                    	var alt124 :Int=2
                    	 alt124 = dfa124.predict(input)
                    	alt124 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1118:4: ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label]
                    	        {
                    	        	pushFollow(FOLLOW_architecture_statement_with_label_in_architecture_statement6103)
                    	        	architecture_statement_with_label266=architecture_statement_with_label(label);

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt;
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=architecture_statement_with_label266
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1119:5: architecture_statement_optional_label[$label.label]
                    	        {
                    	        	pushFollow(FOLLOW_architecture_statement_optional_label_in_architecture_statement6112)
                    	        	architecture_statement_optional_label267=architecture_statement_optional_label(label);

                    	        	state._fsp-=1
                    	        	if (state.failed) return stmt;
                    	        	if ( state.backtracking==0 ) {
                    	        	  stmt=architecture_statement_optional_label267
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1121:5: architecture_statement_optional_label[$label.label]
                    {
                    	pushFollow(FOLLOW_architecture_statement_optional_label_in_architecture_statement6126)
                    	architecture_statement_optional_label268=architecture_statement_optional_label(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=architecture_statement_optional_label268
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, architecture_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "architecture_statement"

    // $ANTLR start "architecture_statement_with_label"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1124:1: architecture_statement_with_label[Identifier label] returns [ConcurrentStatement stmt] : ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] );
    @throws(classOf[RecognitionException])
    def architecture_statement_with_label(label:Identifier):ConcurrentStatement = {
         var stmt :ConcurrentStatement = null;val architecture_statement_with_label_StartIndex:Int = input.index()
        var component_instantiation_statement269:ComponentInstantiationStatement = null

        var block_statement270:BlockStatement = null

        var generate_statement271:ConcurrentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1125:2: ( component_instantiation_statement[$label] | block_statement[$label] | generate_statement[$label] )
            var alt126 :Int=3
            input.LA(1) match {
            case COMPONENT | CONFIGURATION | ENTITY | STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt126=1
            }

            case BLOCK => {
                 alt126=2
            }

            case FOR | IF => {
                 alt126=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 126, 0, input)

                throw nvae
            }

            alt126 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1125:4: component_instantiation_statement[$label]
                    {
                    	pushFollow(FOLLOW_component_instantiation_statement_in_architecture_statement_with_label6146)
                    	component_instantiation_statement269=component_instantiation_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=component_instantiation_statement269
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1126:5: block_statement[$label]
                    {
                    	pushFollow(FOLLOW_block_statement_in_architecture_statement_with_label6155)
                    	block_statement270=block_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=block_statement270
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1127:5: generate_statement[$label]
                    {
                    	pushFollow(FOLLOW_generate_statement_in_architecture_statement_with_label6164)
                    	generate_statement271=generate_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=generate_statement271
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, architecture_statement_with_label_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "architecture_statement_with_label"

    // $ANTLR start "architecture_statement_optional_label"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1130:1: architecture_statement_optional_label[Identifier label] returns [ConcurrentStatement stmt] : ( ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) ) | {...}? => ( ams_concurrent_break_statement[$label] ) );
    @throws(classOf[RecognitionException])
    def architecture_statement_optional_label(label:Identifier):ConcurrentStatement = {
         var stmt :ConcurrentStatement = null;val architecture_statement_optional_label_StartIndex:Int = input.index()
        var postponed :Token=null
        var process_statement272:ProcessStatement = null

        var concurrent_assertion_statement273:ConcurrentAssertionStatement = null

        var concurrent_signal_assignment_statement274:ConcurrentSignalAssignmentStatement = null

        var concurrent_procedure_call_statement275:ConcurrentProcedureCallStatement = null

        var ams_concurrent_break_statement276:ConcurrentBreakStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1131:2: ( ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) ) | {...}? => ( ams_concurrent_break_statement[$label] ) )
            var alt129 :Int=2
            val LA129_0:Int = input.LA(1)

            if ( (LA129_0==ASSERT||LA129_0==POSTPONED||LA129_0==PROCESS||LA129_0==WITH||LA129_0==LPAREN||LA129_0==STRING_LITERAL||(LA129_0>=BASIC_IDENTIFIER && LA129_0<=EXTENDED_IDENTIFIER)) ) {
                alt129=1
            }
            else if ( (LA129_0==BREAK) && ((ams))) {
                alt129=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 129, 0, input)

                throw nvae
            }
            alt129 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:3: ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) )
                    {
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:3: ( (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] ) )
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:4: (postponed= POSTPONED )? ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
                    	{
                    		// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:13: (postponed= POSTPONED )?
                    		var alt127 :Int=2
                    		val LA127_0:Int = input.LA(1)

                    		if ( (LA127_0==POSTPONED) ) {
                    		    alt127=1
                    		}
                    		alt127 match {
                    		    case 1 =>
                    		        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:13: postponed= POSTPONED
                    		        {
                    		        	postponed=`match`(input,POSTPONED,FOLLOW_POSTPONED_in_architecture_statement_optional_label6194).asInstanceOf[Token]; if (state.failed) return stmt;

                    		        }
                    		    case _ => 
                    		}

                    		// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:25: ( process_statement[$label,postponed!=null] | concurrent_assertion_statement[$label,postponed!=null] | ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null] | concurrent_procedure_call_statement[$label,postponed!=null] )
                    		var alt128 :Int=4
                    		val LA128_0:Int = input.LA(1)

                    		if ( (LA128_0==PROCESS) ) {
                    		    alt128=1
                    		}
                    		else if ( (LA128_0==ASSERT) ) {
                    		    alt128=2
                    		}
                    		else if ( (LA128_0==BASIC_IDENTIFIER) ) {
                    		    val LA128_3:Int = input.LA(2)

                    		    if ( (synpred13_VHDL()) ) {
                    		        alt128=3
                    		    }
                    		    else if ( (true) ) {
                    		        alt128=4
                    		    }
                    		    else {
                    		        if (state.backtracking>0) {state.failed=true; return stmt}
                    		        val nvae = new NoViableAltException("", 128, 3, input)

                    		        throw nvae
                    		    }
                    		}
                    		else if ( (LA128_0==EXTENDED_IDENTIFIER) ) {
                    		    val LA128_4:Int = input.LA(2)

                    		    if ( (synpred13_VHDL()) ) {
                    		        alt128=3
                    		    }
                    		    else if ( (true) ) {
                    		        alt128=4
                    		    }
                    		    else {
                    		        if (state.backtracking>0) {state.failed=true; return stmt}
                    		        val nvae = new NoViableAltException("", 128, 4, input)

                    		        throw nvae
                    		    }
                    		}
                    		else if ( (LA128_0==STRING_LITERAL) ) {
                    		    val LA128_5:Int = input.LA(2)

                    		    if ( (synpred13_VHDL()) ) {
                    		        alt128=3
                    		    }
                    		    else if ( (true) ) {
                    		        alt128=4
                    		    }
                    		    else {
                    		        if (state.backtracking>0) {state.failed=true; return stmt}
                    		        val nvae = new NoViableAltException("", 128, 5, input)

                    		        throw nvae
                    		    }
                    		}
                    		else if ( (LA128_0==LPAREN) && (synpred13_VHDL())) {
                    		    alt128=3
                    		}
                    		else if ( (LA128_0==WITH) && (synpred13_VHDL())) {
                    		    alt128=3
                    		}
                    		else {
                    		    if (state.backtracking>0) {state.failed=true; return stmt}
                    		    val nvae = new NoViableAltException("", 128, 0, input)

                    		    throw nvae
                    		}
                    		alt128 match {
                    		    case 1 =>
                    		        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1132:26: process_statement[$label,postponed!=null]
                    		        {
                    		        	pushFollow(FOLLOW_process_statement_in_architecture_statement_optional_label6198)
                    		        	process_statement272=process_statement(label, postponed!=null);

                    		        	state._fsp-=1
                    		        	if (state.failed) return stmt;
                    		        	if ( state.backtracking==0 ) {
                    		        	  stmt=process_statement272
                    		        	}

                    		        }case 2 =>
                    		        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1133:5: concurrent_assertion_statement[$label,postponed!=null]
                    		        {
                    		        	pushFollow(FOLLOW_concurrent_assertion_statement_in_architecture_statement_optional_label6207)
                    		        	concurrent_assertion_statement273=concurrent_assertion_statement(label, postponed!=null);

                    		        	state._fsp-=1
                    		        	if (state.failed) return stmt;
                    		        	if ( state.backtracking==0 ) {
                    		        	  stmt=concurrent_assertion_statement273
                    		        	}

                    		        }case 3 =>
                    		        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1134:5: ( target LEQ | WITH )=> concurrent_signal_assignment_statement[$label,postponed!=null]
                    		        {
                    		        	pushFollow(FOLLOW_concurrent_signal_assignment_statement_in_architecture_statement_optional_label6226)
                    		        	concurrent_signal_assignment_statement274=concurrent_signal_assignment_statement(label, postponed!=null);

                    		        	state._fsp-=1
                    		        	if (state.failed) return stmt;
                    		        	if ( state.backtracking==0 ) {
                    		        	  stmt=concurrent_signal_assignment_statement274
                    		        	}

                    		        }case 4 =>
                    		        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1135:5: concurrent_procedure_call_statement[$label,postponed!=null]
                    		        {
                    		        	pushFollow(FOLLOW_concurrent_procedure_call_statement_in_architecture_statement_optional_label6235)
                    		        	concurrent_procedure_call_statement275=concurrent_procedure_call_statement(label, postponed!=null);

                    		        	state._fsp-=1
                    		        	if (state.failed) return stmt;
                    		        	if ( state.backtracking==0 ) {
                    		        	  stmt=concurrent_procedure_call_statement275
                    		        	}

                    		        }
                    		    case _ => 
                    		}


                    	}


                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1138:5: {...}? => ( ams_concurrent_break_statement[$label] )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return stmt}
                    	    throw new FailedPredicateException(input, "architecture_statement_optional_label", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1138:13: ( ams_concurrent_break_statement[$label] )
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1138:14: ams_concurrent_break_statement[$label]
                    	{
                    		pushFollow(FOLLOW_ams_concurrent_break_statement_in_architecture_statement_optional_label6256)
                    		ams_concurrent_break_statement276=ams_concurrent_break_statement(label);

                    		state._fsp-=1
                    		if (state.failed) return stmt;
                    		if ( state.backtracking==0 ) {
                    		  stmt=ams_concurrent_break_statement276
                    		}

                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, architecture_statement_optional_label_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "architecture_statement_optional_label"

    // $ANTLR start "generic_map_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1144:1: generic_map_aspect returns [AssociationList list] : GENERIC MAP LPAREN association_list RPAREN ;
    @throws(classOf[RecognitionException])
    def generic_map_aspect():AssociationList = {
         var list :AssociationList = null;val generic_map_aspect_StartIndex:Int = input.index()
        var association_list277:AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1145:2: ( GENERIC MAP LPAREN association_list RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1145:4: GENERIC MAP LPAREN association_list RPAREN
            {
            	`match`(input,GENERIC,FOLLOW_GENERIC_in_generic_map_aspect6294); if (state.failed) return list;
            	`match`(input,MAP,FOLLOW_MAP_in_generic_map_aspect6296); if (state.failed) return list;
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_generic_map_aspect6298); if (state.failed) return list;
            	pushFollow(FOLLOW_association_list_in_generic_map_aspect6300)
            	association_list277=association_list();

            	state._fsp-=1
            	if (state.failed) return list;
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_generic_map_aspect6302); if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  list=association_list277
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, generic_map_aspect_StartIndex) }
        }
        return list
    }
    // $ANTLR end "generic_map_aspect"

    // $ANTLR start "port_map_aspect"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1149:1: port_map_aspect returns [AssociationList list] : PORT MAP LPAREN association_list RPAREN ;
    @throws(classOf[RecognitionException])
    def port_map_aspect():AssociationList = {
         var list :AssociationList = null;val port_map_aspect_StartIndex:Int = input.index()
        var association_list278:AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1150:2: ( PORT MAP LPAREN association_list RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1150:4: PORT MAP LPAREN association_list RPAREN
            {
            	`match`(input,PORT,FOLLOW_PORT_in_port_map_aspect6324); if (state.failed) return list;
            	`match`(input,MAP,FOLLOW_MAP_in_port_map_aspect6326); if (state.failed) return list;
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_port_map_aspect6328); if (state.failed) return list;
            	pushFollow(FOLLOW_association_list_in_port_map_aspect6330)
            	association_list278=association_list();

            	state._fsp-=1
            	if (state.failed) return list;
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_port_map_aspect6332); if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  list=association_list278
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, port_map_aspect_StartIndex) }
        }
        return list
    }
    // $ANTLR end "port_map_aspect"

    // $ANTLR start "block_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1154:1: block_statement[Identifier label] returns [BlockStatement blockStmt] : block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN architecture_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def block_statement(label:Identifier):BlockStatement = {
         var blockStmt :BlockStatement = null;val block_statement_StartIndex:Int = input.index()
        var block :Token=null
        var guard_expression:Expression = null

        var end_block_label:Identifier = null

        var block_declarative_item279:DeclarativeItem = null

        var generic_clause280:InterfaceList = null

        var generic_map_aspect281:AssociationList = null

        var port_clause282:InterfaceList = null

        var port_map_aspect283:AssociationList = null

        var architecture_statement_list284:Seq[ConcurrentStatement] = null



        	val declItems=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return blockStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:2: (block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN architecture_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:4: block= BLOCK ( LPAREN guard_expression= expression RPAREN )? ( IS )? ( generic_clause ( generic_map_aspect SEMICOLON )? )? ( port_clause ( port_map_aspect SEMICOLON )? )? ( block_declarative_item )* BEGIN architecture_statement_list END BLOCK (end_block_label= identifier )? SEMICOLON
            {
            	block=`match`(input,BLOCK,FOLLOW_BLOCK_in_block_statement6364).asInstanceOf[Token]; if (state.failed) return blockStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:16: ( LPAREN guard_expression= expression RPAREN )?
            	var alt130 :Int=2
            	val LA130_0:Int = input.LA(1)

            	if ( (LA130_0==LPAREN) ) {
            	    alt130=1
            	}
            	alt130 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:17: LPAREN guard_expression= expression RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_block_statement6367); if (state.failed) return blockStmt;
            	        	pushFollow(FOLLOW_expression_in_block_statement6371)
            	        	guard_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_block_statement6373); if (state.failed) return blockStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:61: ( IS )?
            	var alt131 :Int=2
            	val LA131_0:Int = input.LA(1)

            	if ( (LA131_0==IS) ) {
            	    alt131=1
            	}
            	alt131 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1158:61: IS
            	        {
            	        	`match`(input,IS,FOLLOW_IS_in_block_statement6377); if (state.failed) return blockStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1159:4: ( generic_clause ( generic_map_aspect SEMICOLON )? )?
            	var alt133 :Int=2
            	val LA133_0:Int = input.LA(1)

            	if ( (LA133_0==GENERIC) ) {
            	    alt133=1
            	}
            	alt133 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1159:5: generic_clause ( generic_map_aspect SEMICOLON )?
            	        {
            	        	pushFollow(FOLLOW_generic_clause_in_block_statement6384)
            	        	generic_clause280=generic_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt;
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1159:20: ( generic_map_aspect SEMICOLON )?
            	        	var alt132 :Int=2
            	        	val LA132_0:Int = input.LA(1)

            	        	if ( (LA132_0==GENERIC) ) {
            	        	    alt132=1
            	        	}
            	        	alt132 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1159:21: generic_map_aspect SEMICOLON
            	        	        {
            	        	        	pushFollow(FOLLOW_generic_map_aspect_in_block_statement6387)
            	        	        	generic_map_aspect281=generic_map_aspect();

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return blockStmt;
            	        	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement6389); if (state.failed) return blockStmt;

            	        	        }
            	        	    case _ => 
            	        	}


            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1160:4: ( port_clause ( port_map_aspect SEMICOLON )? )?
            	var alt135 :Int=2
            	val LA135_0:Int = input.LA(1)

            	if ( (LA135_0==PORT) ) {
            	    alt135=1
            	}
            	alt135 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1160:5: port_clause ( port_map_aspect SEMICOLON )?
            	        {
            	        	pushFollow(FOLLOW_port_clause_in_block_statement6399)
            	        	port_clause282=port_clause();

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt;
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1160:17: ( port_map_aspect SEMICOLON )?
            	        	var alt134 :Int=2
            	        	val LA134_0:Int = input.LA(1)

            	        	if ( (LA134_0==PORT) ) {
            	        	    alt134=1
            	        	}
            	        	alt134 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1160:18: port_map_aspect SEMICOLON
            	        	        {
            	        	        	pushFollow(FOLLOW_port_map_aspect_in_block_statement6402)
            	        	        	port_map_aspect283=port_map_aspect();

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return blockStmt;
            	        	        	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement6404); if (state.failed) return blockStmt;

            	        	        }
            	        	    case _ => 
            	        	}


            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1161:4: ( block_declarative_item )*
            	var loop136=true
            	do {
            	    var alt136:Int=2
            	    val LA136_0:Int = input.LA(1)

            	    if ( (LA136_0==ALIAS||LA136_0==ATTRIBUTE||LA136_0==COMPONENT||(LA136_0>=CONSTANT && LA136_0<=DISCONNECT)||(LA136_0>=FILE && LA136_0<=FUNCTION)||LA136_0==GROUP||LA136_0==IMPURE||LA136_0==PROCEDURE||LA136_0==PURE||(LA136_0>=SHARED && LA136_0<=SIGNAL)||LA136_0==SUBTYPE||LA136_0==TYPE||(LA136_0>=USE && LA136_0<=VARIABLE)) ) {
            	        alt136=1
            	    }
            	    else if ( ((LA136_0>=NATURE && LA136_0<=QUANTITY)||(LA136_0>=SUBNATURE && LA136_0<=LIMIT)) && ((ams))) {
            	        alt136=1
            	    }


            	    alt136 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1161:5: block_declarative_item
            		    {
            		    	pushFollow(FOLLOW_block_declarative_item_in_block_statement6414)
            		    	block_declarative_item279=block_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return blockStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  declItems += block_declarative_item279
            		    	}

            		    }
            		case _ => loop136=false
            	    }
            	} while (loop136);

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_block_statement6421); if (state.failed) return blockStmt;
            	pushFollow(FOLLOW_architecture_statement_list_in_block_statement6426)
            	architecture_statement_list284=architecture_statement_list();

            	state._fsp-=1
            	if (state.failed) return blockStmt;
            	`match`(input,END,FOLLOW_END_in_block_statement6430); if (state.failed) return blockStmt;
            	`match`(input,BLOCK,FOLLOW_BLOCK_in_block_statement6432); if (state.failed) return blockStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1164:28: (end_block_label= identifier )?
            	var alt137 :Int=2
            	val LA137_0:Int = input.LA(1)

            	if ( ((LA137_0>=BASIC_IDENTIFIER && LA137_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt137=1
            	}
            	alt137 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1164:28: end_block_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_block_statement6436)
            	        	end_block_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return blockStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_statement6439); if (state.failed) return blockStmt;
            	if ( state.backtracking==0 ) {

            	  			blockStmt=new BlockStatement(toPosition(block),label,guard_expression,generic_clause280,generic_map_aspect281,port_clause282,port_map_aspect283,
            	  				declItems.toList,architecture_statement_list284,end_block_label)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, block_statement_StartIndex) }
        }
        return blockStmt
    }
    // $ANTLR end "block_statement"

    // $ANTLR start "block_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1171:1: block_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );
    @throws(classOf[RecognitionException])
    def block_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val block_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body285:DeclarativeItem = null

        var type_declaration286:AbstractTypeDeclaration = null

        var subtype_declaration287:SubTypeDeclaration = null

        var constant_declaration288:ConstantDeclaration = null

        var signal_declaration289:SignalDeclaration = null

        var variable_declaration290:VariableDeclaration = null

        var file_declaration291:FileDeclaration = null

        var alias_declaration292:AliasDeclaration = null

        var component_declaration293:ComponentDeclaration = null

        var attribute_declaration294:AttributeDeclaration = null

        var attribute_specification295:AttributeSpecification = null

        var configuration_specification296:ConfigurationSpecification = null

        var disconnection_specification297:DisconnectionSpecification = null

        var use_clause298:UseClause = null

        var group_template_declaration299:GroupTemplateDeclaration = null

        var group_declaration300:GroupDeclaration = null

        var ams_step_limit_specification301:StepLimitSpecification = null

        var ams_nature_declaration302:AbstractTypeDeclaration = null

        var ams_subnature_declaration303:SubNatureDeclaration = null

        var ams_quantity_declaration304:AbstractQuantityDeclaration = null

        var ams_terminal_declaration305:TerminalDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1172:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) )
            var alt139 :Int=17
             alt139 = dfa139.predict(input)
            alt139 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1172:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_block_declarative_item6464)
                    	subprogram_declartion_or_body285=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body285
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1176:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_block_declarative_item6476)
                    	type_declaration286=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration286
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1177:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_block_declarative_item6484)
                    	subtype_declaration287=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration287
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1178:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_block_declarative_item6492)
                    	constant_declaration288=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration288
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1179:5: signal_declaration
                    {
                    	pushFollow(FOLLOW_signal_declaration_in_block_declarative_item6500)
                    	signal_declaration289=signal_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=signal_declaration289
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1180:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_block_declarative_item6508)
                    	variable_declaration290=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration290
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1181:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_block_declarative_item6516)
                    	file_declaration291=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration291
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1182:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_block_declarative_item6524)
                    	alias_declaration292=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration292
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1183:5: component_declaration
                    {
                    	pushFollow(FOLLOW_component_declaration_in_block_declarative_item6532)
                    	component_declaration293=component_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=component_declaration293
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1184:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_block_declarative_item6540)
                    	attribute_declaration294=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration294
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1185:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_block_declarative_item6548)
                    	attribute_specification295=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification295
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1186:5: configuration_specification
                    {
                    	pushFollow(FOLLOW_configuration_specification_in_block_declarative_item6556)
                    	configuration_specification296=configuration_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=configuration_specification296
                    	}

                    }case 13 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1187:5: disconnection_specification
                    {
                    	pushFollow(FOLLOW_disconnection_specification_in_block_declarative_item6564)
                    	disconnection_specification297=disconnection_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=disconnection_specification297
                    	}

                    }case 14 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1188:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_block_declarative_item6572)
                    	use_clause298=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause298
                    	}

                    }case 15 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1189:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_block_declarative_item6580)
                    	group_template_declaration299=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration299
                    	}

                    }case 16 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1190:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_block_declarative_item6588)
                    	group_declaration300=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration300
                    	}

                    }case 17 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1193:5: {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    throw new FailedPredicateException(input, "block_declarative_item", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1193:13: ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration )
                    	var alt138 :Int=5
                    	input.LA(1) match {
                    	case LIMIT => {
                    	     alt138=1
                    	}

                    	case NATURE => {
                    	     alt138=2
                    	}

                    	case SUBNATURE => {
                    	     alt138=3
                    	}

                    	case QUANTITY => {
                    	     alt138=4
                    	}

                    	case TERMINAL => {
                    	     alt138=5
                    	}

                    	case _ =>
                    	    if (state.backtracking>0) {state.failed=true; return node}
                    	    val nvae = new NoViableAltException("", 138, 0, input)

                    	    throw nvae
                    	}

                    	alt138 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1194:3: ams_step_limit_specification
                    	        {
                    	        	pushFollow(FOLLOW_ams_step_limit_specification_in_block_declarative_item6608)
                    	        	ams_step_limit_specification301=ams_step_limit_specification();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_step_limit_specification301
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1195:5: ams_nature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_nature_declaration_in_block_declarative_item6616)
                    	        	ams_nature_declaration302=ams_nature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_nature_declaration302
                    	        	}

                    	        }case 3 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1196:5: ams_subnature_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_subnature_declaration_in_block_declarative_item6624)
                    	        	ams_subnature_declaration303=ams_subnature_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_subnature_declaration303
                    	        	}

                    	        }case 4 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1197:5: ams_quantity_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_quantity_declaration_in_block_declarative_item6632)
                    	        	ams_quantity_declaration304=ams_quantity_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_quantity_declaration304
                    	        	}

                    	        }case 5 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1198:5: ams_terminal_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_terminal_declaration_in_block_declarative_item6640)
                    	        	ams_terminal_declaration305=ams_terminal_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return node;
                    	        	if ( state.backtracking==0 ) {
                    	        	  node=ams_terminal_declaration305
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, block_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "block_declarative_item"

    // $ANTLR start "process_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1202:1: process_statement[Identifier label,Boolean postponed] returns [ProcessStatement processStmt] : process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def process_statement(label:Identifier, postponed:Boolean):ProcessStatement = {
         var processStmt :ProcessStatement = null;val process_statement_StartIndex:Int = input.index()
        var process :Token=null
        var end_process_label:Identifier = null

        var process_declarative_item306:DeclarativeItem = null

        var name_list307:Seq[Name] = null

        var sequence_of_statements308:Seq[SequentialStatement] = null



        	val declItem=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return processStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:2: (process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:4: process= PROCESS ( LPAREN name_list RPAREN )? ( IS )? ( process_declarative_item )* BEGIN sequence_of_statements END ( POSTPONED )? PROCESS (end_process_label= identifier )? SEMICOLON
            {
            	process=`match`(input,PROCESS,FOLLOW_PROCESS_in_process_statement6671).asInstanceOf[Token]; if (state.failed) return processStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:20: ( LPAREN name_list RPAREN )?
            	var alt140 :Int=2
            	val LA140_0:Int = input.LA(1)

            	if ( (LA140_0==LPAREN) ) {
            	    alt140=1
            	}
            	alt140 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:21: LPAREN name_list RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_process_statement6674); if (state.failed) return processStmt;
            	        	pushFollow(FOLLOW_name_list_in_process_statement6676)
            	        	name_list307=name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return processStmt;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_process_statement6678); if (state.failed) return processStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:47: ( IS )?
            	var alt141 :Int=2
            	val LA141_0:Int = input.LA(1)

            	if ( (LA141_0==IS) ) {
            	    alt141=1
            	}
            	alt141 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1206:47: IS
            	        {
            	        	`match`(input,IS,FOLLOW_IS_in_process_statement6682); if (state.failed) return processStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1207:4: ( process_declarative_item )*
            	var loop142=true
            	do {
            	    var alt142:Int=2
            	    val LA142_0:Int = input.LA(1)

            	    if ( (LA142_0==ALIAS||LA142_0==ATTRIBUTE||LA142_0==CONSTANT||LA142_0==FILE||LA142_0==FUNCTION||LA142_0==GROUP||LA142_0==IMPURE||LA142_0==PROCEDURE||LA142_0==PURE||LA142_0==SHARED||LA142_0==SUBTYPE||LA142_0==TYPE||(LA142_0>=USE && LA142_0<=VARIABLE)) ) {
            	        alt142=1
            	    }


            	    alt142 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1207:5: process_declarative_item
            		    {
            		    	pushFollow(FOLLOW_process_declarative_item_in_process_statement6689)
            		    	process_declarative_item306=process_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return processStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  declItem += process_declarative_item306
            		    	}

            		    }
            		case _ => loop142=false
            	    }
            	} while (loop142);

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_process_statement6697); if (state.failed) return processStmt;
            	pushFollow(FOLLOW_sequence_of_statements_in_process_statement6702)
            	sequence_of_statements308=sequence_of_statements();

            	state._fsp-=1
            	if (state.failed) return processStmt;
            	`match`(input,END,FOLLOW_END_in_process_statement6706); if (state.failed) return processStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1210:7: ( POSTPONED )?
            	var alt143 :Int=2
            	val LA143_0:Int = input.LA(1)

            	if ( (LA143_0==POSTPONED) ) {
            	    alt143=1
            	}
            	alt143 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1210:7: POSTPONED
            	        {
            	        	`match`(input,POSTPONED,FOLLOW_POSTPONED_in_process_statement6708); if (state.failed) return processStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,PROCESS,FOLLOW_PROCESS_in_process_statement6711); if (state.failed) return processStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1210:43: (end_process_label= identifier )?
            	var alt144 :Int=2
            	val LA144_0:Int = input.LA(1)

            	if ( ((LA144_0>=BASIC_IDENTIFIER && LA144_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt144=1
            	}
            	alt144 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1210:43: end_process_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_process_statement6715)
            	        	end_process_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return processStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_process_statement6718); if (state.failed) return processStmt;
            	if ( state.backtracking==0 ) {
            	  processStmt=new ProcessStatement(toPosition(process),label,postponed,name_list307,declItem.toList,sequence_of_statements308,end_process_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, process_statement_StartIndex) }
        }
        return processStmt
    }
    // $ANTLR end "process_statement"

    // $ANTLR start "process_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1214:1: process_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    def process_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val process_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body309:DeclarativeItem = null

        var type_declaration310:AbstractTypeDeclaration = null

        var subtype_declaration311:SubTypeDeclaration = null

        var constant_declaration312:ConstantDeclaration = null

        var variable_declaration313:VariableDeclaration = null

        var file_declaration314:FileDeclaration = null

        var alias_declaration315:AliasDeclaration = null

        var attribute_declaration316:AttributeDeclaration = null

        var attribute_specification317:AttributeSpecification = null

        var use_clause318:UseClause = null

        var group_template_declaration319:GroupTemplateDeclaration = null

        var group_declaration320:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1215:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            var alt145 :Int=12
             alt145 = dfa145.predict(input)
            alt145 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1215:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_process_declarative_item6743)
                    	subprogram_declartion_or_body309=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body309
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1219:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_process_declarative_item6760)
                    	type_declaration310=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration310
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1220:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_process_declarative_item6768)
                    	subtype_declaration311=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration311
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1221:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_process_declarative_item6776)
                    	constant_declaration312=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration312
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1222:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_process_declarative_item6784)
                    	variable_declaration313=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration313
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1223:5: file_declaration
                    {
                    	pushFollow(FOLLOW_file_declaration_in_process_declarative_item6792)
                    	file_declaration314=file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=file_declaration314
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1224:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_process_declarative_item6800)
                    	alias_declaration315=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration315
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1225:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_process_declarative_item6808)
                    	attribute_declaration316=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration316
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1226:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_process_declarative_item6816)
                    	attribute_specification317=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification317
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1227:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_process_declarative_item6824)
                    	use_clause318=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause318
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1228:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_process_declarative_item6832)
                    	group_template_declaration319=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration319
                    	}

                    }case 12 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1229:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_process_declarative_item6840)
                    	group_declaration320=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration320
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, process_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "process_declarative_item"

    // $ANTLR start "concurrent_procedure_call_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1232:1: concurrent_procedure_call_statement[Identifier label,Boolean postponed] returns [ConcurrentProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def concurrent_procedure_call_statement(label:Identifier, postponed:Boolean):ConcurrentProcedureCallStatement = {
         var procedureCallStmt :ConcurrentProcedureCallStatement = null;val concurrent_procedure_call_statement_StartIndex:Int = input.index()
        var procedure_name:SelectedName = null

        var association_list321:AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return procedureCallStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1233:2: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1233:4: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
            {
            	pushFollow(FOLLOW_selected_name_in_concurrent_procedure_call_statement6863)
            	procedure_name=selected_name();

            	state._fsp-=1
            	if (state.failed) return procedureCallStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1233:33: ( LPAREN association_list RPAREN )?
            	var alt146 :Int=2
            	val LA146_0:Int = input.LA(1)

            	if ( (LA146_0==LPAREN) ) {
            	    alt146=1
            	}
            	alt146 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1233:34: LPAREN association_list RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_concurrent_procedure_call_statement6866); if (state.failed) return procedureCallStmt;
            	        	pushFollow(FOLLOW_association_list_in_concurrent_procedure_call_statement6868)
            	        	association_list321=association_list();

            	        	state._fsp-=1
            	        	if (state.failed) return procedureCallStmt;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_concurrent_procedure_call_statement6870); if (state.failed) return procedureCallStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_procedure_call_statement6874); if (state.failed) return procedureCallStmt;
            	if ( state.backtracking==0 ) {
            	  procedureCallStmt=new ConcurrentProcedureCallStatement(label,postponed,procedure_name,association_list321)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, concurrent_procedure_call_statement_StartIndex) }
        }
        return procedureCallStmt
    }
    // $ANTLR end "concurrent_procedure_call_statement"

    // $ANTLR start "concurrent_assertion_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1237:1: concurrent_assertion_statement[Identifier label,Boolean postponed] returns [ConcurrentAssertionStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def concurrent_assertion_statement(label:Identifier, postponed:Boolean):ConcurrentAssertionStatement = {
         var assertStmt :ConcurrentAssertionStatement = null;val concurrent_assertion_statement_StartIndex:Int = input.index()
        var ASSERT322 :Token=null
        var report_expression:Expression = null

        var severity_expression:Expression = null

        var condition323:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return assertStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:2: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:4: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
            {
            	ASSERT322=`match`(input,ASSERT,FOLLOW_ASSERT_in_concurrent_assertion_statement6897).asInstanceOf[Token]; if (state.failed) return assertStmt;
            	pushFollow(FOLLOW_condition_in_concurrent_assertion_statement6899)
            	condition323=condition();

            	state._fsp-=1
            	if (state.failed) return assertStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:22: ( REPORT report_expression= expression )?
            	var alt147 :Int=2
            	val LA147_0:Int = input.LA(1)

            	if ( (LA147_0==REPORT) ) {
            	    alt147=1
            	}
            	alt147 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:23: REPORT report_expression= expression
            	        {
            	        	`match`(input,REPORT,FOLLOW_REPORT_in_concurrent_assertion_statement6903); if (state.failed) return assertStmt;
            	        	pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6907)
            	        	report_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:61: ( SEVERITY severity_expression= expression )?
            	var alt148 :Int=2
            	val LA148_0:Int = input.LA(1)

            	if ( (LA148_0==SEVERITY) ) {
            	    alt148=1
            	}
            	alt148 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1238:62: SEVERITY severity_expression= expression
            	        {
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_concurrent_assertion_statement6912); if (state.failed) return assertStmt;
            	        	pushFollow(FOLLOW_expression_in_concurrent_assertion_statement6916)
            	        	severity_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_concurrent_assertion_statement6920); if (state.failed) return assertStmt;
            	if ( state.backtracking==0 ) {
            	  assertStmt=new ConcurrentAssertionStatement(toPosition(ASSERT322),label,postponed,condition323,report_expression,severity_expression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, concurrent_assertion_statement_StartIndex) }
        }
        return assertStmt
    }
    // $ANTLR end "concurrent_assertion_statement"

    // $ANTLR start "concurrent_signal_assignment_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1242:1: concurrent_signal_assignment_statement[Identifier label,Boolean postponed] returns [ConcurrentSignalAssignmentStatement node] : ( conditional_signal_assignment[$label,$postponed] | selected_signal_assignment[$label,$postponed] );
    @throws(classOf[RecognitionException])
    def concurrent_signal_assignment_statement(label:Identifier, postponed:Boolean):ConcurrentSignalAssignmentStatement = {
         var node :ConcurrentSignalAssignmentStatement = null;val concurrent_signal_assignment_statement_StartIndex:Int = input.index()
        var conditional_signal_assignment324:ConcurrentConditionalSignalAssignment = null

        var selected_signal_assignment325:ConcurrentSelectedSignalAssignment = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1243:2: ( conditional_signal_assignment[$label,$postponed] | selected_signal_assignment[$label,$postponed] )
            var alt149 :Int=2
            val LA149_0:Int = input.LA(1)

            if ( (LA149_0==LPAREN||LA149_0==STRING_LITERAL||(LA149_0>=BASIC_IDENTIFIER && LA149_0<=EXTENDED_IDENTIFIER)) ) {
                alt149=1
            }
            else if ( (LA149_0==WITH) ) {
                alt149=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return node}
                val nvae = new NoViableAltException("", 149, 0, input)

                throw nvae
            }
            alt149 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1243:5: conditional_signal_assignment[$label,$postponed]
                    {
                    	pushFollow(FOLLOW_conditional_signal_assignment_in_concurrent_signal_assignment_statement6949)
                    	conditional_signal_assignment324=conditional_signal_assignment(label, postponed);

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=conditional_signal_assignment324
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1244:4: selected_signal_assignment[$label,$postponed]
                    {
                    	pushFollow(FOLLOW_selected_signal_assignment_in_concurrent_signal_assignment_statement6956)
                    	selected_signal_assignment325=selected_signal_assignment(label, postponed);

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=selected_signal_assignment325
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, concurrent_signal_assignment_statement_StartIndex) }
        }
        return node
    }
    // $ANTLR end "concurrent_signal_assignment_statement"

    // $ANTLR start "conditional_signal_assignment"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1247:2: conditional_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentConditionalSignalAssignment signalAssignment] : target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON ;
    @throws(classOf[RecognitionException])
    def conditional_signal_assignment(label:Identifier, postponed:Boolean):ConcurrentConditionalSignalAssignment = {
         var signalAssignment :ConcurrentConditionalSignalAssignment = null;val conditional_signal_assignment_StartIndex:Int = input.index()
        var LEQ326 :Token=null
        var GUARDED328 :Token=null
        var target327:Target = null

        var delay_mechanism329:DelayMechanism = null



         	val elements=new Buffer[ConcurrentConditionalSignalAssignment.When]()
         
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return signalAssignment }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:2: ( target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:4: target LEQ ( GUARDED )? ( delay_mechanism )? conditional_waveforms[elements] SEMICOLON
            {
            	pushFollow(FOLLOW_target_in_conditional_signal_assignment6984)
            	target327=target();

            	state._fsp-=1
            	if (state.failed) return signalAssignment;
            	LEQ326=`match`(input,LEQ,FOLLOW_LEQ_in_conditional_signal_assignment6986).asInstanceOf[Token]; if (state.failed) return signalAssignment;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:15: ( GUARDED )?
            	var alt150 :Int=2
            	val LA150_0:Int = input.LA(1)

            	if ( (LA150_0==GUARDED) ) {
            	    alt150=1
            	}
            	alt150 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:15: GUARDED
            	        {
            	        	GUARDED328=`match`(input,GUARDED,FOLLOW_GUARDED_in_conditional_signal_assignment6988).asInstanceOf[Token]; if (state.failed) return signalAssignment;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:24: ( delay_mechanism )?
            	var alt151 :Int=2
            	val LA151_0:Int = input.LA(1)

            	if ( (LA151_0==INERTIAL||LA151_0==REJECT||LA151_0==TRANSPORT) ) {
            	    alt151=1
            	}
            	alt151 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1251:24: delay_mechanism
            	        {
            	        	pushFollow(FOLLOW_delay_mechanism_in_conditional_signal_assignment6991)
            	        	delay_mechanism329=delay_mechanism();

            	        	state._fsp-=1
            	        	if (state.failed) return signalAssignment;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_conditional_waveforms_in_conditional_signal_assignment6999)
            	conditional_waveforms(elements);

            	state._fsp-=1
            	if (state.failed) return signalAssignment;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_conditional_signal_assignment7005); if (state.failed) return signalAssignment;
            	if ( state.backtracking==0 ) {
            	  signalAssignment=new ConcurrentConditionalSignalAssignment(toPosition(LEQ326),label,postponed,target327,GUARDED328!=null,delay_mechanism329,elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, conditional_signal_assignment_StartIndex) }
        }
        return signalAssignment
    }
    // $ANTLR end "conditional_signal_assignment"

    // $ANTLR start "conditional_waveforms"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1257:1: conditional_waveforms[Buffer[ConcurrentConditionalSignalAssignment.When] elements] : waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? ;
    @throws(classOf[RecognitionException])
    def conditional_waveforms(elements:Buffer[ConcurrentConditionalSignalAssignment.When]):Unit = {
        val conditional_waveforms_StartIndex:Int = input.index()
        var waveform330:Waveform = null

        var condition331:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return  }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:5: ( waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:9: waveform ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
            {
            	pushFollow(FOLLOW_waveform_in_conditional_waveforms7028)
            	waveform330=waveform();

            	state._fsp-=1
            	if (state.failed) return ;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:18: ( WHEN condition ( ELSE conditional_waveforms[elements] )? )?
            	var alt153 :Int=2
            	val LA153_0:Int = input.LA(1)

            	if ( (LA153_0==WHEN) ) {
            	    alt153=1
            	}
            	alt153 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:20: WHEN condition ( ELSE conditional_waveforms[elements] )?
            	        {
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_conditional_waveforms7032); if (state.failed) return ;
            	        	pushFollow(FOLLOW_condition_in_conditional_waveforms7034)
            	        	condition331=condition();

            	        	state._fsp-=1
            	        	if (state.failed) return ;
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:35: ( ELSE conditional_waveforms[elements] )?
            	        	var alt152 :Int=2
            	        	val LA152_0:Int = input.LA(1)

            	        	if ( (LA152_0==ELSE) ) {
            	        	    alt152=1
            	        	}
            	        	alt152 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1258:37: ELSE conditional_waveforms[elements]
            	        	        {
            	        	        	`match`(input,ELSE,FOLLOW_ELSE_in_conditional_waveforms7038); if (state.failed) return ;
            	        	        	pushFollow(FOLLOW_conditional_waveforms_in_conditional_waveforms7040)
            	        	        	conditional_waveforms(elements);

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return ;

            	        	        }
            	        	    case _ => 
            	        	}


            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  new ConcurrentConditionalSignalAssignment.When(waveform330,condition331) +=: elements
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, conditional_waveforms_StartIndex) }
        }
        return 
    }
    // $ANTLR end "conditional_waveforms"

    // $ANTLR start "selected_waveform"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1261:1: selected_waveform returns [ConcurrentSelectedSignalAssignment.When whenClause] : waveform WHEN choices ;
    @throws(classOf[RecognitionException])
    def selected_waveform():ConcurrentSelectedSignalAssignment.When = {
         var whenClause :ConcurrentSelectedSignalAssignment.When = null;val selected_waveform_StartIndex:Int = input.index()
        var waveform332:Waveform = null

        var choices333:Choices = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return whenClause }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1262:3: ( waveform WHEN choices )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1262:5: waveform WHEN choices
            {
            	pushFollow(FOLLOW_waveform_in_selected_waveform7069)
            	waveform332=waveform();

            	state._fsp-=1
            	if (state.failed) return whenClause;
            	`match`(input,WHEN,FOLLOW_WHEN_in_selected_waveform7071); if (state.failed) return whenClause;
            	pushFollow(FOLLOW_choices_in_selected_waveform7073)
            	choices333=choices();

            	state._fsp-=1
            	if (state.failed) return whenClause;
            	if ( state.backtracking==0 ) {
            	  whenClause = new ConcurrentSelectedSignalAssignment.When(waveform332,choices333)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, selected_waveform_StartIndex) }
        }
        return whenClause
    }
    // $ANTLR end "selected_waveform"

    // $ANTLR start "selected_signal_assignment"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1265:1: selected_signal_assignment[Identifier label,Boolean postponed] returns [ConcurrentSelectedSignalAssignment signalAssignment] : WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON ;
    @throws(classOf[RecognitionException])
    def selected_signal_assignment(label:Identifier, postponed:Boolean):ConcurrentSelectedSignalAssignment = {
         var signalAssignment :ConcurrentSelectedSignalAssignment = null;val selected_signal_assignment_StartIndex:Int = input.index()
        var WITH334 :Token=null
        var GUARDED337 :Token=null
        var s1:ConcurrentSelectedSignalAssignment.When = null

        var s2:ConcurrentSelectedSignalAssignment.When = null

        var expression335:Expression = null

        var target336:Target = null

        var delay_mechanism338:DelayMechanism = null



        	val elements=new Buffer[ConcurrentSelectedSignalAssignment.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return signalAssignment }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1269:2: ( WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1269:4: WITH expression SELECT target LEQ ( GUARDED )? ( delay_mechanism )? s1= selected_waveform ( COMMA s2= selected_waveform )* SEMICOLON
            {
            	WITH334=`match`(input,WITH,FOLLOW_WITH_in_selected_signal_assignment7103).asInstanceOf[Token]; if (state.failed) return signalAssignment;
            	pushFollow(FOLLOW_expression_in_selected_signal_assignment7105)
            	expression335=expression();

            	state._fsp-=1
            	if (state.failed) return signalAssignment;
            	`match`(input,SELECT,FOLLOW_SELECT_in_selected_signal_assignment7107); if (state.failed) return signalAssignment;
            	pushFollow(FOLLOW_target_in_selected_signal_assignment7114)
            	target336=target();

            	state._fsp-=1
            	if (state.failed) return signalAssignment;
            	`match`(input,LEQ,FOLLOW_LEQ_in_selected_signal_assignment7116); if (state.failed) return signalAssignment;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1270:15: ( GUARDED )?
            	var alt154 :Int=2
            	val LA154_0:Int = input.LA(1)

            	if ( (LA154_0==GUARDED) ) {
            	    alt154=1
            	}
            	alt154 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1270:15: GUARDED
            	        {
            	        	GUARDED337=`match`(input,GUARDED,FOLLOW_GUARDED_in_selected_signal_assignment7118).asInstanceOf[Token]; if (state.failed) return signalAssignment;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1270:24: ( delay_mechanism )?
            	var alt155 :Int=2
            	val LA155_0:Int = input.LA(1)

            	if ( (LA155_0==INERTIAL||LA155_0==REJECT||LA155_0==TRANSPORT) ) {
            	    alt155=1
            	}
            	alt155 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1270:24: delay_mechanism
            	        {
            	        	pushFollow(FOLLOW_delay_mechanism_in_selected_signal_assignment7121)
            	        	delay_mechanism338=delay_mechanism();

            	        	state._fsp-=1
            	        	if (state.failed) return signalAssignment;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_selected_waveform_in_selected_signal_assignment7130)
            	s1=selected_waveform();

            	state._fsp-=1
            	if (state.failed) return signalAssignment;
            	if ( state.backtracking==0 ) {
            	  elements += s1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1271:53: ( COMMA s2= selected_waveform )*
            	var loop156=true
            	do {
            	    var alt156:Int=2
            	    val LA156_0:Int = input.LA(1)

            	    if ( (LA156_0==COMMA) ) {
            	        alt156=1
            	    }


            	    alt156 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1271:54: COMMA s2= selected_waveform
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_selected_signal_assignment7134); if (state.failed) return signalAssignment;
            		    	pushFollow(FOLLOW_selected_waveform_in_selected_signal_assignment7138)
            		    	s2=selected_waveform();

            		    	state._fsp-=1
            		    	if (state.failed) return signalAssignment;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += s2
            		    	}

            		    }
            		case _ => loop156=false
            	    }
            	} while (loop156);

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_selected_signal_assignment7143); if (state.failed) return signalAssignment;
            	if ( state.backtracking==0 ) {
            	  signalAssignment=new ConcurrentSelectedSignalAssignment(toPosition(WITH334),label,postponed,expression335,target336,GUARDED337!=null,delay_mechanism338,elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, selected_signal_assignment_StartIndex) }
        }
        return signalAssignment
    }
    // $ANTLR end "selected_signal_assignment"

    // $ANTLR start "target"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1275:1: target returns [Target target_] : ( name | aggregate );
    @throws(classOf[RecognitionException])
    def target():Target = {
         var target_ :Target = null;val target_StartIndex:Int = input.index()
        var name339:Name = null

        var aggregate340:Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return target_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1276:3: ( name | aggregate )
            var alt157 :Int=2
            val LA157_0:Int = input.LA(1)

            if ( (LA157_0==STRING_LITERAL||(LA157_0>=BASIC_IDENTIFIER && LA157_0<=EXTENDED_IDENTIFIER)) ) {
                alt157=1
            }
            else if ( (LA157_0==LPAREN) ) {
                alt157=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return target_}
                val nvae = new NoViableAltException("", 157, 0, input)

                throw nvae
            }
            alt157 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1276:5: name
                    {
                    	pushFollow(FOLLOW_name_in_target7169)
                    	name339=name();

                    	state._fsp-=1
                    	if (state.failed) return target_;
                    	if ( state.backtracking==0 ) {
                    	  target_ = new Target(Left(name339))
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1277:5: aggregate
                    {
                    	pushFollow(FOLLOW_aggregate_in_target7177)
                    	aggregate340=aggregate();

                    	state._fsp-=1
                    	if (state.failed) return target_;
                    	if ( state.backtracking==0 ) {
                    	  target_ = new Target(Right(aggregate340))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, target_StartIndex) }
        }
        return target_
    }
    // $ANTLR end "target"

    // $ANTLR start "component_instantiation_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1280:1: component_instantiation_statement[Identifier label] returns [ComponentInstantiationStatement stmt] : ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def component_instantiation_statement(label:Identifier):ComponentInstantiationStatement = {
         var stmt :ComponentInstantiationStatement = null;val component_instantiation_statement_StartIndex:Int = input.index()
        var n:SelectedName = null

        var architecture_identifier:Identifier = null

        var generic_map_aspect341:AssociationList = null

        var port_map_aspect342:AssociationList = null



        	var componentType:ComponentInstantiationStatement.ComponentType.Value=null
        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:2: ( ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:4: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name ) ( generic_map_aspect )? ( port_map_aspect )? SEMICOLON
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:4: ( ( COMPONENT )? n= selected_name | ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )? | CONFIGURATION n= selected_name )
            	var alt160 :Int=3
            	input.LA(1) match {
            	case COMPONENT | STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt160=1
            	}

            	case ENTITY => {
            	     alt160=2
            	}

            	case CONFIGURATION => {
            	     alt160=3
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return stmt}
            	    val nvae = new NoViableAltException("", 160, 0, input)

            	    throw nvae
            	}

            	alt160 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:6: ( COMPONENT )? n= selected_name
            	        {
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:6: ( COMPONENT )?
            	        	var alt158 :Int=2
            	        	val LA158_0:Int = input.LA(1)

            	        	if ( (LA158_0==COMPONENT) ) {
            	        	    alt158=1
            	        	}
            	        	alt158 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1285:6: COMPONENT
            	        	        {
            	        	        	`match`(input,COMPONENT,FOLLOW_COMPONENT_in_component_instantiation_statement7208); if (state.failed) return stmt;

            	        	        }
            	        	    case _ => 
            	        	}

            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7213)
            	        	n=selected_name();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.COMPONENT 
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1286:7: ENTITY n= selected_name ( LPAREN architecture_identifier= identifier RPAREN )?
            	        {
            	        	`match`(input,ENTITY,FOLLOW_ENTITY_in_component_instantiation_statement7223); if (state.failed) return stmt;
            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7227)
            	        	n=selected_name();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1286:30: ( LPAREN architecture_identifier= identifier RPAREN )?
            	        	var alt159 :Int=2
            	        	val LA159_0:Int = input.LA(1)

            	        	if ( (LA159_0==LPAREN) ) {
            	        	    alt159=1
            	        	}
            	        	alt159 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1286:31: LPAREN architecture_identifier= identifier RPAREN
            	        	        {
            	        	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_component_instantiation_statement7230); if (state.failed) return stmt;
            	        	        	pushFollow(FOLLOW_identifier_in_component_instantiation_statement7234)
            	        	        	architecture_identifier=identifier();

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return stmt;
            	        	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_component_instantiation_statement7236); if (state.failed) return stmt;

            	        	        }
            	        	    case _ => 
            	        	}

            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.ENTITY
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1287:7: CONFIGURATION n= selected_name
            	        {
            	        	`match`(input,CONFIGURATION,FOLLOW_CONFIGURATION_in_component_instantiation_statement7248); if (state.failed) return stmt;
            	        	pushFollow(FOLLOW_selected_name_in_component_instantiation_statement7252)
            	        	n=selected_name();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  componentType=ComponentInstantiationStatement.ComponentType.CONFIGURATION
            	        	}

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1288:3: ( generic_map_aspect )?
            	var alt161 :Int=2
            	val LA161_0:Int = input.LA(1)

            	if ( (LA161_0==GENERIC) ) {
            	    alt161=1
            	}
            	alt161 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1288:3: generic_map_aspect
            	        {
            	        	pushFollow(FOLLOW_generic_map_aspect_in_component_instantiation_statement7259)
            	        	generic_map_aspect341=generic_map_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1289:3: ( port_map_aspect )?
            	var alt162 :Int=2
            	val LA162_0:Int = input.LA(1)

            	if ( (LA162_0==PORT) ) {
            	    alt162=1
            	}
            	alt162 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1289:3: port_map_aspect
            	        {
            	        	pushFollow(FOLLOW_port_map_aspect_in_component_instantiation_statement7264)
            	        	port_map_aspect342=port_map_aspect();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_component_instantiation_statement7267); if (state.failed) return stmt;
            	if ( state.backtracking==0 ) {
            	  stmt=new ComponentInstantiationStatement(toPosition(firstToken),label,componentType,n,architecture_identifier,generic_map_aspect341,port_map_aspect342)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, component_instantiation_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "component_instantiation_statement"

    // $ANTLR start "generate_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1293:1: generate_statement[Identifier label] returns [ConcurrentStatement generateStmt] : ( for_generate_statement[$label] | if_generate_statement[$label] );
    @throws(classOf[RecognitionException])
    def generate_statement(label:Identifier):ConcurrentStatement = {
         var generateStmt :ConcurrentStatement = null;val generate_statement_StartIndex:Int = input.index()
        var for_generate_statement343:ForGenerateStatement = null

        var if_generate_statement344:IfGenerateStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return generateStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1295:2: ( for_generate_statement[$label] | if_generate_statement[$label] )
            var alt163 :Int=2
            val LA163_0:Int = input.LA(1)

            if ( (LA163_0==FOR) ) {
                alt163=1
            }
            else if ( (LA163_0==IF) ) {
                alt163=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return generateStmt}
                val nvae = new NoViableAltException("", 163, 0, input)

                throw nvae
            }
            alt163 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1295:4: for_generate_statement[$label]
                    {
                    	pushFollow(FOLLOW_for_generate_statement_in_generate_statement7291)
                    	for_generate_statement343=for_generate_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return generateStmt;
                    	if ( state.backtracking==0 ) {
                    	  generateStmt=for_generate_statement343
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1296:5: if_generate_statement[$label]
                    {
                    	pushFollow(FOLLOW_if_generate_statement_in_generate_statement7300)
                    	if_generate_statement344=if_generate_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return generateStmt;
                    	if ( state.backtracking==0 ) {
                    	  generateStmt=if_generate_statement344
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, generate_statement_StartIndex) }
        }
        return generateStmt
    }
    // $ANTLR end "generate_statement"

    // $ANTLR start "for_generate_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1300:1: for_generate_statement[Identifier label] returns [ForGenerateStatement forGenerateStmt] : FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def for_generate_statement(label:Identifier):ForGenerateStatement = {
         var forGenerateStmt :ForGenerateStatement = null;val for_generate_statement_StartIndex:Int = input.index()
        var FOR345 :Token=null
        var loopIdentifier:Identifier = null

        var body:VHDLParser.generate_statement_body_return = null

        var end_generate_label:Identifier = null

        var discrete_range346:DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return forGenerateStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1301:2: ( FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1301:4: FOR loopIdentifier= identifier IN discrete_range GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
            {
            	FOR345=`match`(input,FOR,FOLLOW_FOR_in_for_generate_statement7323).asInstanceOf[Token]; if (state.failed) return forGenerateStmt;
            	pushFollow(FOLLOW_identifier_in_for_generate_statement7327)
            	loopIdentifier=identifier();

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt;
            	`match`(input,IN,FOLLOW_IN_in_for_generate_statement7329); if (state.failed) return forGenerateStmt;
            	pushFollow(FOLLOW_discrete_range_in_for_generate_statement7331)
            	discrete_range346=discrete_range();

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt;
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_for_generate_statement7333); if (state.failed) return forGenerateStmt;
            	pushFollow(FOLLOW_generate_statement_body_in_for_generate_statement7340)
            	body=generate_statement_body();

            	state._fsp-=1
            	if (state.failed) return forGenerateStmt;
            	`match`(input,END,FOLLOW_END_in_for_generate_statement7344); if (state.failed) return forGenerateStmt;
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_for_generate_statement7346); if (state.failed) return forGenerateStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1303:34: (end_generate_label= identifier )?
            	var alt164 :Int=2
            	val LA164_0:Int = input.LA(1)

            	if ( ((LA164_0>=BASIC_IDENTIFIER && LA164_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt164=1
            	}
            	alt164 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1303:34: end_generate_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_for_generate_statement7350)
            	        	end_generate_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return forGenerateStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_generate_statement7353); if (state.failed) return forGenerateStmt;
            	if ( state.backtracking==0 ) {
            	  forGenerateStmt=new ForGenerateStatement(toPosition(FOR345),label,loopIdentifier,discrete_range346,(if (body!=null) body.blockItems else null),(if (body!=null) body.statementList else null),end_generate_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, for_generate_statement_StartIndex) }
        }
        return forGenerateStmt
    }
    // $ANTLR end "for_generate_statement"

    // $ANTLR start "if_generate_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1307:1: if_generate_statement[Identifier label] returns [IfGenerateStatement ifGenerateStmt] : IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def if_generate_statement(label:Identifier):IfGenerateStatement = {
         var ifGenerateStmt :IfGenerateStatement = null;val if_generate_statement_StartIndex:Int = input.index()
        var IF347 :Token=null
        var body:VHDLParser.generate_statement_body_return = null

        var end_generate_label:Identifier = null

        var condition348:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return ifGenerateStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1308:2: ( IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1308:4: IF condition GENERATE body= generate_statement_body END GENERATE (end_generate_label= identifier )? SEMICOLON
            {
            	IF347=`match`(input,IF,FOLLOW_IF_in_if_generate_statement7376).asInstanceOf[Token]; if (state.failed) return ifGenerateStmt;
            	pushFollow(FOLLOW_condition_in_if_generate_statement7380)
            	condition348=condition();

            	state._fsp-=1
            	if (state.failed) return ifGenerateStmt;
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement7382); if (state.failed) return ifGenerateStmt;
            	pushFollow(FOLLOW_generate_statement_body_in_if_generate_statement7389)
            	body=generate_statement_body();

            	state._fsp-=1
            	if (state.failed) return ifGenerateStmt;
            	`match`(input,END,FOLLOW_END_in_if_generate_statement7397); if (state.failed) return ifGenerateStmt;
            	`match`(input,GENERATE,FOLLOW_GENERATE_in_if_generate_statement7399); if (state.failed) return ifGenerateStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1314:34: (end_generate_label= identifier )?
            	var alt165 :Int=2
            	val LA165_0:Int = input.LA(1)

            	if ( ((LA165_0>=BASIC_IDENTIFIER && LA165_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt165=1
            	}
            	alt165 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1314:34: end_generate_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_if_generate_statement7403)
            	        	end_generate_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return ifGenerateStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_if_generate_statement7406); if (state.failed) return ifGenerateStmt;
            	if ( state.backtracking==0 ) {
            	  ifGenerateStmt=new IfGenerateStatement(toPosition(IF347),label,condition348,(if (body!=null) body.blockItems else null),(if (body!=null) body.statementList else null),end_generate_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, if_generate_statement_StartIndex) }
        }
        return ifGenerateStmt
    }
    // $ANTLR end "if_generate_statement"

    // $ANTLR start "generate_statement_body"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1327:1: generate_statement_body returns [Seq[DeclarativeItem] blockItems,Seq[ConcurrentStatement] statementList] : ( ( block_declarative_item )* BEGIN )? architecture_statement_list ;
    @throws(classOf[RecognitionException])
    def generate_statement_body():VHDLParser.generate_statement_body_return = {
        val retval:VHDLParser.generate_statement_body_return = new VHDLParser.generate_statement_body_return()
        retval.start = input.LT(1)
        val generate_statement_body_StartIndex:Int = input.index()
        var block_declarative_item349:DeclarativeItem = null

        var architecture_statement_list350:Seq[ConcurrentStatement] = null



        	val tmpBockItems=new Buffer[DeclarativeItem]()
        	retval.blockItems=List()
        	retval.statementList=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:2: ( ( ( block_declarative_item )* BEGIN )? architecture_statement_list )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:4: ( ( block_declarative_item )* BEGIN )? architecture_statement_list
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:4: ( ( block_declarative_item )* BEGIN )?
            	var alt167 :Int=2
            	val LA167_0:Int = input.LA(1)

            	if ( (LA167_0==ALIAS||LA167_0==ATTRIBUTE||LA167_0==COMPONENT||(LA167_0>=CONSTANT && LA167_0<=DISCONNECT)||(LA167_0>=FILE && LA167_0<=FUNCTION)||LA167_0==GROUP||LA167_0==IMPURE||LA167_0==PROCEDURE||LA167_0==PURE||(LA167_0>=SHARED && LA167_0<=SIGNAL)||LA167_0==SUBTYPE||LA167_0==TYPE||(LA167_0>=USE && LA167_0<=VARIABLE)) ) {
            	    alt167=1
            	}
            	else if ( ((LA167_0>=NATURE && LA167_0<=QUANTITY)||(LA167_0>=SUBNATURE && LA167_0<=LIMIT)) && ((ams))) {
            	    alt167=1
            	}
            	else if ( (LA167_0==BEGIN) ) {
            	    alt167=1
            	}
            	alt167 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:5: ( block_declarative_item )* BEGIN
            	        {
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:5: ( block_declarative_item )*
            	        	var loop166=true
            	        	do {
            	        	    var alt166:Int=2
            	        	    val LA166_0:Int = input.LA(1)

            	        	    if ( (LA166_0==ALIAS||LA166_0==ATTRIBUTE||LA166_0==COMPONENT||(LA166_0>=CONSTANT && LA166_0<=DISCONNECT)||(LA166_0>=FILE && LA166_0<=FUNCTION)||LA166_0==GROUP||LA166_0==IMPURE||LA166_0==PROCEDURE||LA166_0==PURE||(LA166_0>=SHARED && LA166_0<=SIGNAL)||LA166_0==SUBTYPE||LA166_0==TYPE||(LA166_0>=USE && LA166_0<=VARIABLE)) ) {
            	        	        alt166=1
            	        	    }
            	        	    else if ( ((LA166_0>=NATURE && LA166_0<=QUANTITY)||(LA166_0>=SUBNATURE && LA166_0<=LIMIT)) && ((ams))) {
            	        	        alt166=1
            	        	    }


            	        	    alt166 match {
            	        		case 1 =>
            	        		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1333:6: block_declarative_item
            	        		    {
            	        		    	pushFollow(FOLLOW_block_declarative_item_in_generate_statement_body7437)
            	        		    	block_declarative_item349=block_declarative_item();

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return retval;
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  tmpBockItems += block_declarative_item349
            	        		    	}

            	        		    }
            	        		case _ => loop166=false
            	        	    }
            	        	} while (loop166);

            	        	`match`(input,BEGIN,FOLLOW_BEGIN_in_generate_statement_body7448); if (state.failed) return retval;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_architecture_statement_list_in_generate_statement_body7457)
            	architecture_statement_list350=architecture_statement_list();

            	state._fsp-=1
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) {

            	  	   		retval.blockItems=tmpBockItems.toList
            	  			retval.statementList=architecture_statement_list350
            	  	   	
            	}

            }

            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, generate_statement_body_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "generate_statement_body"

    // $ANTLR start "ams_concurrent_break_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1343:1: ams_concurrent_break_statement[Identifier label] returns [ConcurrentBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_concurrent_break_statement(label:Identifier):ConcurrentBreakStatement = {
         var breakStmt :ConcurrentBreakStatement = null;val ams_concurrent_break_statement_StartIndex:Int = input.index()
        var BREAK351 :Token=null
        var ams_break_element_list352:Seq[BreakElement] = null

        var selected_name_list353:Seq[SelectedName] = null

        var expression354:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return breakStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:2: ( BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:4: BREAK ( ams_break_element_list )? ( ON selected_name_list )? ( WHEN expression )? SEMICOLON
            {
            	BREAK351=`match`(input,BREAK,FOLLOW_BREAK_in_ams_concurrent_break_statement7488).asInstanceOf[Token]; if (state.failed) return breakStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:10: ( ams_break_element_list )?
            	var alt168 :Int=2
            	val LA168_0:Int = input.LA(1)

            	if ( (LA168_0==FOR||LA168_0==STRING_LITERAL||(LA168_0>=BASIC_IDENTIFIER && LA168_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt168=1
            	}
            	alt168 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:10: ams_break_element_list
            	        {
            	        	pushFollow(FOLLOW_ams_break_element_list_in_ams_concurrent_break_statement7490)
            	        	ams_break_element_list352=ams_break_element_list();

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:34: ( ON selected_name_list )?
            	var alt169 :Int=2
            	val LA169_0:Int = input.LA(1)

            	if ( (LA169_0==ON) ) {
            	    alt169=1
            	}
            	alt169 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:35: ON selected_name_list
            	        {
            	        	`match`(input,ON,FOLLOW_ON_in_ams_concurrent_break_statement7494); if (state.failed) return breakStmt;
            	        	pushFollow(FOLLOW_selected_name_list_in_ams_concurrent_break_statement7496)
            	        	selected_name_list353=selected_name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:59: ( WHEN expression )?
            	var alt170 :Int=2
            	val LA170_0:Int = input.LA(1)

            	if ( (LA170_0==WHEN) ) {
            	    alt170=1
            	}
            	alt170 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1344:60: WHEN expression
            	        {
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_ams_concurrent_break_statement7501); if (state.failed) return breakStmt;
            	        	pushFollow(FOLLOW_expression_in_ams_concurrent_break_statement7503)
            	        	expression354=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_concurrent_break_statement7507); if (state.failed) return breakStmt;
            	if ( state.backtracking==0 ) {
            	  breakStmt=new ConcurrentBreakStatement(toPosition(BREAK351),label,ams_break_element_list352,selected_name_list353,expression354)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, ams_concurrent_break_statement_StartIndex) }
        }
        return breakStmt
    }
    // $ANTLR end "ams_concurrent_break_statement"

    // $ANTLR start "ams_simultaneous_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1349:1: ams_simultaneous_statement[Identifier label] returns [SimultaneousStatement stmt] : ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] );
    @throws(classOf[RecognitionException])
    def ams_simultaneous_statement(label:Identifier):SimultaneousStatement = {
         var stmt :SimultaneousStatement = null;val ams_simultaneous_statement_StartIndex:Int = input.index()
        var ams_simple_simultaneous_statement355:SimpleSimultaneousStatement = null

        var ams_simultaneous_if_statement356:SimultaneousIfStatement = null

        var ams_simultaneous_procedural_statement357:SimultaneousProceduralStatement = null

        var ams_simultaneous_case_statement358:SimultaneousCaseStatement = null

        var ams_simultaneous_null_statement359:SimultaneousNullStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1350:2: ( ams_simple_simultaneous_statement[$label] | ams_simultaneous_if_statement[$label] | ams_simultaneous_procedural_statement[$label] | ams_simultaneous_case_statement[$label] | ams_simultaneous_null_statement[$label] )
            var alt171 :Int=5
            input.LA(1) match {
            case ABS | NEW | NOT | LPAREN | PLUS | MINUS | STRING_LITERAL | CHARACTER_LITERAL | REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | BIT_STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt171=1
            }

            case NULL => {
                 val LA171_2:Int = input.LA(2)

                 if ( (LA171_2==SEMICOLON) ) {
                     alt171=5
                 }
                 else if ( (LA171_2==MOD||LA171_2==REM||(LA171_2>=DOUBLESTAR && LA171_2<=AMS_ASSIGN)||LA171_2==AMPERSAND||(LA171_2>=MUL && LA171_2<=MINUS)||(LA171_2>=BASIC_IDENTIFIER && LA171_2<=EXTENDED_IDENTIFIER)) ) {
                     alt171=1
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return stmt}
                     val nvae = new NoViableAltException("", 171, 2, input)

                     throw nvae
                 }
            }

            case IF => {
                 alt171=2
            }

            case PROCEDURAL => {
                 alt171=3
            }

            case CASE => {
                 alt171=4
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return stmt}
                val nvae = new NoViableAltException("", 171, 0, input)

                throw nvae
            }

            alt171 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1350:4: ams_simple_simultaneous_statement[$label]
                    {
                    	pushFollow(FOLLOW_ams_simple_simultaneous_statement_in_ams_simultaneous_statement7529)
                    	ams_simple_simultaneous_statement355=ams_simple_simultaneous_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simple_simultaneous_statement355
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1351:5: ams_simultaneous_if_statement[$label]
                    {
                    	pushFollow(FOLLOW_ams_simultaneous_if_statement_in_ams_simultaneous_statement7538)
                    	ams_simultaneous_if_statement356=ams_simultaneous_if_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_if_statement356
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1352:5: ams_simultaneous_procedural_statement[$label]
                    {
                    	pushFollow(FOLLOW_ams_simultaneous_procedural_statement_in_ams_simultaneous_statement7547)
                    	ams_simultaneous_procedural_statement357=ams_simultaneous_procedural_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_procedural_statement357
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1353:5: ams_simultaneous_case_statement[$label]
                    {
                    	pushFollow(FOLLOW_ams_simultaneous_case_statement_in_ams_simultaneous_statement7556)
                    	ams_simultaneous_case_statement358=ams_simultaneous_case_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_case_statement358
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1354:5: ams_simultaneous_null_statement[$label]
                    {
                    	pushFollow(FOLLOW_ams_simultaneous_null_statement_in_ams_simultaneous_statement7565)
                    	ams_simultaneous_null_statement359=ams_simultaneous_null_statement(label);

                    	state._fsp-=1
                    	if (state.failed) return stmt;
                    	if ( state.backtracking==0 ) {
                    	  stmt=ams_simultaneous_null_statement359
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, ams_simultaneous_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "ams_simultaneous_statement"

    // $ANTLR start "ams_simultaneous_statement_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1357:1: ams_simultaneous_statement_list returns [Seq[SimultaneousStatement] list] : ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* ;
    @throws(classOf[RecognitionException])
    def ams_simultaneous_statement_list():Seq[SimultaneousStatement] = {
         var list :Seq[SimultaneousStatement] = null;val ams_simultaneous_statement_list_StartIndex:Int = input.index()
        var label_colon360:Identifier = null

        var ams_simultaneous_statement361:SimultaneousStatement = null



        	val tmpList=new Buffer[SimultaneousStatement]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:2: ( ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:4: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:4: ( ( label_colon )? ams_simultaneous_statement[$label_colon.label] )*
            	var loop173=true
            	do {
            	    var alt173:Int=2
            	    val LA173_0:Int = input.LA(1)

            	    if ( (LA173_0==ABS||LA173_0==CASE||LA173_0==IF||LA173_0==NEW||(LA173_0>=NOT && LA173_0<=NULL)||LA173_0==PROCEDURAL||LA173_0==LPAREN||(LA173_0>=PLUS && LA173_0<=MINUS)||LA173_0==STRING_LITERAL||LA173_0==CHARACTER_LITERAL||(LA173_0>=REAL_LITERAL && LA173_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt173=1
            	    }


            	    alt173 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:5: ( label_colon )? ams_simultaneous_statement[$label_colon.label]
            		    {
            		    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:5: ( label_colon )?
            		    	var alt172 :Int=2
            		    	val LA172_0:Int = input.LA(1)

            		    	if ( (LA172_0==BASIC_IDENTIFIER) ) {
            		    	    val LA172_1:Int = input.LA(2)

            		    	    if ( (LA172_1==COLON) ) {
            		    	        alt172=1
            		    	    }
            		    	}
            		    	else if ( (LA172_0==EXTENDED_IDENTIFIER) ) {
            		    	    val LA172_2:Int = input.LA(2)

            		    	    if ( (LA172_2==COLON) ) {
            		    	        alt172=1
            		    	    }
            		    	}
            		    	alt172 match {
            		    	    case 1 =>
            		    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1362:5: label_colon
            		    	        {
            		    	        	pushFollow(FOLLOW_label_colon_in_ams_simultaneous_statement_list7589)
            		    	        	label_colon360=label_colon();

            		    	        	state._fsp-=1
            		    	        	if (state.failed) return list;

            		    	        }
            		    	    case _ => 
            		    	}

            		    	pushFollow(FOLLOW_ams_simultaneous_statement_in_ams_simultaneous_statement_list7592)
            		    	ams_simultaneous_statement361=ams_simultaneous_statement(label_colon360);

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += ams_simultaneous_statement361
            		    	}

            		    }
            		case _ => loop173=false
            	    }
            	} while (loop173);

            	if ( state.backtracking==0 ) {
            	  list=tmpList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, ams_simultaneous_statement_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "ams_simultaneous_statement_list"

    // $ANTLR start "ams_simple_simultaneous_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1366:1: ams_simple_simultaneous_statement[Identifier label] returns [SimpleSimultaneousStatement stmt] : e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_simple_simultaneous_statement(label:Identifier):SimpleSimultaneousStatement = {
         var stmt :SimpleSimultaneousStatement = null;val ams_simple_simultaneous_statement_StartIndex:Int = input.index()
        var e1:Expression = null

        var e2:Expression = null

        var tolerance_expression:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1367:2: (e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1367:4: e1= simple_expression AMS_ASSIGN e2= simple_expression ( TOLERANCE tolerance_expression= expression )? SEMICOLON
            {
            	pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7622)
            	e1=simple_expression();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	`match`(input,AMS_ASSIGN,FOLLOW_AMS_ASSIGN_in_ams_simple_simultaneous_statement7624); if (state.failed) return stmt;
            	pushFollow(FOLLOW_simple_expression_in_ams_simple_simultaneous_statement7628)
            	e2=simple_expression();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1367:57: ( TOLERANCE tolerance_expression= expression )?
            	var alt174 :Int=2
            	val LA174_0:Int = input.LA(1)

            	if ( (LA174_0==TOLERANCE) ) {
            	    alt174=1
            	}
            	alt174 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1367:58: TOLERANCE tolerance_expression= expression
            	        {
            	        	`match`(input,TOLERANCE,FOLLOW_TOLERANCE_in_ams_simple_simultaneous_statement7631); if (state.failed) return stmt;
            	        	pushFollow(FOLLOW_expression_in_ams_simple_simultaneous_statement7635)
            	        	tolerance_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simple_simultaneous_statement7639); if (state.failed) return stmt;
            	if ( state.backtracking==0 ) {
            	  stmt=new SimpleSimultaneousStatement(label,e1,e2,tolerance_expression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, ams_simple_simultaneous_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "ams_simple_simultaneous_statement"

    // $ANTLR start "ams_simultaneous_if_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1371:1: ams_simultaneous_if_statement[Identifier label] returns [SimultaneousIfStatement ifStmt] : ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_simultaneous_if_statement(label:Identifier):SimultaneousIfStatement = {
         var ifStmt :SimultaneousIfStatement = null;val ams_simultaneous_if_statement_StartIndex:Int = input.index()
        var ifToken :Token=null
        var if_condition:Expression = null

        var if_simultaneous_statement:Seq[SimultaneousStatement] = null

        var elsif_condition:Expression = null

        var else_if_simultaneous_statement:Seq[SimultaneousStatement] = null

        var else_simultaneous_statement:Seq[SimultaneousStatement] = null

        var end_if_label:Identifier = null



        	val ifList=new Buffer[SimultaneousIfStatement.IfUsePart]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return ifStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1375:2: (ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1375:4: ifToken= IF if_condition= condition USE if_simultaneous_statement= ams_simultaneous_statement_list ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )* ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )? END USE (end_if_label= identifier )? SEMICOLON
            {
            	ifToken=`match`(input,IF,FOLLOW_IF_in_ams_simultaneous_if_statement7671).asInstanceOf[Token]; if (state.failed) return ifStmt;
            	pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement7675)
            	if_condition=condition();

            	state._fsp-=1
            	if (state.failed) return ifStmt;
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement7677); if (state.failed) return ifStmt;
            	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7684)
            	if_simultaneous_statement=ams_simultaneous_statement_list();

            	state._fsp-=1
            	if (state.failed) return ifStmt;
            	if ( state.backtracking==0 ) {
            	  ifList += new SimultaneousIfStatement.IfUsePart(if_condition,if_simultaneous_statement)
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1377:3: ( ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list )*
            	var loop175=true
            	do {
            	    var alt175:Int=2
            	    val LA175_0:Int = input.LA(1)

            	    if ( (LA175_0==ELSIF) ) {
            	        alt175=1
            	    }


            	    alt175 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1377:4: ELSIF elsif_condition= condition USE else_if_simultaneous_statement= ams_simultaneous_statement_list
            		    {
            		    	`match`(input,ELSIF,FOLLOW_ELSIF_in_ams_simultaneous_if_statement7691); if (state.failed) return ifStmt;
            		    	pushFollow(FOLLOW_condition_in_ams_simultaneous_if_statement7695)
            		    	elsif_condition=condition();

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt;
            		    	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement7697); if (state.failed) return ifStmt;
            		    	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7704)
            		    	else_if_simultaneous_statement=ams_simultaneous_statement_list();

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  ifList += new SimultaneousIfStatement.IfUsePart(elsif_condition,else_if_simultaneous_statement)
            		    	}

            		    }
            		case _ => loop175=false
            	    }
            	} while (loop175);

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1381:3: ( ELSE else_simultaneous_statement= ams_simultaneous_statement_list )?
            	var alt176 :Int=2
            	val LA176_0:Int = input.LA(1)

            	if ( (LA176_0==ELSE) ) {
            	    alt176=1
            	}
            	alt176 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1381:4: ELSE else_simultaneous_statement= ams_simultaneous_statement_list
            	        {
            	        	`match`(input,ELSE,FOLLOW_ELSE_in_ams_simultaneous_if_statement7720); if (state.failed) return ifStmt;
            	        	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_if_statement7727)
            	        	else_simultaneous_statement=ams_simultaneous_statement_list();

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_if_statement7733); if (state.failed) return ifStmt;
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_if_statement7735); if (state.failed) return ifStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1383:23: (end_if_label= identifier )?
            	var alt177 :Int=2
            	val LA177_0:Int = input.LA(1)

            	if ( ((LA177_0>=BASIC_IDENTIFIER && LA177_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt177=1
            	}
            	alt177 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1383:23: end_if_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_if_statement7739)
            	        	end_if_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_if_statement7742); if (state.failed) return ifStmt;
            	if ( state.backtracking==0 ) {
            	  ifStmt=new SimultaneousIfStatement(toPosition(ifToken),label,ifList.toList,else_simultaneous_statement,end_if_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, ams_simultaneous_if_statement_StartIndex) }
        }
        return ifStmt
    }
    // $ANTLR end "ams_simultaneous_if_statement"

    // $ANTLR start "ams_simultaneous_case_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1387:1: ams_simultaneous_case_statement[Identifier label] returns [SimultaneousCaseStatement caseStmt] : caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_simultaneous_case_statement(label:Identifier):SimultaneousCaseStatement = {
         var caseStmt :SimultaneousCaseStatement = null;val ams_simultaneous_case_statement_StartIndex:Int = input.index()
        var caseToken :Token=null
        var end_case_label:Identifier = null

        var choices362:Choices = null

        var ams_simultaneous_statement_list363:Seq[SimultaneousStatement] = null

        var expression364:Expression = null



        	val alternatives=new Buffer[SimultaneousCaseStatement.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return caseStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1391:2: (caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1391:4: caseToken= CASE expression USE ( WHEN choices ARROW ams_simultaneous_statement_list )+ END CASE (end_case_label= identifier )? SEMICOLON
            {
            	caseToken=`match`(input,CASE,FOLLOW_CASE_in_ams_simultaneous_case_statement7775).asInstanceOf[Token]; if (state.failed) return caseStmt;
            	pushFollow(FOLLOW_expression_in_ams_simultaneous_case_statement7777)
            	expression364=expression();

            	state._fsp-=1
            	if (state.failed) return caseStmt;
            	`match`(input,USE,FOLLOW_USE_in_ams_simultaneous_case_statement7779); if (state.failed) return caseStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1392:4: ( WHEN choices ARROW ams_simultaneous_statement_list )+
            	var cnt178:Int=0
            	var loop178 = true
            	do {
            	    var alt178:Int=2
            	    val LA178_0:Int = input.LA(1)

            	    if ( (LA178_0==WHEN) ) {
            	        alt178=1
            	    }


            	    alt178 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1392:5: WHEN choices ARROW ams_simultaneous_statement_list
            		    {
            		    	`match`(input,WHEN,FOLLOW_WHEN_in_ams_simultaneous_case_statement7785); if (state.failed) return caseStmt;
            		    	pushFollow(FOLLOW_choices_in_ams_simultaneous_case_statement7787)
            		    	choices362=choices();

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt;
            		    	`match`(input,ARROW,FOLLOW_ARROW_in_ams_simultaneous_case_statement7789); if (state.failed) return caseStmt;
            		    	pushFollow(FOLLOW_ams_simultaneous_statement_list_in_ams_simultaneous_case_statement7791)
            		    	ams_simultaneous_statement_list363=ams_simultaneous_statement_list();

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  alternatives += new SimultaneousCaseStatement.When(choices362,ams_simultaneous_statement_list363)
            		    	}

            		    }
            		case _ =>
            		    if ( cnt178 >= 1 ) loop178=false
            		    else {
            		    	    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	            	    val eee = new EarlyExitException(178, input)
            	            	    throw eee
            		    }
            	    }
            	    cnt178 += 1
            	} while (loop178);

            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_case_statement7799); if (state.failed) return caseStmt;
            	`match`(input,CASE,FOLLOW_CASE_in_ams_simultaneous_case_statement7801); if (state.failed) return caseStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1393:26: (end_case_label= identifier )?
            	var alt179 :Int=2
            	val LA179_0:Int = input.LA(1)

            	if ( ((LA179_0>=BASIC_IDENTIFIER && LA179_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt179=1
            	}
            	alt179 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1393:26: end_case_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_case_statement7805)
            	        	end_case_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return caseStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_case_statement7808); if (state.failed) return caseStmt;
            	if ( state.backtracking==0 ) {
            	  caseStmt=new SimultaneousCaseStatement(toPosition(caseToken),label,expression364,alternatives.toList,end_case_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, ams_simultaneous_case_statement_StartIndex) }
        }
        return caseStmt
    }
    // $ANTLR end "ams_simultaneous_case_statement"

    // $ANTLR start "ams_simultaneous_procedural_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1397:1: ams_simultaneous_procedural_statement[Identifier label] returns [SimultaneousProceduralStatement proceduralStmt] : procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_simultaneous_procedural_statement(label:Identifier):SimultaneousProceduralStatement = {
         var proceduralStmt :SimultaneousProceduralStatement = null;val ams_simultaneous_procedural_statement_StartIndex:Int = input.index()
        var procedural :Token=null
        var end_procedural_label:Identifier = null

        var ams_simultaneous_procedural_declarative_item365:DeclarativeItem = null

        var sequence_of_statements366:Seq[SequentialStatement] = null



        	val items=new Buffer[DeclarativeItem]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return proceduralStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1401:2: (procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1401:4: procedural= PROCEDURAL ( IS )? ( ams_simultaneous_procedural_declarative_item )* BEGIN sequence_of_statements END PROCEDURAL (end_procedural_label= identifier )? SEMICOLON
            {
            	procedural=`match`(input,PROCEDURAL,FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7837).asInstanceOf[Token]; if (state.failed) return proceduralStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1401:26: ( IS )?
            	var alt180 :Int=2
            	val LA180_0:Int = input.LA(1)

            	if ( (LA180_0==IS) ) {
            	    alt180=1
            	}
            	alt180 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1401:26: IS
            	        {
            	        	`match`(input,IS,FOLLOW_IS_in_ams_simultaneous_procedural_statement7839); if (state.failed) return proceduralStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1402:4: ( ams_simultaneous_procedural_declarative_item )*
            	var loop181=true
            	do {
            	    var alt181:Int=2
            	    val LA181_0:Int = input.LA(1)

            	    if ( (LA181_0==ALIAS||LA181_0==ATTRIBUTE||LA181_0==CONSTANT||LA181_0==FUNCTION||LA181_0==GROUP||LA181_0==IMPURE||LA181_0==PROCEDURE||LA181_0==PURE||LA181_0==SHARED||LA181_0==SUBTYPE||LA181_0==TYPE||(LA181_0>=USE && LA181_0<=VARIABLE)) ) {
            	        alt181=1
            	    }


            	    alt181 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1402:5: ams_simultaneous_procedural_declarative_item
            		    {
            		    	pushFollow(FOLLOW_ams_simultaneous_procedural_declarative_item_in_ams_simultaneous_procedural_statement7846)
            		    	ams_simultaneous_procedural_declarative_item365=ams_simultaneous_procedural_declarative_item();

            		    	state._fsp-=1
            		    	if (state.failed) return proceduralStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  items += ams_simultaneous_procedural_declarative_item365
            		    	}

            		    }
            		case _ => loop181=false
            	    }
            	} while (loop181);

            	`match`(input,BEGIN,FOLLOW_BEGIN_in_ams_simultaneous_procedural_statement7853); if (state.failed) return proceduralStmt;
            	pushFollow(FOLLOW_sequence_of_statements_in_ams_simultaneous_procedural_statement7858)
            	sequence_of_statements366=sequence_of_statements();

            	state._fsp-=1
            	if (state.failed) return proceduralStmt;
            	`match`(input,END,FOLLOW_END_in_ams_simultaneous_procedural_statement7862); if (state.failed) return proceduralStmt;
            	`match`(input,PROCEDURAL,FOLLOW_PROCEDURAL_in_ams_simultaneous_procedural_statement7864); if (state.failed) return proceduralStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1405:38: (end_procedural_label= identifier )?
            	var alt182 :Int=2
            	val LA182_0:Int = input.LA(1)

            	if ( ((LA182_0>=BASIC_IDENTIFIER && LA182_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt182=1
            	}
            	alt182 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1405:38: end_procedural_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_ams_simultaneous_procedural_statement7868)
            	        	end_procedural_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return proceduralStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_procedural_statement7871); if (state.failed) return proceduralStmt;
            	if ( state.backtracking==0 ) {
            	  proceduralStmt=new SimultaneousProceduralStatement(toPosition(procedural),label,items.toList,sequence_of_statements366,end_procedural_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, ams_simultaneous_procedural_statement_StartIndex) }
        }
        return proceduralStmt
    }
    // $ANTLR end "ams_simultaneous_procedural_statement"

    // $ANTLR start "ams_simultaneous_procedural_declarative_item"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1409:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );
    @throws(classOf[RecognitionException])
    def ams_simultaneous_procedural_declarative_item():DeclarativeItem = {
         var node :DeclarativeItem = null;val ams_simultaneous_procedural_declarative_item_StartIndex:Int = input.index()
        var subprogram_declartion_or_body367:DeclarativeItem = null

        var type_declaration368:AbstractTypeDeclaration = null

        var subtype_declaration369:SubTypeDeclaration = null

        var constant_declaration370:ConstantDeclaration = null

        var variable_declaration371:VariableDeclaration = null

        var alias_declaration372:AliasDeclaration = null

        var attribute_declaration373:AttributeDeclaration = null

        var attribute_specification374:AttributeSpecification = null

        var use_clause375:UseClause = null

        var group_template_declaration376:GroupTemplateDeclaration = null

        var group_declaration377:GroupDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return node }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1410:2: ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration )
            var alt183 :Int=11
             alt183 = dfa183.predict(input)
            alt183 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1410:4: subprogram_declartion_or_body
                    {
                    	pushFollow(FOLLOW_subprogram_declartion_or_body_in_ams_simultaneous_procedural_declarative_item7893)
                    	subprogram_declartion_or_body367=subprogram_declartion_or_body();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subprogram_declartion_or_body367
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1411:5: type_declaration
                    {
                    	pushFollow(FOLLOW_type_declaration_in_ams_simultaneous_procedural_declarative_item7901)
                    	type_declaration368=type_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=type_declaration368
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1412:5: subtype_declaration
                    {
                    	pushFollow(FOLLOW_subtype_declaration_in_ams_simultaneous_procedural_declarative_item7909)
                    	subtype_declaration369=subtype_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=subtype_declaration369
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1413:5: constant_declaration
                    {
                    	pushFollow(FOLLOW_constant_declaration_in_ams_simultaneous_procedural_declarative_item7917)
                    	constant_declaration370=constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=constant_declaration370
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1414:5: variable_declaration
                    {
                    	pushFollow(FOLLOW_variable_declaration_in_ams_simultaneous_procedural_declarative_item7925)
                    	variable_declaration371=variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=variable_declaration371
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1415:5: alias_declaration
                    {
                    	pushFollow(FOLLOW_alias_declaration_in_ams_simultaneous_procedural_declarative_item7933)
                    	alias_declaration372=alias_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=alias_declaration372
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1416:5: attribute_declaration
                    {
                    	pushFollow(FOLLOW_attribute_declaration_in_ams_simultaneous_procedural_declarative_item7941)
                    	attribute_declaration373=attribute_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_declaration373
                    	}

                    }case 8 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1417:5: attribute_specification
                    {
                    	pushFollow(FOLLOW_attribute_specification_in_ams_simultaneous_procedural_declarative_item7949)
                    	attribute_specification374=attribute_specification();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=attribute_specification374
                    	}

                    }case 9 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1418:5: use_clause
                    {
                    	pushFollow(FOLLOW_use_clause_in_ams_simultaneous_procedural_declarative_item7957)
                    	use_clause375=use_clause();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=use_clause375
                    	}

                    }case 10 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1419:5: group_template_declaration
                    {
                    	pushFollow(FOLLOW_group_template_declaration_in_ams_simultaneous_procedural_declarative_item7965)
                    	group_template_declaration376=group_template_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_template_declaration376
                    	}

                    }case 11 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1420:5: group_declaration
                    {
                    	pushFollow(FOLLOW_group_declaration_in_ams_simultaneous_procedural_declarative_item7973)
                    	group_declaration377=group_declaration();

                    	state._fsp-=1
                    	if (state.failed) return node;
                    	if ( state.backtracking==0 ) {
                    	  node=group_declaration377
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, ams_simultaneous_procedural_declarative_item_StartIndex) }
        }
        return node
    }
    // $ANTLR end "ams_simultaneous_procedural_declarative_item"

    // $ANTLR start "ams_simultaneous_null_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1423:1: ams_simultaneous_null_statement[Identifier label] returns [SimultaneousNullStatement nullStmt] : NULL SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_simultaneous_null_statement(label:Identifier):SimultaneousNullStatement = {
         var nullStmt :SimultaneousNullStatement = null;val ams_simultaneous_null_statement_StartIndex:Int = input.index()
        var NULL378 :Token=null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return nullStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1424:2: ( NULL SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1424:4: NULL SEMICOLON
            {
            	NULL378=`match`(input,NULL,FOLLOW_NULL_in_ams_simultaneous_null_statement7993).asInstanceOf[Token]; if (state.failed) return nullStmt;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_simultaneous_null_statement7995); if (state.failed) return nullStmt;
            	if ( state.backtracking==0 ) {
            	  nullStmt=new SimultaneousNullStatement(toPosition(NULL378),label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, ams_simultaneous_null_statement_StartIndex) }
        }
        return nullStmt
    }
    // $ANTLR end "ams_simultaneous_null_statement"

    // $ANTLR start "sequence_of_statements"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1429:1: sequence_of_statements returns [Seq[SequentialStatement] list] : ( sequential_statement )* ;
    @throws(classOf[RecognitionException])
    def sequence_of_statements():Seq[SequentialStatement] = {
         var list :Seq[SequentialStatement] = null;val sequence_of_statements_StartIndex:Int = input.index()
        var sequential_statement379:SequentialStatement = null



        	val tmpList=new Buffer[SequentialStatement]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1434:2: ( ( sequential_statement )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1434:4: ( sequential_statement )*
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1434:4: ( sequential_statement )*
            	var loop184=true
            	do {
            	    var alt184:Int=2
            	    val LA184_0:Int = input.LA(1)

            	    if ( (LA184_0==ASSERT||LA184_0==CASE||LA184_0==EXIT||LA184_0==FOR||LA184_0==IF||LA184_0==LOOP||LA184_0==NEXT||LA184_0==NULL||(LA184_0>=REPORT && LA184_0<=RETURN)||LA184_0==WAIT||LA184_0==WHILE||LA184_0==LPAREN||LA184_0==STRING_LITERAL||(LA184_0>=BASIC_IDENTIFIER && LA184_0<=EXTENDED_IDENTIFIER)) ) {
            	        alt184=1
            	    }
            	    else if ( (LA184_0==BREAK) && ((ams))) {
            	        alt184=1
            	    }


            	    alt184 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1434:5: sequential_statement
            		    {
            		    	pushFollow(FOLLOW_sequential_statement_in_sequence_of_statements8021)
            		    	sequential_statement379=sequential_statement();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList +=sequential_statement379
            		    	}

            		    }
            		case _ => loop184=false
            	    }
            	} while (loop184);

            	if ( state.backtracking==0 ) {
            	  list=tmpList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, sequence_of_statements_StartIndex) }
        }
        return list
    }
    // $ANTLR end "sequence_of_statements"

    // $ANTLR start "sequential_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1438:1: sequential_statement returns [SequentialStatement stmt] : (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) ;
    @throws(classOf[RecognitionException])
    def sequential_statement():SequentialStatement = {
         var stmt :SequentialStatement = null;val sequential_statement_StartIndex:Int = input.index()
        var label:Identifier = null

        var wait_statement380:WaitStatement = null

        var assertion_statement381:AssertStatement = null

        var report_statement382:ReportStatement = null

        var signal_assignment_statement383:SignalAssignmentStatement = null

        var variable_assignment_statement384:VariableAssignmentStatement = null

        var if_statement385:IfStatement = null

        var case_statement386:CaseStatement = null

        var loop_statement387:SequentialStatement = null

        var next_statement388:NextStatement = null

        var exit_statement389:ExitStatement = null

        var return_statement390:ReturnStatement = null

        var null_statement391:NullStatement = null

        var procedure_call_statement392:ProcedureCallStatement = null

        var ams_break_statement393:AMSBreakStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1439:2: ( (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1439:4: (label= label_colon )? ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1439:9: (label= label_colon )?
            	var alt185 :Int=2
            	val LA185_0:Int = input.LA(1)

            	if ( (LA185_0==BASIC_IDENTIFIER) ) {
            	    val LA185_1:Int = input.LA(2)

            	    if ( (LA185_1==COLON) ) {
            	        alt185=1
            	    }
            	}
            	else if ( (LA185_0==EXTENDED_IDENTIFIER) ) {
            	    val LA185_2:Int = input.LA(2)

            	    if ( (LA185_2==COLON) ) {
            	        alt185=1
            	    }
            	}
            	alt185 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1439:9: label= label_colon
            	        {
            	        	pushFollow(FOLLOW_label_colon_in_sequential_statement8046)
            	        	label=label_colon();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1440:3: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )
            	var alt186 :Int=14
            	 alt186 = dfa186.predict(input)
            	alt186 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1440:4: wait_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_wait_statement_in_sequential_statement8053)
            	        	wait_statement380=wait_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=wait_statement380
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1441:5: assertion_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_assertion_statement_in_sequential_statement8062)
            	        	assertion_statement381=assertion_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=assertion_statement381
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1442:5: report_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_report_statement_in_sequential_statement8071)
            	        	report_statement382=report_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=report_statement382
            	        	}

            	        }case 4 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1443:5: ( target LEQ )=> signal_assignment_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_signal_assignment_statement_in_sequential_statement8086)
            	        	signal_assignment_statement383=signal_assignment_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=signal_assignment_statement383
            	        	}

            	        }case 5 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1444:5: ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_variable_assignment_statement_in_sequential_statement8101)
            	        	variable_assignment_statement384=variable_assignment_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=variable_assignment_statement384
            	        	}

            	        }case 6 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1445:5: if_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_if_statement_in_sequential_statement8110)
            	        	if_statement385=if_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=if_statement385
            	        	}

            	        }case 7 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1446:5: case_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_case_statement_in_sequential_statement8119)
            	        	case_statement386=case_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=case_statement386
            	        	}

            	        }case 8 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1447:5: loop_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_loop_statement_in_sequential_statement8128)
            	        	loop_statement387=loop_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=loop_statement387
            	        	}

            	        }case 9 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1448:5: next_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_next_statement_in_sequential_statement8137)
            	        	next_statement388=next_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=next_statement388
            	        	}

            	        }case 10 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1449:5: exit_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_exit_statement_in_sequential_statement8146)
            	        	exit_statement389=exit_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=exit_statement389
            	        	}

            	        }case 11 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1450:5: return_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_return_statement_in_sequential_statement8155)
            	        	return_statement390=return_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=return_statement390
            	        	}

            	        }case 12 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1451:5: null_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_null_statement_in_sequential_statement8164)
            	        	null_statement391=null_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=null_statement391
            	        	}

            	        }case 13 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1452:5: procedure_call_statement[$label.label]
            	        {
            	        	pushFollow(FOLLOW_procedure_call_statement_in_sequential_statement8173)
            	        	procedure_call_statement392=procedure_call_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=procedure_call_statement392
            	        	}

            	        }case 14 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1453:5: {...}? => ams_break_statement[$label.label]
            	        {
            	        	if ( !((ams)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return stmt}
            	        	    throw new FailedPredicateException(input, "sequential_statement", "ams")
            	        	}
            	        	pushFollow(FOLLOW_ams_break_statement_in_sequential_statement8184)
            	        	ams_break_statement393=ams_break_statement(label);

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;
            	        	if ( state.backtracking==0 ) {
            	        	  stmt=ams_break_statement393
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, sequential_statement_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "sequential_statement"

    // $ANTLR start "wait_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1457:1: wait_statement[Identifier label] returns [WaitStatement waitStmt] : WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def wait_statement(label:Identifier):WaitStatement = {
         var waitStmt :WaitStatement = null;val wait_statement_StartIndex:Int = input.index()
        var WAIT394 :Token=null
        var name_list395:Seq[Name] = null

        var condition396:Expression = null

        var expression397:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return waitStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:2: ( WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:4: WAIT ( ON name_list )? ( UNTIL condition )? ( FOR expression )? SEMICOLON
            {
            	WAIT394=`match`(input,WAIT,FOLLOW_WAIT_in_wait_statement8210).asInstanceOf[Token]; if (state.failed) return waitStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:9: ( ON name_list )?
            	var alt187 :Int=2
            	val LA187_0:Int = input.LA(1)

            	if ( (LA187_0==ON) ) {
            	    alt187=1
            	}
            	alt187 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:10: ON name_list
            	        {
            	        	`match`(input,ON,FOLLOW_ON_in_wait_statement8213); if (state.failed) return waitStmt;
            	        	pushFollow(FOLLOW_name_list_in_wait_statement8215)
            	        	name_list395=name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:25: ( UNTIL condition )?
            	var alt188 :Int=2
            	val LA188_0:Int = input.LA(1)

            	if ( (LA188_0==UNTIL) ) {
            	    alt188=1
            	}
            	alt188 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:26: UNTIL condition
            	        {
            	        	`match`(input,UNTIL,FOLLOW_UNTIL_in_wait_statement8220); if (state.failed) return waitStmt;
            	        	pushFollow(FOLLOW_condition_in_wait_statement8222)
            	        	condition396=condition();

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:44: ( FOR expression )?
            	var alt189 :Int=2
            	val LA189_0:Int = input.LA(1)

            	if ( (LA189_0==FOR) ) {
            	    alt189=1
            	}
            	alt189 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1458:45: FOR expression
            	        {
            	        	`match`(input,FOR,FOLLOW_FOR_in_wait_statement8227); if (state.failed) return waitStmt;
            	        	pushFollow(FOLLOW_expression_in_wait_statement8229)
            	        	expression397=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return waitStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_wait_statement8233); if (state.failed) return waitStmt;
            	if ( state.backtracking==0 ) {
            	  waitStmt=new WaitStatement(toPosition(WAIT394),label,name_list395,condition396,expression397)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, wait_statement_StartIndex) }
        }
        return waitStmt
    }
    // $ANTLR end "wait_statement"

    // $ANTLR start "assertion_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1462:1: assertion_statement[Identifier label] returns [AssertStatement assertStmt] : ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def assertion_statement(label:Identifier):AssertStatement = {
         var assertStmt :AssertStatement = null;val assertion_statement_StartIndex:Int = input.index()
        var ASSERT398 :Token=null
        var report_expression:Expression = null

        var severity_expression:Expression = null

        var condition399:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return assertStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:2: ( ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:4: ASSERT condition ( REPORT report_expression= expression )? ( SEVERITY severity_expression= expression )? SEMICOLON
            {
            	ASSERT398=`match`(input,ASSERT,FOLLOW_ASSERT_in_assertion_statement8258).asInstanceOf[Token]; if (state.failed) return assertStmt;
            	pushFollow(FOLLOW_condition_in_assertion_statement8260)
            	condition399=condition();

            	state._fsp-=1
            	if (state.failed) return assertStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:21: ( REPORT report_expression= expression )?
            	var alt190 :Int=2
            	val LA190_0:Int = input.LA(1)

            	if ( (LA190_0==REPORT) ) {
            	    alt190=1
            	}
            	alt190 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:22: REPORT report_expression= expression
            	        {
            	        	`match`(input,REPORT,FOLLOW_REPORT_in_assertion_statement8263); if (state.failed) return assertStmt;
            	        	pushFollow(FOLLOW_expression_in_assertion_statement8267)
            	        	report_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:60: ( SEVERITY severity_expression= expression )?
            	var alt191 :Int=2
            	val LA191_0:Int = input.LA(1)

            	if ( (LA191_0==SEVERITY) ) {
            	    alt191=1
            	}
            	alt191 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1463:61: SEVERITY severity_expression= expression
            	        {
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_assertion_statement8272); if (state.failed) return assertStmt;
            	        	pushFollow(FOLLOW_expression_in_assertion_statement8276)
            	        	severity_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return assertStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_assertion_statement8280); if (state.failed) return assertStmt;
            	if ( state.backtracking==0 ) {
            	  assertStmt=new AssertStatement(toPosition(ASSERT398),label,condition399,report_expression,severity_expression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, assertion_statement_StartIndex) }
        }
        return assertStmt
    }
    // $ANTLR end "assertion_statement"

    // $ANTLR start "report_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1467:1: report_statement[Identifier label] returns [ReportStatement reportStmt] : REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def report_statement(label:Identifier):ReportStatement = {
         var reportStmt :ReportStatement = null;val report_statement_StartIndex:Int = input.index()
        var REPORT400 :Token=null
        var report_expression:Expression = null

        var severity_expression:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return reportStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1468:2: ( REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1468:4: REPORT report_expression= expression ( SEVERITY severity_expression= expression )? SEMICOLON
            {
            	REPORT400=`match`(input,REPORT,FOLLOW_REPORT_in_report_statement8309).asInstanceOf[Token]; if (state.failed) return reportStmt;
            	pushFollow(FOLLOW_expression_in_report_statement8313)
            	report_expression=expression();

            	state._fsp-=1
            	if (state.failed) return reportStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1468:40: ( SEVERITY severity_expression= expression )?
            	var alt192 :Int=2
            	val LA192_0:Int = input.LA(1)

            	if ( (LA192_0==SEVERITY) ) {
            	    alt192=1
            	}
            	alt192 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1468:41: SEVERITY severity_expression= expression
            	        {
            	        	`match`(input,SEVERITY,FOLLOW_SEVERITY_in_report_statement8316); if (state.failed) return reportStmt;
            	        	pushFollow(FOLLOW_expression_in_report_statement8320)
            	        	severity_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return reportStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_report_statement8324); if (state.failed) return reportStmt;
            	if ( state.backtracking==0 ) {
            	  reportStmt=new ReportStatement(toPosition(REPORT400),label,report_expression,severity_expression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, report_statement_StartIndex) }
        }
        return reportStmt
    }
    // $ANTLR end "report_statement"

    // $ANTLR start "signal_assignment_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1472:1: signal_assignment_statement[Identifier label] returns [SignalAssignmentStatement signalAssignStmt] : ( simple_signal_assignment[$label] ) ;
    @throws(classOf[RecognitionException])
    def signal_assignment_statement(label:Identifier):SignalAssignmentStatement = {
         var signalAssignStmt :SignalAssignmentStatement = null;val signal_assignment_statement_StartIndex:Int = input.index()
        var simple_signal_assignment401:SimpleSignalAssignmentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return signalAssignStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1473:2: ( ( simple_signal_assignment[$label] ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1473:4: ( simple_signal_assignment[$label] )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1473:4: ( simple_signal_assignment[$label] )
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1474:3: simple_signal_assignment[$label]
            	{
            		pushFollow(FOLLOW_simple_signal_assignment_in_signal_assignment_statement8357)
            		simple_signal_assignment401=simple_signal_assignment(label);

            		state._fsp-=1
            		if (state.failed) return signalAssignStmt;
            		if ( state.backtracking==0 ) {
            		  signalAssignStmt=simple_signal_assignment401
            		}

            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, signal_assignment_statement_StartIndex) }
        }
        return signalAssignStmt
    }
    // $ANTLR end "signal_assignment_statement"

    // $ANTLR start "simple_signal_assignment"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1480:1: simple_signal_assignment[Identifier label] returns [SimpleSignalAssignmentStatement stmt] : target LEQ ( delay_mechanism )? waveform SEMICOLON ;
    @throws(classOf[RecognitionException])
    def simple_signal_assignment(label:Identifier):SimpleSignalAssignmentStatement = {
         var stmt :SimpleSignalAssignmentStatement = null;val simple_signal_assignment_StartIndex:Int = input.index()
        var LEQ402 :Token=null
        var target403:Target = null

        var delay_mechanism404:DelayMechanism = null

        var waveform405:Waveform = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1481:2: ( target LEQ ( delay_mechanism )? waveform SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1481:4: target LEQ ( delay_mechanism )? waveform SEMICOLON
            {
            	pushFollow(FOLLOW_target_in_simple_signal_assignment8389)
            	target403=target();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	LEQ402=`match`(input,LEQ,FOLLOW_LEQ_in_simple_signal_assignment8391).asInstanceOf[Token]; if (state.failed) return stmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1481:15: ( delay_mechanism )?
            	var alt193 :Int=2
            	val LA193_0:Int = input.LA(1)

            	if ( (LA193_0==INERTIAL||LA193_0==REJECT||LA193_0==TRANSPORT) ) {
            	    alt193=1
            	}
            	alt193 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1481:15: delay_mechanism
            	        {
            	        	pushFollow(FOLLOW_delay_mechanism_in_simple_signal_assignment8393)
            	        	delay_mechanism404=delay_mechanism();

            	        	state._fsp-=1
            	        	if (state.failed) return stmt;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_waveform_in_simple_signal_assignment8396)
            	waveform405=waveform();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_signal_assignment8398); if (state.failed) return stmt;
            	if ( state.backtracking==0 ) {
            	  stmt=new SimpleSignalAssignmentStatement(toPosition(LEQ402),label,target403,delay_mechanism404,waveform405)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, simple_signal_assignment_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "simple_signal_assignment"

    // $ANTLR start "delay_mechanism"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1521:1: delay_mechanism returns [DelayMechanism mechanism] : ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL );
    @throws(classOf[RecognitionException])
    def delay_mechanism():DelayMechanism = {
         var mechanism :DelayMechanism = null;val delay_mechanism_StartIndex:Int = input.index()
        var time_expression:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return mechanism }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1526:2: ( TRANSPORT | ( REJECT time_expression= expression )? INERTIAL )
            var alt195 :Int=2
            val LA195_0:Int = input.LA(1)

            if ( (LA195_0==TRANSPORT) ) {
                alt195=1
            }
            else if ( (LA195_0==INERTIAL||LA195_0==REJECT) ) {
                alt195=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return mechanism}
                val nvae = new NoViableAltException("", 195, 0, input)

                throw nvae
            }
            alt195 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1526:4: TRANSPORT
                    {
                    	`match`(input,TRANSPORT,FOLLOW_TRANSPORT_in_delay_mechanism8436); if (state.failed) return mechanism;

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1527:5: ( REJECT time_expression= expression )? INERTIAL
                    {
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1527:5: ( REJECT time_expression= expression )?
                    	var alt194 :Int=2
                    	val LA194_0:Int = input.LA(1)

                    	if ( (LA194_0==REJECT) ) {
                    	    alt194=1
                    	}
                    	alt194 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1527:6: REJECT time_expression= expression
                    	        {
                    	        	`match`(input,REJECT,FOLLOW_REJECT_in_delay_mechanism8444); if (state.failed) return mechanism;
                    	        	pushFollow(FOLLOW_expression_in_delay_mechanism8448)
                    	        	time_expression=expression();

                    	        	state._fsp-=1
                    	        	if (state.failed) return mechanism;

                    	        }
                    	    case _ => 
                    	}

                    	`match`(input,INERTIAL,FOLLOW_INERTIAL_in_delay_mechanism8452); if (state.failed) return mechanism;

                    }
                case _ =>
            }
            if ( state.backtracking==0 ) {
              	
              	if (time_expression==null) mechanism=new DelayMechanism(DelayMechanism.DelayType.TRANSPORT,None)
              	else mechanism=new DelayMechanism(DelayMechanism.DelayType.INERTIAL,time_expression)

            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, delay_mechanism_StartIndex) }
        }
        return mechanism
    }
    // $ANTLR end "delay_mechanism"

    // $ANTLR start "waveform_element"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1530:1: waveform_element returns [Waveform.Element element] : value_expression= expression ( AFTER time_expression= expression )? ;
    @throws(classOf[RecognitionException])
    def waveform_element():Waveform.Element = {
         var element :Waveform.Element = null;val waveform_element_StartIndex:Int = input.index()
        var value_expression:Expression = null

        var time_expression:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return element }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1531:3: (value_expression= expression ( AFTER time_expression= expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1531:5: value_expression= expression ( AFTER time_expression= expression )?
            {
            	pushFollow(FOLLOW_expression_in_waveform_element8471)
            	value_expression=expression();

            	state._fsp-=1
            	if (state.failed) return element;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1531:33: ( AFTER time_expression= expression )?
            	var alt196 :Int=2
            	val LA196_0:Int = input.LA(1)

            	if ( (LA196_0==AFTER) ) {
            	    alt196=1
            	}
            	alt196 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1531:34: AFTER time_expression= expression
            	        {
            	        	`match`(input,AFTER,FOLLOW_AFTER_in_waveform_element8474); if (state.failed) return element;
            	        	pushFollow(FOLLOW_expression_in_waveform_element8478)
            	        	time_expression=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return element;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  return new Waveform.Element(value_expression,time_expression)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, waveform_element_StartIndex) }
        }
        return element
    }
    // $ANTLR end "waveform_element"

    // $ANTLR start "waveform"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1535:1: waveform returns [Waveform waveForm] : (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED );
    @throws(classOf[RecognitionException])
    def waveform():Waveform = {
         var waveForm :Waveform = null;val waveform_StartIndex:Int = input.index()
        var e1:Waveform.Element = null

        var e2:Waveform.Element = null



        	val elements=new Buffer[Waveform.Element]()
        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return waveForm }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1540:2: (e1= waveform_element ( COMMA e2= waveform_element )* | UNAFFECTED )
            var alt198 :Int=2
            val LA198_0:Int = input.LA(1)

            if ( (LA198_0==ABS||LA198_0==NEW||(LA198_0>=NOT && LA198_0<=NULL)||LA198_0==LPAREN||(LA198_0>=PLUS && LA198_0<=MINUS)||LA198_0==STRING_LITERAL||LA198_0==CHARACTER_LITERAL||(LA198_0>=REAL_LITERAL && LA198_0<=EXTENDED_IDENTIFIER)) ) {
                alt198=1
            }
            else if ( (LA198_0==UNAFFECTED) ) {
                alt198=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return waveForm}
                val nvae = new NoViableAltException("", 198, 0, input)

                throw nvae
            }
            alt198 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1540:4: e1= waveform_element ( COMMA e2= waveform_element )*
                    {
                    	pushFollow(FOLLOW_waveform_element_in_waveform8509)
                    	e1=waveform_element();

                    	state._fsp-=1
                    	if (state.failed) return waveForm;
                    	if ( state.backtracking==0 ) {
                    	  elements += e1
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1540:49: ( COMMA e2= waveform_element )*
                    	var loop197=true
                    	do {
                    	    var alt197:Int=2
                    	    val LA197_0:Int = input.LA(1)

                    	    if ( (LA197_0==COMMA) ) {
                    	        alt197=1
                    	    }


                    	    alt197 match {
                    		case 1 =>
                    		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1540:50: COMMA e2= waveform_element
                    		    {
                    		    	`match`(input,COMMA,FOLLOW_COMMA_in_waveform8513); if (state.failed) return waveForm;
                    		    	pushFollow(FOLLOW_waveform_element_in_waveform8517)
                    		    	e2=waveform_element();

                    		    	state._fsp-=1
                    		    	if (state.failed) return waveForm;
                    		    	if ( state.backtracking==0 ) {
                    		    	  elements += e2
                    		    	}

                    		    }
                    		case _ => loop197=false
                    	    }
                    	} while (loop197);


                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1541:5: UNAFFECTED
                    {
                    	`match`(input,UNAFFECTED,FOLLOW_UNAFFECTED_in_waveform8526); if (state.failed) return waveForm;
                    	if ( state.backtracking==0 ) {
                    	  waveForm=new Waveform(toPosition(firstToken),elements.toList)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, waveform_StartIndex) }
        }
        return waveForm
    }
    // $ANTLR end "waveform"

    // $ANTLR start "variable_assignment_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1545:1: variable_assignment_statement[Identifier label] returns [VariableAssignmentStatement varAssignStmt] : ( simple_variable_assignment[$label] ) ;
    @throws(classOf[RecognitionException])
    def variable_assignment_statement(label:Identifier):VariableAssignmentStatement = {
         var varAssignStmt :VariableAssignmentStatement = null;val variable_assignment_statement_StartIndex:Int = input.index()
        var simple_variable_assignment406:SimpleVariableAssignmentStatement = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return varAssignStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1546:2: ( ( simple_variable_assignment[$label] ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1546:4: ( simple_variable_assignment[$label] )
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1546:4: ( simple_variable_assignment[$label] )
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1546:5: simple_variable_assignment[$label]
            	{
            		pushFollow(FOLLOW_simple_variable_assignment_in_variable_assignment_statement8551)
            		simple_variable_assignment406=simple_variable_assignment(label);

            		state._fsp-=1
            		if (state.failed) return varAssignStmt;
            		if ( state.backtracking==0 ) {
            		  varAssignStmt=simple_variable_assignment406
            		}

            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, variable_assignment_statement_StartIndex) }
        }
        return varAssignStmt
    }
    // $ANTLR end "variable_assignment_statement"

    // $ANTLR start "simple_variable_assignment"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1553:1: simple_variable_assignment[Identifier label] returns [SimpleVariableAssignmentStatement stmt] : target VAR_ASSIGN expression SEMICOLON ;
    @throws(classOf[RecognitionException])
    def simple_variable_assignment(label:Identifier):SimpleVariableAssignmentStatement = {
         var stmt :SimpleVariableAssignmentStatement = null;val simple_variable_assignment_StartIndex:Int = input.index()
        var VAR_ASSIGN407 :Token=null
        var target408:Target = null

        var expression409:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return stmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1554:2: ( target VAR_ASSIGN expression SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1554:4: target VAR_ASSIGN expression SEMICOLON
            {
            	pushFollow(FOLLOW_target_in_simple_variable_assignment8587)
            	target408=target();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	VAR_ASSIGN407=`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_simple_variable_assignment8589).asInstanceOf[Token]; if (state.failed) return stmt;
            	pushFollow(FOLLOW_expression_in_simple_variable_assignment8591)
            	expression409=expression();

            	state._fsp-=1
            	if (state.failed) return stmt;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_variable_assignment8593); if (state.failed) return stmt;
            	if ( state.backtracking==0 ) {
            	  stmt=new SimpleVariableAssignmentStatement(toPosition(VAR_ASSIGN407),label,target408,expression409)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, simple_variable_assignment_StartIndex) }
        }
        return stmt
    }
    // $ANTLR end "simple_variable_assignment"

    // $ANTLR start "procedure_call_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1570:1: procedure_call_statement[Identifier label] returns [ProcedureCallStatement procedureCallStmt] : procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def procedure_call_statement(label:Identifier):ProcedureCallStatement = {
         var procedureCallStmt :ProcedureCallStatement = null;val procedure_call_statement_StartIndex:Int = input.index()
        var procedure_name:SelectedName = null

        var association_list410:AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return procedureCallStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1571:2: (procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1571:4: procedure_name= selected_name ( LPAREN association_list RPAREN )? SEMICOLON
            {
            	pushFollow(FOLLOW_selected_name_in_procedure_call_statement8621)
            	procedure_name=selected_name();

            	state._fsp-=1
            	if (state.failed) return procedureCallStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1571:33: ( LPAREN association_list RPAREN )?
            	var alt199 :Int=2
            	val LA199_0:Int = input.LA(1)

            	if ( (LA199_0==LPAREN) ) {
            	    alt199=1
            	}
            	alt199 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1571:34: LPAREN association_list RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_procedure_call_statement8624); if (state.failed) return procedureCallStmt;
            	        	pushFollow(FOLLOW_association_list_in_procedure_call_statement8626)
            	        	association_list410=association_list();

            	        	state._fsp-=1
            	        	if (state.failed) return procedureCallStmt;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_procedure_call_statement8628); if (state.failed) return procedureCallStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_call_statement8632); if (state.failed) return procedureCallStmt;
            	if ( state.backtracking==0 ) {
            	  procedureCallStmt=new ProcedureCallStatement(label,procedure_name,association_list410)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, procedure_call_statement_StartIndex) }
        }
        return procedureCallStmt
    }
    // $ANTLR end "procedure_call_statement"

    // $ANTLR start "if_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1575:1: if_statement[Identifier label] returns [IfStatement ifStmt] : ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def if_statement(label:Identifier):IfStatement = {
         var ifStmt :IfStatement = null;val if_statement_StartIndex:Int = input.index()
        var ifToken :Token=null
        var if_condition:Expression = null

        var if_sequential_statement:Seq[SequentialStatement] = null

        var elsif_condition:Expression = null

        var elsif_sequential_statement:Seq[SequentialStatement] = null

        var else_sequential_statement:Seq[SequentialStatement] = null

        var end_if_label:Identifier = null



        	val ifList=new Buffer[IfStatement.IfThenPart]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return ifStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1579:2: (ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1579:4: ifToken= IF if_condition= condition THEN if_sequential_statement= sequence_of_statements ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )* ( ELSE else_sequential_statement= sequence_of_statements )? END IF (end_if_label= identifier )? SEMICOLON
            {
            	ifToken=`match`(input,IF,FOLLOW_IF_in_if_statement8660).asInstanceOf[Token]; if (state.failed) return ifStmt;
            	pushFollow(FOLLOW_condition_in_if_statement8664)
            	if_condition=condition();

            	state._fsp-=1
            	if (state.failed) return ifStmt;
            	`match`(input,THEN,FOLLOW_THEN_in_if_statement8666); if (state.failed) return ifStmt;
            	pushFollow(FOLLOW_sequence_of_statements_in_if_statement8673)
            	if_sequential_statement=sequence_of_statements();

            	state._fsp-=1
            	if (state.failed) return ifStmt;
            	if ( state.backtracking==0 ) {
            	  ifList += new IfStatement.IfThenPart(if_condition,if_sequential_statement)
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1581:3: ( ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements )*
            	var loop200=true
            	do {
            	    var alt200:Int=2
            	    val LA200_0:Int = input.LA(1)

            	    if ( (LA200_0==ELSIF) ) {
            	        alt200=1
            	    }


            	    alt200 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1581:4: ELSIF elsif_condition= condition THEN elsif_sequential_statement= sequence_of_statements
            		    {
            		    	`match`(input,ELSIF,FOLLOW_ELSIF_in_if_statement8680); if (state.failed) return ifStmt;
            		    	pushFollow(FOLLOW_condition_in_if_statement8684)
            		    	elsif_condition=condition();

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt;
            		    	`match`(input,THEN,FOLLOW_THEN_in_if_statement8686); if (state.failed) return ifStmt;
            		    	pushFollow(FOLLOW_sequence_of_statements_in_if_statement8694)
            		    	elsif_sequential_statement=sequence_of_statements();

            		    	state._fsp-=1
            		    	if (state.failed) return ifStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  ifList += new IfStatement.IfThenPart(elsif_condition,elsif_sequential_statement)
            		    	}

            		    }
            		case _ => loop200=false
            	    }
            	} while (loop200);

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1585:3: ( ELSE else_sequential_statement= sequence_of_statements )?
            	var alt201 :Int=2
            	val LA201_0:Int = input.LA(1)

            	if ( (LA201_0==ELSE) ) {
            	    alt201=1
            	}
            	alt201 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1585:4: ELSE else_sequential_statement= sequence_of_statements
            	        {
            	        	`match`(input,ELSE,FOLLOW_ELSE_in_if_statement8712); if (state.failed) return ifStmt;
            	        	pushFollow(FOLLOW_sequence_of_statements_in_if_statement8720)
            	        	else_sequential_statement=sequence_of_statements();

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,END,FOLLOW_END_in_if_statement8726); if (state.failed) return ifStmt;
            	`match`(input,IF,FOLLOW_IF_in_if_statement8728); if (state.failed) return ifStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1587:22: (end_if_label= identifier )?
            	var alt202 :Int=2
            	val LA202_0:Int = input.LA(1)

            	if ( ((LA202_0>=BASIC_IDENTIFIER && LA202_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt202=1
            	}
            	alt202 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1587:22: end_if_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_if_statement8732)
            	        	end_if_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return ifStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_if_statement8735); if (state.failed) return ifStmt;
            	if ( state.backtracking==0 ) {
            	  ifStmt=new IfStatement(toPosition(ifToken),label,ifList.toList,else_sequential_statement,end_if_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, if_statement_StartIndex) }
        }
        return ifStmt
    }
    // $ANTLR end "if_statement"

    // $ANTLR start "case_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1591:1: case_statement[Identifier label] returns [CaseStatement caseStmt] : caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def case_statement(label:Identifier):CaseStatement = {
         var caseStmt :CaseStatement = null;val case_statement_StartIndex:Int = input.index()
        var caseToken :Token=null
        var end_case_label:Identifier = null

        var choices411:Choices = null

        var sequence_of_statements412:Seq[SequentialStatement] = null

        var expression413:Expression = null



        	val alternatives=new Buffer[CaseStatement.When]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return caseStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1595:2: (caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1595:4: caseToken= CASE expression IS ( WHEN choices ARROW sequence_of_statements )+ END CASE (end_case_label= identifier )? SEMICOLON
            {
            	caseToken=`match`(input,CASE,FOLLOW_CASE_in_case_statement8763).asInstanceOf[Token]; if (state.failed) return caseStmt;
            	pushFollow(FOLLOW_expression_in_case_statement8767)
            	expression413=expression();

            	state._fsp-=1
            	if (state.failed) return caseStmt;
            	`match`(input,IS,FOLLOW_IS_in_case_statement8769); if (state.failed) return caseStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1596:4: ( WHEN choices ARROW sequence_of_statements )+
            	var cnt203:Int=0
            	var loop203 = true
            	do {
            	    var alt203:Int=2
            	    val LA203_0:Int = input.LA(1)

            	    if ( (LA203_0==WHEN) ) {
            	        alt203=1
            	    }


            	    alt203 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1596:5: WHEN choices ARROW sequence_of_statements
            		    {
            		    	`match`(input,WHEN,FOLLOW_WHEN_in_case_statement8775); if (state.failed) return caseStmt;
            		    	pushFollow(FOLLOW_choices_in_case_statement8777)
            		    	choices411=choices();

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt;
            		    	`match`(input,ARROW,FOLLOW_ARROW_in_case_statement8779); if (state.failed) return caseStmt;
            		    	pushFollow(FOLLOW_sequence_of_statements_in_case_statement8781)
            		    	sequence_of_statements412=sequence_of_statements();

            		    	state._fsp-=1
            		    	if (state.failed) return caseStmt;
            		    	if ( state.backtracking==0 ) {
            		    	  alternatives += new CaseStatement.When(choices411,sequence_of_statements412)
            		    	}

            		    }
            		case _ =>
            		    if ( cnt203 >= 1 ) loop203=false
            		    else {
            		    	    if (state.backtracking>0) {state.failed=true; return caseStmt}
            	            	    val eee = new EarlyExitException(203, input)
            	            	    throw eee
            		    }
            	    }
            	    cnt203 += 1
            	} while (loop203);

            	`match`(input,END,FOLLOW_END_in_case_statement8789); if (state.failed) return caseStmt;
            	`match`(input,CASE,FOLLOW_CASE_in_case_statement8791); if (state.failed) return caseStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1597:50: (end_case_label= identifier )?
            	var alt204 :Int=2
            	val LA204_0:Int = input.LA(1)

            	if ( ((LA204_0>=BASIC_IDENTIFIER && LA204_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt204=1
            	}
            	alt204 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1597:50: end_case_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_case_statement8797)
            	        	end_case_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return caseStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_case_statement8800); if (state.failed) return caseStmt;
            	if ( state.backtracking==0 ) {
            	  caseStmt=new CaseStatement(toPosition(caseToken),label,expression413,alternatives.toList,end_case_label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, case_statement_StartIndex) }
        }
        return caseStmt
    }
    // $ANTLR end "case_statement"

    // $ANTLR start "iteration_scheme"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1601:1: iteration_scheme returns [Either[Expression,(Identifier,DiscreteRange)] scheme] : ( WHILE condition | FOR identifier IN discrete_range );
    @throws(classOf[RecognitionException])
    def iteration_scheme():Either[Expression,(Identifier,DiscreteRange)] = {
         var scheme :Either[Expression,(Identifier,DiscreteRange)] = null;val iteration_scheme_StartIndex:Int = input.index()
        var condition414:Expression = null

        var identifier415:Identifier = null

        var discrete_range416:DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return scheme }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1602:2: ( WHILE condition | FOR identifier IN discrete_range )
            var alt205 :Int=2
            val LA205_0:Int = input.LA(1)

            if ( (LA205_0==WHILE) ) {
                alt205=1
            }
            else if ( (LA205_0==FOR) ) {
                alt205=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return scheme}
                val nvae = new NoViableAltException("", 205, 0, input)

                throw nvae
            }
            alt205 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1602:4: WHILE condition
                    {
                    	`match`(input,WHILE,FOLLOW_WHILE_in_iteration_scheme8820); if (state.failed) return scheme;
                    	pushFollow(FOLLOW_condition_in_iteration_scheme8822)
                    	condition414=condition();

                    	state._fsp-=1
                    	if (state.failed) return scheme;
                    	if ( state.backtracking==0 ) {
                    	  scheme=Left(condition414)
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1603:5: FOR identifier IN discrete_range
                    {
                    	`match`(input,FOR,FOLLOW_FOR_in_iteration_scheme8830); if (state.failed) return scheme;
                    	pushFollow(FOLLOW_identifier_in_iteration_scheme8832)
                    	identifier415=identifier();

                    	state._fsp-=1
                    	if (state.failed) return scheme;
                    	`match`(input,IN,FOLLOW_IN_in_iteration_scheme8834); if (state.failed) return scheme;
                    	pushFollow(FOLLOW_discrete_range_in_iteration_scheme8836)
                    	discrete_range416=discrete_range();

                    	state._fsp-=1
                    	if (state.failed) return scheme;
                    	if ( state.backtracking==0 ) {
                    	  scheme=Right((identifier415,discrete_range416))
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, iteration_scheme_StartIndex) }
        }
        return scheme
    }
    // $ANTLR end "iteration_scheme"

    // $ANTLR start "loop_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1606:1: loop_statement[Identifier label] returns [SequentialStatement loopStmt] : (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def loop_statement(label:Identifier):SequentialStatement = {
         var loopStmt :SequentialStatement = null;val loop_statement_StartIndex:Int = input.index()
        var stmtType:Either[Expression,(Identifier,DiscreteRange)] = null

        var end_loop_label:Identifier = null

        var sequence_of_statements417:Seq[SequentialStatement] = null



        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return loopStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1610:2: ( (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1610:4: (stmtType= iteration_scheme )? LOOP sequence_of_statements END LOOP (end_loop_label= identifier )? SEMICOLON
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1610:12: (stmtType= iteration_scheme )?
            	var alt206 :Int=2
            	val LA206_0:Int = input.LA(1)

            	if ( (LA206_0==FOR||LA206_0==WHILE) ) {
            	    alt206=1
            	}
            	alt206 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1610:12: stmtType= iteration_scheme
            	        {
            	        	pushFollow(FOLLOW_iteration_scheme_in_loop_statement8865)
            	        	stmtType=iteration_scheme();

            	        	state._fsp-=1
            	        	if (state.failed) return loopStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,LOOP,FOLLOW_LOOP_in_loop_statement8868); if (state.failed) return loopStmt;
            	pushFollow(FOLLOW_sequence_of_statements_in_loop_statement8873)
            	sequence_of_statements417=sequence_of_statements();

            	state._fsp-=1
            	if (state.failed) return loopStmt;
            	`match`(input,END,FOLLOW_END_in_loop_statement8877); if (state.failed) return loopStmt;
            	`match`(input,LOOP,FOLLOW_LOOP_in_loop_statement8879); if (state.failed) return loopStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1612:26: (end_loop_label= identifier )?
            	var alt207 :Int=2
            	val LA207_0:Int = input.LA(1)

            	if ( ((LA207_0>=BASIC_IDENTIFIER && LA207_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt207=1
            	}
            	alt207 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1612:26: end_loop_label= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_loop_statement8883)
            	        	end_loop_label=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return loopStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_loop_statement8886); if (state.failed) return loopStmt;
            	if ( state.backtracking==0 ) {
            	  		
            	  			val position=toPosition(firstToken)
            	  			loopStmt=Option(stmtType) match {
            	  				case Some(x)=> x match {
            	  					case Left(condition)=>new WhileStatement(position,label,condition,sequence_of_statements417,end_loop_label)
            	  					case Right((identifier,discreteRange)) =>new ForStatement(position,label,identifier,discreteRange,sequence_of_statements417,end_loop_label)
            	  				}
            	  				case None =>new LoopStatement(position,label,sequence_of_statements417,end_loop_label)
            	  			}
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, loop_statement_StartIndex) }
        }
        return loopStmt
    }
    // $ANTLR end "loop_statement"

    // $ANTLR start "next_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1625:1: next_statement[Identifier label] returns [NextStatement nextStmt] : NEXT ( identifier )? ( WHEN condition )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def next_statement(label:Identifier):NextStatement = {
         var nextStmt :NextStatement = null;val next_statement_StartIndex:Int = input.index()
        var NEXT418 :Token=null
        var identifier419:Identifier = null

        var condition420:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return nextStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:2: ( NEXT ( identifier )? ( WHEN condition )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:4: NEXT ( identifier )? ( WHEN condition )? SEMICOLON
            {
            	NEXT418=`match`(input,NEXT,FOLLOW_NEXT_in_next_statement8907).asInstanceOf[Token]; if (state.failed) return nextStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:9: ( identifier )?
            	var alt208 :Int=2
            	val LA208_0:Int = input.LA(1)

            	if ( ((LA208_0>=BASIC_IDENTIFIER && LA208_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt208=1
            	}
            	alt208 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:9: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_next_statement8909)
            	        	identifier419=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return nextStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:21: ( WHEN condition )?
            	var alt209 :Int=2
            	val LA209_0:Int = input.LA(1)

            	if ( (LA209_0==WHEN) ) {
            	    alt209=1
            	}
            	alt209 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1626:22: WHEN condition
            	        {
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_next_statement8913); if (state.failed) return nextStmt;
            	        	pushFollow(FOLLOW_condition_in_next_statement8915)
            	        	condition420=condition();

            	        	state._fsp-=1
            	        	if (state.failed) return nextStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_next_statement8919); if (state.failed) return nextStmt;
            	if ( state.backtracking==0 ) {
            	  nextStmt=new NextStatement(toPosition(NEXT418),label,identifier419,condition420)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, next_statement_StartIndex) }
        }
        return nextStmt
    }
    // $ANTLR end "next_statement"

    // $ANTLR start "exit_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1630:1: exit_statement[Identifier label] returns [ExitStatement exitStmt] : EXIT ( identifier )? ( WHEN condition )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def exit_statement(label:Identifier):ExitStatement = {
         var exitStmt :ExitStatement = null;val exit_statement_StartIndex:Int = input.index()
        var EXIT421 :Token=null
        var identifier422:Identifier = null

        var condition423:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return exitStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:2: ( EXIT ( identifier )? ( WHEN condition )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:4: EXIT ( identifier )? ( WHEN condition )? SEMICOLON
            {
            	EXIT421=`match`(input,EXIT,FOLLOW_EXIT_in_exit_statement8941).asInstanceOf[Token]; if (state.failed) return exitStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:9: ( identifier )?
            	var alt210 :Int=2
            	val LA210_0:Int = input.LA(1)

            	if ( ((LA210_0>=BASIC_IDENTIFIER && LA210_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt210=1
            	}
            	alt210 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:9: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_exit_statement8943)
            	        	identifier422=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return exitStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:21: ( WHEN condition )?
            	var alt211 :Int=2
            	val LA211_0:Int = input.LA(1)

            	if ( (LA211_0==WHEN) ) {
            	    alt211=1
            	}
            	alt211 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1631:22: WHEN condition
            	        {
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_exit_statement8947); if (state.failed) return exitStmt;
            	        	pushFollow(FOLLOW_condition_in_exit_statement8949)
            	        	condition423=condition();

            	        	state._fsp-=1
            	        	if (state.failed) return exitStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_exit_statement8953); if (state.failed) return exitStmt;
            	if ( state.backtracking==0 ) {
            	  exitStmt=new ExitStatement(toPosition(EXIT421),label,identifier422,condition423)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, exit_statement_StartIndex) }
        }
        return exitStmt
    }
    // $ANTLR end "exit_statement"

    // $ANTLR start "return_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1635:1: return_statement[Identifier label] returns [ReturnStatement returnStmt] : RETURN ( expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def return_statement(label:Identifier):ReturnStatement = {
         var returnStmt :ReturnStatement = null;val return_statement_StartIndex:Int = input.index()
        var RETURN424 :Token=null
        var expression425:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return returnStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1636:2: ( RETURN ( expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1636:4: RETURN ( expression )? SEMICOLON
            {
            	RETURN424=`match`(input,RETURN,FOLLOW_RETURN_in_return_statement8975).asInstanceOf[Token]; if (state.failed) return returnStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1636:11: ( expression )?
            	var alt212 :Int=2
            	val LA212_0:Int = input.LA(1)

            	if ( (LA212_0==ABS||LA212_0==NEW||(LA212_0>=NOT && LA212_0<=NULL)||LA212_0==LPAREN||(LA212_0>=PLUS && LA212_0<=MINUS)||LA212_0==STRING_LITERAL||LA212_0==CHARACTER_LITERAL||(LA212_0>=REAL_LITERAL && LA212_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt212=1
            	}
            	alt212 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1636:11: expression
            	        {
            	        	pushFollow(FOLLOW_expression_in_return_statement8977)
            	        	expression425=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return returnStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_statement8980); if (state.failed) return returnStmt;
            	if ( state.backtracking==0 ) {
            	  returnStmt=new ReturnStatement(toPosition(RETURN424),label,expression425)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, return_statement_StartIndex) }
        }
        return returnStmt
    }
    // $ANTLR end "return_statement"

    // $ANTLR start "null_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1640:1: null_statement[Identifier label] returns [NullStatement nullStmt] : NULL SEMICOLON ;
    @throws(classOf[RecognitionException])
    def null_statement(label:Identifier):NullStatement = {
         var nullStmt :NullStatement = null;val null_statement_StartIndex:Int = input.index()
        var NULL426 :Token=null

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return nullStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1641:2: ( NULL SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1641:4: NULL SEMICOLON
            {
            	NULL426=`match`(input,NULL,FOLLOW_NULL_in_null_statement9003).asInstanceOf[Token]; if (state.failed) return nullStmt;
            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_null_statement9005); if (state.failed) return nullStmt;
            	if ( state.backtracking==0 ) {
            	  nullStmt=new NullStatement(toPosition(NULL426),label)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, null_statement_StartIndex) }
        }
        return nullStmt
    }
    // $ANTLR end "null_statement"

    // $ANTLR start "ams_break_statement"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1645:1: ams_break_statement[Identifier label] returns [AMSBreakStatement breakStmt] : BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON ;
    @throws(classOf[RecognitionException])
    def ams_break_statement(label:Identifier):AMSBreakStatement = {
         var breakStmt :AMSBreakStatement = null;val ams_break_statement_StartIndex:Int = input.index()
        var BREAK427 :Token=null
        var ams_break_element_list428:Seq[BreakElement] = null

        var expression429:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return breakStmt }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:2: ( BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:4: BREAK ( ams_break_element_list )? ( WHEN expression )? SEMICOLON
            {
            	BREAK427=`match`(input,BREAK,FOLLOW_BREAK_in_ams_break_statement9026).asInstanceOf[Token]; if (state.failed) return breakStmt;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:10: ( ams_break_element_list )?
            	var alt213 :Int=2
            	val LA213_0:Int = input.LA(1)

            	if ( (LA213_0==FOR||LA213_0==STRING_LITERAL||(LA213_0>=BASIC_IDENTIFIER && LA213_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt213=1
            	}
            	alt213 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:10: ams_break_element_list
            	        {
            	        	pushFollow(FOLLOW_ams_break_element_list_in_ams_break_statement9028)
            	        	ams_break_element_list428=ams_break_element_list();

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:34: ( WHEN expression )?
            	var alt214 :Int=2
            	val LA214_0:Int = input.LA(1)

            	if ( (LA214_0==WHEN) ) {
            	    alt214=1
            	}
            	alt214 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1646:35: WHEN expression
            	        {
            	        	`match`(input,WHEN,FOLLOW_WHEN_in_ams_break_statement9032); if (state.failed) return breakStmt;
            	        	pushFollow(FOLLOW_expression_in_ams_break_statement9034)
            	        	expression429=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return breakStmt;

            	        }
            	    case _ => 
            	}

            	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_ams_break_statement9038); if (state.failed) return breakStmt;
            	if ( state.backtracking==0 ) {
            	  breakStmt=new AMSBreakStatement(toPosition(BREAK427),label,ams_break_element_list428,expression429)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, ams_break_statement_StartIndex) }
        }
        return breakStmt
    }
    // $ANTLR end "ams_break_statement"

    // $ANTLR start "ams_break_element_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1650:1: ams_break_element_list returns [Seq[BreakElement] list] : e1= ams_break_element ( COMMA e2= ams_break_element )* ;
    @throws(classOf[RecognitionException])
    def ams_break_element_list():Seq[BreakElement] = {
         var list :Seq[BreakElement] = null;val ams_break_element_list_StartIndex:Int = input.index()
        var e1:BreakElement = null

        var e2:BreakElement = null



        	val elements=new Buffer[BreakElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1654:2: (e1= ams_break_element ( COMMA e2= ams_break_element )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1654:4: e1= ams_break_element ( COMMA e2= ams_break_element )*
            {
            	pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list9064)
            	e1=ams_break_element();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1654:55: ( COMMA e2= ams_break_element )*
            	var loop215=true
            	do {
            	    var alt215:Int=2
            	    val LA215_0:Int = input.LA(1)

            	    if ( (LA215_0==COMMA) ) {
            	        alt215=1
            	    }


            	    alt215 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1654:56: COMMA e2= ams_break_element
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_ams_break_element_list9068); if (state.failed) return list;
            		    	pushFollow(FOLLOW_ams_break_element_in_ams_break_element_list9072)
            		    	e2=ams_break_element();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop215=false
            	    }
            	} while (loop215);

            	if ( state.backtracking==0 ) {
            	  list=elements.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, ams_break_element_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "ams_break_element_list"

    // $ANTLR start "ams_break_element"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1658:1: ams_break_element returns [BreakElement breakElement] : ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression ;
    @throws(classOf[RecognitionException])
    def ams_break_element():BreakElement = {
         var breakElement :BreakElement = null;val ams_break_element_StartIndex:Int = input.index()
        var quantity_name1:Name = null

        var quantity_name2:Name = null

        var expr:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return breakElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1659:2: ( ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1659:5: ( FOR quantity_name1= name USE )? quantity_name2= name ARROW expr= expression
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1659:5: ( FOR quantity_name1= name USE )?
            	var alt216 :Int=2
            	val LA216_0:Int = input.LA(1)

            	if ( (LA216_0==FOR) ) {
            	    alt216=1
            	}
            	alt216 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1659:6: FOR quantity_name1= name USE
            	        {
            	        	`match`(input,FOR,FOLLOW_FOR_in_ams_break_element9101); if (state.failed) return breakElement;
            	        	pushFollow(FOLLOW_name_in_ams_break_element9105)
            	        	quantity_name1=name();

            	        	state._fsp-=1
            	        	if (state.failed) return breakElement;
            	        	`match`(input,USE,FOLLOW_USE_in_ams_break_element9107); if (state.failed) return breakElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_name_in_ams_break_element9113)
            	quantity_name2=name();

            	state._fsp-=1
            	if (state.failed) return breakElement;
            	`match`(input,ARROW,FOLLOW_ARROW_in_ams_break_element9115); if (state.failed) return breakElement;
            	pushFollow(FOLLOW_expression_in_ams_break_element9119)
            	expr=expression();

            	state._fsp-=1
            	if (state.failed) return breakElement;
            	if ( state.backtracking==0 ) {
            	  breakElement=new BreakElement(quantity_name1,quantity_name2,expr)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, ams_break_element_StartIndex) }
        }
        return breakElement
    }
    // $ANTLR end "ams_break_element"

    // $ANTLR start "interface_element_procedure"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1664:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
    @throws(classOf[RecognitionException])
    def interface_element_procedure():InterfaceList.AbstractInterfaceElement = {
         var element :InterfaceList.AbstractInterfaceElement = null;val interface_element_procedure_StartIndex:Int = input.index()
        var interface_constant_declaration430:InterfaceList.InterfaceConstantDeclaration = null

        var interface_variable_declaration431:InterfaceList.InterfaceVariableDeclaration = null

        var interface_signal_declaration_procedure432:InterfaceList.InterfaceSignalDeclaration = null

        var interface_file_declaration433:InterfaceList.InterfaceFileDeclaration = null

        var ams_interface_terminal_declaration434:InterfaceList.InterfaceTerminalDeclaration = null

        var ams_interface_quantity_declaration435:InterfaceList.InterfaceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return element }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:2: ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
            var alt218 :Int=5
             alt218 = dfa218.predict(input)
            alt218 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:4: ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration
                    {
                    	pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_procedure9155)
                    	interface_constant_declaration430=interface_constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_constant_declaration430
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:5: ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration
                    {
                    	pushFollow(FOLLOW_interface_variable_declaration_in_interface_element_procedure9180)
                    	interface_variable_declaration431=interface_variable_declaration();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_variable_declaration431
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1667:5: interface_signal_declaration_procedure
                    {
                    	pushFollow(FOLLOW_interface_signal_declaration_procedure_in_interface_element_procedure9189)
                    	interface_signal_declaration_procedure432=interface_signal_declaration_procedure();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_signal_declaration_procedure432
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1668:5: interface_file_declaration
                    {
                    	pushFollow(FOLLOW_interface_file_declaration_in_interface_element_procedure9197)
                    	interface_file_declaration433=interface_file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_file_declaration433
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1669:5: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_procedure", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1669:14: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	var alt217 :Int=2
                    	val LA217_0:Int = input.LA(1)

                    	if ( (LA217_0==TERMINAL) ) {
                    	    alt217=1
                    	}
                    	else if ( (LA217_0==QUANTITY) ) {
                    	    alt217=2
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 217, 0, input)

                    	    throw nvae
                    	}
                    	alt217 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1670:3: ams_interface_terminal_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_procedure9213)
                    	        	ams_interface_terminal_declaration434=ams_interface_terminal_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return element;
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_terminal_declaration434
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1671:4: ams_interface_quantity_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_procedure9220)
                    	        	ams_interface_quantity_declaration435=ams_interface_quantity_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return element;
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_quantity_declaration435
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, interface_element_procedure_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_procedure"

    // $ANTLR start "interface_element_function"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1678:1: interface_element_function returns [InterfaceList.AbstractInterfaceElement element] : ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );
    @throws(classOf[RecognitionException])
    def interface_element_function():InterfaceList.AbstractInterfaceElement = {
         var element :InterfaceList.AbstractInterfaceElement = null;val interface_element_function_StartIndex:Int = input.index()
        var interface_constant_declaration436:InterfaceList.InterfaceConstantDeclaration = null

        var interface_signal_declaration_function437:InterfaceList.InterfaceSignalDeclaration = null

        var interface_file_declaration438:InterfaceList.InterfaceFileDeclaration = null

        var ams_interface_terminal_declaration439:InterfaceList.InterfaceTerminalDeclaration = null

        var ams_interface_quantity_declaration440:InterfaceList.InterfaceQuantityDeclaration = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return element }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1679:2: ( interface_constant_declaration | interface_signal_declaration_function | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) )
            var alt220 :Int=4
            val LA220_0:Int = input.LA(1)

            if ( (LA220_0==CONSTANT||(LA220_0>=BASIC_IDENTIFIER && LA220_0<=EXTENDED_IDENTIFIER)) ) {
                alt220=1
            }
            else if ( (LA220_0==SIGNAL) ) {
                alt220=2
            }
            else if ( (LA220_0==FILE) ) {
                alt220=3
            }
            else if ( ((LA220_0>=TERMINAL && LA220_0<=QUANTITY)) && ((ams))) {
                alt220=4
            }
            else {
                if (state.backtracking>0) {state.failed=true; return element}
                val nvae = new NoViableAltException("", 220, 0, input)

                throw nvae
            }
            alt220 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1679:4: interface_constant_declaration
                    {
                    	pushFollow(FOLLOW_interface_constant_declaration_in_interface_element_function9253)
                    	interface_constant_declaration436=interface_constant_declaration();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_constant_declaration436
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1680:5: interface_signal_declaration_function
                    {
                    	pushFollow(FOLLOW_interface_signal_declaration_function_in_interface_element_function9262)
                    	interface_signal_declaration_function437=interface_signal_declaration_function();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_signal_declaration_function437
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1681:5: interface_file_declaration
                    {
                    	pushFollow(FOLLOW_interface_file_declaration_in_interface_element_function9270)
                    	interface_file_declaration438=interface_file_declaration();

                    	state._fsp-=1
                    	if (state.failed) return element;
                    	if ( state.backtracking==0 ) {
                    	  element=interface_file_declaration438
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1682:5: {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    {
                    	if ( !((ams)) ) {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    throw new FailedPredicateException(input, "interface_element_function", "ams")
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1682:14: ( ams_interface_terminal_declaration | ams_interface_quantity_declaration )
                    	var alt219 :Int=2
                    	val LA219_0:Int = input.LA(1)

                    	if ( (LA219_0==TERMINAL) ) {
                    	    alt219=1
                    	}
                    	else if ( (LA219_0==QUANTITY) ) {
                    	    alt219=2
                    	}
                    	else {
                    	    if (state.backtracking>0) {state.failed=true; return element}
                    	    val nvae = new NoViableAltException("", 219, 0, input)

                    	    throw nvae
                    	}
                    	alt219 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1683:3: ams_interface_terminal_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_interface_terminal_declaration_in_interface_element_function9286)
                    	        	ams_interface_terminal_declaration439=ams_interface_terminal_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return element;
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_terminal_declaration439
                    	        	}

                    	        }case 2 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1684:4: ams_interface_quantity_declaration
                    	        {
                    	        	pushFollow(FOLLOW_ams_interface_quantity_declaration_in_interface_element_function9293)
                    	        	ams_interface_quantity_declaration440=ams_interface_quantity_declaration();

                    	        	state._fsp-=1
                    	        	if (state.failed) return element;
                    	        	if ( state.backtracking==0 ) {
                    	        	  element=ams_interface_quantity_declaration440
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, interface_element_function_StartIndex) }
        }
        return element
    }
    // $ANTLR end "interface_element_function"

    // $ANTLR start "parameter_interface_list_procedure"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1691:1: parameter_interface_list_procedure returns [InterfaceList list] : e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* ;
    @throws(classOf[RecognitionException])
    def parameter_interface_list_procedure():InterfaceList = {
         var list :InterfaceList = null;val parameter_interface_list_procedure_StartIndex:Int = input.index()
        var e1:InterfaceList.AbstractInterfaceElement = null

        var e2:InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1695:2: (e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1695:4: e1= interface_element_procedure ( SEMICOLON e2= interface_element_procedure )*
            {
            	pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9332)
            	e1=interface_element_procedure();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1695:60: ( SEMICOLON e2= interface_element_procedure )*
            	var loop221=true
            	do {
            	    var alt221:Int=2
            	    val LA221_0:Int = input.LA(1)

            	    if ( (LA221_0==SEMICOLON) ) {
            	        alt221=1
            	    }


            	    alt221 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1695:61: SEMICOLON e2= interface_element_procedure
            		    {
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_parameter_interface_list_procedure9336); if (state.failed) return list;
            		    	pushFollow(FOLLOW_interface_element_procedure_in_parameter_interface_list_procedure9340)
            		    	e2=interface_element_procedure();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop221=false
            	    }
            	} while (loop221);

            	if ( state.backtracking==0 ) {
            	  list=new InterfaceList(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, parameter_interface_list_procedure_StartIndex) }
        }
        return list
    }
    // $ANTLR end "parameter_interface_list_procedure"

    // $ANTLR start "parameter_interface_list_function"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1699:1: parameter_interface_list_function returns [InterfaceList list] : e1= interface_element_function ( SEMICOLON e2= interface_element_function )* ;
    @throws(classOf[RecognitionException])
    def parameter_interface_list_function():InterfaceList = {
         var list :InterfaceList = null;val parameter_interface_list_function_StartIndex:Int = input.index()
        var e1:InterfaceList.AbstractInterfaceElement = null

        var e2:InterfaceList.AbstractInterfaceElement = null



        	val elements=new Buffer[InterfaceList.AbstractInterfaceElement]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1703:2: (e1= interface_element_function ( SEMICOLON e2= interface_element_function )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1703:4: e1= interface_element_function ( SEMICOLON e2= interface_element_function )*
            {
            	pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function9373)
            	e1=interface_element_function();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1703:60: ( SEMICOLON e2= interface_element_function )*
            	var loop222=true
            	do {
            	    var alt222:Int=2
            	    val LA222_0:Int = input.LA(1)

            	    if ( (LA222_0==SEMICOLON) ) {
            	        alt222=1
            	    }


            	    alt222 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1703:61: SEMICOLON e2= interface_element_function
            		    {
            		    	`match`(input,SEMICOLON,FOLLOW_SEMICOLON_in_parameter_interface_list_function9378); if (state.failed) return list;
            		    	pushFollow(FOLLOW_interface_element_function_in_parameter_interface_list_function9382)
            		    	e2=interface_element_function();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop222=false
            	    }
            	} while (loop222);

            	if ( state.backtracking==0 ) {
            	  list=new InterfaceList(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, parameter_interface_list_function_StartIndex) }
        }
        return list
    }
    // $ANTLR end "parameter_interface_list_function"

    // $ANTLR start "interface_constant_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1707:1: interface_constant_declaration returns [InterfaceList.InterfaceConstantDeclaration constElement] : ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    def interface_constant_declaration():InterfaceList.InterfaceConstantDeclaration = {
         var constElement :InterfaceList.InterfaceConstantDeclaration = null;val interface_constant_declaration_StartIndex:Int = input.index()
        var identifier_list441:Seq[Identifier] = null

        var subtype_indication442:SubTypeIndication = null

        var expression443:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return constElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:2: ( ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:4: ( CONSTANT )? identifier_list COLON ( IN )? subtype_indication ( VAR_ASSIGN expression )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:4: ( CONSTANT )?
            	var alt223 :Int=2
            	val LA223_0:Int = input.LA(1)

            	if ( (LA223_0==CONSTANT) ) {
            	    alt223=1
            	}
            	alt223 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:4: CONSTANT
            	        {
            	        	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_interface_constant_declaration9409); if (state.failed) return constElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_identifier_list_in_interface_constant_declaration9412)
            	identifier_list441=identifier_list();

            	state._fsp-=1
            	if (state.failed) return constElement;
            	`match`(input,COLON,FOLLOW_COLON_in_interface_constant_declaration9414); if (state.failed) return constElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:36: ( IN )?
            	var alt224 :Int=2
            	val LA224_0:Int = input.LA(1)

            	if ( (LA224_0==IN) ) {
            	    alt224=1
            	}
            	alt224 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:36: IN
            	        {
            	        	`match`(input,IN,FOLLOW_IN_in_interface_constant_declaration9416); if (state.failed) return constElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_constant_declaration9419)
            	subtype_indication442=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return constElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:59: ( VAR_ASSIGN expression )?
            	var alt225 :Int=2
            	val LA225_0:Int = input.LA(1)

            	if ( (LA225_0==VAR_ASSIGN) ) {
            	    alt225=1
            	}
            	alt225 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1708:60: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_constant_declaration9422); if (state.failed) return constElement;
            	        	pushFollow(FOLLOW_expression_in_interface_constant_declaration9424)
            	        	expression443=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return constElement;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  constElement=new InterfaceList.InterfaceConstantDeclaration(identifier_list441,subtype_indication442,expression443)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, interface_constant_declaration_StartIndex) }
        }
        return constElement
    }
    // $ANTLR end "interface_constant_declaration"

    // $ANTLR start "interface_signal_declaration_procedure"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1712:1: interface_signal_declaration_procedure returns [InterfaceList.InterfaceSignalDeclaration signalElement] : ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    def interface_signal_declaration_procedure():InterfaceList.InterfaceSignalDeclaration = {
         var signalElement :InterfaceList.InterfaceSignalDeclaration = null;val interface_signal_declaration_procedure_StartIndex:Int = input.index()
        var BUS447 :Token=null
        var identifier_list444:Seq[Identifier] = null

        var interface_mode445:InterfaceList.InterfaceMode.Value = null

        var subtype_indication446:SubTypeIndication = null

        var expression448:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return signalElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:2: ( ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:4: ( SIGNAL )? identifier_list COLON ( interface_mode )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:4: ( SIGNAL )?
            	var alt226 :Int=2
            	val LA226_0:Int = input.LA(1)

            	if ( (LA226_0==SIGNAL) ) {
            	    alt226=1
            	}
            	alt226 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:4: SIGNAL
            	        {
            	        	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_interface_signal_declaration_procedure9447); if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_procedure9450)
            	identifier_list444=identifier_list();

            	state._fsp-=1
            	if (state.failed) return signalElement;
            	`match`(input,COLON,FOLLOW_COLON_in_interface_signal_declaration_procedure9452); if (state.failed) return signalElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:34: ( interface_mode )?
            	var alt227 :Int=2
            	val LA227_0:Int = input.LA(1)

            	if ( (LA227_0==BUFFER||LA227_0==IN||LA227_0==INOUT||LA227_0==LINKAGE||LA227_0==OUT) ) {
            	    alt227=1
            	}
            	alt227 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:34: interface_mode
            	        {
            	        	pushFollow(FOLLOW_interface_mode_in_interface_signal_declaration_procedure9454)
            	        	interface_mode445=interface_mode();

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_procedure9457)
            	subtype_indication446=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return signalElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:69: ( BUS )?
            	var alt228 :Int=2
            	val LA228_0:Int = input.LA(1)

            	if ( (LA228_0==BUS) ) {
            	    alt228=1
            	}
            	alt228 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:69: BUS
            	        {
            	        	BUS447=`match`(input,BUS,FOLLOW_BUS_in_interface_signal_declaration_procedure9459).asInstanceOf[Token]; if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:74: ( VAR_ASSIGN expression )?
            	var alt229 :Int=2
            	val LA229_0:Int = input.LA(1)

            	if ( (LA229_0==VAR_ASSIGN) ) {
            	    alt229=1
            	}
            	alt229 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1713:75: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_procedure9463); if (state.failed) return signalElement;
            	        	pushFollow(FOLLOW_expression_in_interface_signal_declaration_procedure9465)
            	        	expression448=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  signalElement=new InterfaceList.InterfaceSignalDeclaration(identifier_list444,interface_mode445,subtype_indication446,BUS447!=null,expression448)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, interface_signal_declaration_procedure_StartIndex) }
        }
        return signalElement
    }
    // $ANTLR end "interface_signal_declaration_procedure"

    // $ANTLR start "interface_signal_declaration_function"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1717:1: interface_signal_declaration_function returns [InterfaceList.InterfaceSignalDeclaration signalElement] : SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    def interface_signal_declaration_function():InterfaceList.InterfaceSignalDeclaration = {
         var signalElement :InterfaceList.InterfaceSignalDeclaration = null;val interface_signal_declaration_function_StartIndex:Int = input.index()
        var BUS451 :Token=null
        var identifier_list449:Seq[Identifier] = null

        var subtype_indication450:SubTypeIndication = null

        var expression452:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return signalElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:2: ( SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:4: SIGNAL identifier_list COLON ( IN )? subtype_indication ( BUS )? ( VAR_ASSIGN expression )?
            {
            	`match`(input,SIGNAL,FOLLOW_SIGNAL_in_interface_signal_declaration_function9489); if (state.failed) return signalElement;
            	pushFollow(FOLLOW_identifier_list_in_interface_signal_declaration_function9491)
            	identifier_list449=identifier_list();

            	state._fsp-=1
            	if (state.failed) return signalElement;
            	`match`(input,COLON,FOLLOW_COLON_in_interface_signal_declaration_function9493); if (state.failed) return signalElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:33: ( IN )?
            	var alt230 :Int=2
            	val LA230_0:Int = input.LA(1)

            	if ( (LA230_0==IN) ) {
            	    alt230=1
            	}
            	alt230 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:33: IN
            	        {
            	        	`match`(input,IN,FOLLOW_IN_in_interface_signal_declaration_function9495); if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_signal_declaration_function9498)
            	subtype_indication450=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return signalElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:56: ( BUS )?
            	var alt231 :Int=2
            	val LA231_0:Int = input.LA(1)

            	if ( (LA231_0==BUS) ) {
            	    alt231=1
            	}
            	alt231 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:56: BUS
            	        {
            	        	BUS451=`match`(input,BUS,FOLLOW_BUS_in_interface_signal_declaration_function9500).asInstanceOf[Token]; if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:61: ( VAR_ASSIGN expression )?
            	var alt232 :Int=2
            	val LA232_0:Int = input.LA(1)

            	if ( (LA232_0==VAR_ASSIGN) ) {
            	    alt232=1
            	}
            	alt232 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1718:62: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_signal_declaration_function9504); if (state.failed) return signalElement;
            	        	pushFollow(FOLLOW_expression_in_interface_signal_declaration_function9506)
            	        	expression452=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return signalElement;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  signalElement=new InterfaceList.InterfaceSignalDeclaration(identifier_list449,InterfaceList.InterfaceMode.IN,subtype_indication450,BUS451!=null,expression452)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, interface_signal_declaration_function_StartIndex) }
        }
        return signalElement
    }
    // $ANTLR end "interface_signal_declaration_function"

    // $ANTLR start "interface_variable_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1722:1: interface_variable_declaration returns [InterfaceList.InterfaceVariableDeclaration varElement] : ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    def interface_variable_declaration():InterfaceList.InterfaceVariableDeclaration = {
         var varElement :InterfaceList.InterfaceVariableDeclaration = null;val interface_variable_declaration_StartIndex:Int = input.index()
        var identifier_list453:Seq[Identifier] = null

        var interface_mode454:InterfaceList.InterfaceMode.Value = null

        var subtype_indication455:SubTypeIndication = null

        var expression456:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return varElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:2: ( ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:4: ( VARIABLE )? identifier_list COLON ( interface_mode )? subtype_indication ( VAR_ASSIGN expression )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:4: ( VARIABLE )?
            	var alt233 :Int=2
            	val LA233_0:Int = input.LA(1)

            	if ( (LA233_0==VARIABLE) ) {
            	    alt233=1
            	}
            	alt233 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:4: VARIABLE
            	        {
            	        	`match`(input,VARIABLE,FOLLOW_VARIABLE_in_interface_variable_declaration9529); if (state.failed) return varElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_identifier_list_in_interface_variable_declaration9532)
            	identifier_list453=identifier_list();

            	state._fsp-=1
            	if (state.failed) return varElement;
            	`match`(input,COLON,FOLLOW_COLON_in_interface_variable_declaration9534); if (state.failed) return varElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:36: ( interface_mode )?
            	var alt234 :Int=2
            	val LA234_0:Int = input.LA(1)

            	if ( (LA234_0==BUFFER||LA234_0==IN||LA234_0==INOUT||LA234_0==LINKAGE||LA234_0==OUT) ) {
            	    alt234=1
            	}
            	alt234 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:36: interface_mode
            	        {
            	        	pushFollow(FOLLOW_interface_mode_in_interface_variable_declaration9536)
            	        	interface_mode454=interface_mode();

            	        	state._fsp-=1
            	        	if (state.failed) return varElement;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_subtype_indication_in_interface_variable_declaration9539)
            	subtype_indication455=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return varElement;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:71: ( VAR_ASSIGN expression )?
            	var alt235 :Int=2
            	val LA235_0:Int = input.LA(1)

            	if ( (LA235_0==VAR_ASSIGN) ) {
            	    alt235=1
            	}
            	alt235 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1723:72: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_interface_variable_declaration9542); if (state.failed) return varElement;
            	        	pushFollow(FOLLOW_expression_in_interface_variable_declaration9544)
            	        	expression456=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return varElement;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  varElement=new InterfaceList.InterfaceVariableDeclaration(identifier_list453,interface_mode454,subtype_indication455,expression456)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, interface_variable_declaration_StartIndex) }
        }
        return varElement
    }
    // $ANTLR end "interface_variable_declaration"

    // $ANTLR start "interface_mode"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1727:1: interface_mode returns [InterfaceList.InterfaceMode.Value mode] : ( IN | OUT | INOUT | BUFFER | LINKAGE );
    @throws(classOf[RecognitionException])
    def interface_mode():InterfaceList.InterfaceMode.Value = {
         var mode :InterfaceList.InterfaceMode.Value = null;val interface_mode_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return mode }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1728:2: ( IN | OUT | INOUT | BUFFER | LINKAGE )
            var alt236 :Int=5
            input.LA(1) match {
            case IN => {
                 alt236=1
            }

            case OUT => {
                 alt236=2
            }

            case INOUT => {
                 alt236=3
            }

            case BUFFER => {
                 alt236=4
            }

            case LINKAGE => {
                 alt236=5
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return mode}
                val nvae = new NoViableAltException("", 236, 0, input)

                throw nvae
            }

            alt236 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1728:4: IN
                    {
                    	`match`(input,IN,FOLLOW_IN_in_interface_mode9568); if (state.failed) return mode;
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.InterfaceMode.IN
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1729:4: OUT
                    {
                    	`match`(input,OUT,FOLLOW_OUT_in_interface_mode9575); if (state.failed) return mode;
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.InterfaceMode.OUT
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1730:4: INOUT
                    {
                    	`match`(input,INOUT,FOLLOW_INOUT_in_interface_mode9582); if (state.failed) return mode;
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.InterfaceMode.INOUT
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1731:4: BUFFER
                    {
                    	`match`(input,BUFFER,FOLLOW_BUFFER_in_interface_mode9589); if (state.failed) return mode;
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.InterfaceMode.BUFFER
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1732:4: LINKAGE
                    {
                    	`match`(input,LINKAGE,FOLLOW_LINKAGE_in_interface_mode9596); if (state.failed) return mode;
                    	if ( state.backtracking==0 ) {
                    	  mode=InterfaceList.InterfaceMode.LINKAGE
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, interface_mode_StartIndex) }
        }
        return mode
    }
    // $ANTLR end "interface_mode"

    // $ANTLR start "interface_file_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1735:1: interface_file_declaration returns [InterfaceList.InterfaceFileDeclaration fileElement] : FILE identifier_list COLON subtype_indication ;
    @throws(classOf[RecognitionException])
    def interface_file_declaration():InterfaceList.InterfaceFileDeclaration = {
         var fileElement :InterfaceList.InterfaceFileDeclaration = null;val interface_file_declaration_StartIndex:Int = input.index()
        var identifier_list457:Seq[Identifier] = null

        var subtype_indication458:SubTypeIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return fileElement }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1736:2: ( FILE identifier_list COLON subtype_indication )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1736:4: FILE identifier_list COLON subtype_indication
            {
            	`match`(input,FILE,FOLLOW_FILE_in_interface_file_declaration9614); if (state.failed) return fileElement;
            	pushFollow(FOLLOW_identifier_list_in_interface_file_declaration9616)
            	identifier_list457=identifier_list();

            	state._fsp-=1
            	if (state.failed) return fileElement;
            	`match`(input,COLON,FOLLOW_COLON_in_interface_file_declaration9618); if (state.failed) return fileElement;
            	pushFollow(FOLLOW_subtype_indication_in_interface_file_declaration9620)
            	subtype_indication458=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return fileElement;
            	if ( state.backtracking==0 ) {
            	  fileElement=new InterfaceList.InterfaceFileDeclaration(identifier_list457,subtype_indication458)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, interface_file_declaration_StartIndex) }
        }
        return fileElement
    }
    // $ANTLR end "interface_file_declaration"

    // $ANTLR start "ams_interface_terminal_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1740:1: ams_interface_terminal_declaration returns [InterfaceList.InterfaceTerminalDeclaration terminalDecl] : TERMINAL identifier_list COLON ams_subnature_indication ;
    @throws(classOf[RecognitionException])
    def ams_interface_terminal_declaration():InterfaceList.InterfaceTerminalDeclaration = {
         var terminalDecl :InterfaceList.InterfaceTerminalDeclaration = null;val ams_interface_terminal_declaration_StartIndex:Int = input.index()
        var identifier_list459:Seq[Identifier] = null

        var ams_subnature_indication460:SubNatureIndication = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return terminalDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1741:2: ( TERMINAL identifier_list COLON ams_subnature_indication )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1741:4: TERMINAL identifier_list COLON ams_subnature_indication
            {
            	`match`(input,TERMINAL,FOLLOW_TERMINAL_in_ams_interface_terminal_declaration9642); if (state.failed) return terminalDecl;
            	pushFollow(FOLLOW_identifier_list_in_ams_interface_terminal_declaration9644)
            	identifier_list459=identifier_list();

            	state._fsp-=1
            	if (state.failed) return terminalDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_ams_interface_terminal_declaration9646); if (state.failed) return terminalDecl;
            	pushFollow(FOLLOW_ams_subnature_indication_in_ams_interface_terminal_declaration9648)
            	ams_subnature_indication460=ams_subnature_indication();

            	state._fsp-=1
            	if (state.failed) return terminalDecl;
            	if ( state.backtracking==0 ) {
            	  terminalDecl=new InterfaceList.InterfaceTerminalDeclaration(identifier_list459,ams_subnature_indication460)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, ams_interface_terminal_declaration_StartIndex) }
        }
        return terminalDecl
    }
    // $ANTLR end "ams_interface_terminal_declaration"

    // $ANTLR start "ams_interface_quantity_declaration"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1745:1: ams_interface_quantity_declaration returns [InterfaceList.InterfaceQuantityDeclaration quantityDecl] : QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? ;
    @throws(classOf[RecognitionException])
    def ams_interface_quantity_declaration():InterfaceList.InterfaceQuantityDeclaration = {
         var quantityDecl :InterfaceList.InterfaceQuantityDeclaration = null;val ams_interface_quantity_declaration_StartIndex:Int = input.index()
        var out :Token=null
        var identifier_list461:Seq[Identifier] = null

        var subtype_indication462:SubTypeIndication = null

        var expression463:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return quantityDecl }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:2: ( QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:4: QUANTITY identifier_list COLON ( IN | out= OUT )? subtype_indication ( VAR_ASSIGN expression )?
            {
            	`match`(input,QUANTITY,FOLLOW_QUANTITY_in_ams_interface_quantity_declaration9668); if (state.failed) return quantityDecl;
            	pushFollow(FOLLOW_identifier_list_in_ams_interface_quantity_declaration9670)
            	identifier_list461=identifier_list();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	`match`(input,COLON,FOLLOW_COLON_in_ams_interface_quantity_declaration9672); if (state.failed) return quantityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:35: ( IN | out= OUT )?
            	var alt237 :Int=3
            	val LA237_0:Int = input.LA(1)

            	if ( (LA237_0==IN) ) {
            	    alt237=1
            	}
            	else if ( (LA237_0==OUT) ) {
            	    alt237=2
            	}
            	alt237 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:36: IN
            	        {
            	        	`match`(input,IN,FOLLOW_IN_in_ams_interface_quantity_declaration9675); if (state.failed) return quantityDecl;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:39: out= OUT
            	        {
            	        	out=`match`(input,OUT,FOLLOW_OUT_in_ams_interface_quantity_declaration9679).asInstanceOf[Token]; if (state.failed) return quantityDecl;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_subtype_indication_in_ams_interface_quantity_declaration9683)
            	subtype_indication462=subtype_indication();

            	state._fsp-=1
            	if (state.failed) return quantityDecl;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:68: ( VAR_ASSIGN expression )?
            	var alt238 :Int=2
            	val LA238_0:Int = input.LA(1)

            	if ( (LA238_0==VAR_ASSIGN) ) {
            	    alt238=1
            	}
            	alt238 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1746:69: VAR_ASSIGN expression
            	        {
            	        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_ams_interface_quantity_declaration9686); if (state.failed) return quantityDecl;
            	        	pushFollow(FOLLOW_expression_in_ams_interface_quantity_declaration9688)
            	        	expression463=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return quantityDecl;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {

            	  			val mode= if (out!=null) InterfaceList.InterfaceMode.OUT
            	  				else InterfaceList.InterfaceMode.IN
            	  			quantityDecl=new InterfaceList.InterfaceQuantityDeclaration(identifier_list461,mode,subtype_indication462,expression463)
            	  		
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, ams_interface_quantity_declaration_StartIndex) }
        }
        return quantityDecl
    }
    // $ANTLR end "ams_interface_quantity_declaration"

    // $ANTLR start "association_element"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1769:1: association_element returns [AssociationList.Element element] : ( ( formal_part ARROW )=> formal_part ARROW )? actual_part ;
    @throws(classOf[RecognitionException])
    def association_element():AssociationList.Element = {
         var element :AssociationList.Element = null;val association_element_StartIndex:Int = input.index()
        var formal_part464:Name = null

        var actual_part465:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return element }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:2: ( ( ( formal_part ARROW )=> formal_part ARROW )? actual_part )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:4: ( ( formal_part ARROW )=> formal_part ARROW )? actual_part
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:4: ( ( formal_part ARROW )=> formal_part ARROW )?
            	var alt239 :Int=2
            	 alt239 = dfa239.predict(input)
            	alt239 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:5: ( formal_part ARROW )=> formal_part ARROW
            	        {
            	        	pushFollow(FOLLOW_formal_part_in_association_element9719)
            	        	formal_part464=formal_part();

            	        	state._fsp-=1
            	        	if (state.failed) return element;
            	        	`match`(input,ARROW,FOLLOW_ARROW_in_association_element9721); if (state.failed) return element;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_actual_part_in_association_element9725)
            	actual_part465=actual_part();

            	state._fsp-=1
            	if (state.failed) return element;
            	if ( state.backtracking==0 ) {
            	  element=new AssociationList.Element(formal_part464,actual_part465) 
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, association_element_StartIndex) }
        }
        return element
    }
    // $ANTLR end "association_element"

    // $ANTLR start "association_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1774:1: association_list returns [AssociationList list] : e1= association_element ( COMMA e2= association_element )* ;
    @throws(classOf[RecognitionException])
    def association_list():AssociationList = {
         var list :AssociationList = null;val association_list_StartIndex:Int = input.index()
        var e1:AssociationList.Element = null

        var e2:AssociationList.Element = null



        	val elements=new Buffer[AssociationList.Element]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1778:2: (e1= association_element ( COMMA e2= association_element )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1778:4: e1= association_element ( COMMA e2= association_element )*
            {
            	pushFollow(FOLLOW_association_element_in_association_list9756)
            	e1=association_element();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1778:53: ( COMMA e2= association_element )*
            	var loop240=true
            	do {
            	    var alt240:Int=2
            	    val LA240_0:Int = input.LA(1)

            	    if ( (LA240_0==COMMA) ) {
            	        alt240=1
            	    }


            	    alt240 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1778:54: COMMA e2= association_element
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_association_list9761); if (state.failed) return list;
            		    	pushFollow(FOLLOW_association_element_in_association_list9765)
            		    	e2=association_element();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop240=false
            	    }
            	} while (loop240);

            	if ( state.backtracking==0 ) {
            	  list=new AssociationList(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, association_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "association_list"

    // $ANTLR start "formal_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1783:1: formal_part returns [Name formal_part_] : formal_name= name ;
    @throws(classOf[RecognitionException])
    def formal_part():Name = {
         var formal_part_ :Name = null;val formal_part_StartIndex:Int = input.index()
        var formal_name:Name = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return formal_part_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1785:2: (formal_name= name )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1785:4: formal_name= name
            {
            	pushFollow(FOLLOW_name_in_formal_part9798)
            	formal_name=name();

            	state._fsp-=1
            	if (state.failed) return formal_part_;
            	if ( state.backtracking==0 ) {
            	  formal_part_ = formal_name
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, formal_part_StartIndex) }
        }
        return formal_part_
    }
    // $ANTLR end "formal_part"

    // $ANTLR start "actual_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1789:1: actual_part returns [Expression actual_part_ ] : ( expression | OPEN );
    @throws(classOf[RecognitionException])
    def actual_part():Expression = {
         var actual_part_ :Expression = null;val actual_part_StartIndex:Int = input.index()
        var expression466:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return actual_part_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1790:2: ( expression | OPEN )
            var alt241 :Int=2
            val LA241_0:Int = input.LA(1)

            if ( (LA241_0==ABS||LA241_0==NEW||(LA241_0>=NOT && LA241_0<=NULL)||LA241_0==LPAREN||(LA241_0>=PLUS && LA241_0<=MINUS)||LA241_0==STRING_LITERAL||LA241_0==CHARACTER_LITERAL||(LA241_0>=REAL_LITERAL && LA241_0<=EXTENDED_IDENTIFIER)) ) {
                alt241=1
            }
            else if ( (LA241_0==OPEN) ) {
                alt241=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return actual_part_}
                val nvae = new NoViableAltException("", 241, 0, input)

                throw nvae
            }
            alt241 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1791:31: expression
                    {
                    	pushFollow(FOLLOW_expression_in_actual_part9828)
                    	expression466=expression();

                    	state._fsp-=1
                    	if (state.failed) return actual_part_;
                    	if ( state.backtracking==0 ) {
                    	  actual_part_ = expression466
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1793:5: OPEN
                    {
                    	`match`(input,OPEN,FOLLOW_OPEN_in_actual_part9839); if (state.failed) return actual_part_;

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, actual_part_StartIndex) }
        }
        return actual_part_
    }
    // $ANTLR end "actual_part"

    // $ANTLR start "condition"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1797:1: condition returns [Expression con] : expression ;
    @throws(classOf[RecognitionException])
    def condition():Expression = {
         var con :Expression = null;val condition_StartIndex:Int = input.index()
        var expression467:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return con }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1798:2: ( expression )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1798:4: expression
            {
            	pushFollow(FOLLOW_expression_in_condition9859)
            	expression467=expression();

            	state._fsp-=1
            	if (state.failed) return con;
            	if ( state.backtracking==0 ) {
            	  con=expression467
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, condition_StartIndex) }
        }
        return con
    }
    // $ANTLR end "condition"

    // $ANTLR start "expression"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1801:1: expression returns [Expression expr] : r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) ;
    @throws(classOf[RecognitionException])
    def expression():Expression = {
         var expr :Expression = null;val expression_StartIndex:Int = input.index()
        var nand :Token=null
        var nor :Token=null
        var r1:Expression = null

        var r2:Expression = null

        var logical_operator468:VHDLParser.logical_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return expr }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1802:2: (r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1803:5: r1= relation ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
            {
            	pushFollow(FOLLOW_relation_in_expression9888)
            	r1=relation();

            	state._fsp-=1
            	if (state.failed) return expr;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1803:17: ( (nand= NAND | nor= NOR ) r2= relation | ( logical_operator r2= relation )* )
            	var alt244 :Int=2
            	val LA244_0:Int = input.LA(1)

            	if ( (LA244_0==NAND||LA244_0==NOR) ) {
            	    alt244=1
            	}
            	else if ( (LA244_0==AFTER||LA244_0==AND||LA244_0==ELSE||LA244_0==FOR||LA244_0==GENERATE||LA244_0==INERTIAL||LA244_0==IS||LA244_0==LOOP||LA244_0==ON||LA244_0==OR||LA244_0==REPORT||(LA244_0>=SELECT && LA244_0<=SEVERITY)||LA244_0==THEN||LA244_0==USE||LA244_0==WHEN||(LA244_0>=XNOR && LA244_0<=XOR)||(LA244_0>=ACROSS && LA244_0<=THROUGH)||LA244_0==VAR_ASSIGN||(LA244_0>=SEMICOLON && LA244_0<=COMMA)||LA244_0==RPAREN) ) {
            	    alt244=2
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return expr}
            	    val nvae = new NoViableAltException("", 244, 0, input)

            	    throw nvae
            	}
            	alt244 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1804:5: (nand= NAND | nor= NOR ) r2= relation
            	        {
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1804:5: (nand= NAND | nor= NOR )
            	        	var alt242 :Int=2
            	        	val LA242_0:Int = input.LA(1)

            	        	if ( (LA242_0==NAND) ) {
            	        	    alt242=1
            	        	}
            	        	else if ( (LA242_0==NOR) ) {
            	        	    alt242=2
            	        	}
            	        	else {
            	        	    if (state.backtracking>0) {state.failed=true; return expr}
            	        	    val nvae = new NoViableAltException("", 242, 0, input)

            	        	    throw nvae
            	        	}
            	        	alt242 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1804:6: nand= NAND
            	        	        {
            	        	        	nand=`match`(input,NAND,FOLLOW_NAND_in_expression9899).asInstanceOf[Token]; if (state.failed) return expr;

            	        	        }case 2 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1804:16: nor= NOR
            	        	        {
            	        	        	nor=`match`(input,NOR,FOLLOW_NOR_in_expression9903).asInstanceOf[Token]; if (state.failed) return expr;

            	        	        }
            	        	    case _ => 
            	        	}

            	        	pushFollow(FOLLOW_relation_in_expression9908)
            	        	r2=relation();

            	        	state._fsp-=1
            	        	if (state.failed) return expr;
            	        	if ( state.backtracking==0 ) {
            	        	  expr=new LogicalExpression(toPosition(if(nand ne null) nand else nor),r1,if (nand ne null) LogicalExpression.Operator.NAND else LogicalExpression.Operator.NOR,r2)
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1805:7: ( logical_operator r2= relation )*
            	        {
            	        	if ( state.backtracking==0 ) {
            	        	  expr=r1
            	        	}
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1805:23: ( logical_operator r2= relation )*
            	        	var loop243=true
            	        	do {
            	        	    var alt243:Int=2
            	        	    val LA243_0:Int = input.LA(1)

            	        	    if ( (LA243_0==AND||LA243_0==OR||(LA243_0>=XNOR && LA243_0<=XOR)) ) {
            	        	        alt243=1
            	        	    }


            	        	    alt243 match {
            	        		case 1 =>
            	        		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1805:24: logical_operator r2= relation
            	        		    {
            	        		    	pushFollow(FOLLOW_logical_operator_in_expression9921)
            	        		    	logical_operator468=logical_operator();

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return expr;
            	        		    	pushFollow(FOLLOW_relation_in_expression9925)
            	        		    	r2=relation();

            	        		    	state._fsp-=1
            	        		    	if (state.failed) return expr;
            	        		    	if ( state.backtracking==0 ) {
            	        		    	  expr=new LogicalExpression((if (logical_operator468!=null) logical_operator468.pos else null),expr,(if (logical_operator468!=null) logical_operator468.logOp else null),r2)
            	        		    	}

            	        		    }
            	        		case _ => loop243=false
            	        	    }
            	        	} while (loop243);


            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, expression_StartIndex) }
        }
        return expr
    }
    // $ANTLR end "expression"

    // $ANTLR start "logical_operator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1809:1: logical_operator returns [LogicalExpression.Operator.Value logOp,Position pos] : ( AND | OR | XOR | XNOR );
    @throws(classOf[RecognitionException])
    def logical_operator():VHDLParser.logical_operator_return = {
        val retval:VHDLParser.logical_operator_return = new VHDLParser.logical_operator_return()
        retval.start = input.LT(1)
        val logical_operator_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1813:2: ( AND | OR | XOR | XNOR )
            var alt245 :Int=4
            input.LA(1) match {
            case AND => {
                 alt245=1
            }

            case OR => {
                 alt245=2
            }

            case XOR => {
                 alt245=3
            }

            case XNOR => {
                 alt245=4
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 245, 0, input)

                throw nvae
            }

            alt245 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1813:4: AND
                    {
                    	`match`(input,AND,FOLLOW_AND_in_logical_operator9957); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.AND
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1814:4: OR
                    {
                    	`match`(input,OR,FOLLOW_OR_in_logical_operator9964); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.OR
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1815:4: XOR
                    {
                    	`match`(input,XOR,FOLLOW_XOR_in_logical_operator9971); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.XOR
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1816:4: XNOR
                    {
                    	`match`(input,XNOR,FOLLOW_XNOR_in_logical_operator9978); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.logOp=LogicalExpression.Operator.XNOR
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, logical_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "logical_operator"

    // $ANTLR start "relation"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1820:1: relation returns [Expression rel] : s1= shift_expression (op= relational_operator s2= shift_expression )? ;
    @throws(classOf[RecognitionException])
    def relation():Expression = {
         var rel :Expression = null;val relation_StartIndex:Int = input.index()
        var s1:Expression = null

        var op:VHDLParser.relational_operator_return = null

        var s2:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return rel }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1821:3: (s1= shift_expression (op= relational_operator s2= shift_expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1821:5: s1= shift_expression (op= relational_operator s2= shift_expression )?
            {
            	pushFollow(FOLLOW_shift_expression_in_relation10002)
            	s1=shift_expression();

            	state._fsp-=1
            	if (state.failed) return rel;
            	if ( state.backtracking==0 ) {
            	  rel=s1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1822:5: (op= relational_operator s2= shift_expression )?
            	var alt246 :Int=2
            	val LA246_0:Int = input.LA(1)

            	if ( ((LA246_0>=LEQ && LA246_0<=GEQ)||LA246_0==NEQ||(LA246_0>=LT && LA246_0<=EQ)) ) {
            	    alt246=1
            	}
            	alt246 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1822:6: op= relational_operator s2= shift_expression
            	        {
            	        	pushFollow(FOLLOW_relational_operator_in_relation10013)
            	        	op=relational_operator();

            	        	state._fsp-=1
            	        	if (state.failed) return rel;
            	        	pushFollow(FOLLOW_shift_expression_in_relation10017)
            	        	s2=shift_expression();

            	        	state._fsp-=1
            	        	if (state.failed) return rel;
            	        	if ( state.backtracking==0 ) {
            	        	  rel=new Relation((if (op!=null) op.pos else null),s1,(if (op!=null) op.relOp else null),s2)
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, relation_StartIndex) }
        }
        return rel
    }
    // $ANTLR end "relation"

    // $ANTLR start "relational_operator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1825:1: relational_operator returns [Relation.Operator.Value relOp,Position pos] : ( EQ | NEQ | LT | LEQ | GT | GEQ );
    @throws(classOf[RecognitionException])
    def relational_operator():VHDLParser.relational_operator_return = {
        val retval:VHDLParser.relational_operator_return = new VHDLParser.relational_operator_return()
        retval.start = input.LT(1)
        val relational_operator_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1829:2: ( EQ | NEQ | LT | LEQ | GT | GEQ )
            var alt247 :Int=6
            input.LA(1) match {
            case EQ => {
                 alt247=1
            }

            case NEQ => {
                 alt247=2
            }

            case LT => {
                 alt247=3
            }

            case LEQ => {
                 alt247=4
            }

            case GT => {
                 alt247=5
            }

            case GEQ => {
                 alt247=6
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 247, 0, input)

                throw nvae
            }

            alt247 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1829:6: EQ
                    {
                    	`match`(input,EQ,FOLLOW_EQ_in_relational_operator10045); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.EQ
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1830:6: NEQ
                    {
                    	`match`(input,NEQ,FOLLOW_NEQ_in_relational_operator10054); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.NEQ
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1831:6: LT
                    {
                    	`match`(input,LT,FOLLOW_LT_in_relational_operator10063); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.LT
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1832:6: LEQ
                    {
                    	`match`(input,LEQ,FOLLOW_LEQ_in_relational_operator10072); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.LEQ
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1833:6: GT
                    {
                    	`match`(input,GT,FOLLOW_GT_in_relational_operator10081); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.GT
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1834:6: GEQ
                    {
                    	`match`(input,GEQ,FOLLOW_GEQ_in_relational_operator10090); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.relOp=Relation.Operator.GEQ
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, relational_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "relational_operator"

    // $ANTLR start "shift_expression"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1838:1: shift_expression returns [Expression shiftExpr] : s1= simple_expression (op= shift_operator s2= simple_expression )? ;
    @throws(classOf[RecognitionException])
    def shift_expression():Expression = {
         var shiftExpr :Expression = null;val shift_expression_StartIndex:Int = input.index()
        var s1:Expression = null

        var op:VHDLParser.shift_operator_return = null

        var s2:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return shiftExpr }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1839:3: (s1= simple_expression (op= shift_operator s2= simple_expression )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1839:5: s1= simple_expression (op= shift_operator s2= simple_expression )?
            {
            	pushFollow(FOLLOW_simple_expression_in_shift_expression10114)
            	s1=simple_expression();

            	state._fsp-=1
            	if (state.failed) return shiftExpr;
            	if ( state.backtracking==0 ) {
            	   shiftExpr=s1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1840:5: (op= shift_operator s2= simple_expression )?
            	var alt248 :Int=2
            	val LA248_0:Int = input.LA(1)

            	if ( ((LA248_0>=ROL && LA248_0<=ROR)||(LA248_0>=SLA && LA248_0<=SRL)) ) {
            	    alt248=1
            	}
            	alt248 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1840:6: op= shift_operator s2= simple_expression
            	        {
            	        	pushFollow(FOLLOW_shift_operator_in_shift_expression10125)
            	        	op=shift_operator();

            	        	state._fsp-=1
            	        	if (state.failed) return shiftExpr;
            	        	pushFollow(FOLLOW_simple_expression_in_shift_expression10129)
            	        	s2=simple_expression();

            	        	state._fsp-=1
            	        	if (state.failed) return shiftExpr;
            	        	if ( state.backtracking==0 ) {
            	        	  shiftExpr=new ShiftExpression((if (op!=null) op.pos else null),s1,(if (op!=null) op.shiftOp else null),s2)
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, shift_expression_StartIndex) }
        }
        return shiftExpr
    }
    // $ANTLR end "shift_expression"

    // $ANTLR start "shift_operator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1843:1: shift_operator returns [ShiftExpression.Operator.Value shiftOp,Position pos] : ( SLL | SRL | SLA | SRA | ROL | ROR );
    @throws(classOf[RecognitionException])
    def shift_operator():VHDLParser.shift_operator_return = {
        val retval:VHDLParser.shift_operator_return = new VHDLParser.shift_operator_return()
        retval.start = input.LT(1)
        val shift_operator_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1847:2: ( SLL | SRL | SLA | SRA | ROL | ROR )
            var alt249 :Int=6
            input.LA(1) match {
            case SLL => {
                 alt249=1
            }

            case SRL => {
                 alt249=2
            }

            case SLA => {
                 alt249=3
            }

            case SRA => {
                 alt249=4
            }

            case ROL => {
                 alt249=5
            }

            case ROR => {
                 alt249=6
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 249, 0, input)

                throw nvae
            }

            alt249 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1847:4: SLL
                    {
                    	`match`(input,SLL,FOLLOW_SLL_in_shift_operator10153); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SLL
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1848:4: SRL
                    {
                    	`match`(input,SRL,FOLLOW_SRL_in_shift_operator10160); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SRL
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1849:4: SLA
                    {
                    	`match`(input,SLA,FOLLOW_SLA_in_shift_operator10167); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SLA
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1850:4: SRA
                    {
                    	`match`(input,SRA,FOLLOW_SRA_in_shift_operator10174); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.SRA
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1851:4: ROL
                    {
                    	`match`(input,ROL,FOLLOW_ROL_in_shift_operator10181); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.ROL
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1852:4: ROR
                    {
                    	`match`(input,ROR,FOLLOW_ROR_in_shift_operator10188); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.shiftOp=ShiftExpression.Operator.ROR
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, shift_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "shift_operator"

    // $ANTLR start "simple_expression"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1855:1: simple_expression returns [Expression simpleExpr] : (s= sign )? t1= term (op= adding_operator t2= term )* ;
    @throws(classOf[RecognitionException])
    def simple_expression():Expression = {
         var simpleExpr :Expression = null;val simple_expression_StartIndex:Int = input.index()
        var s:VHDLParser.sign_return = null

        var t1:Expression = null

        var op:VHDLParser.adding_operator_return = null

        var t2:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return simpleExpr }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1856:4: ( (s= sign )? t1= term (op= adding_operator t2= term )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1856:6: (s= sign )? t1= term (op= adding_operator t2= term )*
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1856:7: (s= sign )?
            	var alt250 :Int=2
            	val LA250_0:Int = input.LA(1)

            	if ( ((LA250_0>=PLUS && LA250_0<=MINUS)) ) {
            	    alt250=1
            	}
            	alt250 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1856:7: s= sign
            	        {
            	        	pushFollow(FOLLOW_sign_in_simple_expression10212)
            	        	s=sign();

            	        	state._fsp-=1
            	        	if (state.failed) return simpleExpr;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_term_in_simple_expression10217)
            	t1=term();

            	state._fsp-=1
            	if (state.failed) return simpleExpr;
            	if ( state.backtracking==0 ) {
            	  simpleExpr=if (s!=null) new SimpleExpression((if (s!=null) s.pos else null),(if (s!=null) s.signOp else null),t1,None,None) else t1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1858:4: (op= adding_operator t2= term )*
            	var loop251=true
            	do {
            	    var alt251:Int=2
            	    val LA251_0:Int = input.LA(1)

            	    if ( (LA251_0==AMPERSAND||(LA251_0>=PLUS && LA251_0<=MINUS)) ) {
            	        alt251=1
            	    }


            	    alt251 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1858:6: op= adding_operator t2= term
            		    {
            		    	pushFollow(FOLLOW_adding_operator_in_simple_expression10232)
            		    	op=adding_operator();

            		    	state._fsp-=1
            		    	if (state.failed) return simpleExpr;
            		    	pushFollow(FOLLOW_term_in_simple_expression10236)
            		    	t2=term();

            		    	state._fsp-=1
            		    	if (state.failed) return simpleExpr;
            		    	if ( state.backtracking==0 ) {
            		    	  simpleExpr=new SimpleExpression((if (op!=null) op.pos else null),None,simpleExpr,(if (op!=null) op.addOp else null),t2)
            		    	}

            		    }
            		case _ => loop251=false
            	    }
            	} while (loop251);


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, simple_expression_StartIndex) }
        }
        return simpleExpr
    }
    // $ANTLR end "simple_expression"

    // $ANTLR start "sign"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1861:1: sign returns [SimpleExpression.SignOperator.Value signOp,Position pos] : ( PLUS | MINUS );
    @throws(classOf[RecognitionException])
    def sign():VHDLParser.sign_return = {
        val retval:VHDLParser.sign_return = new VHDLParser.sign_return()
        retval.start = input.LT(1)
        val sign_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1865:2: ( PLUS | MINUS )
            var alt252 :Int=2
            val LA252_0:Int = input.LA(1)

            if ( (LA252_0==PLUS) ) {
                alt252=1
            }
            else if ( (LA252_0==MINUS) ) {
                alt252=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 252, 0, input)

                throw nvae
            }
            alt252 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1865:4: PLUS
                    {
                    	`match`(input,PLUS,FOLLOW_PLUS_in_sign10261); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.signOp=SimpleExpression.SignOperator.PLUS
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1866:4: MINUS
                    {
                    	`match`(input,MINUS,FOLLOW_MINUS_in_sign10268); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.signOp=SimpleExpression.SignOperator.MINUS
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, sign_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "sign"

    // $ANTLR start "adding_operator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1869:1: adding_operator returns [SimpleExpression.AddOperator.Value addOp,Position pos] : ( PLUS | MINUS | AMPERSAND );
    @throws(classOf[RecognitionException])
    def adding_operator():VHDLParser.adding_operator_return = {
        val retval:VHDLParser.adding_operator_return = new VHDLParser.adding_operator_return()
        retval.start = input.LT(1)
        val adding_operator_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1873:2: ( PLUS | MINUS | AMPERSAND )
            var alt253 :Int=3
            input.LA(1) match {
            case PLUS => {
                 alt253=1
            }

            case MINUS => {
                 alt253=2
            }

            case AMPERSAND => {
                 alt253=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 253, 0, input)

                throw nvae
            }

            alt253 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1873:4: PLUS
                    {
                    	`match`(input,PLUS,FOLLOW_PLUS_in_adding_operator10293); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.PLUS
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1874:4: MINUS
                    {
                    	`match`(input,MINUS,FOLLOW_MINUS_in_adding_operator10300); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.MINUS
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1875:4: AMPERSAND
                    {
                    	`match`(input,AMPERSAND,FOLLOW_AMPERSAND_in_adding_operator10307); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.addOp=SimpleExpression.AddOperator.AMPERSAND
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, adding_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "adding_operator"

    // $ANTLR start "multiplying_operator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1878:1: multiplying_operator returns [Term.Operator.Value mulOp,Position pos] : ( MUL | DIV | MOD | REM );
    @throws(classOf[RecognitionException])
    def multiplying_operator():VHDLParser.multiplying_operator_return = {
        val retval:VHDLParser.multiplying_operator_return = new VHDLParser.multiplying_operator_return()
        retval.start = input.LT(1)
        val multiplying_operator_StartIndex:Int = input.index()

        	retval.pos=toPosition(input.LT(1))

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1882:2: ( MUL | DIV | MOD | REM )
            var alt254 :Int=4
            input.LA(1) match {
            case MUL => {
                 alt254=1
            }

            case DIV => {
                 alt254=2
            }

            case MOD => {
                 alt254=3
            }

            case REM => {
                 alt254=4
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return retval}
                val nvae = new NoViableAltException("", 254, 0, input)

                throw nvae
            }

            alt254 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1882:4: MUL
                    {
                    	`match`(input,MUL,FOLLOW_MUL_in_multiplying_operator10329); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.MUL
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1883:4: DIV
                    {
                    	`match`(input,DIV,FOLLOW_DIV_in_multiplying_operator10336); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.DIV
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1884:4: MOD
                    {
                    	`match`(input,MOD,FOLLOW_MOD_in_multiplying_operator10343); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.MOD
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1885:4: REM
                    {
                    	`match`(input,REM,FOLLOW_REM_in_multiplying_operator10350); if (state.failed) return retval;
                    	if ( state.backtracking==0 ) {
                    	  retval.mulOp=Term.Operator.REM
                    	}

                    }
                case _ =>
            }
            retval.stop = input.LT(-1)

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, multiplying_operator_StartIndex) }
        }
        return retval
    }
    // $ANTLR end "multiplying_operator"

    // $ANTLR start "term"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1888:1: term returns [Expression term_] : f1= factor ( multiplying_operator f2= factor )* ;
    @throws(classOf[RecognitionException])
    def term():Expression = {
         var term_ :Expression = null;val term_StartIndex:Int = input.index()
        var f1:Expression = null

        var f2:Expression = null

        var multiplying_operator469:VHDLParser.multiplying_operator_return = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return term_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1889:4: (f1= factor ( multiplying_operator f2= factor )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1889:6: f1= factor ( multiplying_operator f2= factor )*
            {
            	pushFollow(FOLLOW_factor_in_term10372)
            	f1=factor();

            	state._fsp-=1
            	if (state.failed) return term_;
            	if ( state.backtracking==0 ) {
            	  term_ = f1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1890:4: ( multiplying_operator f2= factor )*
            	var loop255=true
            	do {
            	    var alt255:Int=2
            	    val LA255_0:Int = input.LA(1)

            	    if ( (LA255_0==MOD||LA255_0==REM||(LA255_0>=MUL && LA255_0<=DIV)) ) {
            	        alt255=1
            	    }


            	    alt255 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1890:6: multiplying_operator f2= factor
            		    {
            		    	pushFollow(FOLLOW_multiplying_operator_in_term10381)
            		    	multiplying_operator469=multiplying_operator();

            		    	state._fsp-=1
            		    	if (state.failed) return term_;
            		    	pushFollow(FOLLOW_factor_in_term10385)
            		    	f2=factor();

            		    	state._fsp-=1
            		    	if (state.failed) return term_;
            		    	if ( state.backtracking==0 ) {
            		    	  term_ = new Term((if (multiplying_operator469!=null) multiplying_operator469.pos else null),term_,(if (multiplying_operator469!=null) multiplying_operator469.mulOp else null),f2)
            		    	}

            		    }
            		case _ => loop255=false
            	    }
            	} while (loop255);


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, term_StartIndex) }
        }
        return term_
    }
    // $ANTLR end "term"

    // $ANTLR start "factor"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1893:1: factor returns [Expression factor_] : (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary );
    @throws(classOf[RecognitionException])
    def factor():Expression = {
         var factor_ :Expression = null;val factor_StartIndex:Int = input.index()
        var DOUBLESTAR470 :Token=null
        var ABS471 :Token=null
        var NOT473 :Token=null
        var p1:Expression = null

        var p2:Expression = null

        var primary472:Expression = null

        var primary474:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return factor_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1894:2: (p1= primary ( DOUBLESTAR p2= primary )? | ABS primary | NOT primary )
            var alt257 :Int=3
            input.LA(1) match {
            case NEW | NULL | LPAREN | STRING_LITERAL | CHARACTER_LITERAL | REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | BIT_STRING_LITERAL | BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
                 alt257=1
            }

            case ABS => {
                 alt257=2
            }

            case NOT => {
                 alt257=3
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return factor_}
                val nvae = new NoViableAltException("", 257, 0, input)

                throw nvae
            }

            alt257 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1894:4: p1= primary ( DOUBLESTAR p2= primary )?
                    {
                    	pushFollow(FOLLOW_primary_in_factor10409)
                    	p1=primary();

                    	state._fsp-=1
                    	if (state.failed) return factor_;
                    	if ( state.backtracking==0 ) {
                    	  factor_ = p1
                    	}
                    	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1894:34: ( DOUBLESTAR p2= primary )?
                    	var alt256 :Int=2
                    	val LA256_0:Int = input.LA(1)

                    	if ( (LA256_0==DOUBLESTAR) ) {
                    	    alt256=1
                    	}
                    	alt256 match {
                    	    case 1 =>
                    	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1894:35: DOUBLESTAR p2= primary
                    	        {
                    	        	DOUBLESTAR470=`match`(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_factor10412).asInstanceOf[Token]; if (state.failed) return factor_;
                    	        	pushFollow(FOLLOW_primary_in_factor10416)
                    	        	p2=primary();

                    	        	state._fsp-=1
                    	        	if (state.failed) return factor_;
                    	        	if ( state.backtracking==0 ) {
                    	        	  factor_ = new Factor(toPosition(DOUBLESTAR470),p1,Factor.Operator.POW,p2)
                    	        	}

                    	        }
                    	    case _ => 
                    	}


                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1895:4: ABS primary
                    {
                    	ABS471=`match`(input,ABS,FOLLOW_ABS_in_factor10425).asInstanceOf[Token]; if (state.failed) return factor_;
                    	pushFollow(FOLLOW_primary_in_factor10427)
                    	primary472=primary();

                    	state._fsp-=1
                    	if (state.failed) return factor_;
                    	if ( state.backtracking==0 ) {
                    	  factor_ = new Factor(toPosition(ABS471),primary472,Factor.Operator.ABS)
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1896:4: NOT primary
                    {
                    	NOT473=`match`(input,NOT,FOLLOW_NOT_in_factor10434).asInstanceOf[Token]; if (state.failed) return factor_;
                    	pushFollow(FOLLOW_primary_in_factor10436)
                    	primary474=primary();

                    	state._fsp-=1
                    	if (state.failed) return factor_;
                    	if ( state.backtracking==0 ) {
                    	  factor_ = new Factor(toPosition(NOT473),primary474,Factor.Operator.NOT)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, factor_StartIndex) }
        }
        return factor_
    }
    // $ANTLR end "factor"

    // $ANTLR start "primary"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1907:1: primary returns [Expression obj] : ( ( selected_name APOSTROPHE LPAREN )=> selected_name qualified_expression[$selected_name.name_] | ( name )=> name | ( selected_name LPAREN association_list RPAREN )=> function_call | literal | ( LPAREN expression RPAREN )=> LPAREN expression RPAREN | allocator | aggregate );
    @throws(classOf[RecognitionException])
    def primary():Expression = {
         var obj :Expression = null;val primary_StartIndex:Int = input.index()
        var selected_name475:SelectedName = null

        var qualified_expression476:QualifiedExpression = null

        var name477:Name = null

        var function_call478:FunctionCallExpression = null

        var literal479:Expression = null

        var expression480:Expression = null

        var allocator481:Expression = null

        var aggregate482:Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return obj }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1908:2: ( ( selected_name APOSTROPHE LPAREN )=> selected_name qualified_expression[$selected_name.name_] | ( name )=> name | ( selected_name LPAREN association_list RPAREN )=> function_call | literal | ( LPAREN expression RPAREN )=> LPAREN expression RPAREN | allocator | aggregate )
            var alt258 :Int=7
             alt258 = dfa258.predict(input)
            alt258 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1909:3: ( selected_name APOSTROPHE LPAREN )=> selected_name qualified_expression[$selected_name.name_]
                    {
                    	pushFollow(FOLLOW_selected_name_in_primary10467)
                    	selected_name475=selected_name();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	pushFollow(FOLLOW_qualified_expression_in_primary10469)
                    	qualified_expression476=qualified_expression(selected_name475);

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=qualified_expression476
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1910:5: ( name )=> name
                    {
                    	pushFollow(FOLLOW_name_in_primary10482)
                    	name477=name();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=new NameExpression(name477)
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1911:7: ( selected_name LPAREN association_list RPAREN )=> function_call
                    {
                    	pushFollow(FOLLOW_function_call_in_primary10502)
                    	function_call478=function_call();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=function_call478
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1912:5: literal
                    {
                    	pushFollow(FOLLOW_literal_in_primary10510)
                    	literal479=literal();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=literal479
                    	}

                    }case 5 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1913:5: ( LPAREN expression RPAREN )=> LPAREN expression RPAREN
                    {
                    	`match`(input,LPAREN,FOLLOW_LPAREN_in_primary10528); if (state.failed) return obj;
                    	pushFollow(FOLLOW_expression_in_primary10530)
                    	expression480=expression();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	`match`(input,RPAREN,FOLLOW_RPAREN_in_primary10532); if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=expression480
                    	}

                    }case 6 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1914:5: allocator
                    {
                    	pushFollow(FOLLOW_allocator_in_primary10540)
                    	allocator481=allocator();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=allocator481
                    	}

                    }case 7 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1915:5: aggregate
                    {
                    	pushFollow(FOLLOW_aggregate_in_primary10548)
                    	aggregate482=aggregate();

                    	state._fsp-=1
                    	if (state.failed) return obj;
                    	if ( state.backtracking==0 ) {
                    	  obj=new AggregateExpression(aggregate482)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, primary_StartIndex) }
        }
        return obj
    }
    // $ANTLR end "primary"

    // $ANTLR start "allocator"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1918:1: allocator returns [Expression newExpression] : NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) ;
    @throws(classOf[RecognitionException])
    def allocator():Expression = {
         var newExpression :Expression = null;val allocator_StartIndex:Int = input.index()
        var NEW484 :Token=null
        var selected_name483:SelectedName = null

        var qualified_expression485:QualifiedExpression = null

        var index_constraint486:Seq[DiscreteRange] = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return newExpression }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1919:2: ( NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1920:2: NEW selected_name ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
            {
            	NEW484=`match`(input,NEW,FOLLOW_NEW_in_allocator10566).asInstanceOf[Token]; if (state.failed) return newExpression;
            	pushFollow(FOLLOW_selected_name_in_allocator10568)
            	selected_name483=selected_name();

            	state._fsp-=1
            	if (state.failed) return newExpression;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1921:4: ( qualified_expression[$selected_name.name_] | ( index_constraint )? )
            	var alt260 :Int=2
            	val LA260_0:Int = input.LA(1)

            	if ( (LA260_0==APOSTROPHE) ) {
            	    alt260=1
            	}
            	else if ( (LA260_0==EOF||LA260_0==AFTER||LA260_0==AND||LA260_0==BUS||(LA260_0>=DOWNTO && LA260_0<=ELSE)||LA260_0==FOR||LA260_0==GENERATE||LA260_0==INERTIAL||LA260_0==IS||LA260_0==LOOP||(LA260_0>=MOD && LA260_0<=NAND)||LA260_0==NOR||(LA260_0>=ON && LA260_0<=OR)||LA260_0==REGISTER||(LA260_0>=REM && LA260_0<=REPORT)||(LA260_0>=ROL && LA260_0<=SEVERITY)||(LA260_0>=SLA && LA260_0<=SRL)||(LA260_0>=THEN && LA260_0<=TO)||LA260_0==UNITS||LA260_0==USE||LA260_0==WHEN||(LA260_0>=XNOR && LA260_0<=XOR)||(LA260_0>=ACROSS && LA260_0<=NOISE)||(LA260_0>=DOUBLESTAR && LA260_0<=VAR_ASSIGN)||(LA260_0>=SEMICOLON && LA260_0<=RPAREN)||(LA260_0>=MUL && LA260_0<=BAR)||LA260_0==TOLERANCE) ) {
            	    alt260=2
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return newExpression}
            	    val nvae = new NoViableAltException("", 260, 0, input)

            	    throw nvae
            	}
            	alt260 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1921:6: qualified_expression[$selected_name.name_]
            	        {
            	        	pushFollow(FOLLOW_qualified_expression_in_allocator10576)
            	        	qualified_expression485=qualified_expression(selected_name483);

            	        	state._fsp-=1
            	        	if (state.failed) return newExpression;
            	        	if ( state.backtracking==0 ) {
            	        	  newExpression=new NewExpression(toPosition(NEW484),Left(qualified_expression485))
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1922:6: ( index_constraint )?
            	        {
            	        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1922:6: ( index_constraint )?
            	        	var alt259 :Int=2
            	        	val LA259_0:Int = input.LA(1)

            	        	if ( (LA259_0==LPAREN) ) {
            	        	    alt259=1
            	        	}
            	        	alt259 match {
            	        	    case 1 =>
            	        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1922:6: index_constraint
            	        	        {
            	        	        	pushFollow(FOLLOW_index_constraint_in_allocator10586)
            	        	        	index_constraint486=index_constraint();

            	        	        	state._fsp-=1
            	        	        	if (state.failed) return newExpression;

            	        	        }
            	        	    case _ => 
            	        	}

            	        	if ( state.backtracking==0 ) {
            	        	  newExpression=new NewExpression(toPosition(NEW484),Right(new SubTypeIndication(None,selected_name483,Right(index_constraint486))))
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, allocator_StartIndex) }
        }
        return newExpression
    }
    // $ANTLR end "allocator"

    // $ANTLR start "function_call"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1926:1: function_call returns [FunctionCallExpression functionCall] : function_name= selected_name ( LPAREN parameter_association_list= association_list RPAREN )? ;
    @throws(classOf[RecognitionException])
    def function_call():FunctionCallExpression = {
         var functionCall :FunctionCallExpression = null;val function_call_StartIndex:Int = input.index()
        var function_name:SelectedName = null

        var parameter_association_list:AssociationList = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return functionCall }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1927:2: (function_name= selected_name ( LPAREN parameter_association_list= association_list RPAREN )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1927:4: function_name= selected_name ( LPAREN parameter_association_list= association_list RPAREN )?
            {
            	pushFollow(FOLLOW_selected_name_in_function_call10611)
            	function_name=selected_name();

            	state._fsp-=1
            	if (state.failed) return functionCall;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1927:32: ( LPAREN parameter_association_list= association_list RPAREN )?
            	var alt261 :Int=2
            	val LA261_0:Int = input.LA(1)

            	if ( (LA261_0==LPAREN) ) {
            	    alt261=1
            	}
            	alt261 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1927:33: LPAREN parameter_association_list= association_list RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_function_call10614); if (state.failed) return functionCall;
            	        	pushFollow(FOLLOW_association_list_in_function_call10618)
            	        	parameter_association_list=association_list();

            	        	state._fsp-=1
            	        	if (state.failed) return functionCall;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_function_call10620); if (state.failed) return functionCall;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  functionCall=new FunctionCallExpression(function_name,parameter_association_list)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, function_call_StartIndex) }
        }
        return functionCall
    }
    // $ANTLR end "function_call"

    // $ANTLR start "qualified_expression"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1931:1: qualified_expression[SelectedName typeName] returns [QualifiedExpression expr] : APOSTROPHE aggregate ;
    @throws(classOf[RecognitionException])
    def qualified_expression(typeName:SelectedName):QualifiedExpression = {
         var expr :QualifiedExpression = null;val qualified_expression_StartIndex:Int = input.index()
        var aggregate487:Aggregate = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return expr }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1932:2: ( APOSTROPHE aggregate )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1932:4: APOSTROPHE aggregate
            {
            	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_qualified_expression10644); if (state.failed) return expr;
            	pushFollow(FOLLOW_aggregate_in_qualified_expression10646)
            	aggregate487=aggregate();

            	state._fsp-=1
            	if (state.failed) return expr;
            	if ( state.backtracking==0 ) {
            	  expr=new QualifiedExpression(typeName,new AggregateExpression(aggregate487))
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, qualified_expression_StartIndex) }
        }
        return expr
    }
    // $ANTLR end "qualified_expression"

    // $ANTLR start "selected_name_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1936:1: selected_name_list returns [Seq[SelectedName] list] : n1= selected_name ( COMMA n2= selected_name )* ;
    @throws(classOf[RecognitionException])
    def selected_name_list():Seq[SelectedName] = {
         var list :Seq[SelectedName] = null;val selected_name_list_StartIndex:Int = input.index()
        var n1:SelectedName = null

        var n2:SelectedName = null



        	val tmpList=new Buffer[SelectedName]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1941:2: (n1= selected_name ( COMMA n2= selected_name )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1941:4: n1= selected_name ( COMMA n2= selected_name )*
            {
            	pushFollow(FOLLOW_selected_name_in_selected_name_list10672)
            	n1=selected_name();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  tmpList += n1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1941:44: ( COMMA n2= selected_name )*
            	var loop262=true
            	do {
            	    var alt262:Int=2
            	    val LA262_0:Int = input.LA(1)

            	    if ( (LA262_0==COMMA) ) {
            	        alt262=1
            	    }


            	    alt262 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1941:45: COMMA n2= selected_name
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_selected_name_list10677); if (state.failed) return list;
            		    	pushFollow(FOLLOW_selected_name_in_selected_name_list10681)
            		    	n2=selected_name();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += n2
            		    	}

            		    }
            		case _ => loop262=false
            	    }
            	} while (loop262);

            	if ( state.backtracking==0 ) {
            	  list=tmpList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, selected_name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "selected_name_list"

    // $ANTLR start "selected_name"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1945:1: selected_name returns [SelectedName name_] : name_prefix ( name_selected_part )* ;
    @throws(classOf[RecognitionException])
    def selected_name():SelectedName = {
         var name_ :SelectedName = null;val selected_name_StartIndex:Int = input.index()
        var name_selected_part488:Name.SelectedPart = null

        var name_prefix489:Identifier = null



        	val parts=new Buffer[Identifier]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return name_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1949:2: ( name_prefix ( name_selected_part )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1949:4: name_prefix ( name_selected_part )*
            {
            	pushFollow(FOLLOW_name_prefix_in_selected_name10712)
            	name_prefix489=name_prefix();

            	state._fsp-=1
            	if (state.failed) return name_;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1949:16: ( name_selected_part )*
            	var loop263=true
            	do {
            	    var alt263:Int=2
            	    val LA263_0:Int = input.LA(1)

            	    if ( (LA263_0==DOT) ) {
            	        alt263=1
            	    }


            	    alt263 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1949:18: name_selected_part
            		    {
            		    	pushFollow(FOLLOW_name_selected_part_in_selected_name10716)
            		    	name_selected_part488=name_selected_part();

            		    	state._fsp-=1
            		    	if (state.failed) return name_;
            		    	if ( state.backtracking==0 ) {
            		    	  parts += name_selected_part488.identifier
            		    	}

            		    }
            		case _ => loop263=false
            	    }
            	} while (loop263);

            	if ( state.backtracking==0 ) {
            	  name_ =new SelectedName(name_prefix489 +: parts.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, selected_name_StartIndex) }
        }
        return name_
    }
    // $ANTLR end "selected_name"

    // $ANTLR start "name_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1953:1: name_list returns [Seq[Name] list] : n1= name ( COMMA n2= name )* ;
    @throws(classOf[RecognitionException])
    def name_list():Seq[Name] = {
         var list :Seq[Name] = null;val name_list_StartIndex:Int = input.index()
        var n1:Name = null

        var n2:Name = null



        	val tmpList=new Buffer[Name]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1958:2: (n1= name ( COMMA n2= name )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1958:4: n1= name ( COMMA n2= name )*
            {
            	pushFollow(FOLLOW_name_in_name_list10746)
            	n1=name();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  tmpList += n1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1958:35: ( COMMA n2= name )*
            	var loop264=true
            	do {
            	    var alt264:Int=2
            	    val LA264_0:Int = input.LA(1)

            	    if ( (LA264_0==COMMA) ) {
            	        alt264=1
            	    }


            	    alt264 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1958:36: COMMA n2= name
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_name_list10751); if (state.failed) return list;
            		    	pushFollow(FOLLOW_name_in_name_list10755)
            		    	n2=name();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += n2
            		    	}

            		    }
            		case _ => loop264=false
            	    }
            	} while (loop264);

            	if ( state.backtracking==0 ) {
            	  list=tmpList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, name_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "name_list"

    // $ANTLR start "name"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1962:1: name returns [Name name_] : name_prefix ( name_part )* ;
    @throws(classOf[RecognitionException])
    def name():Name = {
         var name_ :Name = null;val name_StartIndex:Int = input.index()
        var name_part490:Name.Part = null

        var name_prefix491:Identifier = null



        	val parts=new Buffer[Name.Part]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return name_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1966:2: ( name_prefix ( name_part )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1966:4: name_prefix ( name_part )*
            {
            	pushFollow(FOLLOW_name_prefix_in_name10787)
            	name_prefix491=name_prefix();

            	state._fsp-=1
            	if (state.failed) return name_;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1966:16: ( name_part )*
            	var loop265=true
            	do {
            	    var alt265:Int=2
            	     alt265 = dfa265.predict(input)
            	    alt265 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1966:17: name_part
            		    {
            		    	pushFollow(FOLLOW_name_part_in_name10790)
            		    	name_part490=name_part();

            		    	state._fsp-=1
            		    	if (state.failed) return name_;
            		    	if ( state.backtracking==0 ) {
            		    	  parts += name_part490
            		    	}

            		    }
            		case _ => loop265=false
            	    }
            	} while (loop265);

            	if ( state.backtracking==0 ) {
            	  name_ =new Name(name_prefix491,parts.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, name_StartIndex) }
        }
        return name_
    }
    // $ANTLR end "name"

    // $ANTLR start "name_prefix"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1970:1: name_prefix returns [Identifier id] : ( identifier | STRING_LITERAL );
    @throws(classOf[RecognitionException])
    def name_prefix():Identifier = {
         var id :Identifier = null;val name_prefix_StartIndex:Int = input.index()
        var STRING_LITERAL493 :Token=null
        var identifier492:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return id }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1971:3: ( identifier | STRING_LITERAL )
            var alt266 :Int=2
            val LA266_0:Int = input.LA(1)

            if ( ((LA266_0>=BASIC_IDENTIFIER && LA266_0<=EXTENDED_IDENTIFIER)) ) {
                alt266=1
            }
            else if ( (LA266_0==STRING_LITERAL) ) {
                alt266=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 266, 0, input)

                throw nvae
            }
            alt266 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1971:5: identifier
                    {
                    	pushFollow(FOLLOW_identifier_in_name_prefix10819)
                    	identifier492=identifier();

                    	state._fsp-=1
                    	if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=identifier492
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1972:5: STRING_LITERAL
                    {
                    	STRING_LITERAL493=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_name_prefix10827).asInstanceOf[Token]; if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(STRING_LITERAL493)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, name_prefix_StartIndex) }
        }
        return id
    }
    // $ANTLR end "name_prefix"

    // $ANTLR start "name_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1975:1: name_part returns [Name.Part part] : ( name_selected_part | name_attribute_part | ( name_indexed_part )=> name_indexed_part | name_slice_part );
    @throws(classOf[RecognitionException])
    def name_part():Name.Part = {
         var part :Name.Part = null;val name_part_StartIndex:Int = input.index()
        var name_selected_part494:Name.SelectedPart = null

        var name_attribute_part495:Name.AttributePart = null

        var name_indexed_part496:Name.IndexPart = null

        var name_slice_part497:Name.SlicePart = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return part }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1976:4: ( name_selected_part | name_attribute_part | ( name_indexed_part )=> name_indexed_part | name_slice_part )
            var alt267 :Int=4
            input.LA(1) match {
            case DOT => {
                 alt267=1
            }

            case LBRACKET | APOSTROPHE => {
                 alt267=2
            }

            case LPAREN => {
                 val LA267_4:Int = input.LA(2)

                 if ( (synpred23_VHDL()) ) {
                     alt267=3
                 }
                 else if ( (true) ) {
                     alt267=4
                 }
                 else {
                     if (state.backtracking>0) {state.failed=true; return part}
                     val nvae = new NoViableAltException("", 267, 4, input)

                     throw nvae
                 }
            }

            case _ =>
                if (state.backtracking>0) {state.failed=true; return part}
                val nvae = new NoViableAltException("", 267, 0, input)

                throw nvae
            }

            alt267 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1977:5: name_selected_part
                    {
                    	pushFollow(FOLLOW_name_selected_part_in_name_part10853)
                    	name_selected_part494=name_selected_part();

                    	state._fsp-=1
                    	if (state.failed) return part;
                    	if ( state.backtracking==0 ) {
                    	  part = name_selected_part494
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1978:8: name_attribute_part
                    {
                    	pushFollow(FOLLOW_name_attribute_part_in_name_part10864)
                    	name_attribute_part495=name_attribute_part();

                    	state._fsp-=1
                    	if (state.failed) return part;
                    	if ( state.backtracking==0 ) {
                    	  part = name_attribute_part495
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1979:8: ( name_indexed_part )=> name_indexed_part
                    {
                    	pushFollow(FOLLOW_name_indexed_part_in_name_part10879)
                    	name_indexed_part496=name_indexed_part();

                    	state._fsp-=1
                    	if (state.failed) return part;
                    	if ( state.backtracking==0 ) {
                    	  part = name_indexed_part496
                    	}

                    }case 4 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1980:7: name_slice_part
                    {
                    	pushFollow(FOLLOW_name_slice_part_in_name_part10889)
                    	name_slice_part497=name_slice_part();

                    	state._fsp-=1
                    	if (state.failed) return part;
                    	if ( state.backtracking==0 ) {
                    	  part = name_slice_part497
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, name_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_part"

    // $ANTLR start "name_selected_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1984:1: name_selected_part returns [Name.SelectedPart part] : DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) ;
    @throws(classOf[RecognitionException])
    def name_selected_part():Name.SelectedPart = {
         var part :Name.SelectedPart = null;val name_selected_part_StartIndex:Int = input.index()
        var CHARACTER_LITERAL499 :Token=null
        var STRING_LITERAL500 :Token=null
        var ALL501 :Token=null
        var identifier498:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return part }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1985:2: ( DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL ) )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1985:4: DOT ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
            {
            	`match`(input,DOT,FOLLOW_DOT_in_name_selected_part10914); if (state.failed) return part;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1985:8: ( identifier | CHARACTER_LITERAL | STRING_LITERAL | ALL )
            	var alt268 :Int=4
            	input.LA(1) match {
            	case BASIC_IDENTIFIER | EXTENDED_IDENTIFIER => {
            	     alt268=1
            	}

            	case CHARACTER_LITERAL => {
            	     alt268=2
            	}

            	case STRING_LITERAL => {
            	     alt268=3
            	}

            	case ALL => {
            	     alt268=4
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return part}
            	    val nvae = new NoViableAltException("", 268, 0, input)

            	    throw nvae
            	}

            	alt268 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1986:3: identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_name_selected_part10920)
            	        	identifier498=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return part;
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(identifier498)
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1987:4: CHARACTER_LITERAL
            	        {
            	        	CHARACTER_LITERAL499=`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_name_selected_part10926).asInstanceOf[Token]; if (state.failed) return part;
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(CHARACTER_LITERAL499))
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1988:4: STRING_LITERAL
            	        {
            	        	STRING_LITERAL500=`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_name_selected_part10933).asInstanceOf[Token]; if (state.failed) return part;
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(STRING_LITERAL500))
            	        	}

            	        }case 4 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1989:4: ALL
            	        {
            	        	ALL501=`match`(input,ALL,FOLLOW_ALL_in_name_selected_part10939).asInstanceOf[Token]; if (state.failed) return part;
            	        	if ( state.backtracking==0 ) {
            	        	  part= new Name.SelectedPart(toIdentifier(ALL501))
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, name_selected_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_selected_part"

    // $ANTLR start "name_slice_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1993:1: name_slice_part returns [Name.SlicePart part] : LPAREN discrete_range RPAREN ;
    @throws(classOf[RecognitionException])
    def name_slice_part():Name.SlicePart = {
         var part :Name.SlicePart = null;val name_slice_part_StartIndex:Int = input.index()
        var discrete_range502:DiscreteRange = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return part }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1994:2: ( LPAREN discrete_range RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1994:4: LPAREN discrete_range RPAREN
            {
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_name_slice_part10962); if (state.failed) return part;
            	pushFollow(FOLLOW_discrete_range_in_name_slice_part10964)
            	discrete_range502=discrete_range();

            	state._fsp-=1
            	if (state.failed) return part;
            	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_slice_part10966); if (state.failed) return part;
            	if ( state.backtracking==0 ) {
            	  part=new Name.SlicePart(discrete_range502)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, name_slice_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_slice_part"

    // $ANTLR start "name_indexed_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1997:1: name_indexed_part returns [Name.IndexPart part] : LPAREN e1= expression ( COMMA e2= expression )* RPAREN ;
    @throws(classOf[RecognitionException])
    def name_indexed_part():Name.IndexPart = {
         var part :Name.IndexPart = null;val name_indexed_part_StartIndex:Int = input.index()
        var e1:Expression = null

        var e2:Expression = null



        	val indexes=new Buffer[Expression]

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return part }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2001:2: ( LPAREN e1= expression ( COMMA e2= expression )* RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2001:5: LPAREN e1= expression ( COMMA e2= expression )* RPAREN
            {
            	`match`(input,LPAREN,FOLLOW_LPAREN_in_name_indexed_part10994); if (state.failed) return part;
            	pushFollow(FOLLOW_expression_in_name_indexed_part10998)
            	e1=expression();

            	state._fsp-=1
            	if (state.failed) return part;
            	if ( state.backtracking==0 ) {
            	  indexes += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2001:47: ( COMMA e2= expression )*
            	var loop269=true
            	do {
            	    var alt269:Int=2
            	    val LA269_0:Int = input.LA(1)

            	    if ( (LA269_0==COMMA) ) {
            	        alt269=1
            	    }


            	    alt269 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2001:48: COMMA e2= expression
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_name_indexed_part11002); if (state.failed) return part;
            		    	pushFollow(FOLLOW_expression_in_name_indexed_part11006)
            		    	e2=expression();

            		    	state._fsp-=1
            		    	if (state.failed) return part;
            		    	if ( state.backtracking==0 ) {
            		    	  indexes += e2
            		    	}

            		    }
            		case _ => loop269=false
            	    }
            	} while (loop269);

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_indexed_part11012); if (state.failed) return part;
            	if ( state.backtracking==0 ) {
            	  part=new Name.IndexPart(indexes.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, name_indexed_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_indexed_part"

    // $ANTLR start "name_attribute_part"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2004:1: name_attribute_part returns [Name.AttributePart part] : ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN expression RPAREN )=> LPAREN expression RPAREN )? ;
    @throws(classOf[RecognitionException])
    def name_attribute_part():Name.AttributePart = {
         var part :Name.AttributePart = null;val name_attribute_part_StartIndex:Int = input.index()
        var RANGE503 :Token=null
        var id:Identifier = null

        var signature504:Signature = null

        var expression505:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return part }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:2: ( ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN expression RPAREN )=> LPAREN expression RPAREN )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:4: ( signature )? APOSTROPHE (id= identifier | RANGE ) ( ( LPAREN expression RPAREN )=> LPAREN expression RPAREN )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:4: ( signature )?
            	var alt270 :Int=2
            	val LA270_0:Int = input.LA(1)

            	if ( (LA270_0==LBRACKET) ) {
            	    alt270=1
            	}
            	alt270 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:4: signature
            	        {
            	        	pushFollow(FOLLOW_signature_in_name_attribute_part11031)
            	        	signature504=signature();

            	        	state._fsp-=1
            	        	if (state.failed) return part;

            	        }
            	    case _ => 
            	}

            	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_name_attribute_part11034); if (state.failed) return part;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:26: (id= identifier | RANGE )
            	var alt271 :Int=2
            	val LA271_0:Int = input.LA(1)

            	if ( ((LA271_0>=BASIC_IDENTIFIER && LA271_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt271=1
            	}
            	else if ( (LA271_0==RANGE) ) {
            	    alt271=2
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return part}
            	    val nvae = new NoViableAltException("", 271, 0, input)

            	    throw nvae
            	}
            	alt271 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:27: id= identifier
            	        {
            	        	pushFollow(FOLLOW_identifier_in_name_attribute_part11039)
            	        	id=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return part;

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2005:41: RANGE
            	        {
            	        	RANGE503=`match`(input,RANGE,FOLLOW_RANGE_in_name_attribute_part11041).asInstanceOf[Token]; if (state.failed) return part;
            	        	if ( state.backtracking==0 ) {
            	        	  id=toIdentifier(RANGE503)
            	        	}

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2006:2: ( ( LPAREN expression RPAREN )=> LPAREN expression RPAREN )?
            	var alt272 :Int=2
            	 alt272 = dfa272.predict(input)
            	alt272 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2006:4: ( LPAREN expression RPAREN )=> LPAREN expression RPAREN
            	        {
            	        	`match`(input,LPAREN,FOLLOW_LPAREN_in_name_attribute_part11058); if (state.failed) return part;
            	        	pushFollow(FOLLOW_expression_in_name_attribute_part11060)
            	        	expression505=expression();

            	        	state._fsp-=1
            	        	if (state.failed) return part;
            	        	`match`(input,RPAREN,FOLLOW_RPAREN_in_name_attribute_part11062); if (state.failed) return part;

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  part=new Name.AttributePart(signature504,id,expression505)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, name_attribute_part_StartIndex) }
        }
        return part
    }
    // $ANTLR end "name_attribute_part"

    // $ANTLR start "signature"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2009:1: signature returns [Signature signature_] : LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET ;
    @throws(classOf[RecognitionException])
    def signature():Signature = {
         var signature_ :Signature = null;val signature_StartIndex:Int = input.index()
        var LBRACKET506 :Token=null
        var selected_name_list507:Seq[SelectedName] = null

        var type_mark508:SelectedName = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return signature_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:2: ( LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:4: LBRACKET ( selected_name_list )? ( RETURN type_mark )? RBRACKET
            {
            	LBRACKET506=`match`(input,LBRACKET,FOLLOW_LBRACKET_in_signature11083).asInstanceOf[Token]; if (state.failed) return signature_;
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:13: ( selected_name_list )?
            	var alt273 :Int=2
            	val LA273_0:Int = input.LA(1)

            	if ( (LA273_0==STRING_LITERAL||(LA273_0>=BASIC_IDENTIFIER && LA273_0<=EXTENDED_IDENTIFIER)) ) {
            	    alt273=1
            	}
            	alt273 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:13: selected_name_list
            	        {
            	        	pushFollow(FOLLOW_selected_name_list_in_signature11085)
            	        	selected_name_list507=selected_name_list();

            	        	state._fsp-=1
            	        	if (state.failed) return signature_;

            	        }
            	    case _ => 
            	}

            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:33: ( RETURN type_mark )?
            	var alt274 :Int=2
            	val LA274_0:Int = input.LA(1)

            	if ( (LA274_0==RETURN) ) {
            	    alt274=1
            	}
            	alt274 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2010:34: RETURN type_mark
            	        {
            	        	`match`(input,RETURN,FOLLOW_RETURN_in_signature11089); if (state.failed) return signature_;
            	        	pushFollow(FOLLOW_type_mark_in_signature11091)
            	        	type_mark508=type_mark();

            	        	state._fsp-=1
            	        	if (state.failed) return signature_;

            	        }
            	    case _ => 
            	}

            	`match`(input,RBRACKET,FOLLOW_RBRACKET_in_signature11095); if (state.failed) return signature_;
            	if ( state.backtracking==0 ) {
            	  signature_ =new Signature(toPosition(LBRACKET506),selected_name_list507,type_mark508)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, signature_StartIndex) }
        }
        return signature_
    }
    // $ANTLR end "signature"

    // $ANTLR start "literal"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2035:1: literal returns [Expression literal_] : ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => identifier )? ;
    @throws(classOf[RecognitionException])
    def literal():Expression = {
         var literal_ :Expression = null;val literal_StartIndex:Int = input.index()
        var identifier509:Identifier = null



        	var literalType:Literal.Type.Value=null
        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return literal_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2040:2: ( ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => identifier )? )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2041:3: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BIT_STRING_LITERAL | NULL ) ({...}? => identifier )?
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2041:3: ( REAL_LITERAL | INTEGER_LITERAL | BASED_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BIT_STRING_LITERAL | NULL )
            	var alt275 :Int=7
            	input.LA(1) match {
            	case REAL_LITERAL => {
            	     alt275=1
            	}

            	case INTEGER_LITERAL => {
            	     alt275=2
            	}

            	case BASED_LITERAL => {
            	     alt275=3
            	}

            	case CHARACTER_LITERAL => {
            	     alt275=4
            	}

            	case STRING_LITERAL => {
            	     alt275=5
            	}

            	case BIT_STRING_LITERAL => {
            	     alt275=6
            	}

            	case NULL => {
            	     alt275=7
            	}

            	case _ =>
            	    if (state.backtracking>0) {state.failed=true; return literal_}
            	    val nvae = new NoViableAltException("", 275, 0, input)

            	    throw nvae
            	}

            	alt275 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2042:3: REAL_LITERAL
            	        {
            	        	`match`(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal11128); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.REAL_LITERAL
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2043:5: INTEGER_LITERAL
            	        {
            	        	`match`(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal11136); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.INTEGER_LITERAL
            	        	}

            	        }case 3 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2044:5: BASED_LITERAL
            	        {
            	        	`match`(input,BASED_LITERAL,FOLLOW_BASED_LITERAL_in_literal11144); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.BASED_LITERAL
            	        	}

            	        }case 4 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2045:5: CHARACTER_LITERAL
            	        {
            	        	`match`(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal11152); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.CHARACTER_LITERAL
            	        	}

            	        }case 5 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2046:5: STRING_LITERAL
            	        {
            	        	`match`(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal11160); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.STRING_LITERAL
            	        	}

            	        }case 6 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2047:5: BIT_STRING_LITERAL
            	        {
            	        	`match`(input,BIT_STRING_LITERAL,FOLLOW_BIT_STRING_LITERAL_in_literal11168); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.BIT_STRING_LITERAL
            	        	}

            	        }case 7 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2048:5: NULL
            	        {
            	        	`match`(input,NULL,FOLLOW_NULL_in_literal11176); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literalType=Literal.Type.NULL_LITERAL
            	        	}

            	        }
            	    case _ => 
            	}

            	if ( state.backtracking==0 ) {
            	  literal_ =new Literal(toPosition(firstToken),input.LT(-1).getText(),literalType)
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2051:3: ({...}? => identifier )?
            	var alt276 :Int=2
            	val LA276_0:Int = input.LA(1)

            	if ( ((LA276_0>=BASIC_IDENTIFIER && LA276_0<=EXTENDED_IDENTIFIER)) && ((input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/))) {
            	    alt276=1
            	}
            	alt276 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2051:4: {...}? => identifier
            	        {
            	        	if ( !((input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/)) ) {
            	        	    if (state.backtracking>0) {state.failed=true; return literal_}
            	        	    throw new FailedPredicateException(input, "literal", "input.LA(-1)==INTEGER_LITERAL || input.LA(-1)==REAL_LITERAL /*|| input.LA(-1)==BASED_LITERAL*/")
            	        	}
            	        	pushFollow(FOLLOW_identifier_in_literal11194)
            	        	identifier509=identifier();

            	        	state._fsp-=1
            	        	if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  literal_ = new PhysicalLiteral(literal_.asInstanceOf[Literal],identifier509)
            	        	}

            	        }
            	    case _ => 
            	}


            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, literal_StartIndex) }
        }
        return literal_
    }
    // $ANTLR end "literal"

    // $ANTLR start "physical_literal"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2054:1: physical_literal returns [PhysicalLiteral literal_] : ( INTEGER_LITERAL | REAL_LITERAL ) unit_name= identifier ;
    @throws(classOf[RecognitionException])
    def physical_literal():PhysicalLiteral = {
         var literal_ :PhysicalLiteral = null;val physical_literal_StartIndex:Int = input.index()
        var unit_name:Identifier = null



        	var text:String=null
        	var literalType:Literal.Type.Value=null
        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return literal_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2060:2: ( ( INTEGER_LITERAL | REAL_LITERAL ) unit_name= identifier )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2060:4: ( INTEGER_LITERAL | REAL_LITERAL ) unit_name= identifier
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2060:4: ( INTEGER_LITERAL | REAL_LITERAL )
            	var alt277 :Int=2
            	val LA277_0:Int = input.LA(1)

            	if ( (LA277_0==INTEGER_LITERAL) ) {
            	    alt277=1
            	}
            	else if ( (LA277_0==REAL_LITERAL) ) {
            	    alt277=2
            	}
            	else {
            	    if (state.backtracking>0) {state.failed=true; return literal_}
            	    val nvae = new NoViableAltException("", 277, 0, input)

            	    throw nvae
            	}
            	alt277 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2060:5: INTEGER_LITERAL
            	        {
            	        	`match`(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_physical_literal11220); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  text=input.LT(-1).getText(); literalType=Literal.Type.INTEGER_LITERAL
            	        	}

            	        }case 2 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2061:4: REAL_LITERAL
            	        {
            	        	`match`(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_physical_literal11227); if (state.failed) return literal_;
            	        	if ( state.backtracking==0 ) {
            	        	  text=input.LT(-1).getText(); literalType=Literal.Type.REAL_LITERAL
            	        	}

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_identifier_in_physical_literal11242)
            	unit_name=identifier();

            	state._fsp-=1
            	if (state.failed) return literal_;
            	if ( state.backtracking==0 ) {
            	  literal_ =new PhysicalLiteral(toPosition(firstToken),text,unit_name,literalType)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, physical_literal_StartIndex) }
        }
        return literal_
    }
    // $ANTLR end "physical_literal"

    // $ANTLR start "element_association"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2068:1: element_association returns [Aggregate.ElementAssociation element] : ( ( choices ARROW )=> choices ARROW )? expression ;
    @throws(classOf[RecognitionException])
    def element_association():Aggregate.ElementAssociation = {
         var element :Aggregate.ElementAssociation = null;val element_association_StartIndex:Int = input.index()
        var choices510:Choices = null

        var expression511:Expression = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return element }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:4: ( ( ( choices ARROW )=> choices ARROW )? expression )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:6: ( ( choices ARROW )=> choices ARROW )? expression
            {
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:6: ( ( choices ARROW )=> choices ARROW )?
            	var alt278 :Int=2
            	 alt278 = dfa278.predict(input)
            	alt278 match {
            	    case 1 =>
            	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:8: ( choices ARROW )=> choices ARROW
            	        {
            	        	pushFollow(FOLLOW_choices_in_element_association11274)
            	        	choices510=choices();

            	        	state._fsp-=1
            	        	if (state.failed) return element;
            	        	`match`(input,ARROW,FOLLOW_ARROW_in_element_association11276); if (state.failed) return element;

            	        }
            	    case _ => 
            	}

            	pushFollow(FOLLOW_expression_in_element_association11281)
            	expression511=expression();

            	state._fsp-=1
            	if (state.failed) return element;
            	if ( state.backtracking==0 ) {
            	  element=new Aggregate.ElementAssociation(choices510,expression511)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, element_association_StartIndex) }
        }
        return element
    }
    // $ANTLR end "element_association"

    // $ANTLR start "aggregate"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2073:1: aggregate returns [Aggregate aggregate_] : LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN ;
    @throws(classOf[RecognitionException])
    def aggregate():Aggregate = {
         var aggregate_ :Aggregate = null;val aggregate_StartIndex:Int = input.index()
        var LPAREN512 :Token=null
        var e1:Aggregate.ElementAssociation = null

        var e2:Aggregate.ElementAssociation = null



        	val elements=new Buffer[Aggregate.ElementAssociation]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return aggregate_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2077:2: ( LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2077:4: LPAREN e1= element_association ( COMMA e2= element_association )* RPAREN
            {
            	LPAREN512=`match`(input,LPAREN,FOLLOW_LPAREN_in_aggregate11311).asInstanceOf[Token]; if (state.failed) return aggregate_;
            	pushFollow(FOLLOW_element_association_in_aggregate11316)
            	e1=element_association();

            	state._fsp-=1
            	if (state.failed) return aggregate_;
            	if ( state.backtracking==0 ) {
            	  elements += e1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2077:60: ( COMMA e2= element_association )*
            	var loop279=true
            	do {
            	    var alt279:Int=2
            	    val LA279_0:Int = input.LA(1)

            	    if ( (LA279_0==COMMA) ) {
            	        alt279=1
            	    }


            	    alt279 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2077:61: COMMA e2= element_association
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_aggregate11320); if (state.failed) return aggregate_;
            		    	pushFollow(FOLLOW_element_association_in_aggregate11324)
            		    	e2=element_association();

            		    	state._fsp-=1
            		    	if (state.failed) return aggregate_;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += e2
            		    	}

            		    }
            		case _ => loop279=false
            	    }
            	} while (loop279);

            	`match`(input,RPAREN,FOLLOW_RPAREN_in_aggregate11330); if (state.failed) return aggregate_;
            	if ( state.backtracking==0 ) {
            	  aggregate_ =new Aggregate(toPosition(LPAREN512),elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, aggregate_StartIndex) }
        }
        return aggregate_
    }
    // $ANTLR end "aggregate"

    // $ANTLR start "choice"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2082:1: choice returns [Choices.Choice choice_] : ( ( simple_expression direction )=>d= discrete_range | expr= simple_expression | OTHERS );
    @throws(classOf[RecognitionException])
    def choice():Choices.Choice = {
         var choice_ :Choices.Choice = null;val choice_StartIndex:Int = input.index()
        var d:DiscreteRange = null

        var expr:Expression = null



        	val firstToken=input.LT(1)

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return choice_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2086:2: ( ( simple_expression direction )=>d= discrete_range | expr= simple_expression | OTHERS )
            var alt280 :Int=3
             alt280 = dfa280.predict(input)
            alt280 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2087:3: ( simple_expression direction )=>d= discrete_range
                    {
                    	pushFollow(FOLLOW_discrete_range_in_choice11367)
                    	d=discrete_range();

                    	state._fsp-=1
                    	if (state.failed) return choice_;
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(toPosition(firstToken),Some(Left(d)))
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2088:5: expr= simple_expression
                    {
                    	pushFollow(FOLLOW_simple_expression_in_choice11377)
                    	expr=simple_expression();

                    	state._fsp-=1
                    	if (state.failed) return choice_;
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(toPosition(firstToken),Some(Right(expr)))
                    	}

                    }case 3 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2089:5: OTHERS
                    {
                    	`match`(input,OTHERS,FOLLOW_OTHERS_in_choice11385); if (state.failed) return choice_;
                    	if ( state.backtracking==0 ) {
                    	  choice_ =new Choices.Choice(toPosition(firstToken),None)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, choice_StartIndex) }
        }
        return choice_
    }
    // $ANTLR end "choice"

    // $ANTLR start "choices"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2092:1: choices returns [Choices choices_] : c1= choice ( BAR c2= choice )* ;
    @throws(classOf[RecognitionException])
    def choices():Choices = {
         var choices_ :Choices = null;val choices_StartIndex:Int = input.index()
        var c1:Choices.Choice = null

        var c2:Choices.Choice = null



        	val elements=new Buffer[Choices.Choice]()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return choices_ }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2096:2: (c1= choice ( BAR c2= choice )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2096:4: c1= choice ( BAR c2= choice )*
            {
            	pushFollow(FOLLOW_choice_in_choices11409)
            	c1=choice();

            	state._fsp-=1
            	if (state.failed) return choices_;
            	if ( state.backtracking==0 ) {
            	  elements += c1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2096:39: ( BAR c2= choice )*
            	var loop281=true
            	do {
            	    var alt281:Int=2
            	    val LA281_0:Int = input.LA(1)

            	    if ( (LA281_0==BAR) ) {
            	        alt281=1
            	    }


            	    alt281 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2096:41: BAR c2= choice
            		    {
            		    	`match`(input,BAR,FOLLOW_BAR_in_choices11414); if (state.failed) return choices_;
            		    	pushFollow(FOLLOW_choice_in_choices11418)
            		    	c2=choice();

            		    	state._fsp-=1
            		    	if (state.failed) return choices_;
            		    	if ( state.backtracking==0 ) {
            		    	  elements += c2
            		    	}

            		    }
            		case _ => loop281=false
            	    }
            	} while (loop281);

            	if ( state.backtracking==0 ) {
            	  choices_ =new Choices(elements.toList)
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, choices_StartIndex) }
        }
        return choices_
    }
    // $ANTLR end "choices"

    // $ANTLR start "identifier_list"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2117:1: identifier_list returns [Seq[Identifier] list] : id1= identifier ( COMMA id2= identifier )* ;
    @throws(classOf[RecognitionException])
    def identifier_list():Seq[Identifier] = {
         var list :Seq[Identifier] = null;val identifier_list_StartIndex:Int = input.index()
        var id1:Identifier = null

        var id2:Identifier = null



        	val tmpList=new Buffer[Identifier]()
        	list=List()

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return list }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2122:2: (id1= identifier ( COMMA id2= identifier )* )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2122:4: id1= identifier ( COMMA id2= identifier )*
            {
            	pushFollow(FOLLOW_identifier_in_identifier_list11453)
            	id1=identifier();

            	state._fsp-=1
            	if (state.failed) return list;
            	if ( state.backtracking==0 ) {
            	  tmpList += id1
            	}
            	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2122:40: ( COMMA id2= identifier )*
            	var loop282=true
            	do {
            	    var alt282:Int=2
            	    val LA282_0:Int = input.LA(1)

            	    if ( (LA282_0==COMMA) ) {
            	        alt282=1
            	    }


            	    alt282 match {
            		case 1 =>
            		    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2122:41: COMMA id2= identifier
            		    {
            		    	`match`(input,COMMA,FOLLOW_COMMA_in_identifier_list11458); if (state.failed) return list;
            		    	pushFollow(FOLLOW_identifier_in_identifier_list11462)
            		    	id2=identifier();

            		    	state._fsp-=1
            		    	if (state.failed) return list;
            		    	if ( state.backtracking==0 ) {
            		    	  tmpList += id2
            		    	}

            		    }
            		case _ => loop282=false
            	    }
            	} while (loop282);

            	if ( state.backtracking==0 ) {
            	  list=tmpList.toList
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, identifier_list_StartIndex) }
        }
        return list
    }
    // $ANTLR end "identifier_list"

    // $ANTLR start "identifier"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2126:1: identifier returns [Identifier id] : ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER );
    @throws(classOf[RecognitionException])
    def identifier():Identifier = {
         var id :Identifier = null;val identifier_StartIndex:Int = input.index()
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return id }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2127:2: ( BASIC_IDENTIFIER | EXTENDED_IDENTIFIER )
            var alt283 :Int=2
            val LA283_0:Int = input.LA(1)

            if ( (LA283_0==BASIC_IDENTIFIER) ) {
                alt283=1
            }
            else if ( (LA283_0==EXTENDED_IDENTIFIER) ) {
                alt283=2
            }
            else {
                if (state.backtracking>0) {state.failed=true; return id}
                val nvae = new NoViableAltException("", 283, 0, input)

                throw nvae
            }
            alt283 match {
                case 1 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2127:4: BASIC_IDENTIFIER
                    {
                    	`match`(input,BASIC_IDENTIFIER,FOLLOW_BASIC_IDENTIFIER_in_identifier11491); if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(input.LT(-1))
                    	}

                    }case 2 =>
                    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2128:5: EXTENDED_IDENTIFIER
                    {
                    	`match`(input,EXTENDED_IDENTIFIER,FOLLOW_EXTENDED_IDENTIFIER_in_identifier11500); if (state.failed) return id;
                    	if ( state.backtracking==0 ) {
                    	  id=toIdentifier(input.LT(-1),false)
                    	}

                    }
                case _ =>
            }
        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, identifier_StartIndex) }
        }
        return id
    }
    // $ANTLR end "identifier"

    // $ANTLR start "label_colon"
    // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2136:1: label_colon returns [Identifier label] : identifier COLON ;
    @throws(classOf[RecognitionException])
    def label_colon():Identifier = {
         var label :Identifier = null;val label_colon_StartIndex:Int = input.index()
        var identifier513:Identifier = null


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return label }
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2137:2: ( identifier COLON )
            // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2137:4: identifier COLON
            {
            	pushFollow(FOLLOW_identifier_in_label_colon11521)
            	identifier513=identifier();

            	state._fsp-=1
            	if (state.failed) return label;
            	`match`(input,COLON,FOLLOW_COLON_in_label_colon11523); if (state.failed) return label;
            	if ( state.backtracking==0 ) {
            	  label=identifier513
            	}

            }

        }
        catch { 
        	case re: RecognitionException=> {
                 reportError(re)
                 recover(input,re)
    	}
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, label_colon_StartIndex) }
        }
        return label
    }
    // $ANTLR end "label_colon"

    // $ANTLR start synpred1_VHDL
    @throws(classOf[RecognitionException])
    def synpred1_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:421:6: ( discrete_range )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:421:7: discrete_range
        {
        	pushFollow(FOLLOW_discrete_range_in_synpred1_VHDL2110)
        	discrete_range();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_VHDL

    // $ANTLR start synpred2_VHDL
    @throws(classOf[RecognitionException])
    def synpred2_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:5: ( identifier )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:428:6: identifier
        {
        	pushFollow(FOLLOW_identifier_in_synpred2_VHDL2154)
        	identifier();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_VHDL

    // $ANTLR start synpred3_VHDL
    @throws(classOf[RecognitionException])
    def synpred3_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:618:5: ( RANGE range UNITS )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:618:6: RANGE range UNITS
        {
        	`match`(input,RANGE,FOLLOW_RANGE_in_synpred3_VHDL3156); if (state.failed) return ;
        	pushFollow(FOLLOW_range_in_synpred3_VHDL3158)
        	range();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,UNITS,FOLLOW_UNITS_in_synpred3_VHDL3160); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_VHDL

    // $ANTLR start synpred4_VHDL
    @throws(classOf[RecognitionException])
    def synpred4_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:624:5: ( PROTECTED BODY )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:624:6: PROTECTED BODY
        {
        	`match`(input,PROTECTED,FOLLOW_PROTECTED_in_synpred4_VHDL3220); if (state.failed) return ;
        	`match`(input,BODY,FOLLOW_BODY_in_synpred4_VHDL3222); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_VHDL

    // $ANTLR start synpred5_VHDL
    @throws(classOf[RecognitionException])
    def synpred5_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:645:5: ( ams_free_quantity_declaration )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:645:6: ams_free_quantity_declaration
        {
        	pushFollow(FOLLOW_ams_free_quantity_declaration_in_synpred5_VHDL3353)
        	ams_free_quantity_declaration();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_VHDL

    // $ANTLR start synpred6_VHDL
    @throws(classOf[RecognitionException])
    def synpred6_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:646:5: ( ams_branch_quantity_declaration )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:646:6: ams_branch_quantity_declaration
        {
        	pushFollow(FOLLOW_ams_branch_quantity_declaration_in_synpred6_VHDL3366)
        	ams_branch_quantity_declaration();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_VHDL

    // $ANTLR start synpred7_VHDL
    @throws(classOf[RecognitionException])
    def synpred7_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:15: ( ams_across_aspect )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:656:16: ams_across_aspect
        {
        	pushFollow(FOLLOW_ams_across_aspect_in_synpred7_VHDL3444)
        	ams_across_aspect();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_VHDL

    // $ANTLR start synpred8_VHDL
    @throws(classOf[RecognitionException])
    def synpred8_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:921:3: ( LPAREN index_subtype_definition )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:921:4: LPAREN index_subtype_definition
        {
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred8_VHDL5070); if (state.failed) return ;
        	pushFollow(FOLLOW_index_subtype_definition_in_synpred8_VHDL5072)
        	index_subtype_definition();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_VHDL

    // $ANTLR start synpred9_VHDL
    @throws(classOf[RecognitionException])
    def synpred9_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:963:3: ( LPAREN index_subtype_definition )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:963:4: LPAREN index_subtype_definition
        {
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred9_VHDL5298); if (state.failed) return ;
        	pushFollow(FOLLOW_index_subtype_definition_in_synpred9_VHDL5300)
        	index_subtype_definition();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_VHDL

    // $ANTLR start synpred10_VHDL
    @throws(classOf[RecognitionException])
    def synpred10_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1077:3: ( simple_expression direction )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1077:4: simple_expression direction
        {
        	pushFollow(FOLLOW_simple_expression_in_synpred10_VHDL5920)
        	simple_expression();

        	state._fsp-=1
        	if (state.failed) return ;
        	pushFollow(FOLLOW_direction_in_synpred10_VHDL5922)
        	direction();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_VHDL

    // $ANTLR start synpred11_VHDL
    @throws(classOf[RecognitionException])
    def synpred11_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1097:3: ( selected_name RANGE )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1097:4: selected_name RANGE
        {
        	pushFollow(FOLLOW_selected_name_in_synpred11_VHDL6000)
        	selected_name();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,RANGE,FOLLOW_RANGE_in_synpred11_VHDL6002); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_VHDL

    // $ANTLR start synpred12_VHDL
    @throws(classOf[RecognitionException])
    def synpred12_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1118:4: ( architecture_statement_with_label[null] )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1118:5: architecture_statement_with_label[null]
        {
        	pushFollow(FOLLOW_architecture_statement_with_label_in_synpred12_VHDL6099)
        	architecture_statement_with_label(null);

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_VHDL

    // $ANTLR start synpred13_VHDL
    @throws(classOf[RecognitionException])
    def synpred13_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1134:5: ( target LEQ | WITH )
        var alt284 :Int=2
        val LA284_0:Int = input.LA(1)

        if ( (LA284_0==LPAREN||LA284_0==STRING_LITERAL||(LA284_0>=BASIC_IDENTIFIER && LA284_0<=EXTENDED_IDENTIFIER)) ) {
            alt284=1
        }
        else if ( (LA284_0==WITH) ) {
            alt284=2
        }
        else {
            if (state.backtracking>0) {state.failed=true; return }
            val nvae = new NoViableAltException("", 284, 0, input)

            throw nvae
        }
        alt284 match {
            case 1 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1134:6: target LEQ
                {
                	pushFollow(FOLLOW_target_in_synpred13_VHDL6217)
                	target();

                	state._fsp-=1
                	if (state.failed) return ;
                	`match`(input,LEQ,FOLLOW_LEQ_in_synpred13_VHDL6219); if (state.failed) return ;

                }case 2 =>
                // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1134:19: WITH
                {
                	`match`(input,WITH,FOLLOW_WITH_in_synpred13_VHDL6223); if (state.failed) return ;

                }
            case _ =>
        }}
    // $ANTLR end synpred13_VHDL

    // $ANTLR start synpred14_VHDL
    @throws(classOf[RecognitionException])
    def synpred14_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1443:5: ( target LEQ )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1443:6: target LEQ
        {
        	pushFollow(FOLLOW_target_in_synpred14_VHDL8081)
        	target();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,LEQ,FOLLOW_LEQ_in_synpred14_VHDL8083); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_VHDL

    // $ANTLR start synpred15_VHDL
    @throws(classOf[RecognitionException])
    def synpred15_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1444:5: ( target VAR_ASSIGN )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1444:6: target VAR_ASSIGN
        {
        	pushFollow(FOLLOW_target_in_synpred15_VHDL8096)
        	target();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,VAR_ASSIGN,FOLLOW_VAR_ASSIGN_in_synpred15_VHDL8098); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_VHDL

    // $ANTLR start synpred16_VHDL
    @throws(classOf[RecognitionException])
    def synpred16_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:4: ( ( CONSTANT )? identifier_list COLON ( IN )? )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:5: ( CONSTANT )? identifier_list COLON ( IN )?
        {
        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:5: ( CONSTANT )?
        	var alt285 :Int=2
        	val LA285_0:Int = input.LA(1)

        	if ( (LA285_0==CONSTANT) ) {
        	    alt285=1
        	}
        	alt285 match {
        	    case 1 =>
        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:5: CONSTANT
        	        {
        	        	`match`(input,CONSTANT,FOLLOW_CONSTANT_in_synpred16_VHDL9143); if (state.failed) return ;

        	        }
        	    case _ => 
        	}

        	pushFollow(FOLLOW_identifier_list_in_synpred16_VHDL9146)
        	identifier_list();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,COLON,FOLLOW_COLON_in_synpred16_VHDL9148); if (state.failed) return ;
        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:37: ( IN )?
        	var alt286 :Int=2
        	val LA286_0:Int = input.LA(1)

        	if ( (LA286_0==IN) ) {
        	    alt286=1
        	}
        	alt286 match {
        	    case 1 =>
        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1665:37: IN
        	        {
        	        	`match`(input,IN,FOLLOW_IN_in_synpred16_VHDL9150); if (state.failed) return ;

        	        }
        	    case _ => 
        	}


        }
    }
    // $ANTLR end synpred16_VHDL

    // $ANTLR start synpred17_VHDL
    @throws(classOf[RecognitionException])
    def synpred17_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:5: ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:6: ( VARIABLE )? identifier_list COLON ( OUT | INOUT )?
        {
        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:6: ( VARIABLE )?
        	var alt287 :Int=2
        	val LA287_0:Int = input.LA(1)

        	if ( (LA287_0==VARIABLE) ) {
        	    alt287=1
        	}
        	alt287 match {
        	    case 1 =>
        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:6: VARIABLE
        	        {
        	        	`match`(input,VARIABLE,FOLLOW_VARIABLE_in_synpred17_VHDL9165); if (state.failed) return ;

        	        }
        	    case _ => 
        	}

        	pushFollow(FOLLOW_identifier_list_in_synpred17_VHDL9168)
        	identifier_list();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,COLON,FOLLOW_COLON_in_synpred17_VHDL9170); if (state.failed) return ;
        	// C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1666:38: ( OUT | INOUT )?
        	var alt288 :Int=2
        	val LA288_0:Int = input.LA(1)

        	if ( (LA288_0==INOUT||LA288_0==OUT) ) {
        	    alt288=1
        	}
        	alt288 match {
        	    case 1 =>
        	        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:
        	        {
        	        	if ( input.LA(1)==INOUT||input.LA(1)==OUT ) {
        	        	    input.consume()
        	        	    state.errorRecovery=false;state.failed=false
        	        	}
        	        	else {
        	        	    if (state.backtracking>0) {state.failed=true; return }
        	        	    val mse = new MismatchedSetException(null,input)
        	        	    throw mse

        	        	}


        	        }
        	    case _ => 
        	}


        }
    }
    // $ANTLR end synpred17_VHDL

    // $ANTLR start synpred18_VHDL
    @throws(classOf[RecognitionException])
    def synpred18_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:5: ( formal_part ARROW )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1770:6: formal_part ARROW
        {
        	pushFollow(FOLLOW_formal_part_in_synpred18_VHDL9714)
        	formal_part();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,ARROW,FOLLOW_ARROW_in_synpred18_VHDL9716); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_VHDL

    // $ANTLR start synpred19_VHDL
    @throws(classOf[RecognitionException])
    def synpred19_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1909:3: ( selected_name APOSTROPHE LPAREN )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1909:4: selected_name APOSTROPHE LPAREN
        {
        	pushFollow(FOLLOW_selected_name_in_synpred19_VHDL10459)
        	selected_name();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,APOSTROPHE,FOLLOW_APOSTROPHE_in_synpred19_VHDL10461); if (state.failed) return ;
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred19_VHDL10463); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_VHDL

    // $ANTLR start synpred20_VHDL
    @throws(classOf[RecognitionException])
    def synpred20_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1910:5: ( name )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1910:6: name
        {
        	pushFollow(FOLLOW_name_in_synpred20_VHDL10479)
        	name();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_VHDL

    // $ANTLR start synpred21_VHDL
    @throws(classOf[RecognitionException])
    def synpred21_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1911:7: ( selected_name LPAREN association_list RPAREN )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1911:8: selected_name LPAREN association_list RPAREN
        {
        	pushFollow(FOLLOW_selected_name_in_synpred21_VHDL10493)
        	selected_name();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred21_VHDL10495); if (state.failed) return ;
        	pushFollow(FOLLOW_association_list_in_synpred21_VHDL10497)
        	association_list();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,RPAREN,FOLLOW_RPAREN_in_synpred21_VHDL10499); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_VHDL

    // $ANTLR start synpred22_VHDL
    @throws(classOf[RecognitionException])
    def synpred22_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1913:5: ( LPAREN expression RPAREN )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1913:6: LPAREN expression RPAREN
        {
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred22_VHDL10520); if (state.failed) return ;
        	pushFollow(FOLLOW_expression_in_synpred22_VHDL10522)
        	expression();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,RPAREN,FOLLOW_RPAREN_in_synpred22_VHDL10524); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_VHDL

    // $ANTLR start synpred23_VHDL
    @throws(classOf[RecognitionException])
    def synpred23_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1979:8: ( name_indexed_part )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:1979:9: name_indexed_part
        {
        	pushFollow(FOLLOW_name_indexed_part_in_synpred23_VHDL10876)
        	name_indexed_part();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_VHDL

    // $ANTLR start synpred24_VHDL
    @throws(classOf[RecognitionException])
    def synpred24_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2006:4: ( LPAREN expression RPAREN )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2006:5: LPAREN expression RPAREN
        {
        	`match`(input,LPAREN,FOLLOW_LPAREN_in_synpred24_VHDL11050); if (state.failed) return ;
        	pushFollow(FOLLOW_expression_in_synpred24_VHDL11052)
        	expression();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,RPAREN,FOLLOW_RPAREN_in_synpred24_VHDL11054); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_VHDL

    // $ANTLR start synpred25_VHDL
    @throws(classOf[RecognitionException])
    def synpred25_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:8: ( choices ARROW )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2069:9: choices ARROW
        {
        	pushFollow(FOLLOW_choices_in_synpred25_VHDL11268)
        	choices();

        	state._fsp-=1
        	if (state.failed) return ;
        	`match`(input,ARROW,FOLLOW_ARROW_in_synpred25_VHDL11270); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_VHDL

    // $ANTLR start synpred26_VHDL
    @throws(classOf[RecognitionException])
    def synpred26_VHDL_fragment():Unit = {   
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2087:3: ( simple_expression direction )
        // C:\\Users\\christian\\Desktop\\OpenVC\\src\\main\\scala\\at\\jku\\ssw\\openvc\\VHDL.g:2087:4: simple_expression direction
        {
        	pushFollow(FOLLOW_simple_expression_in_synpred26_VHDL11359)
        	simple_expression();

        	state._fsp-=1
        	if (state.failed) return ;
        	pushFollow(FOLLOW_direction_in_synpred26_VHDL11361)
        	direction();

        	state._fsp-=1
        	if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_VHDL


    // Delegated rules
    def synpred25_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred25_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred10_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred10_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred4_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred4_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred24_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred24_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred14_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred14_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred19_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred19_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred6_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred6_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred5_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred5_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred3_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred3_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred8_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred8_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred21_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred21_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred23_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred23_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred9_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred9_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred11_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred11_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred16_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred16_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred26_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred26_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred20_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred20_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred1_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred1_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred12_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred12_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred2_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred2_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred15_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred15_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred18_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred18_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred22_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred22_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred17_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred17_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred13_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred13_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }
    def synpred7_VHDL():Boolean = {
        state.backtracking+=1
        val start:Int = input.mark()
        try {
            synpred7_VHDL_fragment() // can never throw exception
        } catch {
            case re: RecognitionException => System.err.println("impossible: "+re)
        }
        val success = !state.failed
        input.rewind(start)
        state.backtracking-=1
        state.failed=false
        success
    }

    final private class DFA17(rec:BaseRecognizer) extends DFA {
        private val DFA17_eotS:String = "\26\uffff"
        private val DFA17_eofS:String = "\26\uffff"
        private val DFA17_minS:String = "\1\7\10\uffff\1\u0094\2\uffff\1"+
        "\u0094\1\uffff\2\70\2\52\4\uffff"
        private val DFA17_maxS:String = "\1\156\10\uffff\1\u0095\2\uffff"+
        "\1\u0095\1\uffff\4\u0081\4\uffff"
        private val DFA17_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1\5"+
        "\1\6\1\7\1\10\1\uffff\1\13\1\14\1\uffff\1\17\4\uffff\1\12\1\11\1"+
        "\16\1\15"
        private val DFA17_specialS:String = "\1\0\25\uffff}>"
        private val DFA17_transitionS:Array[String] = Array("\1\10\5\uffff"+
    "\1\11\10\uffff\1\4\1\12\6\uffff\1\7\1\uffff\1\1\2\uffff\1\14\2\uffff"+
    "\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff\1\6\1\5\4\uffff\1\3\3\uffff\1"+
    "\2\3\uffff\1\13\1\6\6\uffff\3\15\4\uffff\2\15",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\16\1\17",
    "",
    "",
    "\1\20\1\21",
    "",
    "\1\22\110\uffff\1\23",
    "\1\22\110\uffff\1\23",
    "\1\25\126\uffff\1\24",
    "\1\25\126\uffff\1\24",
    "",
    "",
    "",
    "")

        private val DFA17_eot:Array[Short] = DFA.unpackEncodedString(DFA17_eotS)
        private val DFA17_eof:Array[Short] = DFA.unpackEncodedString(DFA17_eofS)
        private val DFA17_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS)
        private val DFA17_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS)
        private val DFA17_accept:Array[Short] = DFA.unpackEncodedString(DFA17_acceptS)
        private val DFA17_special:Array[Short] = DFA.unpackEncodedString(DFA17_specialS)
        private val DFA17_transition:Array[Array[Short]] = new Array[Array[Short]](DFA17_transitionS.length)
        for (i <- DFA17_transition.indices) {
            DFA17_transition(i) = DFA.unpackEncodedString(DFA17_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 17
        this.eot = DFA17_eot
        this.eof = DFA17_eof
        this.min = DFA17_min
        this.max = DFA17_max
        this.accept = DFA17_accept
        this.special = DFA17_special
        this.transition = DFA17_transition

        def description :String = "359:1: entity_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA17_0:Int = input.LA(1)

                         
                        val index17_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA17_0==FUNCTION||LA17_0==IMPURE||LA17_0==PROCEDURE||LA17_0==PURE) ) {s = 1}

                        else if ( (LA17_0==TYPE) ) {s = 2}

                        else if ( (LA17_0==SUBTYPE) ) {s = 3}

                        else if ( (LA17_0==CONSTANT) ) {s = 4}

                        else if ( (LA17_0==SIGNAL) ) {s = 5}

                        else if ( (LA17_0==SHARED||LA17_0==VARIABLE) ) {s = 6}

                        else if ( (LA17_0==FILE) ) {s = 7}

                        else if ( (LA17_0==ALIAS) ) {s = 8}

                        else if ( (LA17_0==ATTRIBUTE) ) {s = 9}

                        else if ( (LA17_0==DISCONNECT) ) {s = 10}

                        else if ( (LA17_0==USE) ) {s = 11}

                        else if ( (LA17_0==GROUP) ) {s = 12}

                        else if ( ((LA17_0>=NATURE && LA17_0<=QUANTITY)||(LA17_0>=SUBNATURE && LA17_0<=LIMIT)) && ((ams))) {s = 13}

                         
                        input_.seek(index17_0)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 17, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA25(rec:BaseRecognizer) extends DFA {
        private val DFA25_eotS:String = "\22\uffff"
        private val DFA25_eofS:String = "\22\uffff"
        private val DFA25_minS:String = "\1\4\17\0\2\uffff"
        private val DFA25_maxS:String = "\1\u0095\17\0\2\uffff"
        private val DFA25_acceptS:String = "\20\uffff\1\1\1\2"
        private val DFA25_specialS:String = "\1\uffff\1\0\1\1\1\2\1\3\1"+
        "\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\uffff}>"
        private val DFA25_transitionS:Array[String] = Array("\1\16\56\uffff"+
    "\1\15\2\uffff\1\17\1\13\105\uffff\1\14\6\uffff\1\4\1\5\5\uffff\1\3\1"+
    "\uffff\1\11\2\uffff\1\6\1\7\1\10\1\12\1\1\1\2",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "")

        private val DFA25_eot:Array[Short] = DFA.unpackEncodedString(DFA25_eotS)
        private val DFA25_eof:Array[Short] = DFA.unpackEncodedString(DFA25_eofS)
        private val DFA25_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS)
        private val DFA25_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS)
        private val DFA25_accept:Array[Short] = DFA.unpackEncodedString(DFA25_acceptS)
        private val DFA25_special:Array[Short] = DFA.unpackEncodedString(DFA25_specialS)
        private val DFA25_transition:Array[Array[Short]] = new Array[Array[Short]](DFA25_transitionS.length)
        for (i <- DFA25_transition.indices) {
            DFA25_transition(i) = DFA.unpackEncodedString(DFA25_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 25
        this.eot = DFA25_eot
        this.eof = DFA25_eof
        this.min = DFA25_min
        this.max = DFA25_max
        this.accept = DFA25_accept
        this.special = DFA25_special
        this.transition = DFA25_transition

        def description :String = "420:1: block_configuration_index returns [Either[DiscreteRange,Expression] node] : ( ( discrete_range )=> discrete_range | expression );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA25_1:Int = input.LA(1)

                         
                        val index25_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_1)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA25_2:Int = input.LA(1)

                         
                        val index25_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_2)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA25_3:Int = input.LA(1)

                         
                        val index25_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_3)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA25_4:Int = input.LA(1)

                         
                        val index25_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_4)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA25_5:Int = input.LA(1)

                         
                        val index25_5:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_5)
                        if ( s>=0 ) return s
                    case 5 => 
                        val LA25_6:Int = input.LA(1)

                         
                        val index25_6:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_6)
                        if ( s>=0 ) return s
                    case 6 => 
                        val LA25_7:Int = input.LA(1)

                         
                        val index25_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_7)
                        if ( s>=0 ) return s
                    case 7 => 
                        val LA25_8:Int = input.LA(1)

                         
                        val index25_8:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_8)
                        if ( s>=0 ) return s
                    case 8 => 
                        val LA25_9:Int = input.LA(1)

                         
                        val index25_9:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_9)
                        if ( s>=0 ) return s
                    case 9 => 
                        val LA25_10:Int = input.LA(1)

                         
                        val index25_10:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_10)
                        if ( s>=0 ) return s
                    case 10 => 
                        val LA25_11:Int = input.LA(1)

                         
                        val index25_11:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_11)
                        if ( s>=0 ) return s
                    case 11 => 
                        val LA25_12:Int = input.LA(1)

                         
                        val index25_12:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_12)
                        if ( s>=0 ) return s
                    case 12 => 
                        val LA25_13:Int = input.LA(1)

                         
                        val index25_13:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_13)
                        if ( s>=0 ) return s
                    case 13 => 
                        val LA25_14:Int = input.LA(1)

                         
                        val index25_14:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_14)
                        if ( s>=0 ) return s
                    case 14 => 
                        val LA25_15:Int = input.LA(1)

                         
                        val index25_15:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred1_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index25_15)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 25, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA36(rec:BaseRecognizer) extends DFA {
        private val DFA36_eotS:String = "\27\uffff"
        private val DFA36_eofS:String = "\27\uffff"
        private val DFA36_minS:String = "\1\7\11\uffff\1\u0094\2\uffff\1"+
        "\u0094\1\uffff\2\70\2\52\4\uffff"
        private val DFA36_maxS:String = "\1\155\11\uffff\1\u0095\2\uffff"+
        "\1\u0095\1\uffff\4\u0081\4\uffff"
        private val DFA36_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1\5"+
        "\1\6\1\7\1\10\1\11\1\uffff\1\14\1\15\1\uffff\1\20\4\uffff\1\12\1"+
        "\13\1\16\1\17"
        private val DFA36_specialS:String = "\1\0\26\uffff}>"
        private val DFA36_transitionS:Array[String] = Array("\1\10\5\uffff"+
    "\1\12\6\uffff\1\11\1\uffff\1\4\1\13\6\uffff\1\7\1\uffff\1\1\2\uffff"+
    "\1\15\2\uffff\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff\1\6\1\5\4\uffff"+
    "\1\3\3\uffff\1\2\3\uffff\1\14\1\6\6\uffff\2\16\5\uffff\1\16",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\17\1\20",
    "",
    "",
    "\1\21\1\22",
    "",
    "\1\24\110\uffff\1\23",
    "\1\24\110\uffff\1\23",
    "\1\25\126\uffff\1\26",
    "\1\25\126\uffff\1\26",
    "",
    "",
    "",
    "")

        private val DFA36_eot:Array[Short] = DFA.unpackEncodedString(DFA36_eotS)
        private val DFA36_eof:Array[Short] = DFA.unpackEncodedString(DFA36_eofS)
        private val DFA36_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS)
        private val DFA36_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS)
        private val DFA36_accept:Array[Short] = DFA.unpackEncodedString(DFA36_acceptS)
        private val DFA36_special:Array[Short] = DFA.unpackEncodedString(DFA36_specialS)
        private val DFA36_transition:Array[Array[Short]] = new Array[Array[Short]](DFA36_transitionS.length)
        for (i <- DFA36_transition.indices) {
            DFA36_transition(i) = DFA.unpackEncodedString(DFA36_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 36
        this.eot = DFA36_eot
        this.eof = DFA36_eof
        this.min = DFA36_min
        this.max = DFA36_max
        this.accept = DFA36_accept
        this.special = DFA36_special
        this.transition = DFA36_transition

        def description :String = "478:1: package_declarative_item returns [DeclarativeItem node] : ( subprogram_declaration | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_nature_declaration | ams_subnature_declaration | ams_terminal_declaration ) );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA36_0:Int = input.LA(1)

                         
                        val index36_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA36_0==FUNCTION||LA36_0==IMPURE||LA36_0==PROCEDURE||LA36_0==PURE) ) {s = 1}

                        else if ( (LA36_0==TYPE) ) {s = 2}

                        else if ( (LA36_0==SUBTYPE) ) {s = 3}

                        else if ( (LA36_0==CONSTANT) ) {s = 4}

                        else if ( (LA36_0==SIGNAL) ) {s = 5}

                        else if ( (LA36_0==SHARED||LA36_0==VARIABLE) ) {s = 6}

                        else if ( (LA36_0==FILE) ) {s = 7}

                        else if ( (LA36_0==ALIAS) ) {s = 8}

                        else if ( (LA36_0==COMPONENT) ) {s = 9}

                        else if ( (LA36_0==ATTRIBUTE) ) {s = 10}

                        else if ( (LA36_0==DISCONNECT) ) {s = 11}

                        else if ( (LA36_0==USE) ) {s = 12}

                        else if ( (LA36_0==GROUP) ) {s = 13}

                        else if ( ((LA36_0>=NATURE && LA36_0<=TERMINAL)||LA36_0==SUBNATURE) && ((ams))) {s = 14}

                         
                        input_.seek(index36_0)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 36, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA40(rec:BaseRecognizer) extends DFA {
        private val DFA40_eotS:String = "\17\uffff"
        private val DFA40_eofS:String = "\17\uffff"
        private val DFA40_minS:String = "\1\7\11\uffff\1\u0094\2\52\2\uffff"
        private val DFA40_maxS:String = "\1\137\11\uffff\1\u0095\2\u0081"+
        "\2\uffff"
        private val DFA40_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1\5"+
        "\1\6\1\7\1\10\1\11\3\uffff\1\13\1\12"
        private val DFA40_specialS:String = "\17\uffff}>"
        private val DFA40_transitionS:Array[String] = Array("\1\7\5\uffff"+
    "\1\11\10\uffff\1\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1"+
    "\32\uffff\1\1\2\uffff\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff"+
    "\1\10\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\13\1\14",
    "\1\16\126\uffff\1\15",
    "\1\16\126\uffff\1\15",
    "",
    "")

        private val DFA40_eot:Array[Short] = DFA.unpackEncodedString(DFA40_eotS)
        private val DFA40_eof:Array[Short] = DFA.unpackEncodedString(DFA40_eofS)
        private val DFA40_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS)
        private val DFA40_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS)
        private val DFA40_accept:Array[Short] = DFA.unpackEncodedString(DFA40_acceptS)
        private val DFA40_special:Array[Short] = DFA.unpackEncodedString(DFA40_specialS)
        private val DFA40_transition:Array[Array[Short]] = new Array[Array[Short]](DFA40_transitionS.length)
        for (i <- DFA40_transition.indices) {
            DFA40_transition(i) = DFA.unpackEncodedString(DFA40_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 40
        this.eot = DFA40_eot
        this.eof = DFA40_eof
        this.min = DFA40_min
        this.max = DFA40_max
        this.accept = DFA40_accept
        this.special = DFA40_special
        this.transition = DFA40_transition

        def description :String = "516:1: package_body_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | use_clause | attribute_specification | group_template_declaration | group_declaration );"
        
    }
    final private class DFA50(rec:BaseRecognizer) extends DFA {
        private val DFA50_eotS:String = "\23\uffff"
        private val DFA50_eofS:String = "\23\uffff"
        private val DFA50_minS:String = "\1\7\7\uffff\1\u0094\1\uffff\1"+
        "\u0094\2\70\2\52\4\uffff"
        private val DFA50_maxS:String = "\1\137\7\uffff\1\u0095\1\uffff"+
        "\1\u0095\4\u0081\4\uffff"
        private val DFA50_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1\5"+
        "\1\6\1\7\1\uffff\1\12\5\uffff\1\11\1\10\1\14\1\13"
        private val DFA50_specialS:String = "\23\uffff}>"
        private val DFA50_transitionS:Array[String] = Array("\1\7\5\uffff"+
    "\1\10\10\uffff\1\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1"+
    "\32\uffff\1\1\2\uffff\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff"+
    "\1\11\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\13\1\14",
    "",
    "\1\15\1\16",
    "\1\17\110\uffff\1\20",
    "\1\17\110\uffff\1\20",
    "\1\22\126\uffff\1\21",
    "\1\22\126\uffff\1\21",
    "",
    "",
    "",
    "")

        private val DFA50_eot:Array[Short] = DFA.unpackEncodedString(DFA50_eotS)
        private val DFA50_eof:Array[Short] = DFA.unpackEncodedString(DFA50_eofS)
        private val DFA50_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS)
        private val DFA50_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS)
        private val DFA50_accept:Array[Short] = DFA.unpackEncodedString(DFA50_acceptS)
        private val DFA50_special:Array[Short] = DFA.unpackEncodedString(DFA50_specialS)
        private val DFA50_transition:Array[Array[Short]] = new Array[Array[Short]](DFA50_transitionS.length)
        for (i <- DFA50_transition.indices) {
            DFA50_transition(i) = DFA.unpackEncodedString(DFA50_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 50
        this.eot = DFA50_eot
        this.eof = DFA50_eof
        this.min = DFA50_min
        this.max = DFA50_max
        this.accept = DFA50_accept
        this.special = DFA50_special
        this.transition = DFA50_transition

        def description :String = "586:1: subprogram_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
        
    }
    final private class DFA52(rec:BaseRecognizer) extends DFA {
        private val DFA52_eotS:String = "\14\uffff"
        private val DFA52_eofS:String = "\14\uffff"
        private val DFA52_minS:String = "\1\5\1\uffff\1\0\4\uffff\1\0\4"+
        "\uffff"
        private val DFA52_maxS:String = "\1\175\1\uffff\1\0\4\uffff\1\0"+
        "\4\uffff"
        private val DFA52_acceptS:String = "\1\uffff\1\1\1\uffff\1\4\1\5"+
        "\1\6\1\7\1\uffff\1\2\1\3\1\10\1\11"
        private val DFA52_specialS:String = "\2\uffff\1\0\4\uffff\1\1\4"+
        "\uffff}>"
        private val DFA52_transitionS:Array[String] = Array("\1\5\5\uffff"+
    "\1\3\22\uffff\1\6\44\uffff\1\7\1\uffff\1\2\1\4\66\uffff\1\1",
    "",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "\1\uffff",
    "",
    "",
    "",
    "")

        private val DFA52_eot:Array[Short] = DFA.unpackEncodedString(DFA52_eotS)
        private val DFA52_eof:Array[Short] = DFA.unpackEncodedString(DFA52_eofS)
        private val DFA52_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS)
        private val DFA52_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS)
        private val DFA52_accept:Array[Short] = DFA.unpackEncodedString(DFA52_acceptS)
        private val DFA52_special:Array[Short] = DFA.unpackEncodedString(DFA52_specialS)
        private val DFA52_transition:Array[Array[Short]] = new Array[Array[Short]](DFA52_transitionS.length)
        for (i <- DFA52_transition.indices) {
            DFA52_transition(i) = DFA.unpackEncodedString(DFA52_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 52
        this.eot = DFA52_eot
        this.eof = DFA52_eof
        this.min = DFA52_min
        this.max = DFA52_max
        this.accept = DFA52_accept
        this.special = DFA52_special
        this.transition = DFA52_transition

        def description :String = "616:1: type_definition[Identifier id,Position pos] returns [AbstractTypeDeclaration typeDef] : ( enumeration_type_definition[$id,$pos] | ( RANGE range UNITS )=> physical_type_definition[$id,$pos] | integer_or_floating_point_type_definition[$id,$pos] | array_type_definition[$id,$pos] | record_type_definition[$id,$pos] | access_type_definition[$id,$pos] | file_type_definition[$id,$pos] | ( PROTECTED BODY )=> protected_type_body[$id,$pos] | protected_type_declaration[$id,$pos] );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA52_2:Int = input.LA(1)

                         
                        val index52_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred3_VHDL()) ) {s = 8}

                        else if ( (true) ) {s = 9}

                         
                        input_.seek(index52_2)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA52_7:Int = input.LA(1)

                         
                        val index52_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred4_VHDL()) ) {s = 10}

                        else if ( (true) ) {s = 11}

                         
                        input_.seek(index52_7)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 52, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA83(rec:BaseRecognizer) extends DFA {
        private val DFA83_eotS:String = "\23\uffff"
        private val DFA83_eofS:String = "\23\uffff"
        private val DFA83_minS:String = "\1\12\22\uffff"
        private val DFA83_maxS:String = "\1\155\22\uffff"
        private val DFA83_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1\5"+
        "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
        private val DFA83_specialS:String = "\1\0\22\uffff}>"
        private val DFA83_transitionS:Array[String] = Array("\1\2\11\uffff"+
    "\1\15\1\3\1\11\5\uffff\1\1\1\uffff\1\14\1\uffff\1\6\2\uffff\1\21\7\uffff"+
    "\1\16\2\uffff\1\17\17\uffff\1\4\2\uffff\1\5\17\uffff\1\12\4\uffff\1"+
    "\10\3\uffff\1\7\1\uffff\1\20\2\uffff\1\13\6\uffff\3\22\4\uffff\1\22",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA83_eot:Array[Short] = DFA.unpackEncodedString(DFA83_eotS)
        private val DFA83_eof:Array[Short] = DFA.unpackEncodedString(DFA83_eofS)
        private val DFA83_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS)
        private val DFA83_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS)
        private val DFA83_accept:Array[Short] = DFA.unpackEncodedString(DFA83_acceptS)
        private val DFA83_special:Array[Short] = DFA.unpackEncodedString(DFA83_specialS)
        private val DFA83_transition:Array[Array[Short]] = new Array[Array[Short]](DFA83_transitionS.length)
        for (i <- DFA83_transition.indices) {
            DFA83_transition(i) = DFA.unpackEncodedString(DFA83_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 83
        this.eot = DFA83_eot
        this.eof = DFA83_eof
        this.min = DFA83_min
        this.max = DFA83_max
        this.accept = DFA83_accept
        this.special = DFA83_special
        this.transition = DFA83_transition

        def description :String = "766:1: entity_class returns [EntityClass.Value entityClass] : ( ENTITY | ARCHITECTURE | CONFIGURATION | PACKAGE | PROCEDURE | FUNCTION | TYPE | SUBTYPE | CONSTANT | SIGNAL | VARIABLE | FILE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | {...}? => ( NATURE | SUBNATURE | QUANTITY | TERMINAL ) );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA83_0:Int = input.LA(1)

                         
                        val index83_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA83_0==ENTITY) ) {s = 1}

                        else if ( (LA83_0==ARCHITECTURE) ) {s = 2}

                        else if ( (LA83_0==CONFIGURATION) ) {s = 3}

                        else if ( (LA83_0==PACKAGE) ) {s = 4}

                        else if ( (LA83_0==PROCEDURE) ) {s = 5}

                        else if ( (LA83_0==FUNCTION) ) {s = 6}

                        else if ( (LA83_0==TYPE) ) {s = 7}

                        else if ( (LA83_0==SUBTYPE) ) {s = 8}

                        else if ( (LA83_0==CONSTANT) ) {s = 9}

                        else if ( (LA83_0==SIGNAL) ) {s = 10}

                        else if ( (LA83_0==VARIABLE) ) {s = 11}

                        else if ( (LA83_0==FILE) ) {s = 12}

                        else if ( (LA83_0==COMPONENT) ) {s = 13}

                        else if ( (LA83_0==LABEL) ) {s = 14}

                        else if ( (LA83_0==LITERAL) ) {s = 15}

                        else if ( (LA83_0==UNITS) ) {s = 16}

                        else if ( (LA83_0==GROUP) ) {s = 17}

                        else if ( ((LA83_0>=NATURE && LA83_0<=QUANTITY)||LA83_0==SUBNATURE) && ((ams))) {s = 18}

                         
                        input_.seek(index83_0)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 83, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA101(rec:BaseRecognizer) extends DFA {
        private val DFA101_eotS:String = "\16\uffff"
        private val DFA101_eofS:String = "\16\uffff"
        private val DFA101_minS:String = "\1\175\1\4\3\30\1\uffff\1\10\1"+
        "\4\5\30\1\uffff"
        private val DFA101_maxS:String = "\1\175\4\u0095\1\uffff\7\u0095"+
        "\1\uffff"
        private val DFA101_acceptS:String = "\5\uffff\1\2\7\uffff\1\1"
        private val DFA101_specialS:String = "\7\uffff\1\0\6\uffff}>"
        private val DFA101_transitionS:Array[String] = Array("\1\1",
    "\1\5\56\uffff\1\5\2\uffff\2\5\105\uffff\1\5\6\uffff\2\5\5\uffff\1"+
    "\4\1\uffff\1\5\2\uffff\4\5\1\2\1\3",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "",
    "\1\14\u0082\uffff\1\13\1\uffff\1\12\6\uffff\1\10\1\11",
    "\1\5\56\uffff\1\5\2\uffff\2\5\100\uffff\1\15\4\uffff\1\5\6\uffff\2"+
    "\5\5\uffff\1\5\1\uffff\1\5\2\uffff\6\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "")

        private val DFA101_eot:Array[Short] = DFA.unpackEncodedString(DFA101_eotS)
        private val DFA101_eof:Array[Short] = DFA.unpackEncodedString(DFA101_eofS)
        private val DFA101_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS)
        private val DFA101_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS)
        private val DFA101_accept:Array[Short] = DFA.unpackEncodedString(DFA101_acceptS)
        private val DFA101_special:Array[Short] = DFA.unpackEncodedString(DFA101_specialS)
        private val DFA101_transition:Array[Array[Short]] = new Array[Array[Short]](DFA101_transitionS.length)
        for (i <- DFA101_transition.indices) {
            DFA101_transition(i) = DFA.unpackEncodedString(DFA101_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 101
        this.eot = DFA101_eot
        this.eof = DFA101_eof
        this.min = DFA101_min
        this.max = DFA101_max
        this.accept = DFA101_accept
        this.special = DFA101_special
        this.transition = DFA101_transition

        def description :String = "920:10: ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= subtype_indication | index_constraint OF subType= subtype_indication )"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA101_7:Int = input.LA(1)

                         
                        val index101_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA101_7==BOX) && (synpred8_VHDL())) {s = 13}

                        else if ( (LA101_7==ABS||LA101_7==NEW||(LA101_7>=NOT && LA101_7<=NULL)||LA101_7==LPAREN||(LA101_7>=PLUS && LA101_7<=MINUS)||LA101_7==STRING_LITERAL||LA101_7==CHARACTER_LITERAL||(LA101_7>=REAL_LITERAL && LA101_7<=EXTENDED_IDENTIFIER)) ) {s = 5}

                         
                        input_.seek(index101_7)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 101, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA105(rec:BaseRecognizer) extends DFA {
        private val DFA105_eotS:String = "\16\uffff"
        private val DFA105_eofS:String = "\16\uffff"
        private val DFA105_minS:String = "\1\175\1\4\3\30\1\uffff\1\10\1"+
        "\4\5\30\1\uffff"
        private val DFA105_maxS:String = "\1\175\4\u0095\1\uffff\7\u0095"+
        "\1\uffff"
        private val DFA105_acceptS:String = "\5\uffff\1\2\7\uffff\1\1"
        private val DFA105_specialS:String = "\7\uffff\1\0\6\uffff}>"
        private val DFA105_transitionS:Array[String] = Array("\1\1",
    "\1\5\56\uffff\1\5\2\uffff\2\5\105\uffff\1\5\6\uffff\2\5\5\uffff\1"+
    "\4\1\uffff\1\5\2\uffff\4\5\1\2\1\3",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "",
    "\1\14\u0082\uffff\1\13\1\uffff\1\12\6\uffff\1\10\1\11",
    "\1\5\56\uffff\1\5\2\uffff\2\5\100\uffff\1\15\4\uffff\1\5\6\uffff\2"+
    "\5\5\uffff\1\5\1\uffff\1\5\2\uffff\6\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "\1\5\30\uffff\1\5\23\uffff\1\7\3\uffff\1\5\16\uffff\1\5\30\uffff\1"+
    "\5\11\uffff\5\5\2\uffff\4\5\4\uffff\1\6\1\5\3\uffff\1\5\4\uffff\2\5",
    "")

        private val DFA105_eot:Array[Short] = DFA.unpackEncodedString(DFA105_eotS)
        private val DFA105_eof:Array[Short] = DFA.unpackEncodedString(DFA105_eofS)
        private val DFA105_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS)
        private val DFA105_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS)
        private val DFA105_accept:Array[Short] = DFA.unpackEncodedString(DFA105_acceptS)
        private val DFA105_special:Array[Short] = DFA.unpackEncodedString(DFA105_specialS)
        private val DFA105_transition:Array[Array[Short]] = new Array[Array[Short]](DFA105_transitionS.length)
        for (i <- DFA105_transition.indices) {
            DFA105_transition(i) = DFA.unpackEncodedString(DFA105_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 105
        this.eot = DFA105_eot
        this.eof = DFA105_eof
        this.min = DFA105_min
        this.max = DFA105_max
        this.accept = DFA105_accept
        this.special = DFA105_special
        this.transition = DFA105_transition

        def description :String = "962:10: ( ( LPAREN index_subtype_definition )=> LPAREN type1= index_subtype_definition ( COMMA type2= index_subtype_definition )* RPAREN OF subType= ams_subnature_indication | index_constraint OF subNature= ams_subnature_indication )"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA105_7:Int = input.LA(1)

                         
                        val index105_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA105_7==BOX) && (synpred9_VHDL())) {s = 13}

                        else if ( (LA105_7==ABS||LA105_7==NEW||(LA105_7>=NOT && LA105_7<=NULL)||LA105_7==LPAREN||(LA105_7>=PLUS && LA105_7<=MINUS)||LA105_7==STRING_LITERAL||LA105_7==CHARACTER_LITERAL||(LA105_7>=REAL_LITERAL && LA105_7<=EXTENDED_IDENTIFIER)) ) {s = 5}

                         
                        input_.seek(index105_7)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 105, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA115(rec:BaseRecognizer) extends DFA {
        private val DFA115_eotS:String = "\23\uffff"
        private val DFA115_eofS:String = "\23\uffff"
        private val DFA115_minS:String = "\1\7\7\uffff\1\u0094\1\uffff\1"+
        "\u0094\2\70\2\52\4\uffff"
        private val DFA115_maxS:String = "\1\137\7\uffff\1\u0095\1\uffff"+
        "\1\u0095\4\u0081\4\uffff"
        private val DFA115_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1"+
        "\5\1\6\1\7\1\uffff\1\12\5\uffff\1\10\1\11\1\13\1\14"
        private val DFA115_specialS:String = "\23\uffff}>"
        private val DFA115_transitionS:Array[String] = Array("\1\7\5\uffff"+
    "\1\10\10\uffff\1\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1"+
    "\32\uffff\1\1\2\uffff\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff"+
    "\1\11\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\13\1\14",
    "",
    "\1\15\1\16",
    "\1\20\110\uffff\1\17",
    "\1\20\110\uffff\1\17",
    "\1\21\126\uffff\1\22",
    "\1\21\126\uffff\1\22",
    "",
    "",
    "",
    "")

        private val DFA115_eot:Array[Short] = DFA.unpackEncodedString(DFA115_eotS)
        private val DFA115_eof:Array[Short] = DFA.unpackEncodedString(DFA115_eofS)
        private val DFA115_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS)
        private val DFA115_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS)
        private val DFA115_accept:Array[Short] = DFA.unpackEncodedString(DFA115_acceptS)
        private val DFA115_special:Array[Short] = DFA.unpackEncodedString(DFA115_specialS)
        private val DFA115_transition:Array[Array[Short]] = new Array[Array[Short]](DFA115_transitionS.length)
        for (i <- DFA115_transition.indices) {
            DFA115_transition(i) = DFA.unpackEncodedString(DFA115_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 115
        this.eot = DFA115_eot
        this.eof = DFA115_eof
        this.min = DFA115_min
        this.max = DFA115_max
        this.accept = DFA115_accept
        this.special = DFA115_special
        this.transition = DFA115_transition

        def description :String = "1026:1: protected_type_body_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
        
    }
    final private class DFA120(rec:BaseRecognizer) extends DFA {
        private val DFA120_eotS:String = "\21\uffff"
        private val DFA120_eofS:String = "\21\uffff"
        private val DFA120_minS:String = "\1\4\2\uffff\3\0\13\uffff"
        private val DFA120_maxS:String = "\1\u0095\2\uffff\3\0\13\uffff"
        private val DFA120_acceptS:String = "\1\uffff\2\1\3\uffff\12\1\1"+
        "\2"
        private val DFA120_specialS:String = "\1\0\2\uffff\1\1\1\2\1\3\13"+
        "\uffff}>"
        private val DFA120_transitionS:Array[String] = Array("\1\16\56\uffff"+
    "\1\15\2\uffff\1\17\1\13\105\uffff\1\14\6\uffff\1\1\1\2\5\uffff\1\5\1"+
    "\uffff\1\11\2\uffff\1\6\1\7\1\10\1\12\1\3\1\4",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA120_eot:Array[Short] = DFA.unpackEncodedString(DFA120_eotS)
        private val DFA120_eof:Array[Short] = DFA.unpackEncodedString(DFA120_eofS)
        private val DFA120_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS)
        private val DFA120_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS)
        private val DFA120_accept:Array[Short] = DFA.unpackEncodedString(DFA120_acceptS)
        private val DFA120_special:Array[Short] = DFA.unpackEncodedString(DFA120_specialS)
        private val DFA120_transition:Array[Array[Short]] = new Array[Array[Short]](DFA120_transitionS.length)
        for (i <- DFA120_transition.indices) {
            DFA120_transition(i) = DFA.unpackEncodedString(DFA120_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 120
        this.eot = DFA120_eot
        this.eof = DFA120_eof
        this.min = DFA120_min
        this.max = DFA120_max
        this.accept = DFA120_accept
        this.special = DFA120_special
        this.transition = DFA120_transition

        def description :String = "1076:4: ( ( simple_expression direction )=>from= simple_expression direction to= simple_expression | name )"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA120_0:Int = input.LA(1)

                         
                        val index120_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA120_0==PLUS) && (synpred10_VHDL())) {s = 1}

                        else if ( (LA120_0==MINUS) && (synpred10_VHDL())) {s = 2}

                        else if ( (LA120_0==BASIC_IDENTIFIER) ) {s = 3}

                        else if ( (LA120_0==EXTENDED_IDENTIFIER) ) {s = 4}

                        else if ( (LA120_0==STRING_LITERAL) ) {s = 5}

                        else if ( (LA120_0==REAL_LITERAL) && (synpred10_VHDL())) {s = 6}

                        else if ( (LA120_0==INTEGER_LITERAL) && (synpred10_VHDL())) {s = 7}

                        else if ( (LA120_0==BASED_LITERAL) && (synpred10_VHDL())) {s = 8}

                        else if ( (LA120_0==CHARACTER_LITERAL) && (synpred10_VHDL())) {s = 9}

                        else if ( (LA120_0==BIT_STRING_LITERAL) && (synpred10_VHDL())) {s = 10}

                        else if ( (LA120_0==NULL) && (synpred10_VHDL())) {s = 11}

                        else if ( (LA120_0==LPAREN) && (synpred10_VHDL())) {s = 12}

                        else if ( (LA120_0==NEW) && (synpred10_VHDL())) {s = 13}

                        else if ( (LA120_0==ABS) && (synpred10_VHDL())) {s = 14}

                        else if ( (LA120_0==NOT) && (synpred10_VHDL())) {s = 15}

                         
                        input_.seek(index120_0)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA120_3:Int = input.LA(1)

                         
                        val index120_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred10_VHDL()) ) {s = 15}

                        else if ( (true) ) {s = 16}

                         
                        input_.seek(index120_3)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA120_4:Int = input.LA(1)

                         
                        val index120_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred10_VHDL()) ) {s = 15}

                        else if ( (true) ) {s = 16}

                         
                        input_.seek(index120_4)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA120_5:Int = input.LA(1)

                         
                        val index120_5:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred10_VHDL()) ) {s = 15}

                        else if ( (true) ) {s = 16}

                         
                        input_.seek(index120_5)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 120, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA124(rec:BaseRecognizer) extends DFA {
        private val DFA124_eotS:String = "\26\uffff"
        private val DFA124_eofS:String = "\26\uffff"
        private val DFA124_minS:String = "\1\14\1\uffff\3\42\7\uffff\1\10"+
        "\2\uffff\1\0\1\uffff\5\42"
        private val DFA124_maxS:String = "\1\u0095\1\uffff\3\u008f\7\uffff"+
        "\1\u0095\2\uffff\1\0\1\uffff\5\u008f"
        private val DFA124_acceptS:String = "\1\uffff\1\1\3\uffff\5\1\2"+
        "\2\1\uffff\2\1\1\uffff\1\2\5\uffff"
        private val DFA124_specialS:String = "\1\2\1\uffff\1\3\1\5\1\10"+
        "\12\uffff\1\7\1\uffff\1\6\1\0\1\11\1\4\1\1}>"
        private val DFA124_transitionS:Array[String] = Array("\1\12\2\uffff"+
    "\1\7\4\uffff\1\1\1\6\6\uffff\1\5\2\uffff\1\10\5\uffff\1\11\32\uffff"+
    "\1\12\1\uffff\1\12\40\uffff\1\12\31\uffff\1\12\15\uffff\1\4\2\uffff"+
    "\1\13\5\uffff\1\2\1\3",
    "",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\25\u0082\uffff\1\24\1\uffff\1\23\6\uffff\1\21\1\22",
    "",
    "",
    "\1\uffff",
    "",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20",
    "\1\15\34\uffff\1\16\63\uffff\1\20\6\uffff\1\17\2\uffff\1\20\1\uffff"+
    "\1\20\12\uffff\1\14\4\uffff\1\20")

        private val DFA124_eot:Array[Short] = DFA.unpackEncodedString(DFA124_eotS)
        private val DFA124_eof:Array[Short] = DFA.unpackEncodedString(DFA124_eofS)
        private val DFA124_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS)
        private val DFA124_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS)
        private val DFA124_accept:Array[Short] = DFA.unpackEncodedString(DFA124_acceptS)
        private val DFA124_special:Array[Short] = DFA.unpackEncodedString(DFA124_specialS)
        private val DFA124_transition:Array[Array[Short]] = new Array[Array[Short]](DFA124_transitionS.length)
        for (i <- DFA124_transition.indices) {
            DFA124_transition(i) = DFA.unpackEncodedString(DFA124_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 124
        this.eot = DFA124_eot
        this.eof = DFA124_eof
        this.min = DFA124_min
        this.max = DFA124_max
        this.accept = DFA124_accept
        this.special = DFA124_special
        this.transition = DFA124_transition

        def description :String = "1117:24: ( ( architecture_statement_with_label[null] )=> architecture_statement_with_label[$label.label] | architecture_statement_optional_label[$label.label] )"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA124_18:Int = input.LA(1)

                         
                        val index124_18:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_18==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_18==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_18==SEMICOLON) ) {s = 15}

                        else if ( (LA124_18==DOT) ) {s = 12}

                        else if ( (LA124_18==LEQ||LA124_18==LPAREN||LA124_18==LBRACKET||LA124_18==APOSTROPHE) ) {s = 16}

                         
                        input_.seek(index124_18)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA124_21:Int = input.LA(1)

                         
                        val index124_21:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_21==LEQ||LA124_21==LPAREN||LA124_21==LBRACKET||LA124_21==APOSTROPHE) ) {s = 16}

                        else if ( (LA124_21==SEMICOLON) ) {s = 15}

                        else if ( (LA124_21==DOT) ) {s = 12}

                        else if ( (LA124_21==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_21==PORT) && (synpred12_VHDL())) {s = 14}

                         
                        input_.seek(index124_21)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA124_0:Int = input.LA(1)

                         
                        val index124_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_0==COMPONENT) && (synpred12_VHDL())) {s = 1}

                        else if ( (LA124_0==BASIC_IDENTIFIER) ) {s = 2}

                        else if ( (LA124_0==EXTENDED_IDENTIFIER) ) {s = 3}

                        else if ( (LA124_0==STRING_LITERAL) ) {s = 4}

                        else if ( (LA124_0==ENTITY) && (synpred12_VHDL())) {s = 5}

                        else if ( (LA124_0==CONFIGURATION) && (synpred12_VHDL())) {s = 6}

                        else if ( (LA124_0==BLOCK) && (synpred12_VHDL())) {s = 7}

                        else if ( (LA124_0==FOR) && (synpred12_VHDL())) {s = 8}

                        else if ( (LA124_0==IF) && (synpred12_VHDL())) {s = 9}

                        else if ( (LA124_0==ASSERT||LA124_0==POSTPONED||LA124_0==PROCESS||LA124_0==WITH||LA124_0==LPAREN) ) {s = 10}

                        else if ( (LA124_0==BREAK) && ((ams))) {s = 11}

                         
                        input_.seek(index124_0)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA124_2:Int = input.LA(1)

                         
                        val index124_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_2==DOT) ) {s = 12}

                        else if ( (LA124_2==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_2==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_2==SEMICOLON) ) {s = 15}

                        else if ( (LA124_2==LEQ||LA124_2==LPAREN||LA124_2==LBRACKET||LA124_2==APOSTROPHE) ) {s = 16}

                         
                        input_.seek(index124_2)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA124_20:Int = input.LA(1)

                         
                        val index124_20:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_20==LEQ||LA124_20==LPAREN||LA124_20==LBRACKET||LA124_20==APOSTROPHE) ) {s = 16}

                        else if ( (LA124_20==DOT) ) {s = 12}

                        else if ( (LA124_20==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_20==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_20==SEMICOLON) ) {s = 15}

                         
                        input_.seek(index124_20)
                        if ( s>=0 ) return s
                    case 5 => 
                        val LA124_3:Int = input.LA(1)

                         
                        val index124_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_3==DOT) ) {s = 12}

                        else if ( (LA124_3==LEQ||LA124_3==LPAREN||LA124_3==LBRACKET||LA124_3==APOSTROPHE) ) {s = 16}

                        else if ( (LA124_3==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_3==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_3==SEMICOLON) ) {s = 15}

                         
                        input_.seek(index124_3)
                        if ( s>=0 ) return s
                    case 6 => 
                        val LA124_17:Int = input.LA(1)

                         
                        val index124_17:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_17==LEQ||LA124_17==LPAREN||LA124_17==LBRACKET||LA124_17==APOSTROPHE) ) {s = 16}

                        else if ( (LA124_17==DOT) ) {s = 12}

                        else if ( (LA124_17==SEMICOLON) ) {s = 15}

                        else if ( (LA124_17==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_17==PORT) && (synpred12_VHDL())) {s = 14}

                         
                        input_.seek(index124_17)
                        if ( s>=0 ) return s
                    case 7 => 
                        val LA124_15:Int = input.LA(1)

                         
                        val index124_15:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred12_VHDL()) ) {s = 14}

                        else if ( (true) ) {s = 16}

                         
                        input_.seek(index124_15)
                        if ( s>=0 ) return s
                    case 8 => 
                        val LA124_4:Int = input.LA(1)

                         
                        val index124_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_4==DOT) ) {s = 12}

                        else if ( (LA124_4==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_4==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_4==SEMICOLON) ) {s = 15}

                        else if ( (LA124_4==LEQ||LA124_4==LPAREN||LA124_4==LBRACKET||LA124_4==APOSTROPHE) ) {s = 16}

                         
                        input_.seek(index124_4)
                        if ( s>=0 ) return s
                    case 9 => 
                        val LA124_19:Int = input.LA(1)

                         
                        val index124_19:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA124_19==LEQ||LA124_19==LPAREN||LA124_19==LBRACKET||LA124_19==APOSTROPHE) ) {s = 16}

                        else if ( (LA124_19==DOT) ) {s = 12}

                        else if ( (LA124_19==GENERIC) && (synpred12_VHDL())) {s = 13}

                        else if ( (LA124_19==PORT) && (synpred12_VHDL())) {s = 14}

                        else if ( (LA124_19==SEMICOLON) ) {s = 15}

                         
                        input_.seek(index124_19)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 124, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA139(rec:BaseRecognizer) extends DFA {
        private val DFA139_eotS:String = "\30\uffff"
        private val DFA139_eofS:String = "\30\uffff"
        private val DFA139_minS:String = "\1\7\11\uffff\1\u0094\3\uffff"+
        "\1\u0094\1\uffff\2\70\2\52\4\uffff"
        private val DFA139_maxS:String = "\1\156\11\uffff\1\u0095\3\uffff"+
        "\1\u0095\1\uffff\4\u0081\4\uffff"
        private val DFA139_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1"+
        "\5\1\6\1\7\1\10\1\11\1\uffff\1\14\1\15\1\16\1\uffff\1\21\4\uffff"+
        "\1\13\1\12\1\17\1\20"
        private val DFA139_specialS:String = "\1\0\27\uffff}>"
        private val DFA139_transitionS:Array[String] = Array("\1\10\5\uffff"+
    "\1\12\6\uffff\1\11\1\uffff\1\4\1\14\6\uffff\1\7\1\13\1\1\2\uffff\1\16"+
    "\2\uffff\1\1\32\uffff\1\1\2\uffff\1\1\13\uffff\1\6\1\5\4\uffff\1\3\3"+
    "\uffff\1\2\3\uffff\1\15\1\6\6\uffff\3\17\4\uffff\2\17",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\20\1\21",
    "",
    "",
    "",
    "\1\22\1\23",
    "",
    "\1\24\110\uffff\1\25",
    "\1\24\110\uffff\1\25",
    "\1\26\126\uffff\1\27",
    "\1\26\126\uffff\1\27",
    "",
    "",
    "",
    "")

        private val DFA139_eot:Array[Short] = DFA.unpackEncodedString(DFA139_eotS)
        private val DFA139_eof:Array[Short] = DFA.unpackEncodedString(DFA139_eofS)
        private val DFA139_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS)
        private val DFA139_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS)
        private val DFA139_accept:Array[Short] = DFA.unpackEncodedString(DFA139_acceptS)
        private val DFA139_special:Array[Short] = DFA.unpackEncodedString(DFA139_specialS)
        private val DFA139_transition:Array[Array[Short]] = new Array[Array[Short]](DFA139_transitionS.length)
        for (i <- DFA139_transition.indices) {
            DFA139_transition(i) = DFA.unpackEncodedString(DFA139_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 139
        this.eot = DFA139_eot
        this.eof = DFA139_eof
        this.min = DFA139_min
        this.max = DFA139_max
        this.accept = DFA139_accept
        this.special = DFA139_special
        this.transition = DFA139_transition

        def description :String = "1171:1: block_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | signal_declaration | variable_declaration | file_declaration | alias_declaration | component_declaration | attribute_declaration | attribute_specification | configuration_specification | disconnection_specification | use_clause | group_template_declaration | group_declaration | {...}? => ( ams_step_limit_specification | ams_nature_declaration | ams_subnature_declaration | ams_quantity_declaration | ams_terminal_declaration ) );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA139_0:Int = input.LA(1)

                         
                        val index139_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA139_0==FUNCTION||LA139_0==IMPURE||LA139_0==PROCEDURE||LA139_0==PURE) ) {s = 1}

                        else if ( (LA139_0==TYPE) ) {s = 2}

                        else if ( (LA139_0==SUBTYPE) ) {s = 3}

                        else if ( (LA139_0==CONSTANT) ) {s = 4}

                        else if ( (LA139_0==SIGNAL) ) {s = 5}

                        else if ( (LA139_0==SHARED||LA139_0==VARIABLE) ) {s = 6}

                        else if ( (LA139_0==FILE) ) {s = 7}

                        else if ( (LA139_0==ALIAS) ) {s = 8}

                        else if ( (LA139_0==COMPONENT) ) {s = 9}

                        else if ( (LA139_0==ATTRIBUTE) ) {s = 10}

                        else if ( (LA139_0==FOR) ) {s = 11}

                        else if ( (LA139_0==DISCONNECT) ) {s = 12}

                        else if ( (LA139_0==USE) ) {s = 13}

                        else if ( (LA139_0==GROUP) ) {s = 14}

                        else if ( ((LA139_0>=NATURE && LA139_0<=QUANTITY)||(LA139_0>=SUBNATURE && LA139_0<=LIMIT)) && ((ams))) {s = 15}

                         
                        input_.seek(index139_0)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 139, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA145(rec:BaseRecognizer) extends DFA {
        private val DFA145_eotS:String = "\23\uffff"
        private val DFA145_eofS:String = "\23\uffff"
        private val DFA145_minS:String = "\1\7\7\uffff\1\u0094\1\uffff\1"+
        "\u0094\2\70\2\52\4\uffff"
        private val DFA145_maxS:String = "\1\137\7\uffff\1\u0095\1\uffff"+
        "\1\u0095\4\u0081\4\uffff"
        private val DFA145_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1"+
        "\5\1\6\1\7\1\uffff\1\12\5\uffff\1\11\1\10\1\14\1\13"
        private val DFA145_specialS:String = "\23\uffff}>"
        private val DFA145_transitionS:Array[String] = Array("\1\7\5\uffff"+
    "\1\10\10\uffff\1\4\7\uffff\1\6\1\uffff\1\1\2\uffff\1\12\2\uffff\1\1"+
    "\32\uffff\1\1\2\uffff\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff"+
    "\1\11\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\13\1\14",
    "",
    "\1\15\1\16",
    "\1\17\110\uffff\1\20",
    "\1\17\110\uffff\1\20",
    "\1\22\126\uffff\1\21",
    "\1\22\126\uffff\1\21",
    "",
    "",
    "",
    "")

        private val DFA145_eot:Array[Short] = DFA.unpackEncodedString(DFA145_eotS)
        private val DFA145_eof:Array[Short] = DFA.unpackEncodedString(DFA145_eofS)
        private val DFA145_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS)
        private val DFA145_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS)
        private val DFA145_accept:Array[Short] = DFA.unpackEncodedString(DFA145_acceptS)
        private val DFA145_special:Array[Short] = DFA.unpackEncodedString(DFA145_specialS)
        private val DFA145_transition:Array[Array[Short]] = new Array[Array[Short]](DFA145_transitionS.length)
        for (i <- DFA145_transition.indices) {
            DFA145_transition(i) = DFA.unpackEncodedString(DFA145_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 145
        this.eot = DFA145_eot
        this.eof = DFA145_eof
        this.min = DFA145_min
        this.max = DFA145_max
        this.accept = DFA145_accept
        this.special = DFA145_special
        this.transition = DFA145_transition

        def description :String = "1214:1: process_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | file_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
        
    }
    final private class DFA183(rec:BaseRecognizer) extends DFA {
        private val DFA183_eotS:String = "\22\uffff"
        private val DFA183_eofS:String = "\22\uffff"
        private val DFA183_minS:String = "\1\7\6\uffff\1\u0094\1\uffff\1"+
        "\u0094\2\70\2\52\4\uffff"
        private val DFA183_maxS:String = "\1\137\6\uffff\1\u0095\1\uffff"+
        "\1\u0095\4\u0081\4\uffff"
        private val DFA183_acceptS:String = "\1\uffff\1\1\1\2\1\3\1\4\1"+
        "\5\1\6\1\uffff\1\11\5\uffff\1\10\1\7\1\12\1\13"
        private val DFA183_specialS:String = "\22\uffff}>"
        private val DFA183_transitionS:Array[String] = Array("\1\6\5\uffff"+
    "\1\7\10\uffff\1\4\11\uffff\1\1\2\uffff\1\11\2\uffff\1\1\32\uffff\1\1"+
    "\2\uffff\1\1\13\uffff\1\5\5\uffff\1\3\3\uffff\1\2\3\uffff\1\10\1\5",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\12\1\13",
    "",
    "\1\14\1\15",
    "\1\16\110\uffff\1\17",
    "\1\16\110\uffff\1\17",
    "\1\20\126\uffff\1\21",
    "\1\20\126\uffff\1\21",
    "",
    "",
    "",
    "")

        private val DFA183_eot:Array[Short] = DFA.unpackEncodedString(DFA183_eotS)
        private val DFA183_eof:Array[Short] = DFA.unpackEncodedString(DFA183_eofS)
        private val DFA183_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS)
        private val DFA183_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS)
        private val DFA183_accept:Array[Short] = DFA.unpackEncodedString(DFA183_acceptS)
        private val DFA183_special:Array[Short] = DFA.unpackEncodedString(DFA183_specialS)
        private val DFA183_transition:Array[Array[Short]] = new Array[Array[Short]](DFA183_transitionS.length)
        for (i <- DFA183_transition.indices) {
            DFA183_transition(i) = DFA.unpackEncodedString(DFA183_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 183
        this.eot = DFA183_eot
        this.eof = DFA183_eof
        this.min = DFA183_min
        this.max = DFA183_max
        this.accept = DFA183_accept
        this.special = DFA183_special
        this.transition = DFA183_transition

        def description :String = "1409:1: ams_simultaneous_procedural_declarative_item returns [DeclarativeItem node] : ( subprogram_declartion_or_body | type_declaration | subtype_declaration | constant_declaration | variable_declaration | alias_declaration | attribute_declaration | attribute_specification | use_clause | group_template_declaration | group_declaration );"
        
    }
    final private class DFA186(rec:BaseRecognizer) extends DFA {
        private val DFA186_eotS:String = "\25\uffff"
        private val DFA186_eofS:String = "\25\uffff"
        private val DFA186_minS:String = "\1\14\3\uffff\4\0\15\uffff"
        private val DFA186_maxS:String = "\1\u0095\3\uffff\4\0\15\uffff"
        private val DFA186_acceptS:String = "\1\uffff\1\1\1\2\1\3\4\uffff"+
        "\1\6\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\16\1\4\1\5\1\15"
        private val DFA186_specialS:String = "\1\0\3\uffff\1\1\1\2\1\3\1"+
        "\4\15\uffff}>"
        private val DFA186_transitionS:Array[String] = Array("\1\2\6\uffff"+
    "\1\11\11\uffff\1\16\1\uffff\1\12\5\uffff\1\10\11\uffff\1\12\4\uffff"+
    "\1\15\2\uffff\1\20\22\uffff\1\3\1\17\24\uffff\1\1\1\uffff\1\12\32\uffff"+
    "\1\7\15\uffff\1\6\2\uffff\1\21\5\uffff\1\4\1\5",
    "",
    "",
    "",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA186_eot:Array[Short] = DFA.unpackEncodedString(DFA186_eotS)
        private val DFA186_eof:Array[Short] = DFA.unpackEncodedString(DFA186_eofS)
        private val DFA186_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS)
        private val DFA186_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS)
        private val DFA186_accept:Array[Short] = DFA.unpackEncodedString(DFA186_acceptS)
        private val DFA186_special:Array[Short] = DFA.unpackEncodedString(DFA186_specialS)
        private val DFA186_transition:Array[Array[Short]] = new Array[Array[Short]](DFA186_transitionS.length)
        for (i <- DFA186_transition.indices) {
            DFA186_transition(i) = DFA.unpackEncodedString(DFA186_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 186
        this.eot = DFA186_eot
        this.eof = DFA186_eof
        this.min = DFA186_min
        this.max = DFA186_max
        this.accept = DFA186_accept
        this.special = DFA186_special
        this.transition = DFA186_transition

        def description :String = "1440:3: ( wait_statement[$label.label] | assertion_statement[$label.label] | report_statement[$label.label] | ( target LEQ )=> signal_assignment_statement[$label.label] | ( target VAR_ASSIGN )=> variable_assignment_statement[$label.label] | if_statement[$label.label] | case_statement[$label.label] | loop_statement[$label.label] | next_statement[$label.label] | exit_statement[$label.label] | return_statement[$label.label] | null_statement[$label.label] | procedure_call_statement[$label.label] | {...}? => ams_break_statement[$label.label] )"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA186_0:Int = input.LA(1)

                         
                        val index186_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA186_0==WAIT) ) {s = 1}

                        else if ( (LA186_0==ASSERT) ) {s = 2}

                        else if ( (LA186_0==REPORT) ) {s = 3}

                        else if ( (LA186_0==BASIC_IDENTIFIER) ) {s = 4}

                        else if ( (LA186_0==EXTENDED_IDENTIFIER) ) {s = 5}

                        else if ( (LA186_0==STRING_LITERAL) ) {s = 6}

                        else if ( (LA186_0==LPAREN) ) {s = 7}

                        else if ( (LA186_0==IF) ) {s = 8}

                        else if ( (LA186_0==CASE) ) {s = 9}

                        else if ( (LA186_0==FOR||LA186_0==LOOP||LA186_0==WHILE) ) {s = 10}

                        else if ( (LA186_0==NEXT) ) {s = 13}

                        else if ( (LA186_0==EXIT) ) {s = 14}

                        else if ( (LA186_0==RETURN) ) {s = 15}

                        else if ( (LA186_0==NULL) ) {s = 16}

                        else if ( (LA186_0==BREAK) && ((ams))) {s = 17}

                         
                        input_.seek(index186_0)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA186_4:Int = input.LA(1)

                         
                        val index186_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred14_VHDL()) ) {s = 18}

                        else if ( (synpred15_VHDL()) ) {s = 19}

                        else if ( (true) ) {s = 20}

                         
                        input_.seek(index186_4)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA186_5:Int = input.LA(1)

                         
                        val index186_5:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred14_VHDL()) ) {s = 18}

                        else if ( (synpred15_VHDL()) ) {s = 19}

                        else if ( (true) ) {s = 20}

                         
                        input_.seek(index186_5)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA186_6:Int = input.LA(1)

                         
                        val index186_6:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred14_VHDL()) ) {s = 18}

                        else if ( (synpred15_VHDL()) ) {s = 19}

                        else if ( (true) ) {s = 20}

                         
                        input_.seek(index186_6)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA186_7:Int = input.LA(1)

                         
                        val index186_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred14_VHDL()) ) {s = 18}

                        else if ( (synpred15_VHDL()) ) {s = 19}

                         
                        input_.seek(index186_7)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 186, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA218(rec:BaseRecognizer) extends DFA {
        private val DFA218_eotS:String = "\27\uffff"
        private val DFA218_eofS:String = "\27\uffff"
        private val DFA218_minS:String = "\1\26\1\uffff\2\173\4\uffff\1"+
        "\u0094\1\21\2\173\5\u008b\6\0"
        private val DFA218_maxS:String = "\1\u0095\1\uffff\2\u0081\4\uffff"+
        "\2\u0095\2\u0081\5\u0095\6\0"
        private val DFA218_acceptS:String = "\1\uffff\1\1\2\uffff\1\2\1"+
        "\3\1\4\1\5\17\uffff"
        private val DFA218_specialS:String = "\1\5\20\uffff\1\1\1\4\1\3"+
        "\1\6\1\0\1\2}>"
        private val DFA218_transitionS:Array[String] = Array("\1\1\7\uffff"+
    "\1\6\62\uffff\1\5\15\uffff\1\4\7\uffff\2\7\53\uffff\1\2\1\3",
    "",
    "\1\10\5\uffff\1\11",
    "\1\10\5\uffff\1\11",
    "",
    "",
    "",
    "",
    "\1\12\1\13",
    "\1\17\25\uffff\1\14\1\uffff\1\16\3\uffff\1\20\17\uffff\1\15\115\uffff"+
    "\1\23\10\uffff\1\21\1\22",
    "\1\10\5\uffff\1\11",
    "\1\10\5\uffff\1\11",
    "\1\23\10\uffff\1\21\1\22",
    "\1\26\10\uffff\1\24\1\25",
    "\1\26\10\uffff\1\24\1\25",
    "\1\26\10\uffff\1\24\1\25",
    "\1\26\10\uffff\1\24\1\25",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff")

        private val DFA218_eot:Array[Short] = DFA.unpackEncodedString(DFA218_eotS)
        private val DFA218_eof:Array[Short] = DFA.unpackEncodedString(DFA218_eofS)
        private val DFA218_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS)
        private val DFA218_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS)
        private val DFA218_accept:Array[Short] = DFA.unpackEncodedString(DFA218_acceptS)
        private val DFA218_special:Array[Short] = DFA.unpackEncodedString(DFA218_specialS)
        private val DFA218_transition:Array[Array[Short]] = new Array[Array[Short]](DFA218_transitionS.length)
        for (i <- DFA218_transition.indices) {
            DFA218_transition(i) = DFA.unpackEncodedString(DFA218_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 218
        this.eot = DFA218_eot
        this.eof = DFA218_eof
        this.min = DFA218_min
        this.max = DFA218_max
        this.accept = DFA218_accept
        this.special = DFA218_special
        this.transition = DFA218_transition

        def description :String = "1664:1: interface_element_procedure returns [InterfaceList.AbstractInterfaceElement element] : ( ( ( CONSTANT )? identifier_list COLON ( IN )? )=> interface_constant_declaration | ( ( VARIABLE )? identifier_list COLON ( OUT | INOUT )? )=> interface_variable_declaration | interface_signal_declaration_procedure | interface_file_declaration | {...}? => ( ams_interface_terminal_declaration | ams_interface_quantity_declaration ) );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA218_21:Int = input.LA(1)

                         
                        val index218_21:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_21)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA218_17:Int = input.LA(1)

                         
                        val index218_17:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred16_VHDL()) ) {s = 1}

                        else if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_17)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA218_22:Int = input.LA(1)

                         
                        val index218_22:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_22)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA218_19:Int = input.LA(1)

                         
                        val index218_19:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred16_VHDL()) ) {s = 1}

                        else if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_19)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA218_18:Int = input.LA(1)

                         
                        val index218_18:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred16_VHDL()) ) {s = 1}

                        else if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_18)
                        if ( s>=0 ) return s
                    case 5 => 
                        val LA218_0:Int = input.LA(1)

                         
                        val index218_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA218_0==CONSTANT) && (synpred16_VHDL())) {s = 1}

                        else if ( (LA218_0==BASIC_IDENTIFIER) ) {s = 2}

                        else if ( (LA218_0==EXTENDED_IDENTIFIER) ) {s = 3}

                        else if ( (LA218_0==VARIABLE) && (synpred17_VHDL())) {s = 4}

                        else if ( (LA218_0==SIGNAL) ) {s = 5}

                        else if ( (LA218_0==FILE) ) {s = 6}

                        else if ( ((LA218_0>=TERMINAL && LA218_0<=QUANTITY)) && ((ams))) {s = 7}

                         
                        input_.seek(index218_0)
                        if ( s>=0 ) return s
                    case 6 => 
                        val LA218_20:Int = input.LA(1)

                         
                        val index218_20:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred17_VHDL()) ) {s = 4}

                        else if ( (true) ) {s = 5}

                         
                        input_.seek(index218_20)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 218, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA239(rec:BaseRecognizer) extends DFA {
        private val DFA239_eotS:String = "\22\uffff"
        private val DFA239_eofS:String = "\22\uffff"
        private val DFA239_minS:String = "\1\4\3\0\16\uffff"
        private val DFA239_maxS:String = "\1\u0095\3\0\16\uffff"
        private val DFA239_acceptS:String = "\4\uffff\1\2\14\uffff\1\1"
        private val DFA239_specialS:String = "\1\uffff\1\0\1\1\1\2\16\uffff}>"
        private val DFA239_transitionS:Array[String] = Array("\1\4\56\uffff"+
    "\1\4\2\uffff\2\4\2\uffff\1\4\102\uffff\1\4\6\uffff\2\4\5\uffff\1\3\1"+
    "\uffff\1\4\2\uffff\4\4\1\1\1\2",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA239_eot:Array[Short] = DFA.unpackEncodedString(DFA239_eotS)
        private val DFA239_eof:Array[Short] = DFA.unpackEncodedString(DFA239_eofS)
        private val DFA239_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS)
        private val DFA239_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS)
        private val DFA239_accept:Array[Short] = DFA.unpackEncodedString(DFA239_acceptS)
        private val DFA239_special:Array[Short] = DFA.unpackEncodedString(DFA239_specialS)
        private val DFA239_transition:Array[Array[Short]] = new Array[Array[Short]](DFA239_transitionS.length)
        for (i <- DFA239_transition.indices) {
            DFA239_transition(i) = DFA.unpackEncodedString(DFA239_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 239
        this.eot = DFA239_eot
        this.eof = DFA239_eof
        this.min = DFA239_min
        this.max = DFA239_max
        this.accept = DFA239_accept
        this.special = DFA239_special
        this.transition = DFA239_transition

        def description :String = "1770:4: ( ( formal_part ARROW )=> formal_part ARROW )?"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA239_1:Int = input.LA(1)

                         
                        val index239_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred18_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 4}

                         
                        input_.seek(index239_1)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA239_2:Int = input.LA(1)

                         
                        val index239_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred18_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 4}

                         
                        input_.seek(index239_2)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA239_3:Int = input.LA(1)

                         
                        val index239_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred18_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 4}

                         
                        input_.seek(index239_3)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 239, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA258(rec:BaseRecognizer) extends DFA {
        private val DFA258_eotS:String = "\21\uffff"
        private val DFA258_eofS:String = "\21\uffff"
        private val DFA258_minS:String = "\1\63\3\0\6\uffff\1\0\6\uffff"
        private val DFA258_maxS:String = "\1\u0095\3\0\6\uffff\1\0\6\uffff"
        private val DFA258_acceptS:String = "\4\uffff\1\4\6\uffff\1\6\1"+
        "\1\1\2\1\3\1\5\1\7"
        private val DFA258_specialS:String = "\1\uffff\1\0\1\1\1\2\6\uffff"+
        "\1\3\6\uffff}>"
        private val DFA258_transitionS:Array[String] = Array("\1\13\3\uffff"+
    "\1\4\105\uffff\1\12\15\uffff\1\3\1\uffff\1\4\2\uffff\4\4\1\1\1\2",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA258_eot:Array[Short] = DFA.unpackEncodedString(DFA258_eotS)
        private val DFA258_eof:Array[Short] = DFA.unpackEncodedString(DFA258_eofS)
        private val DFA258_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS)
        private val DFA258_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS)
        private val DFA258_accept:Array[Short] = DFA.unpackEncodedString(DFA258_acceptS)
        private val DFA258_special:Array[Short] = DFA.unpackEncodedString(DFA258_specialS)
        private val DFA258_transition:Array[Array[Short]] = new Array[Array[Short]](DFA258_transitionS.length)
        for (i <- DFA258_transition.indices) {
            DFA258_transition(i) = DFA.unpackEncodedString(DFA258_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 258
        this.eot = DFA258_eot
        this.eof = DFA258_eof
        this.min = DFA258_min
        this.max = DFA258_max
        this.accept = DFA258_accept
        this.special = DFA258_special
        this.transition = DFA258_transition

        def description :String = "1907:1: primary returns [Expression obj] : ( ( selected_name APOSTROPHE LPAREN )=> selected_name qualified_expression[$selected_name.name_] | ( name )=> name | ( selected_name LPAREN association_list RPAREN )=> function_call | literal | ( LPAREN expression RPAREN )=> LPAREN expression RPAREN | allocator | aggregate );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA258_1:Int = input.LA(1)

                         
                        val index258_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred19_VHDL()) ) {s = 12}

                        else if ( (synpred20_VHDL()) ) {s = 13}

                        else if ( (synpred21_VHDL()) ) {s = 14}

                         
                        input_.seek(index258_1)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA258_2:Int = input.LA(1)

                         
                        val index258_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred19_VHDL()) ) {s = 12}

                        else if ( (synpred20_VHDL()) ) {s = 13}

                        else if ( (synpred21_VHDL()) ) {s = 14}

                         
                        input_.seek(index258_2)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA258_3:Int = input.LA(1)

                         
                        val index258_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred19_VHDL()) ) {s = 12}

                        else if ( (synpred20_VHDL()) ) {s = 13}

                        else if ( (synpred21_VHDL()) ) {s = 14}

                        else if ( (true) ) {s = 4}

                         
                        input_.seek(index258_3)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA258_10:Int = input.LA(1)

                         
                        val index258_10:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred22_VHDL()) ) {s = 15}

                        else if ( (true) ) {s = 16}

                         
                        input_.seek(index258_10)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 258, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA265(rec:BaseRecognizer) extends DFA {
        private val DFA265_eotS:String = "\42\uffff"
        private val DFA265_eofS:String = "\1\1\41\uffff"
        private val DFA265_minS:String = "\1\6\1\uffff\1\113\1\uffff\3\113"+
        "\1\u008b\1\172\1\10\1\u008b\3\u0080\10\113\2\10\5\u0080\5\113"
        private val DFA265_maxS:String = "\1\u008f\1\uffff\1\u0095\1\uffff"+
        "\3\u008a\1\u0095\1\u008f\2\u0095\13\u008a\2\u0095\12\u008a"
        private val DFA265_acceptS:String = "\1\uffff\1\2\1\uffff\1\1\36"+
        "\uffff"
        private val DFA265_specialS:String = "\42\uffff}>"
        private val DFA265_transitionS:Array[String] = Array("\1\1\2\uffff"+
    "\1\1\10\uffff\1\1\5\uffff\2\1\5\uffff\1\1\1\uffff\1\1\6\uffff\1\1\1"+
    "\uffff\1\1\4\uffff\1\1\1\uffff\2\1\2\uffff\1\1\3\uffff\3\1\13\uffff"+
    "\1\1\1\uffff\2\1\1\uffff\4\1\2\uffff\4\1\1\uffff\2\1\3\uffff\3\1\2\uffff"+
    "\1\1\2\uffff\2\1\3\uffff\4\1\4\uffff\7\1\2\uffff\3\1\1\3\1\1\1\2\2\uffff"+
    "\10\1\1\3\1\uffff\1\1\2\uffff\1\3",
    "",
    "\1\7\64\uffff\1\10\12\uffff\1\6\10\uffff\1\4\1\5",
    "",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\15\10\uffff\1\13\1\14",
    "\1\1\24\uffff\1\3",
    "\1\22\u0082\uffff\1\21\1\uffff\1\20\6\uffff\1\16\1\17",
    "\1\25\10\uffff\1\23\1\24",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\11",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\34\u0082\uffff\1\33\1\uffff\1\32\6\uffff\1\30\1\31",
    "\1\41\u0082\uffff\1\40\1\uffff\1\37\6\uffff\1\35\1\36",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\10\11\uffff\1\26",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27",
    "\1\7\57\uffff\1\12\4\uffff\1\10\11\uffff\1\27")

        private val DFA265_eot:Array[Short] = DFA.unpackEncodedString(DFA265_eotS)
        private val DFA265_eof:Array[Short] = DFA.unpackEncodedString(DFA265_eofS)
        private val DFA265_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA265_minS)
        private val DFA265_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA265_maxS)
        private val DFA265_accept:Array[Short] = DFA.unpackEncodedString(DFA265_acceptS)
        private val DFA265_special:Array[Short] = DFA.unpackEncodedString(DFA265_specialS)
        private val DFA265_transition:Array[Array[Short]] = new Array[Array[Short]](DFA265_transitionS.length)
        for (i <- DFA265_transition.indices) {
            DFA265_transition(i) = DFA.unpackEncodedString(DFA265_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 265
        this.eot = DFA265_eot
        this.eof = DFA265_eof
        this.min = DFA265_min
        this.max = DFA265_max
        this.accept = DFA265_accept
        this.special = DFA265_special
        this.transition = DFA265_transition

        def description :String = "()* loopback of 1966:16: ( name_part )*"
        
    }
    final private class DFA272(rec:BaseRecognizer) extends DFA {
        private val DFA272_eotS:String = "\102\uffff"
        private val DFA272_eofS:String = "\1\2\101\uffff"
        private val DFA272_minS:String = "\1\6\1\0\100\uffff"
        private val DFA272_maxS:String = "\1\u008f\1\0\100\uffff"
        private val DFA272_acceptS:String = "\2\uffff\1\2\76\uffff\1\1"
        private val DFA272_specialS:String = "\1\uffff\1\0\100\uffff}>"
        private val DFA272_transitionS:Array[String] = Array("\1\2\2\uffff"+
    "\1\2\10\uffff\1\2\5\uffff\2\2\5\uffff\1\2\1\uffff\1\2\6\uffff\1\2\1"+
    "\uffff\1\2\4\uffff\1\2\1\uffff\2\2\2\uffff\1\2\3\uffff\3\2\13\uffff"+
    "\1\2\1\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff\2\2\3\uffff\3\2\2\uffff"+
    "\1\2\2\uffff\2\2\3\uffff\4\2\4\uffff\7\2\2\uffff\3\2\1\1\2\2\2\uffff"+
    "\11\2\1\uffff\1\2\2\uffff\1\2",
    "\1\uffff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "")

        private val DFA272_eot:Array[Short] = DFA.unpackEncodedString(DFA272_eotS)
        private val DFA272_eof:Array[Short] = DFA.unpackEncodedString(DFA272_eofS)
        private val DFA272_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS)
        private val DFA272_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS)
        private val DFA272_accept:Array[Short] = DFA.unpackEncodedString(DFA272_acceptS)
        private val DFA272_special:Array[Short] = DFA.unpackEncodedString(DFA272_specialS)
        private val DFA272_transition:Array[Array[Short]] = new Array[Array[Short]](DFA272_transitionS.length)
        for (i <- DFA272_transition.indices) {
            DFA272_transition(i) = DFA.unpackEncodedString(DFA272_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 272
        this.eot = DFA272_eot
        this.eof = DFA272_eof
        this.min = DFA272_min
        this.max = DFA272_max
        this.accept = DFA272_accept
        this.special = DFA272_special
        this.transition = DFA272_transition

        def description :String = "2006:2: ( ( LPAREN expression RPAREN )=> LPAREN expression RPAREN )?"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA272_1:Int = input.LA(1)

                         
                        val index272_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred24_VHDL()) ) {s = 65}

                        else if ( (true) ) {s = 2}

                         
                        input_.seek(index272_1)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 272, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA278(rec:BaseRecognizer) extends DFA {
        private val DFA278_eotS:String = "\22\uffff"
        private val DFA278_eofS:String = "\22\uffff"
        private val DFA278_minS:String = "\1\4\17\0\2\uffff"
        private val DFA278_maxS:String = "\1\u0095\17\0\2\uffff"
        private val DFA278_acceptS:String = "\20\uffff\1\1\1\2"
        private val DFA278_specialS:String = "\1\0\1\1\1\2\1\3\1\4\1\5\1"+
        "\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\uffff}>"
        private val DFA278_transitionS:Array[String] = Array("\1\16\56\uffff"+
    "\1\15\2\uffff\1\17\1\13\4\uffff\1\20\100\uffff\1\14\6\uffff\1\4\1\5"+
    "\5\uffff\1\3\1\uffff\1\11\2\uffff\1\6\1\7\1\10\1\12\1\1\1\2",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "")

        private val DFA278_eot:Array[Short] = DFA.unpackEncodedString(DFA278_eotS)
        private val DFA278_eof:Array[Short] = DFA.unpackEncodedString(DFA278_eofS)
        private val DFA278_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA278_minS)
        private val DFA278_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA278_maxS)
        private val DFA278_accept:Array[Short] = DFA.unpackEncodedString(DFA278_acceptS)
        private val DFA278_special:Array[Short] = DFA.unpackEncodedString(DFA278_specialS)
        private val DFA278_transition:Array[Array[Short]] = new Array[Array[Short]](DFA278_transitionS.length)
        for (i <- DFA278_transition.indices) {
            DFA278_transition(i) = DFA.unpackEncodedString(DFA278_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 278
        this.eot = DFA278_eot
        this.eof = DFA278_eof
        this.min = DFA278_min
        this.max = DFA278_max
        this.accept = DFA278_accept
        this.special = DFA278_special
        this.transition = DFA278_transition

        def description :String = "2069:6: ( ( choices ARROW )=> choices ARROW )?"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA278_0:Int = input.LA(1)

                         
                        val index278_0:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (LA278_0==BASIC_IDENTIFIER) ) {s = 1}

                        else if ( (LA278_0==EXTENDED_IDENTIFIER) ) {s = 2}

                        else if ( (LA278_0==STRING_LITERAL) ) {s = 3}

                        else if ( (LA278_0==PLUS) ) {s = 4}

                        else if ( (LA278_0==MINUS) ) {s = 5}

                        else if ( (LA278_0==REAL_LITERAL) ) {s = 6}

                        else if ( (LA278_0==INTEGER_LITERAL) ) {s = 7}

                        else if ( (LA278_0==BASED_LITERAL) ) {s = 8}

                        else if ( (LA278_0==CHARACTER_LITERAL) ) {s = 9}

                        else if ( (LA278_0==BIT_STRING_LITERAL) ) {s = 10}

                        else if ( (LA278_0==NULL) ) {s = 11}

                        else if ( (LA278_0==LPAREN) ) {s = 12}

                        else if ( (LA278_0==NEW) ) {s = 13}

                        else if ( (LA278_0==ABS) ) {s = 14}

                        else if ( (LA278_0==NOT) ) {s = 15}

                        else if ( (LA278_0==OTHERS) && (synpred25_VHDL())) {s = 16}

                         
                        input_.seek(index278_0)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA278_1:Int = input.LA(1)

                         
                        val index278_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_1)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA278_2:Int = input.LA(1)

                         
                        val index278_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_2)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA278_3:Int = input.LA(1)

                         
                        val index278_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_3)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA278_4:Int = input.LA(1)

                         
                        val index278_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_4)
                        if ( s>=0 ) return s
                    case 5 => 
                        val LA278_5:Int = input.LA(1)

                         
                        val index278_5:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_5)
                        if ( s>=0 ) return s
                    case 6 => 
                        val LA278_6:Int = input.LA(1)

                         
                        val index278_6:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_6)
                        if ( s>=0 ) return s
                    case 7 => 
                        val LA278_7:Int = input.LA(1)

                         
                        val index278_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_7)
                        if ( s>=0 ) return s
                    case 8 => 
                        val LA278_8:Int = input.LA(1)

                         
                        val index278_8:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_8)
                        if ( s>=0 ) return s
                    case 9 => 
                        val LA278_9:Int = input.LA(1)

                         
                        val index278_9:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_9)
                        if ( s>=0 ) return s
                    case 10 => 
                        val LA278_10:Int = input.LA(1)

                         
                        val index278_10:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_10)
                        if ( s>=0 ) return s
                    case 11 => 
                        val LA278_11:Int = input.LA(1)

                         
                        val index278_11:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_11)
                        if ( s>=0 ) return s
                    case 12 => 
                        val LA278_12:Int = input.LA(1)

                         
                        val index278_12:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_12)
                        if ( s>=0 ) return s
                    case 13 => 
                        val LA278_13:Int = input.LA(1)

                         
                        val index278_13:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_13)
                        if ( s>=0 ) return s
                    case 14 => 
                        val LA278_14:Int = input.LA(1)

                         
                        val index278_14:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_14)
                        if ( s>=0 ) return s
                    case 15 => 
                        val LA278_15:Int = input.LA(1)

                         
                        val index278_15:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred25_VHDL()) ) {s = 16}

                        else if ( (true) ) {s = 17}

                         
                        input_.seek(index278_15)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 278, __s, input)
            error(nvae)
            throw nvae
        }
    }
    final private class DFA280(rec:BaseRecognizer) extends DFA {
        private val DFA280_eotS:String = "\23\uffff"
        private val DFA280_eofS:String = "\23\uffff"
        private val DFA280_minS:String = "\1\4\17\0\3\uffff"
        private val DFA280_maxS:String = "\1\u0095\17\0\3\uffff"
        private val DFA280_acceptS:String = "\20\uffff\1\3\1\1\1\2"
        private val DFA280_specialS:String = "\1\uffff\1\0\1\1\1\2\1\3\1"+
        "\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3\uffff}>"
        private val DFA280_transitionS:Array[String] = Array("\1\16\56\uffff"+
    "\1\15\2\uffff\1\17\1\13\4\uffff\1\20\100\uffff\1\14\6\uffff\1\4\1\5"+
    "\5\uffff\1\3\1\uffff\1\11\2\uffff\1\6\1\7\1\10\1\12\1\1\1\2",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "\1\uffff",
    "",
    "",
    "")

        private val DFA280_eot:Array[Short] = DFA.unpackEncodedString(DFA280_eotS)
        private val DFA280_eof:Array[Short] = DFA.unpackEncodedString(DFA280_eofS)
        private val DFA280_min:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA280_minS)
        private val DFA280_max:Array[Char] = DFA.unpackEncodedStringToUnsignedChars(DFA280_maxS)
        private val DFA280_accept:Array[Short] = DFA.unpackEncodedString(DFA280_acceptS)
        private val DFA280_special:Array[Short] = DFA.unpackEncodedString(DFA280_specialS)
        private val DFA280_transition:Array[Array[Short]] = new Array[Array[Short]](DFA280_transitionS.length)
        for (i <- DFA280_transition.indices) {
            DFA280_transition(i) = DFA.unpackEncodedString(DFA280_transitionS(i))
        }

        this.recognizer=rec;
        this.decisionNumber = 280
        this.eot = DFA280_eot
        this.eof = DFA280_eof
        this.min = DFA280_min
        this.max = DFA280_max
        this.accept = DFA280_accept
        this.special = DFA280_special
        this.transition = DFA280_transition

        def description :String = "2082:1: choice returns [Choices.Choice choice_] : ( ( simple_expression direction )=>d= discrete_range | expr= simple_expression | OTHERS );"
        
        @throws(classOf[NoViableAltException])
        override def specialStateTransition(__s:Int,_input:IntStream):Int = {
            var s = __s
            val input_ = _input.asInstanceOf[TokenStream]
            val _s:Int = __s
            s match {
                    case 0 => 
                        val LA280_1:Int = input.LA(1)

                         
                        val index280_1:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_1)
                        if ( s>=0 ) return s
                    case 1 => 
                        val LA280_2:Int = input.LA(1)

                         
                        val index280_2:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_2)
                        if ( s>=0 ) return s
                    case 2 => 
                        val LA280_3:Int = input.LA(1)

                         
                        val index280_3:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_3)
                        if ( s>=0 ) return s
                    case 3 => 
                        val LA280_4:Int = input.LA(1)

                         
                        val index280_4:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_4)
                        if ( s>=0 ) return s
                    case 4 => 
                        val LA280_5:Int = input.LA(1)

                         
                        val index280_5:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_5)
                        if ( s>=0 ) return s
                    case 5 => 
                        val LA280_6:Int = input.LA(1)

                         
                        val index280_6:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_6)
                        if ( s>=0 ) return s
                    case 6 => 
                        val LA280_7:Int = input.LA(1)

                         
                        val index280_7:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_7)
                        if ( s>=0 ) return s
                    case 7 => 
                        val LA280_8:Int = input.LA(1)

                         
                        val index280_8:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_8)
                        if ( s>=0 ) return s
                    case 8 => 
                        val LA280_9:Int = input.LA(1)

                         
                        val index280_9:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_9)
                        if ( s>=0 ) return s
                    case 9 => 
                        val LA280_10:Int = input.LA(1)

                         
                        val index280_10:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_10)
                        if ( s>=0 ) return s
                    case 10 => 
                        val LA280_11:Int = input.LA(1)

                         
                        val index280_11:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_11)
                        if ( s>=0 ) return s
                    case 11 => 
                        val LA280_12:Int = input.LA(1)

                         
                        val index280_12:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_12)
                        if ( s>=0 ) return s
                    case 12 => 
                        val LA280_13:Int = input.LA(1)

                         
                        val index280_13:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_13)
                        if ( s>=0 ) return s
                    case 13 => 
                        val LA280_14:Int = input.LA(1)

                         
                        val index280_14:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_14)
                        if ( s>=0 ) return s
                    case 14 => 
                        val LA280_15:Int = input.LA(1)

                         
                        val index280_15:Int = input_.index()
                        input_.rewind()
                        s = -1
                        if ( (synpred26_VHDL()) ) {s = 17}

                        else if ( (true) ) {s = 18}

                         
                        input_.seek(index280_15)
                        if ( s>=0 ) return s
            }

            if (state.backtracking>0) {state.failed=true; return -1}
            val nvae = new NoViableAltException(description, 280, __s, input)
            error(nvae)
            throw nvae
        }
    }
 
    private val dfa17 = new DFA17(this)
    private val dfa25 = new DFA25(this)
    private val dfa36 = new DFA36(this)
    private val dfa40 = new DFA40(this)
    private val dfa50 = new DFA50(this)
    private val dfa52 = new DFA52(this)
    private val dfa83 = new DFA83(this)
    private val dfa101 = new DFA101(this)
    private val dfa105 = new DFA105(this)
    private val dfa115 = new DFA115(this)
    private val dfa120 = new DFA120(this)
    private val dfa124 = new DFA124(this)
    private val dfa139 = new DFA139(this)
    private val dfa145 = new DFA145(this)
    private val dfa183 = new DFA183(this)
    private val dfa186 = new DFA186(this)
    private val dfa218 = new DFA218(this)
    private val dfa239 = new DFA239(this)
    private val dfa258 = new DFA258(this)
    private val dfa265 = new DFA265(this)
    private val dfa272 = new DFA272(this)
    private val dfa278 = new DFA278(this)
    private val dfa280 = new DFA280(this)
}